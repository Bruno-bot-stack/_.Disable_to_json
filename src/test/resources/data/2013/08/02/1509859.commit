Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServerConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServerConnection.java	(revision 1509858)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServerConnection.java	(revision 1509859)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import java.io.IOException;
@@ -32,7 +33,7 @@
 import org.apache.http.impl.nio.DefaultNHttpServerConnection;
 import org.apache.http.nio.NHttpMessageParser;
 import org.apache.http.nio.NHttpMessageWriter;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOSession;
 import org.apache.http.nio.reactor.SessionInputBuffer;
 import org.apache.http.nio.reactor.SessionOutputBuffer;
@@ -92,7 +93,7 @@
     }
 
     @Override
-    public void consumeInput(final NHttpServiceHandler handler) {
+    public void consumeInput(final NHttpServerEventHandler handler) {
         if (this.log.isDebugEnabled()) {
             this.log.debug(this.id + ": Consume input");
         }
@@ -100,7 +101,7 @@
     }
 
     @Override
-    public void produceOutput(final NHttpServiceHandler handler) {
+    public void produceOutput(final NHttpServerEventHandler handler) {
         if (this.log.isDebugEnabled()) {
             this.log.debug(this.id + ": Produce output");
         }
@@ -146,8 +147,8 @@
             if (message != null && headerlog.isDebugEnabled()) {
                 headerlog.debug(id + " << " + message.getStatusLine().toString());
                 Header[] headers = message.getAllHeaders();
-                for (int i = 0; i < headers.length; i++) {
-                    headerlog.debug(id + " << " + headers[i].toString());
+                for (Header header : headers) {
+                    headerlog.debug(id + " << " + header.toString());
                 }
             }
 
@@ -182,8 +183,8 @@
             if (message != null && headerlog.isDebugEnabled()) {
                 headerlog.debug(id + " >> " + message.getRequestLine().toString());
                 Header[] headers = message.getAllHeaders();
-                for (int i = 0; i < headers.length; i++) {
-                    headerlog.debug(id + " >> " + headers[i].toString());
+                for (Header header : headers) {
+                    headerlog.debug(id + " >> " + header.toString());
                 }
             }
             if (message != null && accesslog.isInfoEnabled()) {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/AccessLogger.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/AccessLogger.java	(revision 1509858)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/AccessLogger.java	(revision 1509859)
@@ -16,10 +16,10 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 import java.io.BufferedWriter;
 import java.io.File;
@@ -35,13 +35,12 @@
  */
 public class AccessLogger {
 
-    public final static String ACCESS_LOG_ID = "org.apache.synapse.transport.nhttp.access";
-    private static Log log = LogFactory.getLog(ACCESS_LOG_ID);
+    private Log log;
 
     public AccessLogger(final Log log) {
         super();
         this.initOpen();
-        AccessLogger.log = log;
+        this.log = log;
         buffered = true;
         checkExists = false;
     }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientConnection.java	(revision 1509858)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientConnection.java	(revision 1509859)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import java.io.IOException;
@@ -30,7 +31,7 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpResponseFactory;
 import org.apache.http.impl.nio.DefaultNHttpClientConnection;
-import org.apache.http.nio.NHttpClientHandler;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.NHttpMessageParser;
 import org.apache.http.nio.NHttpMessageWriter;
 import org.apache.http.nio.reactor.IOSession;
@@ -92,7 +93,7 @@
     }
 
     @Override
-    public void consumeInput(final NHttpClientHandler handler) {
+    public void consumeInput(final NHttpClientEventHandler handler) {
         if (this.log.isDebugEnabled()) {
             this.log.debug(this.id + ": Consume input");
         }
@@ -100,7 +101,7 @@
     }
 
     @Override
-    public void produceOutput(final NHttpClientHandler handler) {
+    public void produceOutput(final NHttpClientEventHandler handler) {
         if (this.log.isDebugEnabled()) {
             this.log.debug(this.id + ": Produce output");
         }
@@ -146,8 +147,8 @@
             if (message != null && headerlog.isDebugEnabled()) {
                 headerlog.debug(id + " >> " + message.getRequestLine().toString());
                 Header[] headers = message.getAllHeaders();
-                for (int i = 0; i < headers.length; i++) {
-                    headerlog.debug(id + " >> " + headers[i].toString());
+                for (Header header : headers) {
+                    headerlog.debug(id + " >> " + header.toString());
                 }
             }
             if (message != null && accesslog.isInfoEnabled()) {
@@ -180,8 +181,8 @@
             if (message != null && headerlog.isDebugEnabled()) {
                 headerlog.debug(id + " << " + message.getStatusLine().toString());
                 Header[] headers = message.getAllHeaders();
-                for (int i = 0; i < headers.length; i++) {
-                    headerlog.debug(id + " << " + headers[i].toString());
+                for (Header header : headers) {
+                    headerlog.debug(id + " << " + header.toString());
                 }
             }
             if (message != null && accesslog.isInfoEnabled()) {
-*-*-*-
Message: Replacing a deprecated api call in the old nhttp transport
-*-*-*-
When: 2013-08-02 17:06:16 -0400 
-*-*-*-
Who: hiranya