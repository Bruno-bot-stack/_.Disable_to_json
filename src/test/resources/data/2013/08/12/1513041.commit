Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java	(revision 1513040)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java	(revision 1513041)
@@ -183,6 +183,7 @@
             log.info("Shutting down Axis2 server...");
             try {
                 listenerManager.stop();
+                listenerManager.destroy();
                 configContext.terminate();
             } catch (Exception e) {
                 log.warn("Error while shutting down Axis2 server", e);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java	(revision 1513040)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java	(revision 1513041)
@@ -26,86 +26,40 @@
 
 public class Sample53 extends SynapseTestCase {
 
-    private SampleClientResult result;
-    private String addUrl;
-
     public Sample53() {
         super(53);
     }
 
-
     public void testFailOver() {
         String expectedError = "COULDN'T SEND THE MESSAGE TO THE SERVER";
-        addUrl = "http://localhost:8280/services/LBService1";
+        String addUrl = "http://localhost:8280/services/LBService1";
         log.info("Running test: Failover sending among 3 endpoints");
         final StockQuoteSampleClient client = getStockQuoteClient();
 
         // Send some messages and check
-        Thread t = new Thread(new Runnable() {
-            public void run() {
-                result = client.sessionlessClient(addUrl, null, 10);
-            }
-        });
-        t.start();
-        try {
-            t.join();
-        } catch (InterruptedException e) {
-
-        }
+        SampleClientResult result = client.sessionlessClient(addUrl, null, 10);
         assertResponseReceived(result);
 
         // Stop BE server 1
         getBackendServerControllers().get(0).stopProcess();
-        try {
-            Thread.sleep(2000);
-        } catch (InterruptedException e) {
+        sleep(2000);
 
-        }
-
         // Send another burst of messages and check
-        t = new Thread(new Runnable() {
-            public void run() {
-                result = client.sessionlessClient(addUrl, null, 10);
-            }
-        });
-        t.start();
-        try {
-            t.join();
-        } catch (InterruptedException e) {
-
-        }
+        result = client.sessionlessClient(addUrl, null, 10);
         assertResponseReceived(result);
 
         // Stop BE server 2
         getBackendServerControllers().get(1).stopProcess();
-        try {
-            Thread.sleep(2000);
-        } catch (InterruptedException e) {
+        sleep(2000);
 
-        }
-
         // Send some more messages and check
-        t = new Thread(new Runnable() {
-            public void run() {
-                result = client.sessionlessClient(addUrl, null, 10);
-            }
-        });
-        t.start();
-        try {
-            t.join();
-        } catch (InterruptedException e) {
-
-        }
+        result = client.sessionlessClient(addUrl, null, 10);
         assertResponseReceived(result);
 
         // Stop BE server 3
         getBackendServerControllers().get(2).stopProcess();
-        try {
-            Thread.sleep(2000);
-        } catch (InterruptedException e) {
+        sleep(2000);
 
-        }
-
         // Send another message - Should fail
         result = client.sessionlessClient(addUrl, null, 1);
         Exception resultEx = result.getException();
@@ -115,4 +69,11 @@
         assertTrue("Did not receive expected error", resultEx.getMessage().contains(expectedError));
     }
 
+    private void sleep(long millis) {
+        try {
+            Thread.sleep(millis);
+        } catch (InterruptedException ignored) {
+        }
+    }
+
 }
-*-*-*-
Message: Removing unnecessary threading from the sample53 test
-*-*-*-
When: 2013-08-12 01:28:55 -0400 
-*-*-*-
Who: hiranya