{
  "changes": [
    {
      "chunks": [
        {
          "lines": [
            "                         <th>Default</th>\n",
            "                     </tr>\n",
            "                     <tr>\n",
            "-                        <td>http.socket.timeout</td>\n",
            "+                        <td>http.socket.timeout <a name=\"http.socket.timeout\"/></td>\n",
            "                         <td>\n",
            "                             Sets the TCP socket timeout in milliseconds\n",
            "                             (See <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/net/SocketOptions.html#SO_TIMEOUT\">SO_TIMEOUT</a>).\n",
            "+                            This applies to sockets opened by both transport listener and sender.\n",
            "                             <div class=\"xmlConf\">http.socket.timeout=20000</div>\n",
            "                         </td>\n",
            "                         <td>No</td>\n"
          ],
          "locn": "-749,10 +749,11"
        },
        {
          "lines": [
            "                         <td>60000</td>\n",
            "                     </tr>\n",
            "                     <tr>\n",
            "+                        <td>http.socket.timeout.listener</td>\n",
            "+                        <td>\n",
            "+                            Sets the timeout in milliseconds for all the TCP sockets opened by the\n",
            "+                            transport listener. This overrides the value of\n",
            "+                            <a href=\"#http.socket.timeout\">http.socket.timeout</a> for the transport\n",
            "+                            listener.\n",
            "+                            <div class=\"xmlConf\">http.socket.timeout.listener=20000</div>\n",
            "+                        </td>\n",
            "+                        <td>No</td>\n",
            "+                        <td>Value of <a href=\"#http.socket.timeout\">http.socket.timeout</a></td>\n",
            "+                    </tr>\n",
            "+                    <tr>\n",
            "+                        <td>http.socket.timeout.sender</td>\n",
            "+                        <td>\n",
            "+                            Sets the timeout in milliseconds for all the TCP sockets opened by the\n",
            "+                            transport sender. This overrides the value of\n",
            "+                            <a href=\"#http.socket.timeout\">http.socket.timeout</a> for the transport\n",
            "+                            sender.\n",
            "+                            <div class=\"xmlConf\">http.socket.timeout.sender=20000</div>\n",
            "+                        </td>\n",
            "+                        <td>No</td>\n",
            "+                        <td>Value of <a href=\"#http.socket.timeout\">http.socket.timeout</a></td>\n",
            "+                    </tr>\n",
            "+                    <tr>\n",
            "                         <td>http.connection.timeout</td>\n",
            "                         <td>\n",
            "                             Sets the TCP connection timeout in milliseconds. This determines the timeout\n"
          ],
          "locn": "-759,6 +760,30"
        }
      ],
      "from": "java/modules/documentation/src/site/xdoc/userguide/transports/pass_through.xml",
      "to": "java/modules/documentation/src/site/xdoc/userguide/transports/pass_through.xml"
    },
    {
      "chunks": [
        {
          "lines": [
            "                         <th>Default</th>\n",
            "                     </tr>\n",
            "                     <tr>\n",
            "-                        <td>http.socket.timeout</td>\n",
            "+                        <td>http.socket.timeout <a name=\"http.socket.timeout\"/></td>\n",
            "                         <td>\n",
            "                             Sets the TCP socket timeout in milliseconds\n",
            "                             (See <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/net/SocketOptions.html#SO_TIMEOUT\">SO_TIMEOUT</a>).\n",
            "+                            This applies to sockets opened by both transport listener and sender.\n",
            "                             <div class=\"xmlConf\">http.socket.timeout=20000</div>\n",
            "                         </td>\n",
            "                         <td>No</td>\n"
          ],
          "locn": "-762,10 +762,11"
        },
        {
          "lines": [
            "                         <td>60000</td>\n",
            "                     </tr>\n",
            "                     <tr>\n",
            "+                        <td>http.socket.timeout.listener</td>\n",
            "+                        <td>\n",
            "+                            Sets the timeout in milliseconds for all the TCP sockets opened by the\n",
            "+                            transport listener. This overrides the value of\n",
            "+                            <a href=\"#http.socket.timeout\">http.socket.timeout</a> for the transport\n",
            "+                            listener.\n",
            "+                            <div class=\"xmlConf\">http.socket.timeout.listener=20000</div>\n",
            "+                        </td>\n",
            "+                        <td>No</td>\n",
            "+                        <td>Value of <a href=\"#http.socket.timeout\">http.socket.timeout</a></td>\n",
            "+                    </tr>\n",
            "+                    <tr>\n",
            "+                        <td>http.socket.timeout.sender</td>\n",
            "+                        <td>\n",
            "+                            Sets the timeout in milliseconds for all the TCP sockets opened by the\n",
            "+                            transport sender. This overrides the value of\n",
            "+                            <a href=\"#http.socket.timeout\">http.socket.timeout</a> for the transport\n",
            "+                            sender.\n",
            "+                            <div class=\"xmlConf\">http.socket.timeout.sender=20000</div>\n",
            "+                        </td>\n",
            "+                        <td>No</td>\n",
            "+                        <td>Value of <a href=\"#http.socket.timeout\">http.socket.timeout</a></td>\n",
            "+                    </tr>\n",
            "+                    <tr>\n",
            "                         <td>http.connection.timeout</td>\n",
            "                         <td>\n",
            "                             Sets the TCP connection timeout in milliseconds. This determines the timeout\n"
          ],
          "locn": "-772,6 +773,30"
        }
      ],
      "from": "java/modules/documentation/src/site/xdoc/userguide/transports/nhttp.xml",
      "to": "java/modules/documentation/src/site/xdoc/userguide/transports/nhttp.xml"
    },
    {
      "chunks": [
        {
          "lines": [
            "+# Used in HttpTransportConfigurationTest\n",
            "+\n",
            "+http.socket.timeout=60000\n",
            "+http.socket.timeout.listener=30000\n",
            "+http.socket.timeout.sender=20000\n",
            "+http.connection.timeout=0\n",
            "+http.socket.buffer-size=8192\n",
            "+http.tcp.nodelay=true\n",
            "+http.nio.interest-ops-queueing=false\n"
          ],
          "locn": "-0,0 +1,9"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/test/resources/test-http.properties",
      "to": "java/modules/transports/core/nhttp/src/test/resources/test-http.properties"
    },
    {
      "chunks": [
        {
          "lines": [
            "         assertEquals(\"barValue\", config.getStringProperty(\"bar\", \"barValue\"));\n",
            "         assertEquals(true, (boolean) config.getBooleanProperty(\"baz\", true));\n",
            " \n",
            "-        IOReactorConfig reactorConfig = config.getReactorConfig();\n",
            "+        IOReactorConfig reactorConfig = config.getListeningReactorConfig();\n",
            "         assertEquals(2, reactorConfig.getIoThreadCount());\n",
            "         assertEquals(0, reactorConfig.getConnectTimeout());\n",
            "         assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n"
          ],
          "locn": "-33,7 +33,7"
        },
        {
          "lines": [
            "         assertEquals(true, reactorConfig.isTcpNoDelay());\n",
            "         assertEquals(false, reactorConfig.isInterestOpQueued());\n",
            " \n",
            "+        reactorConfig = config.getConnectingReactorConfig();\n",
            "+        assertEquals(2, reactorConfig.getIoThreadCount());\n",
            "+        assertEquals(0, reactorConfig.getConnectTimeout());\n",
            "+        assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n",
            "+        assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n",
            "+        assertEquals(60000, reactorConfig.getSoTimeout());\n",
            "+        assertEquals(true, reactorConfig.isTcpNoDelay());\n",
            "+        assertEquals(false, reactorConfig.isInterestOpQueued());\n",
            "+\n",
            "         ConnectionConfig connConfig = config.getConnectionConfig();\n",
            "         assertEquals(1024 * 8, connConfig.getBufferSize());\n",
            "         assertEquals(CodingErrorAction.REPORT, connConfig.getMalformedInputAction());\n"
          ],
          "locn": "-42,6 +42,15"
        },
        {
          "lines": [
            "         assertEquals(\"Testing\", config.getStringProperty(\"test.bar\", \"NotTesting\"));\n",
            "         assertEquals(true, (boolean) config.getBooleanProperty(\"test.baz\", false));\n",
            " \n",
            "-        IOReactorConfig reactorConfig = config.getReactorConfig();\n",
            "+        IOReactorConfig reactorConfig = config.getListeningReactorConfig();\n",
            "         assertEquals(true, reactorConfig.isSoReuseAddress());\n",
            "         assertEquals(2, reactorConfig.getIoThreadCount());\n",
            "         assertEquals(0, reactorConfig.getConnectTimeout());\n"
          ],
          "locn": "-54,7 +63,7"
        },
        {
          "lines": [
            "         assertEquals(CodingErrorAction.REPORT, connConfig.getUnmappableInputAction());\n",
            "     }\n",
            " \n",
            "+    public void testTimeoutConfig() {\n",
            "+        HttpTransportConfiguration config = new SimpleHttpTransportConfiguration(\"test-http\");\n",
            "+\n",
            "+        IOReactorConfig reactorConfig = config.getListeningReactorConfig();\n",
            "+        assertEquals(30000, reactorConfig.getSoTimeout());\n",
            "+        assertEquals(2, reactorConfig.getIoThreadCount());\n",
            "+        assertEquals(0, reactorConfig.getConnectTimeout());\n",
            "+        assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n",
            "+        assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n",
            "+        assertEquals(true, reactorConfig.isTcpNoDelay());\n",
            "+        assertEquals(false, reactorConfig.isInterestOpQueued());\n",
            "+\n",
            "+        reactorConfig = config.getConnectingReactorConfig();\n",
            "+        assertEquals(20000, reactorConfig.getSoTimeout());\n",
            "+        assertEquals(2, reactorConfig.getIoThreadCount());\n",
            "+        assertEquals(0, reactorConfig.getConnectTimeout());\n",
            "+        assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n",
            "+        assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n",
            "+        assertEquals(true, reactorConfig.isTcpNoDelay());\n",
            "+        assertEquals(false, reactorConfig.isInterestOpQueued());\n",
            "+    }\n",
            "+\n",
            "     class SimpleHttpTransportConfiguration extends HttpTransportConfiguration {\n",
            "         public SimpleHttpTransportConfiguration(String fileName) {\n",
            "             super(fileName);\n"
          ],
          "locn": "-70,6 +79,28"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/utils/config/HttpTransportConfigurationTest.java",
      "to": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/utils/config/HttpTransportConfigurationTest.java"
    },
    {
      "chunks": [
        {
          "lines": [
            "         try {\n",
            "             String prefix = namePrefix + \"-PT-Listener I/O Dispatcher\";\n",
            "             ioReactor = new DefaultListeningIOReactor(\n",
            "-                            sourceConfiguration.getReactorConfig(),\n",
            "+                            sourceConfiguration.getReactorConfig(true),\n",
            "                             new NativeThreadFactory(new ThreadGroup(prefix + \" Thread Group\"), prefix));\n",
            "             \n",
            "             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {\n"
          ],
          "locn": "-143,7 +143,7"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java"
    },
    {
      "chunks": [
        {
          "lines": [
            " \n",
            "     abstract protected HttpProcessor initHttpProcessor();\n",
            " \n",
            "-    public IOReactorConfig getReactorConfig() {\n",
            "-        return conf.getReactorConfig();\n",
            "+    public IOReactorConfig getReactorConfig(boolean listener) {\n",
            "+        if (listener) {\n",
            "+            return conf.getListeningReactorConfig();\n",
            "+        } else {\n",
            "+            return conf.getConnectingReactorConfig();\n",
            "+        }\n",
            "     }\n",
            " \n",
            "     public ConnectionConfig getConnectionConfig() {\n"
          ],
          "locn": "-78,8 +78,12"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java"
    },
    {
      "chunks": [
        {
          "lines": [
            "             String prefix = namePrefix + \"-PT-Sender I/O Dispatcher\";\n",
            " \n",
            "             ioReactor = new DefaultConnectingIOReactor(\n",
            "-                            targetConfiguration.getReactorConfig(),\n",
            "+                            targetConfiguration.getReactorConfig(false),\n",
            "                             new NativeThreadFactory(new ThreadGroup(prefix + \" Thread Group\"), prefix));\n",
            " \n",
            "             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {\n"
          ],
          "locn": "-174,7 +174,7"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java"
    },
    {
      "chunks": [
        {
          "lines": [
            " \n",
            "     public IOReactorConfig getReactorConfig() {\n",
            "         NHttpConfiguration cfg = NHttpConfiguration.getInstance();\n",
            "-        return cfg.getReactorConfig();\n",
            "+        return cfg.getListeningReactorConfig();\n",
            "     }\n",
            " \n",
            "     public ConfigurationContext getCfgCtx() {\n"
          ],
          "locn": "-243,7 +243,7"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java"
    },
    {
      "chunks": [
        {
          "lines": [
            " \n",
            "     private IOReactorConfig getReactorConfig() {\n",
            "         NHttpConfiguration cfg = NHttpConfiguration.getInstance();\n",
            "-        return cfg.getReactorConfig();\n",
            "+        return cfg.getConnectingReactorConfig();\n",
            "     }\n",
            " \n",
            "     /**\n"
          ],
          "locn": "-255,7 +255,7"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java"
    },
    {
      "chunks": [
        {
          "lines": [
            "     abstract protected int getThreadsPerReactor();\n",
            " \n",
            "     /**\n",
            "-     * Get the IOReactor configuration\n",
            "+     * Get the listening I/O reactor configuration\n",
            "      *\n",
            "      * @return A fully initialized IOReactorConfig instance\n",
            "      */\n",
            "-    public IOReactorConfig getReactorConfig() {\n",
            "+    public IOReactorConfig getListeningReactorConfig() {\n",
            "         IOReactorConfig.Builder builder = IOReactorConfig.custom()\n",
            "                 .setIoThreadCount(getThreadsPerReactor())\n",
            "-                .setSoTimeout(getIntProperty(HttpConfigConstants.SO_TIMEOUT, 60000))\n",
            "+                .setSoTimeout(getIntProperty(HttpConfigConstants.LISTENER_SO_TIMEOUT,\n",
            "+                        getIntProperty(HttpConfigConstants.SO_TIMEOUT, 60000)))\n",
            "                 .setConnectTimeout(getIntProperty(HttpConfigConstants.CONNECTION_TIMEOUT, 0))\n",
            "                 .setInterestOpQueued(getBooleanProperty(HttpConfigConstants.INTEREST_OPS_QUEUEING, false))\n",
            "                 .setTcpNoDelay(getBooleanProperty(HttpConfigConstants.TCP_NODELAY, true))\n"
          ],
          "locn": "-58,14 +58,15"
        },
        {
          "lines": [
            "     }\n",
            " \n",
            "     /**\n",
            "+     * Get the connecting I/O reactor configuration\n",
            "+     *\n",
            "+     * @return A fully initialized IOReactorConfig instance\n",
            "+     */\n",
            "+    public IOReactorConfig getConnectingReactorConfig() {\n",
            "+        IOReactorConfig.Builder builder = IOReactorConfig.custom()\n",
            "+                .setIoThreadCount(getThreadsPerReactor())\n",
            "+                .setSoTimeout(getIntProperty(HttpConfigConstants.SENDER_SO_TIMEOUT,\n",
            "+                        getIntProperty(HttpConfigConstants.SO_TIMEOUT, 60000)))\n",
            "+                .setConnectTimeout(getIntProperty(HttpConfigConstants.CONNECTION_TIMEOUT, 0))\n",
            "+                .setInterestOpQueued(getBooleanProperty(HttpConfigConstants.INTEREST_OPS_QUEUEING, false))\n",
            "+                .setTcpNoDelay(getBooleanProperty(HttpConfigConstants.TCP_NODELAY, true))\n",
            "+                .setRcvBufSize(getIntProperty(HttpConfigConstants.SOCKET_RCV_BUFFER_SIZE, 8 * 1024))\n",
            "+                .setSndBufSize(getIntProperty(HttpConfigConstants.SOCKET_SND_BUFFER_SIZE, 8 * 1024));\n",
            "+\n",
            "+        if (getIntProperty(HttpConfigConstants.SO_LINGER) != null) {\n",
            "+            builder.setSoLinger(getIntProperty(HttpConfigConstants.SO_LINGER));\n",
            "+        }\n",
            "+\n",
            "+        if (getBooleanProperty(HttpConfigConstants.SO_REUSEADDR) != null) {\n",
            "+            builder.setSoReuseAddress(getBooleanProperty(HttpConfigConstants.SO_REUSEADDR));\n",
            "+        }\n",
            "+\n",
            "+        if (getIntProperty(HttpConfigConstants.SELECT_INTERVAL) != null) {\n",
            "+            builder.setSelectInterval(getIntProperty(HttpConfigConstants.SELECT_INTERVAL));\n",
            "+        }\n",
            "+        return builder.build();\n",
            "+    }\n",
            "+\n",
            "+    /**\n",
            "      * Get the connection configuration\n",
            "      *\n",
            "      * @return A fully initialized ConnectionConfig instance\n"
          ],
          "locn": "-87,6 +88,36"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpTransportConfiguration.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpTransportConfiguration.java"
    },
    {
      "chunks": [
        {
          "lines": [
            "     public static final String SO_LINGER = \"http.socket.linger\";\n",
            "     public static final String SO_REUSEADDR = \"http.socket.reuseaddr\";\n",
            "     public static final String SO_TIMEOUT = \"http.socket.timeout\";\n",
            "+    public static final String LISTENER_SO_TIMEOUT = \"http.socket.timeout.listener\";\n",
            "+    public static final String SENDER_SO_TIMEOUT = \"http.socket.timeout.sender\";\n",
            "     public static final String SELECT_INTERVAL = \"http.nio.select-interval\";\n",
            " \n",
            "     public static final String HTTP_MALFORMED_INPUT_ACTION = \"http.malformed.input.action\";\n"
          ],
          "locn": "-30,6 +30,8"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpConfigConstants.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpConfigConstants.java"
    }
  ],
  "id": "1515054",
  "message": "Fixing SYNAPSE-824 for nhttp and pt transports",
  "when": "2013-08-17T21:07:29-04:00",
  "who": "hiranya"
}
