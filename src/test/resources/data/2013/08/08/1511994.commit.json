{
  "changes": [
    {
      "chunks": [
        {
          "lines": [
            " \n",
            " import org.apache.commons.logging.Log;\n",
            " import org.apache.commons.logging.LogFactory;\n",
            "+import org.apache.http.params.HttpProtocolParams;\n",
            " import org.apache.synapse.commons.util.MiscellaneousUtil;\n",
            " \n",
            "+import java.nio.charset.CodingErrorAction;\n",
            " import java.util.ArrayList;\n",
            " import java.util.List;\n",
            " import java.util.Properties;\n"
          ],
          "locn": "-21,8 +21,10"
        },
        {
          "lines": [
            "         return methods.contains(method);\n",
            "     }\n",
            " \n",
            "+    public CodingErrorAction getMalformedInputActionValue() {\n",
            "+        String val = getStringValue(HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION, \"report\");\n",
            "+        return getCodingErrorAction(val);\n",
            "+    }\n",
            "+\n",
            "+    public CodingErrorAction getUnMappableInputActionValue() {\n",
            "+        String val = getStringValue(HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION, \"report\");\n",
            "+        return getCodingErrorAction(val);\n",
            "+    }\n",
            "+\n",
            "+    private CodingErrorAction getCodingErrorAction(String action) {\n",
            "+        if (\"report\".equals(action)) {\n",
            "+            return CodingErrorAction.REPORT;\n",
            "+        } else if (\"ignore\".equals(action)) {\n",
            "+            return CodingErrorAction.IGNORE;\n",
            "+        } else if (\"replace\".equals(action)) {\n",
            "+            return CodingErrorAction.REPLACE;\n",
            "+        } else {\n",
            "+            return CodingErrorAction.REPORT;\n",
            "+        }\n",
            "+    }\n",
            " }\n"
          ],
          "locn": "-216,4 +218,25"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NHttpConfiguration.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NHttpConfiguration.java"
    },
    {
      "chunks": [
        {
          "lines": [
            "                 cfg.getProperty(HttpConnectionParams.STALE_CONNECTION_CHECK, 0) == 1)\n",
            "             .setBooleanParameter(HttpConnectionParams.TCP_NODELAY,\n",
            "                 cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1)\n",
            "-            .setParameter(HttpProtocolParams.ORIGIN_SERVER, \"Synapse-HttpComponents-NIO\");\n",
            "+            .setParameter(HttpProtocolParams.ORIGIN_SERVER, \"Synapse-HttpComponents-NIO\")\n",
            "+            .setParameter(\n",
            "+                    HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION,\n",
            "+                    cfg.getMalformedInputActionValue())\n",
            "+            .setParameter(\n",
            "+                    HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION,\n",
            "+                    cfg.getUnMappableInputActionValue());\n",
            " \n",
            "         if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {\n",
            "             params.setBooleanParameter(NIOReactorPNames.INTEREST_OPS_QUEUEING, true);\n"
          ],
          "locn": "-259,7 +259,13"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java"
    },
    {
      "chunks": [
        {
          "lines": [
            "                 cfg.getProperty(HttpConnectionParams.STALE_CONNECTION_CHECK, 0) == 1)\n",
            "             .setBooleanParameter(HttpConnectionParams.TCP_NODELAY,\n",
            "                 cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1)\n",
            "-            .setParameter(HttpProtocolParams.USER_AGENT, \"Synapse-HttpComponents-NIO\");\n",
            "+            .setParameter(HttpProtocolParams.USER_AGENT, \"Synapse-HttpComponents-NIO\")\n",
            "+            .setParameter(\n",
            "+                    HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION,\n",
            "+                    cfg.getMalformedInputActionValue())\n",
            "+            .setParameter(\n",
            "+                    HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION,\n",
            "+                    cfg.getUnMappableInputActionValue());\n",
            " \n",
            "         if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {\n",
            "             params.setBooleanParameter(NIOReactorPNames.INTEREST_OPS_QUEUEING, true);\n"
          ],
          "locn": "-267,7 +267,13"
        }
      ],
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java",
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java"
    }
  ],
  "id": "1511994",
  "message": "fixed SYNAPSE-806.",
  "when": "2013-08-08T15:48:48-04:00",
  "who": "rajikak"
}
