Index: java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportListener.java
===================================================================
--- java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportListener.java	(revision 1509494)
+++ java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportListener.java	(revision 1509495)
@@ -41,7 +41,7 @@
 
     private ExecutorService connectionFactoryES;
 
-    private AMQPTransportReconnectHandler haHandler;
+    private AMQPTransportReconnectHandler haHandlerTask;
 
     @Override
     protected void doInit() throws AxisFault {
@@ -71,7 +71,7 @@
         int maxReconnectionDuration = AMQPTransportUtils.getIntProperty(
                 AMQPTransportConstant.PARAM_MAX_RE_CONNECTION_DURATION, 1000 * 60 * 10);
 
-        haHandler = new AMQPTransportReconnectHandler(
+        haHandlerTask = new AMQPTransportReconnectHandler(
                 connectionFactoryES,
                 maxReconnectionDuration,
                 reconnectionProgressionFactor,
@@ -78,7 +78,7 @@
                 initialReconnectDuration,
                 connectionFactoryManager);
 
-        new Thread(haHandler, "AMQP-HA-handler-task").start();
+        new Thread(haHandlerTask, "AMQP-HA-handler-task").start();
 
         log.info("AMQP transport listener initializing..");
     }
@@ -137,4 +137,8 @@
         return connectionFactoryManager.getConnectionFactory(
                 AMQPTransportConstant.DEFAULT_CONNECTION_FACTORY_NAME);
     }
+
+    public AMQPTransportReconnectHandler getHaHandler(){
+        return haHandlerTask;
+    }
 }
Index: java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/connectionfactory/AMQPTransportConnectionFactoryManager.java
===================================================================
--- java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/connectionfactory/AMQPTransportConnectionFactoryManager.java	(revision 1509494)
+++ java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/connectionfactory/AMQPTransportConnectionFactoryManager.java	(revision 1509495)
@@ -98,8 +98,10 @@
             } catch (IOException e) {
                 throw new AMQPTransportException("Could not remove the connection '" + name + "'", e);
             }
+        } else {
+            throw new AMQPTransportException("No connection factory found with the name '"
+                    + name + "'");
         }
-        throw new AMQPTransportException("No connection factory found with the name '" + name + "'");
     }
 
     /**
Index: java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java
===================================================================
--- java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java	(revision 1509494)
+++ java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java	(revision 1509495)
@@ -29,6 +29,9 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.synapse.transport.amqp.*;
+import org.apache.synapse.transport.amqp.ha.AMQPTransportHABrokerEntry;
+import org.apache.synapse.transport.amqp.ha.AMQPTransportHAEntry;
+import org.apache.synapse.transport.amqp.ha.AMQPTransportReconnectHandler;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -35,10 +38,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Map;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
+import java.util.UUID;
+import java.util.concurrent.*;
 
 /**
  * The polling task deploy for each services exposed on AMQP transport. This task
@@ -207,6 +208,8 @@
 
     private ScheduledFuture<?> pollingTaskFuture;
 
+    private AMQPTransportReconnectHandler haHandler;
+
     public void setUseTx(boolean useTx) {
         isUseTx = useTx;
     }
@@ -383,6 +386,10 @@
         this.responseConnectionFactory = responseConnectionFactory;
     }
 
+    public void setHaHandler(AMQPTransportReconnectHandler haHandler) {
+        this.haHandler = haHandler;
+    }
+
     /**
      * Start the polling task for this service
      */
@@ -507,6 +514,26 @@
             } catch (ShutdownSignalException e) {
                 log.error("Polling task for service '" + serviceName + "' received a " +
                         "shutdown signal", e);
+                Semaphore available = new Semaphore(0, true);
+                String key = UUID.randomUUID().toString();
+                haHandler.getBlockedTasks().add(new AMQPTransportHAEntry(
+                        available, key, connectionFactoryName));
+                try {
+                    available.acquire();
+                } catch (InterruptedException ie) {
+                    log.error("The blocking semaphore received an interrupted", e);
+                    Thread.currentThread().interrupt();
+                    return;
+                }
+
+                AMQPTransportHABrokerEntry brokerEntry = haHandler.getConnectionMap().get(key);
+                if (brokerEntry == null) {
+                    log.error("No new connection factory were found for key '" + key + "'");
+                } else {
+                    setChannel(brokerEntry.getChannel());
+                    this.queueingConsumer = new QueueingConsumer(channel);
+                }
+
             } catch (ConsumerCancelledException e) {
                 log.error("Polling task for service '" + serviceName + "' received a " +
                         "cancellation signal");
Index: java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTaskFactory.java
===================================================================
--- java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTaskFactory.java	(revision 1509494)
+++ java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTaskFactory.java	(revision 1509495)
@@ -19,6 +19,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.synapse.transport.amqp.*;
 import org.apache.synapse.transport.amqp.connectionfactory.AMQPTransportConnectionFactory;
+import org.apache.synapse.transport.amqp.ha.AMQPTransportReconnectHandler;
 
 import java.util.Map;
 import java.util.concurrent.ScheduledExecutorService;
@@ -36,7 +37,8 @@
             AxisService service,
             ScheduledExecutorService pool,
             AMQPTransportEndpoint endpoint,
-            AMQPTransportConnectionFactory connectionFactory) throws AxisFault {
+            AMQPTransportConnectionFactory connectionFactory,
+            AMQPTransportReconnectHandler haHandler) throws AxisFault {
 
         Map<String, String> svcParam =
                 AMQPTransportUtils.getServiceStringParameters(service.getParameters());
@@ -48,6 +50,7 @@
         pt.setServiceName(service.getName());
         pt.setEndpoint(endpoint);
         pt.setPollingTaskScheduler(pool);
+        pt.setHaHandler(haHandler);
 
         // set buffers to hold request/response messages for this task
         pt.setBuffers(new AMQPTransportBuffers());
@@ -89,7 +92,6 @@
             pt.setInternalExchange(isInternalExchange);
         }
 
-
         pt.setChannel(connectionFactory.getChannel());
         pt.setConnectionFactoryName(connectionFactory.getName());
 
Index: java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportReconnectHandler.java
===================================================================
--- java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportReconnectHandler.java	(revision 1509494)
+++ java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportReconnectHandler.java	(revision 1509495)
@@ -97,7 +97,7 @@
                                     " The retry duration is set to initial reconnection duration " +
                                     "value(" + initialReconnectDuration + "s)");
                         }
-                        log.error("The reconnection attempt number '" + count++ + "' failed. Next " +
+                        log.info("The reconnection attempt number '" + count++ + "' failed. Next " +
                                 "re-try will be after '" + (retryDuration / 1000) + "' seconds");
                         try {
                             Thread.sleep(retryDuration);
@@ -117,6 +117,7 @@
                     connectionFactoryManager.removeConnectionFactory(name);
                     connectionFactoryManager.addConnectionFactory(
                             name, new AMQPTransportConnectionFactory(param, es));
+                    log.info("A new connection factory was created for -> '" + name + "'");
                 }
 
                 String conFacName = entry.getConnectionFactoryName();
@@ -127,7 +128,6 @@
                         new AMQPTransportHABrokerEntry(cf.getChannel(), cf.getConnection()));
                 entry.getLock().release();
 
-
                 while (blockedTasks.isEmpty()) {
                     entry = blockedTasks.take();
                     conFacName = entry.getConnectionFactoryName();
@@ -136,6 +136,8 @@
                     connectionMap.put(
                             entry.getKey(),
                             new AMQPTransportHABrokerEntry(cf.getChannel(), cf.getConnection()));
+                    log.info("The task with key '" + entry.getKey() + "' was combined with a new " +
+                            "connection factory");
                     entry.getLock().release();
                 }
             }
@@ -142,7 +144,15 @@
         } catch (InterruptedException e) {
             Thread.currentThread().interrupt();
         } catch (AMQPTransportException e) {
-            log.error("High Availability handler just died!. It's time to re-start", e);
+            log.error("High Availability handler just died!. It's time to reboot the system.", e);
         }
     }
+
+    public BlockingQueue<AMQPTransportHAEntry> getBlockedTasks() {
+        return blockedTasks;
+    }
+
+    public ConcurrentMap<String, AMQPTransportHABrokerEntry> getConnectionMap() {
+        return connectionMap;
+    }
 }
\ No newline at end of file
Index: java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportEndpoint.java
===================================================================
--- java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportEndpoint.java	(revision 1509494)
+++ java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportEndpoint.java	(revision 1509495)
@@ -24,7 +24,6 @@
 
 import java.util.HashSet;
 import java.util.Set;
-import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ScheduledExecutorService;
 
 /**
@@ -77,7 +76,8 @@
                     service,
                     workerPool,
                     this,
-                    conFac);
+                    conFac,
+                    transportReceiver.getHaHandler());
 
         } catch (AMQPTransportException e) {
             throw new AxisFault("Could not load the AMQP endpoint configuration, " + e.getMessage(), e);
-*-*-*-
Message: added ha implementations.
-*-*-*-
When: 2013-08-01 20:27:32 -0400 
-*-*-*-
Who: rajikak