Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetIOEventDispatch.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetIOEventDispatch.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetIOEventDispatch.java	(revision 1506662)
@@ -19,10 +19,13 @@
 
 package org.apache.synapse.transport.passthru;
 
-import org.apache.http.impl.nio.DefaultClientIOEventDispatch;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.nio.NHttpClientIOTarget;
+import org.apache.http.HttpResponseFactory;
+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.impl.nio.DefaultNHttpClientConnectionFactory;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
 import org.apache.synapse.transport.passthru.logging.LoggingUtils;
 
@@ -29,19 +32,30 @@
 /**
  * This is a factory for creating the logging sessions or non-logging sessions.
  */
-public class TargetIOEventDispatch extends DefaultClientIOEventDispatch {
+public class TargetIOEventDispatch extends DefaultHttpClientIODispatch {
 
-    public TargetIOEventDispatch(final NHttpClientHandler handler, final HttpParams params) {
-        super(LoggingUtils.decorate(handler), params);
+    public TargetIOEventDispatch(final NHttpClientEventHandler handler, final HttpParams params) {
+        super(LoggingUtils.decorate(handler), new TargetConnectionFactory(params));
     }
 
-    @Override
-    protected NHttpClientIOTarget createConnection(IOSession session) {
-        session = LoggingUtils.decorate(session, "client");
-        return LoggingUtils.createClientConnection(
-                session,
-                createHttpResponseFactory(),
-                this.allocator,
-                this.params);
+    private static class TargetConnectionFactory extends DefaultNHttpClientConnectionFactory {
+
+        public TargetConnectionFactory(HttpParams params) {
+            super(params);
+        }
+
+        @Override
+        protected DefaultNHttpClientConnection createConnection(IOSession session,
+                                                                HttpResponseFactory responseFactory,
+                                                                ByteBufferAllocator allocator,
+                                                                HttpParams params) {
+            session = LoggingUtils.decorate(session, "client");
+            return LoggingUtils.createClientConnection(
+                    session,
+                    responseFactory,
+                    allocator,
+                    params);
+        }
     }
+
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceIOEventDispatch.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceIOEventDispatch.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceIOEventDispatch.java	(revision 1506662)
@@ -19,10 +19,14 @@
 
 package org.apache.synapse.transport.passthru;
 
-import org.apache.http.impl.nio.DefaultServerIOEventDispatch;
-import org.apache.http.nio.NHttpServiceHandler;
-import org.apache.http.nio.NHttpServerIOTarget;
+import org.apache.http.HttpRequestFactory;
+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;
+
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.impl.nio.DefaultNHttpServerConnectionFactory;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
 import org.apache.synapse.transport.passthru.logging.LoggingUtils;
 
@@ -29,19 +33,30 @@
 /**
  * This is a factory for creating the logging sessions or non-logging sessions.
  */
-public class SourceIOEventDispatch extends DefaultServerIOEventDispatch {
+public class SourceIOEventDispatch extends DefaultHttpServerIODispatch {
 
-    public SourceIOEventDispatch(final NHttpServiceHandler handler, final HttpParams params) {
-        super(LoggingUtils.decorate(handler), params);
+    public SourceIOEventDispatch(final NHttpServerEventHandler handler, final HttpParams params) {
+        super(LoggingUtils.decorate(handler), new SourceConnectionFactory(params));
     }
 
-    @Override
-    protected NHttpServerIOTarget createConnection(IOSession session) {
-        session = LoggingUtils.decorate(session, "server");
-        return LoggingUtils.createServerConnection(
-                session,
-                createHttpRequestFactory(),
-                this.allocator,
-                this.params);
+    private static class SourceConnectionFactory extends DefaultNHttpServerConnectionFactory {
+
+        public SourceConnectionFactory(HttpParams params) {
+            super(params);
+        }
+
+        @Override
+        protected DefaultNHttpServerConnection createConnection(IOSession session,
+                                                                HttpRequestFactory requestFactory,
+                                                                ByteBufferAllocator allocator,
+                                                                HttpParams params) {
+            session = LoggingUtils.decorate(session, "server");
+            return LoggingUtils.createServerConnection(
+                    session,
+                    requestFactory,
+                    allocator,
+                    params);
+        }
     }
+
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingUtils.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingUtils.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingUtils.java	(revision 1506662)
@@ -16,13 +16,11 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.passthru.logging;
 
+import org.apache.http.nio.*;
 import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.nio.NHttpServiceHandler;
-import org.apache.http.nio.NHttpClientIOTarget;
-import org.apache.http.nio.NHttpServerIOTarget;
 import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.HttpResponseFactory;
 import org.apache.http.HttpRequestFactory;
@@ -32,21 +30,21 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+public class LoggingUtils {
 
-public class LoggingUtils {
     public final static String HEADER_LOG_ID = "org.wso2.carbon.transport.passthru.headers";
     public final static String WIRE_LOG_ID = "org.wso2.carbon.transport.passthru.wire";
 
     public static IOSession decorate(IOSession session, final String id) {
         Log log = LogFactory.getLog(session.getClass());
-        Log wirelog = LogFactory.getLog(WIRE_LOG_ID);
-        if (wirelog.isDebugEnabled() || log.isDebugEnabled()) {
-            session = new LoggingIOSession(wirelog, session, id);
+        Log wireLog = LogFactory.getLog(WIRE_LOG_ID);
+        if (wireLog.isDebugEnabled() || log.isDebugEnabled()) {
+            session = new LoggingIOSession(wireLog, session, id);
         }
         return session;
     }
 
-    public static NHttpClientHandler decorate(NHttpClientHandler handler) {
+    public static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {
         Log log = LogFactory.getLog(handler.getClass());
         if (log.isDebugEnabled()) {
             handler = new LoggingTargetHandler(handler);
@@ -54,7 +52,7 @@
         return handler;
     }
 
-    public static NHttpServiceHandler decorate(NHttpServiceHandler handler) {
+    public static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {
         Log log = LogFactory.getLog(handler.getClass());
         if (log.isDebugEnabled()) {
             handler = new LoggingSourceHandler(handler);
@@ -62,17 +60,17 @@
         return handler;
     }
 
-    public static NHttpClientIOTarget createClientConnection(
+    public static DefaultNHttpClientConnection createClientConnection(
             final IOSession iosession,
             final HttpResponseFactory responseFactory,
             final ByteBufferAllocator allocator,
             final HttpParams params) {
         Log log = LogFactory.getLog(DefaultNHttpClientConnection.class);
-        Log headerlog = LogFactory.getLog(HEADER_LOG_ID);
-        if (headerlog.isDebugEnabled() || log.isDebugEnabled()) {
+        Log headerLog = LogFactory.getLog(HEADER_LOG_ID);
+        if (headerLog.isDebugEnabled() || log.isDebugEnabled()) {
             return new LoggingNHttpTargetConnection(
                     log,
-                    headerlog,
+                    headerLog,
                     iosession,
                     responseFactory,
                     allocator,
@@ -86,17 +84,17 @@
         }
     }
 
-    public static NHttpServerIOTarget createServerConnection(
+    public static DefaultNHttpServerConnection createServerConnection(
             final IOSession iosession,
             final HttpRequestFactory requestFactory,
             final ByteBufferAllocator allocator,
             final HttpParams params) {
         Log log = LogFactory.getLog(DefaultNHttpClientConnection.class);
-        Log headerlog = LogFactory.getLog(HEADER_LOG_ID);
-        if (headerlog.isDebugEnabled() || log.isDebugEnabled()) {
+        Log headerLog = LogFactory.getLog(HEADER_LOG_ID);
+        if (headerLog.isDebugEnabled() || log.isDebugEnabled()) {
             return new LoggingNHttpSourceConnection(
                     log,
-                    headerlog,
+                    headerLog,
                     iosession,
                     requestFactory,
                     allocator,
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingTargetHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingTargetHandler.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingTargetHandler.java	(revision 1506662)
@@ -16,26 +16,24 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.passthru.logging;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.nio.NHttpClientConnection;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.ContentDecoder;
+import org.apache.http.nio.*;
 import org.apache.http.HttpException;
 import org.apache.http.HttpResponse;
 
 import java.io.IOException;
 
-public class LoggingTargetHandler implements NHttpClientHandler {
+public class LoggingTargetHandler implements NHttpClientEventHandler {
 
     private final Log log;
     
-    private final NHttpClientHandler handler;
+    private final NHttpClientEventHandler handler;
 
-    public LoggingTargetHandler(final NHttpClientHandler handler) {
+    public LoggingTargetHandler(final NHttpClientEventHandler handler) {
         super();
         if (handler == null) {
             throw new IllegalArgumentException("HTTP client handler may not be null");
@@ -44,7 +42,7 @@
         this.log = LogFactory.getLog(handler.getClass());
     }
 
-    public void connected(final NHttpClientConnection conn, final Object attachment) {
+    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Connected (" + attachment + ")");
         }
@@ -58,17 +56,19 @@
         this.handler.closed(conn);
     }
 
-    public void exception(final NHttpClientConnection conn, final IOException ex) {
-        this.log.error("HTTP connection " + conn + ": " + ex.getMessage(), ex);
-        this.handler.exception(conn, ex);
+    public void endOfInput(NHttpClientConnection conn) throws IOException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Closed at remote end");
+        }
+        this.handler.endOfInput(conn);
     }
 
-    public void exception(final NHttpClientConnection conn, final HttpException ex) {
+    public void exception(NHttpClientConnection conn, Exception ex) {
         this.log.error("HTTP connection " + conn + ": " + ex.getMessage(), ex);
         this.handler.exception(conn, ex);
     }
 
-    public void requestReady(final NHttpClientConnection conn) {
+    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": InRequest ready" + getRequestMessageID(conn));
         }
@@ -75,7 +75,7 @@
         this.handler.requestReady(conn);
     }
 
-    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) {
+    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Output ready" + getRequestMessageID(conn));
         }
@@ -85,7 +85,7 @@
         }
     }
 
-    public void responseReceived(final NHttpClientConnection conn) {
+    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {
         HttpResponse response = conn.getHttpResponse();
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + " : "
@@ -94,7 +94,7 @@
         this.handler.responseReceived(conn);
     }
 
-    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) {
+    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Input ready" + getRequestMessageID(conn));
         }
@@ -104,7 +104,7 @@
         }
     }
 
-    public void timeout(final NHttpClientConnection conn) {
+    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Timeout" + getRequestMessageID(conn));
         }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java	(revision 1506662)
@@ -16,32 +16,32 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.passthru;
 
-import org.apache.http.impl.nio.reactor.SSLIOSession;
-import org.apache.http.impl.nio.reactor.SSLSetupHandler;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.nio.NHttpClientIOTarget;
+import org.apache.http.HttpResponseFactory;
+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.impl.nio.SSLNHttpClientConnectionFactory;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
 import org.apache.synapse.transport.passthru.logging.LoggingUtils;
 
 import javax.net.ssl.SSLContext;
-import java.net.InetSocketAddress;
 import java.util.Map;
 
-public class SSLTargetIOEventDispatch extends org.apache.http.impl.nio.ssl.SSLClientIOEventDispatch {
+public class SSLTargetIOEventDispatch extends DefaultHttpClientIODispatch {
 
     private Map<String, SSLContext> contextMap;
 
-    private HttpParams params = null;
-
-    public SSLTargetIOEventDispatch(NHttpClientHandler handler,
+    public SSLTargetIOEventDispatch(NHttpClientEventHandler handler,
                                     SSLContext sslcontext,
                                     SSLSetupHandler sslHandler,
                                     HttpParams params) {
-        super(handler, sslcontext, sslHandler, params);
-        this.params = params;
+        super(handler, new SSLTargetConnectionFactory(sslcontext, sslHandler, params));
     }
 
     public void setContextMap(Map<String,SSLContext> contextMap) {
@@ -48,8 +48,28 @@
         this.contextMap = contextMap;
     }
 
-    @Override
-    protected SSLIOSession createSSLIOSession(IOSession session,
+    private static class SSLTargetConnectionFactory extends SSLNHttpClientConnectionFactory {
+
+        public SSLTargetConnectionFactory(SSLContext sslcontext,
+                                          SSLSetupHandler sslHandler, HttpParams params) {
+            super(sslcontext, sslHandler, params);
+        }
+
+        @Override
+        protected DefaultNHttpClientConnection createConnection(IOSession session,
+                                                                HttpResponseFactory responseFactory,
+                                                                ByteBufferAllocator allocator,
+                                                                HttpParams params) {
+            session = LoggingUtils.decorate(session, "sslclient");
+            return LoggingUtils.createClientConnection(
+                    session,
+                    responseFactory,
+                    allocator,
+                    params);
+        }
+    }
+
+    /*protected SSLIOSession createSSLIOSession(IOSession session,
                                               SSLContext sslcontext,
                                               SSLSetupHandler sslHandler) {
 
@@ -66,15 +86,5 @@
         }
 
         return super.createSSLIOSession(session, customContext, sslHandler);
-    }
-
-    @Override
-    protected NHttpClientIOTarget createConnection(IOSession session) {
-        session = LoggingUtils.decorate(session, "sslclient");
-        return LoggingUtils.createClientConnection(
-                session,
-                createHttpResponseFactory(),
-                createByteBufferAllocator(),
-                params);
-    }
+    }*/
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java	(revision 1506662)
@@ -26,10 +26,10 @@
 import org.apache.axis2.transport.base.ParamUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.http.impl.nio.reactor.SSLSetupHandler;
-import org.apache.http.nio.NHttpClientHandler;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.reactor.IOEventDispatch;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.http.params.HttpParams;
 
 import javax.net.ssl.*;
@@ -46,21 +46,17 @@
 import java.util.Iterator;
 import java.util.Map;
 
+public class PassThroughHttpSSLSender extends PassThroughHttpSender {
 
-public class PassThroughHttpSSLSender extends PassThroughHttpSender {
     private Log log = LogFactory.getLog(PassThroughHttpSSLSender.class);
 
-    protected IOEventDispatch getEventDispatch(NHttpClientHandler handler,
+    protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler,
                                                SSLContext sslContext,
                                                SSLSetupHandler sslIOSessionHandler,
                                                HttpParams params,
-                                               TransportOutDescription transportOut)
-            throws AxisFault {
+                                               TransportOutDescription transportOut) throws AxisFault {
 
-        SSLTargetIOEventDispatch dispatch = new SSLTargetIOEventDispatch(handler, sslContext,
-                sslIOSessionHandler, params);
-        dispatch.setContextMap(getCustomSSLContexts(transportOut));
-        return dispatch;
+        return new SSLTargetIOEventDispatch(handler, sslContext, sslIOSessionHandler, params);
     }
 
     /**
@@ -288,7 +284,7 @@
 
         return new SSLSetupHandler() {
 
-            public void initalize(SSLEngine sslengine, HttpParams params) {
+            public void initalize(SSLEngine sslengine) {
             }
 
             public void verify(IOSession ioSession, SSLSession session) throws SSLException {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java	(revision 1506662)
@@ -43,7 +43,7 @@
  * receives events for a particular connection. These events give information
  * about the message and its various states.
  */
-public class SourceHandler implements NHttpServiceHandler {
+public class SourceHandler implements NHttpServerEventHandler {
 
     private static final Log log = LogFactory.getLog(SourceHandler.class);
 
@@ -262,7 +262,37 @@
         } 
     }
 
-    public void exception(NHttpServerConnection conn, IOException e) {        
+    public void endOfInput(NHttpServerConnection conn) throws IOException {
+        closed(conn);
+    }
+
+    public void exception(NHttpServerConnection conn, Exception e) {
+        if (e instanceof HttpException) {
+            exception(conn, (HttpException) e);
+        } else if (e instanceof IOException) {
+            exception(conn, (IOException) e);
+        } else {
+            metrics.incrementFaultsReceiving();
+
+            ProtocolState state = SourceContext.getState(conn);
+            if (state == ProtocolState.REQUEST_BODY ||
+                    state == ProtocolState.REQUEST_HEAD) {
+                informReaderError(conn);
+            } else if (state == ProtocolState.RESPONSE_BODY ||
+                    state == ProtocolState.RESPONSE_HEAD) {
+                informWriterError(conn);
+            } else if (state == ProtocolState.REQUEST_DONE) {
+                informWriterError(conn);
+            } else if (state == ProtocolState.RESPONSE_DONE) {
+                informWriterError(conn);
+            }
+
+            SourceContext.updateState(conn, ProtocolState.CLOSED);
+            sourceConfiguration.getSourceConnections().shutDownConnection(conn);
+        }
+    }
+
+    public void exception(NHttpServerConnection conn, IOException e) {
         logIOException(e);
 
         metrics.incrementFaultsReceiving();
@@ -312,7 +342,7 @@
         }
     }
 
-    public void exception(NHttpServerConnection conn, HttpException e) {        
+    public void exception(NHttpServerConnection conn, HttpException e) {
         try {
             if (conn.isResponseSubmitted()) {
                 sourceConfiguration.getSourceConnections().shutDownConnection(conn);
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java	(revision 1506662)
@@ -53,7 +53,7 @@
     private ConfigurationContext cfgCtx = null;
 
     /** the response message context that would be created */
-    private org.apache.axis2.context.MessageContext responseMsgCtx = null;
+    private MessageContext responseMsgCtx = null;
 
     /** the HttpResponse received */
     private TargetResponse response = null;
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/rest/Sample10001.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/rest/Sample10001.java	(revision 1506661)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/rest/Sample10001.java	(revision 1506662)
@@ -18,5 +18,6 @@
         assertEquals(response.getStatus(), HttpStatus.SC_INTERNAL_SERVER_ERROR);
         OMElement body = response.getBodyAsXML();
         assertEquals(body.getLocalName(), "Exception");
+        log.info("An exception was thrown as expected.");
     }
 }
Index: java/pom.xml
===================================================================
--- java/pom.xml	(revision 1506661)
+++ java/pom.xml	(revision 1506662)
@@ -1102,7 +1102,7 @@
         <truezip.version>6.6</truezip.version>
         <jsch.version>0.1.31</jsch.version>
         <jms-1.1-spec.version>1.1</jms-1.1-spec.version>
-        <httpcore.nio.version>4.1.4</httpcore.nio.version>
+        <httpcore.nio.version>4.2.4</httpcore.nio.version>
         <http.client.version>4.1</http.client.version>
         <aspectj.version>1.6.1</aspectj.version>
         <qfj.version>1.4.0</qfj.version>
Index: java/modules/transports/core/nhttp/src/test/resources/nhttp.properties
===================================================================
--- java/modules/transports/core/nhttp/src/test/resources/nhttp.properties	(nonexistent)
+++ java/modules/transports/core/nhttp/src/test/resources/nhttp.properties	(revision 1506662)
@@ -0,0 +1,8 @@
+http.socket.timeout=60000
+http.connection.timeout=0
+http.socket.buffer-size=8096
+http.tcp.nodelay=1
+http.nio.interest-ops-queueing=false
+
+# This property is crucial for automated tests
+http.socket.reuseaddr=true
\ No newline at end of file
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java	(revision 1506662)
@@ -21,8 +21,6 @@
 
 import java.io.IOException;
 import java.io.FileInputStream;
-import java.net.SocketAddress;
-import java.net.URL;
 import java.security.GeneralSecurityException;
 import java.security.KeyStore;
 
@@ -43,9 +41,10 @@
 import org.apache.axis2.description.TransportInDescription;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOEventDispatch;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.http.params.HttpParams;
 
 public class HttpCoreNIOSSLListener extends HttpCoreNIOListener {
@@ -53,8 +52,8 @@
     private static final Log log = LogFactory.getLog(HttpCoreNIOSSLListener.class);
 
     protected IOEventDispatch getEventDispatch(
-        NHttpServiceHandler handler, SSLContext sslContext,
-        SSLIOSessionHandler sslIOSessionHandler, HttpParams params) {
+        NHttpServerEventHandler handler, SSLContext sslContext,
+        SSLSetupHandler sslIOSessionHandler, HttpParams params) {
         return new SSLServerIOEventDispatch(handler, sslContext, sslIOSessionHandler, params);
     }
 
@@ -171,13 +170,13 @@
      * @return the SSLIOSessionHandler to be used
      * @throws AxisFault if a configuration error occurs
      */
-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportInDescription transportIn) throws AxisFault {
+    protected SSLSetupHandler getSSLIOSessionHandler(TransportInDescription transportIn) throws AxisFault {
 
         final Parameter clientAuth = transportIn.getParameter("SSLVerifyClient");
 
-        return new SSLIOSessionHandler() {
+        return new SSLSetupHandler() {
 
-            public void initalize(SSLEngine sslengine, HttpParams params) {
+            public void initalize(SSLEngine sslengine) {
                 if (clientAuth != null) {
                     if ("optional".equals(clientAuth.getValue())) {
                         sslengine.setWantClientAuth(true);
@@ -187,8 +186,9 @@
                 }
             }
 
-            public void verify(SocketAddress removeAddress, SSLSession session)
-                throws SSLException {}
+            public void verify(IOSession ioSession, SSLSession sslSession) throws SSLException {
+
+            }
         };
     }
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientHandler.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientHandler.java	(revision 1506662)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import java.io.IOException;
@@ -24,23 +25,20 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.http.HttpException;
 import org.apache.http.HttpResponse;
-import org.apache.http.nio.ContentDecoder;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.NHttpClientConnection;
-import org.apache.http.nio.NHttpClientHandler;
+import org.apache.http.nio.*;
 
 /**
- * Decorator class intended to transparently extend an {@link NHttpClientHandler}
+ * Decorator class intended to transparently extend an {@link NHttpClientEventHandler}
  * with basic event logging capabilities using Commons Logging. 
  */
-class LoggingNHttpClientHandler implements NHttpClientHandler {
+class LoggingNHttpClientHandler implements NHttpClientEventHandler {
 
     private final Log log;
-    private final NHttpClientHandler handler;
+    private final NHttpClientEventHandler handler;
     
     public LoggingNHttpClientHandler(
             final Log log, 
-            final NHttpClientHandler handler) {
+            final NHttpClientEventHandler handler) {
         super();
         if (handler == null) {
             throw new IllegalArgumentException("HTTP client handler may not be null");
@@ -49,7 +47,7 @@
         this.log = LogFactory.getLog(handler.getClass());
     }
     
-    public void connected(final NHttpClientConnection conn, final Object attachment) {
+    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Connected (" + attachment + ")");
         }
@@ -63,17 +61,19 @@
         this.handler.closed(conn);
     }
 
-    public void exception(final NHttpClientConnection conn, final IOException ex) {
-        this.log.error("HTTP connection " + conn + ": " + ex.getMessage(), ex);
-        this.handler.exception(conn, ex);
+    public void endOfInput(NHttpClientConnection conn) throws IOException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Closed at remote end");
+        }
+        this.handler.endOfInput(conn);
     }
 
-    public void exception(final NHttpClientConnection conn, final HttpException ex) {
+    public void exception(NHttpClientConnection conn, Exception ex) {
         this.log.error("HTTP connection " + conn + ": " + ex.getMessage(), ex);
         this.handler.exception(conn, ex);
     }
 
-    public void requestReady(final NHttpClientConnection conn) {
+    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Request ready" + getRequestMessageID(conn));
         }
@@ -80,7 +80,7 @@
         this.handler.requestReady(conn);
     }
 
-    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) {
+    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Output ready" + getRequestMessageID(conn));
         }
@@ -90,7 +90,7 @@
         }
     }
 
-    public void responseReceived(final NHttpClientConnection conn) {
+    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {
         HttpResponse response = conn.getHttpResponse();
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + " : "
@@ -99,7 +99,7 @@
         this.handler.responseReceived(conn);
     }
 
-    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) {
+    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Input ready" + getRequestMessageID(conn));
         }
@@ -109,7 +109,7 @@
         }
     }
 
-    public void timeout(final NHttpClientConnection conn) {
+    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Timeout" + getRequestMessageID(conn));
         }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java	(revision 1506662)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import org.apache.axis2.context.ConfigurationContext;
@@ -28,10 +29,7 @@
 import org.apache.http.entity.ByteArrayEntity;
 import org.apache.http.impl.DefaultConnectionReuseStrategy;
 import org.apache.http.impl.DefaultHttpResponseFactory;
-import org.apache.http.nio.ContentDecoder;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.NHttpServerConnection;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.nio.*;
 import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.nio.util.HeapByteBufferAllocator;
 import org.apache.http.nio.util.ContentOutputBuffer;
@@ -66,7 +64,7 @@
  * process every connection. Hence this class should not store any data related to a single
  * connection - as this is being shared.
  */
-public class ServerHandler implements NHttpServiceHandler {
+public class ServerHandler implements NHttpServerEventHandler {
 
     private static final Log log = LogFactory.getLog(ServerHandler.class);
 
@@ -514,6 +512,24 @@
         } catch (Exception ignore) {}        
     }
 
+    public void endOfInput(NHttpServerConnection conn) throws IOException {
+        closed(conn);
+    }
+
+    public void exception(NHttpServerConnection conn, Exception e) {
+        if (e instanceof HttpException) {
+            exception(conn, (HttpException) e);
+        } else if (e instanceof IOException) {
+            exception(conn, (IOException) e);
+        } else {
+            log.error("Unexpected I/O error: " + e.getClass().getName(), e);
+            if (metrics != null) {
+                metrics.incrementFaultsReceiving();
+            }
+            shutdownConnection(conn);
+        }
+    }
+
     /**
      * Handle IO errors while reading or writing to underlying channels
      * @param conn the connection being processed
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java	(revision 1506662)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import org.apache.axiom.om.OMElement;
@@ -35,11 +36,11 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.http.impl.nio.reactor.DefaultListeningIOReactor;
-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOEventDispatch;
 import org.apache.http.nio.reactor.IOReactorExceptionHandler;
 import org.apache.http.nio.reactor.ListenerEndpoint;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.http.params.HttpParams;
 import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;
 
@@ -74,7 +75,7 @@
     /** SSLContext if this listener is a SSL listener */
     private SSLContext sslContext = null;
     /** The SSL session handler that manages client authentication etc */
-    private SSLIOSessionHandler sslIOSessionHandler = null;
+    private SSLSetupHandler sslSetupHandler = null;
     /** JMX support */
     private TransportMBeanSupport mbeanSupport;
     /** state of the listener */
@@ -87,13 +88,13 @@
     private NhttpMetricsCollector metrics = null;
 
     protected IOEventDispatch getEventDispatch(
-        NHttpServiceHandler handler, SSLContext sslContext, 
-        SSLIOSessionHandler sslioSessionHandler, HttpParams params) {
+        NHttpServerEventHandler handler, SSLContext sslContext,
+        SSLSetupHandler setupHandler, HttpParams params) {
         return new PlainServerIOEventDispatch(handler, params);
     }
 
     /**
-     * Initialize the transport listener, and execute reactor in new seperate thread
+     * Initialize the transport listener, and execute reactor in new separate thread
      * @param cfgCtx the Axis2 configuration context
      * @param transportIn the description of the http/s transport from Axis2 configuration
      * @throws AxisFault on error
@@ -105,7 +106,7 @@
 
         // is this an SSL listener?
         sslContext = getSSLContext(transportIn);
-        sslIOSessionHandler = getSSLIOSessionHandler(transportIn);
+        sslSetupHandler = getSSLIOSessionHandler(transportIn);
 
         listenerContext = new ListenerContext(cfgCtx, transportIn, sslContext != null);
         listenerContext.build();
@@ -180,7 +181,7 @@
      * @return always null
      * @throws AxisFault never thrown
      */
-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportInDescription transportIn)
+    protected SSLSetupHandler getSSLIOSessionHandler(TransportInDescription transportIn)
         throws AxisFault {
         return null;
     }
@@ -200,8 +201,8 @@
         try {
             String prefix = (sslContext == null ? "http" : "https") + "-Listener I/O dispatcher";
             ioReactor = new DefaultListeningIOReactor(
-                NHttpConfiguration.getInstance().getServerIOWorkers(),                
-                new NativeThreadFactory(new ThreadGroup(prefix + " thread group"), prefix), params);
+                listenerContext.getReactorConfig(),
+                new NativeThreadFactory(new ThreadGroup(prefix + " thread group"), prefix));
 
             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {
                 public boolean handle(IOException ioException) {
@@ -228,7 +229,7 @@
 
         handler = new ServerHandler(listenerContext);
         final IOEventDispatch ioEventDispatch = getEventDispatch(handler,
-                sslContext, sslIOSessionHandler, params);
+                sslContext, sslSetupHandler, params);
         state = BaseConstants.STARTED;
 
         listenerContext.getHttpGetRequestProcessor().init(cfgCtx, handler);
@@ -289,7 +290,7 @@
         }
     }
 
-    private void removeServiceFfromURIMap(AxisService service) {
+    private void removeServiceFromURIMap(AxisService service) {
         eprToServiceNameMap.remove(serviceNameToEPRMap.get(service.getName()));
         serviceNameToEPRMap.remove(service.getName());
     }
@@ -305,7 +306,7 @@
             handler.stop();
             state = BaseConstants.STOPPED;
             for (Object obj : listenerContext.getCfgCtx().getAxisConfiguration().getServices().values()) {
-                removeServiceFfromURIMap((AxisService) obj);
+                removeServiceFromURIMap((AxisService) obj);
             }
         } catch (IOException e) {
             handleException("Error shutting down IOReactor", e);
@@ -314,7 +315,7 @@
 
     /**
      * Pause the listener - Stops accepting new connections, but continues processing existing
-     * connections until they complete. This helps bring an instance into a maintenence mode
+     * connections until they complete. This helps bring an instance into a maintenance mode
      * @throws AxisFault
      */
     public void pause() throws AxisFault {
@@ -362,7 +363,7 @@
 
     /**
      * Stop accepting new connections, and wait the maximum specified time for in-flight
-     * requests to complete before a controlled shutdown for maintenence
+     * requests to complete before a controlled shutdown for maintenance
      *
      * @param millis a number of milliseconds to wait until pending requests are allowed to complete
      * @throws AxisFault
@@ -376,7 +377,7 @@
             state = BaseConstants.STOPPED;
             log.info("Listener shutdown in : " + (System.currentTimeMillis() - start) / 1000 + "s");
         } catch (IOException e) {
-            handleException("Error shutting down the IOReactor for maintenence", e);
+            handleException("Error shutting down the IOReactor for maintenance", e);
         }
     }
 
@@ -479,13 +480,13 @@
                         addToServiceURIMap(service);
                         break;
                     case AxisEvent.SERVICE_REMOVE :
-                        removeServiceFfromURIMap(service);
+                        removeServiceFromURIMap(service);
                         break;
                     case AxisEvent.SERVICE_START  :
                         addToServiceURIMap(service);
                         break;
                     case AxisEvent.SERVICE_STOP   :
-                        removeServiceFfromURIMap(service);
+                        removeServiceFromURIMap(service);
                         break;
                 }
             }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingUtils.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingUtils.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingUtils.java	(revision 1506662)
@@ -23,10 +23,9 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.http.HttpRequestFactory;
 import org.apache.http.HttpResponseFactory;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.nio.NHttpClientIOTarget;
-import org.apache.http.nio.NHttpServerIOTarget;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.nio.*;
 import org.apache.http.nio.reactor.IOSession;
 import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
@@ -37,7 +36,7 @@
     public final static String WIRE_LOG_ID = "org.apache.synapse.transport.nhttp.wire";
     public final static String ACCESS_LOG_ID = "org.apache.synapse.transport.nhttp.access";
 
-    public static NHttpClientHandler decorate(NHttpClientHandler handler) {
+    public static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {
         Log log = LogFactory.getLog(handler.getClass());
         if (log.isDebugEnabled()) {
             handler = new LoggingNHttpClientHandler(log, handler);
@@ -45,7 +44,7 @@
         return handler;
     }
 
-    public static NHttpServiceHandler decorate(NHttpServiceHandler handler) {
+    public static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {
         Log log = LogFactory.getLog(handler.getClass());
         if (log.isDebugEnabled()) {
             handler = new LoggingNHttpServiceHandler(log, handler);
@@ -53,7 +52,7 @@
         return handler;
     }
 
-    public static NHttpClientIOTarget createClientConnection(
+    public static DefaultNHttpClientConnection createClientConnection(
             final IOSession iosession,
             final HttpResponseFactory responseFactory,
             final ByteBufferAllocator allocator,
@@ -65,7 +64,7 @@
                 params);
     }
 
-    public static NHttpServerIOTarget createServerConnection(
+    public static DefaultNHttpServerConnection createServerConnection(
             final IOSession iosession,
             final HttpRequestFactory requestFactory,
             final ByteBufferAllocator allocator,
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java	(revision 1506662)
@@ -16,18 +16,21 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import javax.net.ssl.SSLContext;
 
-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;
-import org.apache.http.impl.nio.reactor.SSLIOSession;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.nio.NHttpClientIOTarget;
+import org.apache.http.HttpResponseFactory;
+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.impl.nio.SSLNHttpClientConnectionFactory;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
 
-import java.net.InetSocketAddress;
 import java.util.Map;
 
 /**
@@ -36,16 +39,16 @@
  * particular server from the specified map it uses the default SSLContext.
  */
 public class SSLClientIOEventDispatch 
-    extends org.apache.http.impl.nio.SSLClientIOEventDispatch {
+    extends DefaultHttpClientIODispatch {
 
     private Map<String, SSLContext> contextMap;
 
     public SSLClientIOEventDispatch(
-            final NHttpClientHandler handler,
+            final NHttpClientEventHandler handler,
             final SSLContext sslcontext,
-            final SSLIOSessionHandler sslHandler,
+            final SSLSetupHandler sslHandler,
             final HttpParams params) {
-        super(LoggingUtils.decorate(handler), sslcontext, sslHandler, params);
+        super(LoggingUtils.decorate(handler), new SSLTargetConnectionFactory(sslcontext, sslHandler, params));
     }
 
     public void setContextMap(Map<String,SSLContext> contextMap) {
@@ -52,30 +55,42 @@
         this.contextMap = contextMap;
     }
 
-    protected SSLIOSession createSSLIOSession(IOSession ioSession, SSLContext sslContext,
-                                              SSLIOSessionHandler sslioSessionHandler) {
+//    protected SSLIOSession createSSLIOSession(IOSession ioSession, SSLContext sslContext,
+//                                              SSLIOSessionHandler sslioSessionHandler) {
+//
+//        InetSocketAddress address = (InetSocketAddress) ioSession.getRemoteAddress();
+//        String host = address.getHostName() + ":" + address.getPort();
+//        SSLContext customContext = null;
+//        if (contextMap != null) {
+//            // See if there's a custom SSL profile configured for this server
+//            customContext = contextMap.get(host);
+//        }
+//
+//        if (customContext == null) {
+//            customContext = sslContext;
+//        }
+//
+//        return super.createSSLIOSession(ioSession, customContext, sslioSessionHandler);
+//    }
 
-        InetSocketAddress address = (InetSocketAddress) ioSession.getRemoteAddress();
-        String host = address.getHostName() + ":" + address.getPort();
-        SSLContext customContext = null;
-        if (contextMap != null) {
-            // See if there's a custom SSL profile configured for this server
-            customContext = contextMap.get(host);
+    private static class SSLTargetConnectionFactory extends SSLNHttpClientConnectionFactory {
+
+        public SSLTargetConnectionFactory(SSLContext sslcontext,
+                                          SSLSetupHandler sslHandler, HttpParams params) {
+            super(sslcontext, sslHandler, params);
         }
 
-        if (customContext == null) {
-            customContext = sslContext;
+        @Override
+        protected DefaultNHttpClientConnection createConnection(IOSession session,
+                                                                HttpResponseFactory responseFactory,
+                                                                ByteBufferAllocator allocator,
+                                                                HttpParams params) {
+            return LoggingUtils.createClientConnection(
+                    session,
+                    responseFactory,
+                    allocator,
+                    params);
         }
-        
-        return super.createSSLIOSession(ioSession, customContext, sslioSessionHandler);
     }
 
-    protected NHttpClientIOTarget createConnection(IOSession session) {
-        return LoggingUtils.createClientConnection(
-                session, 
-                createHttpResponseFactory(), 
-                createByteBufferAllocator(), 
-                this.params);
-    }
-
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainClientIOEventDispatch.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainClientIOEventDispatch.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainClientIOEventDispatch.java	(revision 1506662)
@@ -16,27 +16,41 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
-import org.apache.http.impl.nio.DefaultClientIOEventDispatch;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.nio.NHttpClientIOTarget;
+import org.apache.http.HttpResponseFactory;
+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.impl.nio.DefaultNHttpClientConnectionFactory;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
 
-public class PlainClientIOEventDispatch extends DefaultClientIOEventDispatch {
+public class PlainClientIOEventDispatch extends DefaultHttpClientIODispatch {
 
-    public PlainClientIOEventDispatch(final NHttpClientHandler handler, final HttpParams params) {
-        super(LoggingUtils.decorate(handler), params);
+    public PlainClientIOEventDispatch(final NHttpClientEventHandler handler, final HttpParams params) {
+        super(LoggingUtils.decorate(handler), new TargetConnectionFactory(params));
     }
-    
-    @Override
-    protected NHttpClientIOTarget createConnection(IOSession session) {
-        return LoggingUtils.createClientConnection(
-                session, 
-                createHttpResponseFactory(), 
-                this.allocator, 
-                this.params);
+
+    private static class TargetConnectionFactory extends DefaultNHttpClientConnectionFactory {
+
+        public TargetConnectionFactory(HttpParams params) {
+            super(params);
+        }
+
+        @Override
+        protected DefaultNHttpClientConnection createConnection(IOSession session,
+                                                                HttpResponseFactory responseFactory,
+                                                                ByteBufferAllocator allocator,
+                                                                HttpParams params) {
+            return LoggingUtils.createClientConnection(
+                    session,
+                    responseFactory,
+                    allocator,
+                    params);
+        }
     }
     
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java	(revision 1506662)
@@ -21,9 +21,10 @@
 
 import org.apache.commons.logging.LogFactory;
 import org.apache.commons.logging.Log;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.reactor.IOEventDispatch;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.http.params.HttpParams;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.description.Parameter;
@@ -47,8 +48,8 @@
 
     private static final Log log = LogFactory.getLog(HttpCoreNIOSSLSender.class);
 
-    protected IOEventDispatch getEventDispatch(NHttpClientHandler handler, SSLContext sslContext,
-        SSLIOSessionHandler sslIOSessionHandler, HttpParams params,
+    protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler, SSLContext sslContext,
+        SSLSetupHandler sslIOSessionHandler, HttpParams params,
         TransportOutDescription transportOut) throws AxisFault {
 
         SSLClientIOEventDispatch dispatch = new SSLClientIOEventDispatch(handler, sslContext,
@@ -96,7 +97,7 @@
      * @return the SSLIOSessionHandler to be used
      * @throws AxisFault if a configuration error occurs
      */
-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportOutDescription transportOut)
+    protected SSLSetupHandler getSSLIOSessionHandler(TransportOutDescription transportOut)
             throws AxisFault {
 
         final Parameter hostnameVerifier = transportOut.getParameter("HostnameVerifier");
@@ -275,17 +276,16 @@
         }
     }
 
-    private SSLIOSessionHandler createSSLIOSessionHandler(final String hostnameVerifier)
+    private SSLSetupHandler createSSLIOSessionHandler(final String hostnameVerifier)
             throws AxisFault {
 
-        return new SSLIOSessionHandler() {
+        return new SSLSetupHandler() {
 
-            public void initalize(SSLEngine sslengine, HttpParams params) {
+            public void initalize(SSLEngine sslengine) {
             }
 
-            public void verify(SocketAddress remoteAddress, SSLSession session)
-                throws SSLException {
-
+            public void verify(IOSession ioSession, SSLSession session) throws SSLException {
+                SocketAddress remoteAddress = ioSession.getRemoteAddress();
                 String address;
                 if (remoteAddress instanceof InetSocketAddress) {
                     address = ((InetSocketAddress) remoteAddress).getHostName();
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServiceHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServiceHandler.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServiceHandler.java	(revision 1506662)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import java.io.IOException;
@@ -25,23 +26,20 @@
 import org.apache.http.HttpException;
 import org.apache.http.HttpRequest;
 import org.apache.http.ConnectionClosedException;
-import org.apache.http.nio.ContentDecoder;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.NHttpServerConnection;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.nio.*;
 
 /**
- * Decorator class intended to transparently extend an {@link NHttpServiceHandler} 
+ * Decorator class intended to transparently extend an {@link NHttpServerEventHandler}
  * with basic event logging capabilities using Commons Logging. 
  */
-class LoggingNHttpServiceHandler implements NHttpServiceHandler {
+class LoggingNHttpServiceHandler implements NHttpServerEventHandler {
 
     private final Log log;
-    private final NHttpServiceHandler handler;
+    private final NHttpServerEventHandler handler;
     
     public LoggingNHttpServiceHandler(
             final Log log, 
-            final NHttpServiceHandler handler) {
+            final NHttpServerEventHandler handler) {
         super();
         if (handler == null) {
             throw new IllegalArgumentException("HTTP service handler may not be null");
@@ -50,7 +48,7 @@
         this.log = LogFactory.getLog(handler.getClass());
     }
     
-    public void connected(final NHttpServerConnection conn) {
+    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Connected");
         }
@@ -64,14 +62,24 @@
         this.handler.closed(conn);
     }
 
-    public void exception(final NHttpServerConnection conn, final IOException ex) {
+    public void endOfInput(NHttpServerConnection conn) throws IOException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Closed at remote end");
+        }
+        this.handler.endOfInput(conn);
+    }
+
+    public void exception(NHttpServerConnection conn, Exception ex) {
         if (ex instanceof ConnectionClosedException ||
                 ex.getMessage().contains("Connection reset by peer") ||
                 ex.getMessage().contains("forcibly closed")) {
             if (this.log.isDebugEnabled()) {
                 this.log.debug("HTTP connection " + conn + ": " + ex.getMessage() +
-                    " (Probably the keepalive connection was closed)");
+                        " (Probably the keepalive connection was closed)");
             }
+        } else if (ex instanceof HttpException) {
+            this.log.error("HTTP connection " + conn + ": " + ex.getMessage(), ex);
+            this.handler.exception(conn, ex);
         } else {
             this.log.error("HTTP connection " + conn + ": " + ex.getMessage(), ex);
         }
@@ -78,12 +86,7 @@
         this.handler.exception(conn, ex);
     }
 
-    public void exception(final NHttpServerConnection conn, final HttpException ex) {
-        this.log.error("HTTP connection " + conn + ": " + ex.getMessage(), ex);
-        this.handler.exception(conn, ex);
-    }
-
-    public void requestReceived(final NHttpServerConnection conn) {
+    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {
         HttpRequest request = conn.getHttpRequest();
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": " + request.getRequestLine());
@@ -91,7 +94,7 @@
         this.handler.requestReceived(conn);
     }
 
-    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) {
+    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Output ready");
         }
@@ -101,7 +104,7 @@
         }
     }
 
-    public void responseReady(final NHttpServerConnection conn) {
+    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Response ready");
         }
@@ -108,7 +111,7 @@
         this.handler.responseReady(conn);
     }
 
-    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) {
+    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Input ready");
         }
@@ -118,7 +121,7 @@
         }
     }
 
-    public void timeout(final NHttpServerConnection conn) {
+    public void timeout(final NHttpServerConnection conn) throws IOException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Timeout");
         }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java	(revision 1506662)
@@ -31,6 +31,7 @@
 import org.apache.axis2.transport.base.endpoint.config.URLEndpointsConfigurationFactory;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.http.impl.nio.reactor.IOReactorConfig;
 import org.apache.http.nio.params.NIOReactorPNames;
 import org.apache.http.params.BasicHttpParams;
 import org.apache.http.params.HttpConnectionParams;
@@ -56,6 +57,7 @@
  * This class is being used to hold the different runtime objects used by the Listeners
  */
 public class ListenerContext {
+
     private Log log = LogFactory.getLog(ListenerContext.class);
 
     /** The Axis2 configuration context */
@@ -265,6 +267,22 @@
         return params;
     }
 
+    public IOReactorConfig getReactorConfig() {
+        IOReactorConfig config = new IOReactorConfig();
+        NHttpConfiguration cfg = NHttpConfiguration.getInstance();
+        config.setIoThreadCount(cfg.getServerIOWorkers());
+        config.setSoTimeout(cfg.getProperty(NhttpConstants.SO_TIMEOUT_RECEIVER, 60000));
+        config.setSndBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));
+        config.setRcvBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));
+        config.setTcpNoDelay(cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1);
+        if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {
+            config.setInterestOpQueued(true);
+        }
+        if (cfg.getBooleanValue(HttpConnectionParams.SO_REUSEADDR, false)) {
+            config.setSoReuseAddress(true);
+        }
+        return config;
+    }
 
     public ConfigurationContext getCfgCtx() {
         return cfgCtx;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java	(revision 1506662)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import org.apache.axiom.om.OMOutputFormat;
@@ -42,14 +43,15 @@
 import org.apache.http.*;
 import org.apache.http.entity.BasicHttpEntity;
 import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;
-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;
+import org.apache.http.impl.nio.reactor.IOReactorConfig;
 import org.apache.http.nio.NHttpClientConnection;
-import org.apache.http.nio.NHttpClientHandler;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.params.NIOReactorPNames;
 import org.apache.http.nio.reactor.IOEventDispatch;
 import org.apache.http.nio.reactor.IOReactorExceptionHandler;
 import org.apache.http.nio.reactor.SessionRequest;
 import org.apache.http.nio.reactor.SessionRequestCallback;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.http.params.BasicHttpParams;
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
@@ -79,8 +81,6 @@
 
     private static final Log log = LogFactory.getLog(HttpCoreNIOSender.class);
 
-    /** The Axis2 configuration context */
-    private ConfigurationContext cfgCtx;
     /** The IOReactor */
     private DefaultConnectingIOReactor ioReactor = null;
     /** The client handler */
@@ -89,8 +89,6 @@
     private final SessionRequestCallback sessionRequestCallback = getSessionRequestCallback();
     /** The SSL Context to be used */
     private SSLContext sslContext = null;
-    /** The SSL session handler that manages hostname verification etc */
-    private SSLIOSessionHandler sslIOSessionHandler = null;
     /** JMX support */
     private TransportMBeanSupport mbeanSupport;
     /** Metrics collector for the sender */
@@ -118,11 +116,9 @@
      * @throws AxisFault thrown on an error
      */
     public void init(ConfigurationContext cfgCtx, TransportOutDescription transportOut) throws AxisFault {
-        this.cfgCtx = cfgCtx;
-
         // is this an SSL Sender?
         sslContext = getSSLContext(transportOut);
-        sslIOSessionHandler = getSSLIOSessionHandler(transportOut);
+        SSLSetupHandler sslSetupHandler = getSSLIOSessionHandler(transportOut);
 
         // configure proxy settings - only supports HTTP right now (See SYNAPSE-418)
         if (sslContext == null) {
@@ -166,8 +162,8 @@
         try {
             String prefix = (sslContext == null ? "http" : "https") + "-Sender I/O dispatcher";
             ioReactor = new DefaultConnectingIOReactor(
-                NHttpConfiguration.getInstance().getClientIOWorkers(),
-                new NativeThreadFactory(new ThreadGroup(prefix + " thread group"), prefix), params);
+                getReactorConfig(),
+                new NativeThreadFactory(new ThreadGroup(prefix + " thread group"), prefix));
             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {
                 public boolean handle(IOException ioException) {
                     log.warn("System may be unstable: IOReactor encountered a checked exception : " +
@@ -188,7 +184,7 @@
         metrics = new NhttpMetricsCollector(false, transportOut.getName());
         handler = new ClientHandler(cfgCtx, params, metrics);
         final IOEventDispatch ioEventDispatch = getEventDispatch(
-            handler, sslContext, sslIOSessionHandler, params, transportOut);
+            handler, sslContext, sslSetupHandler, params, transportOut);
 
         // start the Sender in a new seperate thread
         Thread t = new Thread(new Runnable() {
@@ -225,8 +221,8 @@
      * @return an IOEventDispatch instance
      * @throws AxisFault on error
      */
-    protected IOEventDispatch getEventDispatch(NHttpClientHandler handler, SSLContext sslContext,
-        SSLIOSessionHandler sslIOSessionHandler, HttpParams params,
+    protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler, SSLContext sslContext,
+        SSLSetupHandler sslIOSessionHandler, HttpParams params,
         TransportOutDescription trpOut) throws AxisFault {
 
         return new PlainClientIOEventDispatch(handler, params);
@@ -248,7 +244,7 @@
      * @return always null
      * @throws AxisFault on error
      */
-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportOutDescription transportOut)
+    protected SSLSetupHandler getSSLIOSessionHandler(TransportOutDescription transportOut)
         throws AxisFault {
         return null;
     }
@@ -279,6 +275,21 @@
         return params;
     }
 
+    private IOReactorConfig getReactorConfig() {
+        IOReactorConfig config = new IOReactorConfig();
+        NHttpConfiguration cfg = NHttpConfiguration.getInstance();
+        config.setIoThreadCount(cfg.getClientIOWorkers());
+        config.setSoTimeout(cfg.getProperty(NhttpConstants.SO_TIMEOUT_SENDER, 60000));
+        config.setConnectTimeout(cfg.getProperty(HttpConnectionParams.CONNECTION_TIMEOUT, 10000));
+        config.setSndBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));
+        config.setRcvBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));
+        config.setTcpNoDelay(cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1);
+        if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {
+            config.setInterestOpQueued(true);
+        }
+        return config;
+    }
+
     /**
      * transport sender invocation from Axis2 core
      * @param msgContext message to be sent
@@ -441,11 +452,7 @@
                 }
             }
 
-            try {
-                axis2Req.streamMessageContents();
-            } catch (AxisFault af) {
-                throw af;
-            }
+            axis2Req.streamMessageContents();
 
         } catch (MalformedURLException e) {
             handleException("Malformed destination EPR : " + epr.getAddress(), e);
@@ -774,7 +781,7 @@
             public void failed(SessionRequest request) {
                 handleError(request, NhttpConstants.CONNECTION_FAILED, 
                     "Connection refused or failed for : " + request.getRemoteAddress() + ", " +
-                    "IO Exception occured : " + request.getException().getMessage());
+                    "IO Exception occurred : " + request.getException().getMessage());
             }
 
             public void timeout(SessionRequest request) {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLServerIOEventDispatch.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLServerIOEventDispatch.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLServerIOEventDispatch.java	(revision 1506662)
@@ -16,41 +16,49 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
 import javax.net.ssl.SSLContext;
 
-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;
-import org.apache.http.nio.NHttpServerIOTarget;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.HttpRequestFactory;
+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.impl.nio.SSLNHttpServerConnectionFactory;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
 
-public class SSLServerIOEventDispatch 
-    extends org.apache.http.impl.nio.SSLServerIOEventDispatch {
+public class SSLServerIOEventDispatch
+        extends DefaultHttpServerIODispatch {
 
     public SSLServerIOEventDispatch(
-            final NHttpServiceHandler handler,
+            final NHttpServerEventHandler handler,
             final SSLContext sslcontext,
-            final SSLIOSessionHandler sslHandler,
+            final SSLSetupHandler sslHandler,
             final HttpParams params) {
-        super(LoggingUtils.decorate(handler), sslcontext, sslHandler, params);
+        super(LoggingUtils.decorate(handler), new SSLSourceConnectionFactory(sslcontext, sslHandler, params));
     }
-    
-    public SSLServerIOEventDispatch(
-            final NHttpServiceHandler handler,
-            final SSLContext sslcontext,
-            final HttpParams params) {
-        this(handler, sslcontext, null, params);
+
+    private static class SSLSourceConnectionFactory extends SSLNHttpServerConnectionFactory {
+
+        public SSLSourceConnectionFactory(SSLContext sslcontext, SSLSetupHandler sslHandler, HttpParams params) {
+            super(sslcontext, sslHandler, params);
+        }
+
+        @Override
+        protected DefaultNHttpServerConnection createConnection(IOSession session,
+                                                                HttpRequestFactory requestFactory,
+                                                                ByteBufferAllocator allocator,
+                                                                HttpParams params) {
+            return LoggingUtils.createServerConnection(
+                    session,
+                    requestFactory,
+                    allocator,
+                    params);
+        }
     }
     
-    @Override
-    protected NHttpServerIOTarget createConnection(IOSession session) {
-        return LoggingUtils.createServerConnection(
-                session, 
-                createHttpRequestFactory(), 
-                createByteBufferAllocator(), 
-                this.params);
-    }
-    
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainServerIOEventDispatch.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainServerIOEventDispatch.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainServerIOEventDispatch.java	(revision 1506662)
@@ -16,27 +16,41 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.nhttp;
 
-import org.apache.http.impl.nio.DefaultServerIOEventDispatch;
-import org.apache.http.nio.NHttpServerIOTarget;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.HttpRequestFactory;
+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.impl.nio.DefaultNHttpServerConnectionFactory;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
 
-public class PlainServerIOEventDispatch extends DefaultServerIOEventDispatch {
+public class PlainServerIOEventDispatch extends DefaultHttpServerIODispatch {
 
-    public PlainServerIOEventDispatch(final NHttpServiceHandler handler, final HttpParams params) {
-        super(LoggingUtils.decorate(handler), params);
+    public PlainServerIOEventDispatch(NHttpServerEventHandler handler, HttpParams params) {
+        super(LoggingUtils.decorate(handler), new SourceConnectionFactory(params));
     }
-    
-    @Override
-    protected NHttpServerIOTarget createConnection(IOSession session) {
-        return LoggingUtils.createServerConnection(
-                session, 
-                createHttpRequestFactory(), 
-                this.allocator, 
-                this.params);
+
+    private static class SourceConnectionFactory extends DefaultNHttpServerConnectionFactory {
+
+        public SourceConnectionFactory(HttpParams params) {
+            super(params);
+        }
+
+        @Override
+        protected DefaultNHttpServerConnection createConnection(IOSession session,
+                                                                HttpRequestFactory requestFactory,
+                                                                ByteBufferAllocator allocator,
+                                                                HttpParams params) {
+            return LoggingUtils.createServerConnection(
+                    session,
+                    requestFactory,
+                    allocator,
+                    params);
+        }
     }
     
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java	(revision 1506662)
@@ -41,10 +41,7 @@
 import org.apache.http.entity.BasicHttpEntity;
 import org.apache.http.impl.DefaultConnectionReuseStrategy;
 import org.apache.http.impl.nio.DefaultNHttpClientConnection;
-import org.apache.http.nio.ContentDecoder;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.NHttpClientConnection;
-import org.apache.http.nio.NHttpClientHandler;
+import org.apache.http.nio.*;
 import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.nio.util.HeapByteBufferAllocator;
 import org.apache.http.nio.util.ContentOutputBuffer;
@@ -75,7 +72,7 @@
  * process every connection. Hence this class should not store any data related to a single
  * connection - as this is being shared.
  */
-public class ClientHandler implements NHttpClientHandler {
+public class ClientHandler implements NHttpClientEventHandler {
 
     private static final Log log = LogFactory.getLog(ClientHandler.class);
 
@@ -331,6 +328,21 @@
         context.removeAttribute(REQUEST_SOURCE_BUFFER);
     }
 
+    public void endOfInput(NHttpClientConnection conn) throws IOException {
+        closed(conn);
+    }
+
+    public void exception(NHttpClientConnection conn, Exception e) {
+        if (e instanceof HttpException) {
+            exception(conn, (HttpException) e);
+        } else if (e instanceof IOException) {
+            exception(conn, (IOException) e);
+        } else {
+            log.error(e.getMessage(), e);
+            shutdownConnection(conn);
+        }
+    }
+
     /**
      * Handle Http protocol violations encountered while reading from underlying channels
      * 
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java	(revision 1506662)
@@ -17,7 +17,6 @@
  *  under the License.
  */
 
-
 package org.apache.synapse.transport.passthru.config;
 
 import org.apache.axis2.AxisFault;
@@ -25,8 +24,7 @@
 import org.apache.axis2.description.ParameterInclude;
 import org.apache.axis2.transport.base.threads.WorkerPool;
 import org.apache.axis2.transport.base.threads.WorkerPoolFactory;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.http.impl.nio.reactor.IOReactorConfig;
 import org.apache.http.nio.params.NIOReactorPNames;
 import org.apache.http.nio.params.NIOReactorParams;
 import org.apache.http.nio.util.HeapByteBufferAllocator;
@@ -42,8 +40,6 @@
  */
 public abstract class BaseConfiguration {
 
-    private Log log = LogFactory.getLog(BaseConfiguration.class);
-
     /**
      * Configurations given by axis2.xml
      */
@@ -64,8 +60,6 @@
 
     private int iOThreadsPerReactor;
 
-    private int iOBufferSize;
-
     protected PassThroughConfiguration conf = PassThroughConfiguration.getInstance();
 
     public BaseConfiguration(ConfigurationContext configurationContext,
@@ -79,8 +73,6 @@
     public void build() throws AxisFault {
         iOThreadsPerReactor = conf.getIOThreadsPerReactor();
 
-        iOBufferSize = conf.getIOBufferSize();
-
         if (workerPool == null) {
             workerPool = WorkerPoolFactory.getWorkerPool(
                             conf.getWorkerPoolCoreSize(),
@@ -92,16 +84,38 @@
         }
 
         httpParameters = retrieveHttpParameters();
-
-        bufferFactory = new BufferFactory(iOBufferSize, new HeapByteBufferAllocator(), 512);
+        bufferFactory = new BufferFactory(conf.getIOBufferSize(), new HeapByteBufferAllocator(), 512);
     }
 
-    public int getIOThreadsPerReactor() {
-        return iOThreadsPerReactor;
-    }
+    public IOReactorConfig getReactorConfig() {
+        IOReactorConfig config = new IOReactorConfig();
+        config.setIoThreadCount(iOThreadsPerReactor);
+        config.setSoTimeout(
+                conf.getIntProperty(HttpConnectionParams.SO_TIMEOUT, 60000));
+        config.setConnectTimeout(
+                conf.getIntProperty(HttpConnectionParams.CONNECTION_TIMEOUT, 0));
+        config.setRcvBufSize(
+                conf.getIntProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));
+        config.setSndBufSize(
+                conf.getIntProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));
+        config.setTcpNoDelay(
+                conf.getBooleanProperty(HttpConnectionParams.TCP_NODELAY, true));
+        config.setInterestOpQueued(
+                conf.getBooleanProperty(NIOReactorParams.INTEREST_OPS_QUEUEING, false));
 
-    public int getIOBufferSize() {
-        return iOBufferSize;
+        if (conf.getIntProperty(HttpConnectionParams.SO_LINGER) != null) {
+            config.setSoLinger(conf.getIntProperty(HttpConnectionParams.SO_LINGER));
+        }
+
+        if (conf.getBooleanProperty(HttpConnectionParams.SO_REUSEADDR) != null) {
+            config.setSoReuseAddress(conf.getBooleanProperty(HttpConnectionParams.SO_REUSEADDR));
+        }
+
+        if (conf.getIntProperty(NIOReactorPNames.SELECT_INTERVAL) != null) {
+            config.setSelectInterval(conf.getIntProperty(NIOReactorPNames.SELECT_INTERVAL));
+        }
+
+        return config;
     }
 
     public WorkerPool getWorkerPool() {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java	(revision 1506662)
@@ -21,10 +21,8 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.commons.util.MiscellaneousUtil;
 
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
 import java.util.Properties;
 
 /**
@@ -52,7 +50,7 @@
 
     private PassThroughConfiguration() {
         try {
-            props = loadProperties("passthru-http.properties");
+            props = MiscellaneousUtil.loadProperties("passthru-http.properties");
         } catch (Exception ignored) {}
     }
 
@@ -103,50 +101,6 @@
     }
 
     /**
-     * Loads the properties from a given property file path
-     *
-     * @param filePath Path of the property file
-     * @return Properties loaded from given file
-     */
-    private static Properties loadProperties(String filePath) {
-
-        Properties properties = new Properties();
-        ClassLoader cl = Thread.currentThread().getContextClassLoader();
-
-        if (log.isDebugEnabled()) {
-            log.debug("Loading the file '" + filePath + "' from classpath");
-        }
-
-        InputStream in = cl.getResourceAsStream(filePath);
-        if (in == null) {
-            if (log.isDebugEnabled()) {
-                log.debug("Unable to load file  '" + filePath + "'");
-            }
-
-            filePath = "conf" + File.separatorChar + filePath;
-            if (log.isDebugEnabled()) {
-                log.debug("Loading the file '" + filePath + "'");
-            }
-
-            in = cl.getResourceAsStream(filePath);
-            if (in == null) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Unable to load file  '" + filePath + "'");
-                }
-            }
-        }
-        if (in != null) {
-            try {
-                properties.load(in);
-            } catch (IOException e) {
-                String msg = "Error loading properties from a file at : " + filePath;
-                log.error(msg, e);
-            }
-        }
-        return properties;
-    }
-
-    /**
      * Get an int property that tunes pass-through http transport. Prefer system properties
      *
      * @param name name of the system/config property
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java	(revision 1506662)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.passthru;
 
 import org.apache.axiom.om.OMElement;
@@ -24,10 +25,10 @@
 import org.apache.axis2.description.TransportInDescription;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.http.impl.nio.SSLServerIOEventDispatch;
-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOEventDispatch;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.http.params.HttpParams;
 
 import javax.net.ssl.*;
@@ -34,7 +35,6 @@
 import javax.xml.namespace.QName;
 import java.io.FileInputStream;
 import java.io.IOException;
-import java.net.SocketAddress;
 import java.security.GeneralSecurityException;
 import java.security.KeyStore;
 
@@ -42,10 +42,10 @@
     
     private Log log = LogFactory.getLog(PassThroughHttpSSLListener.class);
 
-    protected IOEventDispatch getEventDispatch(
-        NHttpServiceHandler handler, SSLContext sslContext,
-        SSLIOSessionHandler sslIOSessionHandler, HttpParams params) {
-        return new SSLServerIOEventDispatch(handler, sslContext, sslIOSessionHandler, params);
+    @Override
+    protected IOEventDispatch getEventDispatch(NHttpServerEventHandler handler, SSLContext sslContext,
+                                               SSLSetupHandler sslSetupHandler, HttpParams params) {
+        return new SSLSourceIOEventDispatch(handler, sslContext, sslSetupHandler, params);
     }
 
     /**
@@ -140,23 +140,14 @@
         }
     }
 
-    /**
-     * Create the SSLIOSessionHandler to initialize the SSL session / engine, and request for
-     * client authentication at the following levels, through an Axis2 transport configuration
-     * parameter as follows:
-     * SSLVerifyClient - none, optional, require
-     *
-     * @param transportIn the Axis2 transport configuration
-     * @return the SSLIOSessionHandler to be used
-     * @throws AxisFault if a configuration error occurs
-     */
-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportInDescription transportIn) throws AxisFault {
+    protected SSLSetupHandler getSSLSetupHandler(TransportInDescription transportIn)
+            throws AxisFault {
 
         final Parameter clientAuth = transportIn.getParameter("SSLVerifyClient");
 
-        return new SSLIOSessionHandler() {
+        return new SSLSetupHandler() {
 
-            public void initalize(SSLEngine sslengine, HttpParams params) {
+            public void initalize(SSLEngine sslengine) {
                 if (clientAuth != null) {
                     if ("optional".equals(clientAuth.getValue())) {
                         sslengine.setWantClientAuth(true);
@@ -166,8 +157,9 @@
                 }
             }
 
-            public void verify(SocketAddress removeAddress, SSLSession session)
-                throws SSLException {}
+            public void verify(IOSession ioSession, SSLSession sslSession) throws SSLException {
+
+            }
         };
     }
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java	(revision 1506662)
@@ -17,7 +17,6 @@
  *  under the License.
  */
 
-
 package org.apache.synapse.transport.passthru;
 
 import org.apache.axiom.om.OMOutputFormat;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java	(revision 1506662)
@@ -56,8 +56,8 @@
 import org.apache.http.HttpStatus;
 import org.apache.http.HttpVersion;
 import org.apache.http.entity.BasicHttpEntity;
-import org.apache.http.impl.nio.reactor.SSLIOSession;
 import org.apache.http.nio.NHttpServerConnection;
+import org.apache.http.nio.reactor.ssl.SSLIOSession;
 import org.apache.http.protocol.HTTP;
 import org.apache.synapse.transport.nhttp.HttpCoreRequestResponseTransport;
 import org.apache.synapse.transport.nhttp.NHttpConfiguration;
@@ -456,9 +456,10 @@
             msgContext.setTransportIn(cfgCtx.getAxisConfiguration()
                 .getTransportIn(Constants.TRANSPORT_HTTPS));
             msgContext.setIncomingTransportName(Constants.TRANSPORT_HTTPS);
-            SSLIOSession session = (SSLIOSession) (conn.getContext()).getAttribute("SSL_SESSION");
+            SSLIOSession session = (SSLIOSession) conn.getContext().getAttribute(
+                    SSLIOSession.SESSION_KEY);
             msgContext.setProperty("ssl.client.auth.cert.X509",
-                                                session.getAttribute("ssl.client.auth.cert.X509"));            
+                    session.getAttribute("ssl.client.auth.cert.X509"));
         } else {
             msgContext.setTransportOut(cfgCtx.getAxisConfiguration()
                 .getTransportOut(Constants.TRANSPORT_HTTP));
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/DeliveryAgent.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/DeliveryAgent.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/DeliveryAgent.java	(revision 1506662)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.transport.passthru;
 
 import org.apache.axis2.AxisFault;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceContext.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceContext.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceContext.java	(revision 1506662)
@@ -23,8 +23,6 @@
 import org.apache.synapse.transport.passthru.config.SourceConfiguration;
 
 import java.nio.ByteBuffer;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
 
 /**
  * This class represents the information about a TCP Connection at a given point in time.
@@ -49,8 +47,6 @@
 
     private Pipe writer;
 
-    private Lock lock = new ReentrantLock();
-
     public SourceContext(SourceConfiguration sourceConfiguration) {
         this.sourceConfiguration = sourceConfiguration;
     }
@@ -94,10 +90,6 @@
         this.writer = null;
     }
 
-    public Lock getLock() {
-        return lock;
-    }
-
     public boolean isShutDown() {
         return shutDown;
     }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpSourceConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpSourceConnection.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpSourceConnection.java	(revision 1506662)
@@ -20,11 +20,11 @@
 package org.apache.synapse.transport.passthru.logging;
 
 import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOSession;
 import org.apache.http.nio.reactor.SessionOutputBuffer;
 import org.apache.http.nio.reactor.SessionInputBuffer;
 import org.apache.http.nio.util.ByteBufferAllocator;
-import org.apache.http.nio.NHttpServiceHandler;
 import org.apache.http.nio.NHttpMessageWriter;
 import org.apache.http.nio.NHttpMessageParser;
 import org.apache.http.*;
@@ -40,7 +40,7 @@
 
     public LoggingNHttpSourceConnection(
             final Log log,
-            final Log headerlog,
+            final Log headerLog,
             final IOSession session,
             final HttpRequestFactory requestFactory,
             final ByteBufferAllocator allocator,
@@ -47,7 +47,7 @@
             final HttpParams params) {
         super(session, requestFactory, allocator, params);
         this.log = log;
-        this.headerLog = headerlog;
+        this.headerLog = headerLog;
     }
 
     @Override
@@ -71,19 +71,19 @@
     }
 
     @Override
-    public void consumeInput(final NHttpServiceHandler handler) {
+    public void consumeInput(final NHttpServerEventHandler handler) {
         this.log.debug("Consume input");
         super.consumeInput(handler);
     }
 
     @Override
-    public void produceOutput(final NHttpServiceHandler handler) {
+    public void produceOutput(final NHttpServerEventHandler handler) {
         this.log.debug("Produce output");
         super.produceOutput(handler);
     }
 
     @Override
-    protected NHttpMessageWriter createResponseWriter(
+    protected NHttpMessageWriter<HttpResponse> createResponseWriter(
             final SessionOutputBuffer buffer,
             final HttpParams params) {
         return new LoggingNHttpMessageWriter(
@@ -91,7 +91,7 @@
     }
 
     @Override
-    protected NHttpMessageParser createRequestParser(
+    protected NHttpMessageParser<HttpRequest> createRequestParser(
             final SessionInputBuffer buffer,
             final HttpRequestFactory requestFactory,
             final HttpParams params) {
@@ -99,11 +99,11 @@
                 super.createRequestParser(buffer, requestFactory, params));
     }
 
-    class LoggingNHttpMessageWriter implements NHttpMessageWriter {
+    class LoggingNHttpMessageWriter implements NHttpMessageWriter<HttpResponse> {
 
-        private final NHttpMessageWriter writer;
+        private final NHttpMessageWriter<HttpResponse> writer;
 
-        public LoggingNHttpMessageWriter(final NHttpMessageWriter writer) {
+        public LoggingNHttpMessageWriter(final NHttpMessageWriter<HttpResponse> writer) {
             super();
             this.writer = writer;
         }
@@ -112,9 +112,8 @@
             this.writer.reset();
         }
 
-        public void write(final HttpMessage message) throws IOException, HttpException {
-            if (message != null && headerLog.isDebugEnabled()) {
-                HttpResponse response = (HttpResponse) message;
+        public void write(final HttpResponse response) throws IOException, HttpException {
+            if (response != null && headerLog.isDebugEnabled()) {
                 headerLog.debug("<< " + response.getStatusLine().toString());
                 Header[] headers = response.getAllHeaders();
                 for (Header header : headers) {
@@ -121,16 +120,16 @@
                     headerLog.debug("<< " + header.toString());
                 }
             }
-            this.writer.write(message);
+            this.writer.write(response);
         }
 
     }
 
-    class LoggingNHttpMessageParser implements NHttpMessageParser {
+    class LoggingNHttpMessageParser implements NHttpMessageParser<HttpRequest> {
 
-        private final NHttpMessageParser parser;
+        private final NHttpMessageParser<HttpRequest> parser;
 
-        public LoggingNHttpMessageParser(final NHttpMessageParser parser) {
+        public LoggingNHttpMessageParser(final NHttpMessageParser<HttpRequest> parser) {
             super();
             this.parser = parser;
         }
@@ -143,10 +142,9 @@
             return this.parser.fillBuffer(channel);
         }
 
-        public HttpMessage parse() throws IOException, HttpException {
-            HttpMessage message = this.parser.parse();
-            if (message != null && headerLog.isDebugEnabled()) {
-                HttpRequest request = (HttpRequest) message;
+        public HttpRequest parse() throws IOException, HttpException {
+            HttpRequest request = this.parser.parse();
+            if (request != null && headerLog.isDebugEnabled()) {
                 headerLog.debug(">> " + request.getRequestLine().toString());
                 Header[] headers = request.getAllHeaders();
                 for (Header header : headers) {
@@ -153,7 +151,7 @@
                     headerLog.debug(">> " + header.toString());
                 }
             }
-            return message;
+            return request;
         }
     }
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingSourceHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingSourceHandler.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingSourceHandler.java	(revision 1506662)
@@ -20,10 +20,7 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.http.nio.NHttpServiceHandler;
-import org.apache.http.nio.NHttpServerConnection;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.ContentDecoder;
+import org.apache.http.nio.*;
 import org.apache.http.ConnectionClosedException;
 import org.apache.http.HttpException;
 import org.apache.http.HttpRequest;
@@ -30,13 +27,13 @@
 
 import java.io.IOException;
 
-public class LoggingSourceHandler implements NHttpServiceHandler {
+public class LoggingSourceHandler implements NHttpServerEventHandler {
 
     private final Log log;
 
-    private final NHttpServiceHandler handler;
+    private final NHttpServerEventHandler handler;
 
-    public LoggingSourceHandler (final NHttpServiceHandler handler) {
+    public LoggingSourceHandler (final NHttpServerEventHandler handler) {
         super();
         if (handler == null) {
             throw new IllegalArgumentException("HTTP service handler may not be null");
@@ -45,7 +42,7 @@
         this.log = LogFactory.getLog(handler.getClass());
     }
 
-    public void connected(final NHttpServerConnection conn) {
+    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Connected");
         }
@@ -59,26 +56,35 @@
         this.handler.closed(conn);
     }
 
-    public void exception(final NHttpServerConnection conn, final IOException ex) {
+    public void endOfInput(NHttpServerConnection conn) throws IOException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Closed at the remote end");
+        }
+        this.handler.endOfInput(conn);
+    }
+
+    public void exception(NHttpServerConnection conn, Exception ex) {
+        if (ex.getMessage() == null) {
+            ex.printStackTrace();
+            return;
+        }
         if (ex instanceof ConnectionClosedException ||
                 ex.getMessage().contains("Connection reset by peer") ||
                 ex.getMessage().contains("forcibly closed")) {
             if (this.log.isDebugEnabled()) {
                 this.log.debug("HTTP connection " + conn + ": " + ex.getMessage() +
-                    " (Probably the keepalive connection was closed)");
+                        " (Probably the keep-alive connection was closed)");
             }
+        } else if (ex instanceof HttpException) {
+            this.log.error("HTTP Error occurred on connection " + conn + ": " + ex.getMessage(), ex);
+            this.handler.exception(conn, ex);
         } else {
-            this.log.error("IO Error occured on HTTP connection " + conn + ": " + ex.getMessage(), ex);
+            this.log.error("IO Error occurred on HTTP connection " + conn + ": " + ex.getMessage(), ex);
         }
         this.handler.exception(conn, ex);
     }
 
-    public void exception(final NHttpServerConnection conn, final HttpException ex) {
-        this.log.error("HTTP Error occured on connection " + conn + ": " + ex.getMessage(), ex);
-        this.handler.exception(conn, ex);
-    }
-
-    public void requestReceived(final NHttpServerConnection conn) {
+    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {
         HttpRequest request = conn.getHttpRequest();
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP InRequest Received on connection " + conn + ": "
@@ -87,7 +93,7 @@
         this.handler.requestReceived(conn);
     }
 
-    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) {
+    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Output ready");
         }
@@ -97,7 +103,7 @@
         }
     }
 
-    public void responseReady(final NHttpServerConnection conn) {
+    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Response ready");
         }
@@ -104,7 +110,7 @@
         this.handler.responseReady(conn);
     }
 
-    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) {
+    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Input ready");
         }
@@ -114,7 +120,7 @@
         }
     }
 
-    public void timeout(final NHttpServerConnection conn) {
+    public void timeout(final NHttpServerConnection conn) throws IOException {
         if (this.log.isDebugEnabled()) {
             this.log.debug("HTTP connection " + conn + ": Timeout");
         }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpTargetConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpTargetConnection.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpTargetConnection.java	(revision 1506662)
@@ -20,11 +20,11 @@
 package org.apache.synapse.transport.passthru.logging;
 
 import org.apache.commons.logging.Log;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.reactor.IOSession;
 import org.apache.http.nio.reactor.SessionOutputBuffer;
 import org.apache.http.nio.reactor.SessionInputBuffer;
 import org.apache.http.nio.util.ByteBufferAllocator;
-import org.apache.http.nio.NHttpClientHandler;
 import org.apache.http.nio.NHttpMessageWriter;
 import org.apache.http.nio.NHttpMessageParser;
 import org.apache.http.*;
@@ -35,12 +35,13 @@
 import java.nio.channels.ReadableByteChannel;
 
 public class LoggingNHttpTargetConnection extends DefaultNHttpClientConnection {
+
     private final Log log;
     private final Log headerLog;
 
     public LoggingNHttpTargetConnection(
             final Log log,
-            final Log headerlog,
+            final Log headerLog,
             final IOSession iosession,
             final HttpResponseFactory responseFactory,
             final ByteBufferAllocator allocator,
@@ -47,7 +48,7 @@
             final HttpParams params) {
         super(iosession, responseFactory, allocator, params);
         this.log = log;
-        this.headerLog = headerlog;
+        this.headerLog = headerLog;
     }
 
     @Override
@@ -71,19 +72,19 @@
     }
 
     @Override
-    public void consumeInput(final NHttpClientHandler handler) {
+    public void consumeInput(final NHttpClientEventHandler handler) {
         this.log.debug("Consume input");
         super.consumeInput(handler);
     }
 
     @Override
-    public void produceOutput(final NHttpClientHandler handler) {
+    public void produceOutput(final NHttpClientEventHandler handler) {
         this.log.debug("Produce output");
         super.produceOutput(handler);
     }
 
     @Override
-    protected NHttpMessageWriter createRequestWriter(
+    protected NHttpMessageWriter<HttpRequest> createRequestWriter(
             final SessionOutputBuffer buffer,
             final HttpParams params) {
         return new LoggingNHttpMessageWriter(
@@ -91,7 +92,7 @@
     }
 
     @Override
-    protected NHttpMessageParser createResponseParser(
+    protected NHttpMessageParser<HttpResponse> createResponseParser(
             final SessionInputBuffer buffer,
             final HttpResponseFactory responseFactory,
             final HttpParams params) {
@@ -99,11 +100,11 @@
                 super.createResponseParser(buffer, responseFactory, params));
     }
 
-    class LoggingNHttpMessageWriter implements NHttpMessageWriter {
+    class LoggingNHttpMessageWriter implements NHttpMessageWriter<HttpRequest> {
 
-        private final NHttpMessageWriter writer;
+        private final NHttpMessageWriter<HttpRequest> writer;
 
-        public LoggingNHttpMessageWriter(final NHttpMessageWriter writer) {
+        public LoggingNHttpMessageWriter(final NHttpMessageWriter<HttpRequest> writer) {
             super();
             this.writer = writer;
         }
@@ -112,9 +113,8 @@
             this.writer.reset();
         }
 
-        public void write(final HttpMessage message) throws IOException, HttpException {
-            if (message != null && headerLog.isDebugEnabled()) {
-                HttpRequest request = (HttpRequest) message;
+        public void write(final HttpRequest request) throws IOException, HttpException {
+            if (request != null && headerLog.isDebugEnabled()) {
                 headerLog.debug(">> " + request.getRequestLine().toString());
                 Header[] headers = request.getAllHeaders();
                 for (Header header : headers) {
@@ -121,16 +121,16 @@
                     headerLog.debug(">> " + header.toString());
                 }
             }
-            this.writer.write(message);
+            this.writer.write(request);
         }
 
     }
 
-    class LoggingNHttpMessageParser implements NHttpMessageParser {
+    class LoggingNHttpMessageParser implements NHttpMessageParser<HttpResponse> {
 
-        private final NHttpMessageParser parser;
+        private final NHttpMessageParser<HttpResponse> parser;
 
-        public LoggingNHttpMessageParser(final NHttpMessageParser parser) {
+        public LoggingNHttpMessageParser(final NHttpMessageParser<HttpResponse> parser) {
             super();
             this.parser = parser;
         }
@@ -143,10 +143,9 @@
             return this.parser.fillBuffer(channel);
         }
 
-        public HttpMessage parse() throws IOException, HttpException {
-            HttpMessage message = this.parser.parse();
-            if (message != null && headerLog.isDebugEnabled()) {
-                HttpResponse response = (HttpResponse) message;
+        public HttpResponse parse() throws IOException, HttpException {
+            HttpResponse response = this.parser.parse();
+            if (response != null && headerLog.isDebugEnabled()) {
                 headerLog.debug("<< " + response.getStatusLine().toString());
                 Header[] headers = response.getAllHeaders();
                 for (Header header : headers) {
@@ -153,7 +152,7 @@
                     headerLog.debug("<< " + header.toString());
                 }
             }
-            return message;
+            return response;
         }
 
     }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java	(revision 1506662)
@@ -38,12 +38,12 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.http.impl.nio.reactor.DefaultListeningIOReactor;
-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOEventDispatch;
 import org.apache.http.nio.reactor.IOReactorException;
 import org.apache.http.nio.reactor.IOReactorExceptionHandler;
 import org.apache.http.nio.reactor.ListenerEndpoint;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.http.params.HttpParams;
 import org.apache.synapse.transport.passthru.config.SourceConfiguration;
 import org.apache.synapse.transport.passthru.jmx.MBeanRegistrar;
@@ -73,9 +73,9 @@
 
     /** SSLContext if this listener is a SSL listener */
     private SSLContext sslContext = null;
-    
+
     /** The SSL session handler that manages client authentication etc */
-    private SSLIOSessionHandler sslIOSessionHandler = null;
+    private SSLSetupHandler sslSetupHandler = null;
 
     /** The custom URI map for the services if there are any */
     private Map<String, String> serviceNameToEPRMap = new HashMap<String, String>();
@@ -91,8 +91,10 @@
     public void init(ConfigurationContext cfgCtx, TransportInDescription transportInDescription)
             throws AxisFault {
 
-        log.info("Initializing Pass-through HTTP/S Listener...");
-        
+        if (log.isDebugEnabled()) {
+            log.debug("Initializing pass-through HTTP/S Listener...");
+        }
+
         int portOffset = Integer.parseInt(System.getProperty("portOffset", "0"));
         Parameter portParam = transportInDescription.getParameter("port");
         int port = Integer.parseInt(portParam.getValue().toString());
@@ -108,7 +110,7 @@
 
         // is this a SSL listener?
         sslContext = getSSLContext(transportInDescription);
-        sslIOSessionHandler = getSSLIOSessionHandler(transportInDescription);
+        sslSetupHandler = getSSLSetupHandler(transportInDescription);
 
         namePrefix = (sslContext == null) ? "HTTP" : "HTTPS";
 
@@ -133,28 +135,25 @@
     }
 
     public void start() throws AxisFault {
-        log.info("Starting Pass-through " + namePrefix + " Listener...");
+        log.info("Starting pass-through " + namePrefix + " listener...");
 
         try {
             String prefix = namePrefix + "-Listener I/O dispatcher";
             ioReactor = new DefaultListeningIOReactor(
-                            sourceConfiguration.getIOThreadsPerReactor(),
-                            new NativeThreadFactory(new ThreadGroup(prefix + " thread group"), prefix),
-                            sourceConfiguration.getHttpParameters());
+                            sourceConfiguration.getReactorConfig(),
+                            new NativeThreadFactory(new ThreadGroup(prefix + " thread group"), prefix));
             
             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {
 
                 public boolean handle(IOException ioException) {
                     log.warn("System may be unstable: " + namePrefix +
-                            " ListeningIOReactor encountered a checked exception : " +
-                            ioException.getMessage(), ioException);
+                            " ListeningIOReactor encountered a checked exception." , ioException);
                     return true;
                 }
 
                 public boolean handle(RuntimeException runtimeException) {
                     log.warn("System may be unstable: " + namePrefix +
-                            " ListeningIOReactor encountered a runtime exception : "
-                            + runtimeException.getMessage(), runtimeException);
+                            " ListeningIOReactor encountered a runtime exception.", runtimeException);
                     return true;
                 }
             });
@@ -164,15 +163,14 @@
         }
 
         SourceHandler handler = new SourceHandler(sourceConfiguration);
-
         final IOEventDispatch ioEventDispatch = getEventDispatch(handler, sslContext,
-                                      sslIOSessionHandler, sourceConfiguration.getHttpParameters());
+                sslSetupHandler, sourceConfiguration.getHttpParameters());
 
-        ListenerEndpoint endpoint = ioReactor.listen(
-                                      new InetSocketAddress(sourceConfiguration.getPort()));
-        
-        if(sourceConfiguration.getHttpGetRequestProcessor() != null){
-           sourceConfiguration.getHttpGetRequestProcessor().init(sourceConfiguration.getConfigurationContext(), handler);
+        ListenerEndpoint endpoint = ioReactor.listen(new InetSocketAddress(
+                sourceConfiguration.getPort()));
+        HttpGetRequestProcessor getProcessor = sourceConfiguration.getHttpGetRequestProcessor();
+        if (getProcessor != null){
+           getProcessor.init(sourceConfiguration.getConfigurationContext(), handler);
         }
 
         Thread t = new Thread(new Runnable() {
@@ -180,10 +178,10 @@
                 try {
                     ioReactor.execute(ioEventDispatch);
                 } catch (Exception e) {
-                    log.fatal("Exception encountered in the " + namePrefix + " Listener. " +
-                            "No more connections will be accepted by this transport", e);
+                    log.fatal("Exception encountered in the " + namePrefix + " listener. " +
+                            "No more connections will be accepted by this transport.", e);
                 }
-                log.info(namePrefix + " Listener shutdown.");
+                log.info(namePrefix + " listener shutdown.");
             }
         }, "PassThrough" + namePrefix + "Listener");
         t.start();
@@ -191,11 +189,11 @@
         try {
             endpoint.waitFor();
         } catch (InterruptedException e) {
-            log.warn("PassThroughHttpListener start event was interrupted", e);
+            log.warn("Pass-through " + namePrefix + " listener startup was interrupted", e);
         }
 
         state = BaseConstants.STARTED;
-        log.info("Pass-through " + namePrefix + " Listener " + "started on port : " +
+        log.info("Pass-through " + namePrefix + " listener " + "started on port: " +
                 sourceConfiguration.getPort());
     }
 
@@ -241,9 +239,8 @@
         return null;
     }
 
-
     public void stop() throws AxisFault {
-        log.info("Stopping Pass-through " + namePrefix + " Listener..");
+        log.info("Stopping pass-through " + namePrefix + " listener..");
         try {
             ioReactor.shutdown();
         } catch (IOException e) {
@@ -252,7 +249,7 @@
     }
 
     public void destroy() {
-        log.info("Destroying PassThroughHttpListener");
+        log.info("Destroying pass-through " + namePrefix + " listener");
         sourceConfiguration.getConfigurationContext().
                 getAxisConfiguration().getObserversList().remove(axisObserver);
 
@@ -377,8 +374,8 @@
     }
 
     protected IOEventDispatch getEventDispatch(
-            NHttpServiceHandler handler, SSLContext sslContext,
-            SSLIOSessionHandler sslioSessionHandler, HttpParams params) {
+            NHttpServerEventHandler handler, SSLContext sslContext,
+            SSLSetupHandler sslSetupHandler, HttpParams params) {
         return new SourceIOEventDispatch(handler, params);
     }
 
@@ -395,12 +392,13 @@
 
     /**
      * Create the SSL IO Session handler to be used by this listener
-     * @param transportIn transport in description
+     *
+     * @param transportOut Transport out description
      * @return always null
-     * @throws AxisFault never thrown
+     * @throws AxisFault on error
      */
-    protected SSLIOSessionHandler getSSLIOSessionHandler(
-            TransportInDescription transportIn) throws AxisFault {
+    protected SSLSetupHandler getSSLSetupHandler(TransportInDescription transportOut)
+            throws AxisFault {
         return null;
     }
 
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java	(revision 1506662)
@@ -32,11 +32,7 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.impl.nio.DefaultNHttpClientConnection;
-import org.apache.http.nio.ContentDecoder;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.NHttpClientConnection;
-import org.apache.http.nio.NHttpClientHandler;
-import org.apache.http.nio.NHttpServerConnection;
+import org.apache.http.nio.*;
 import org.apache.synapse.transport.nhttp.NhttpConstants;
 import org.apache.synapse.transport.passthru.config.TargetConfiguration;
 import org.apache.synapse.transport.passthru.connections.HostConnections;
@@ -45,7 +41,7 @@
 /**
  * This class is handling events from the transport -- > client.
  */
-public class TargetHandler implements NHttpClientHandler {
+public class TargetHandler implements NHttpClientEventHandler {
 
     private static final Log log = LogFactory.getLog(TargetHandler.class);
 
@@ -453,6 +449,31 @@
         targetConfiguration.getConnections().shutdownConnection(conn);
     }
 
+    public void endOfInput(NHttpClientConnection conn) throws IOException {
+        closed(conn);
+    }
+
+    public void exception(NHttpClientConnection conn, Exception e) {
+        if (e instanceof HttpException) {
+            exception(conn, (HttpException) e);
+        } else if (e instanceof IOException) {
+            exception(conn, (IOException) e);
+        } else {
+            ProtocolState state = TargetContext.getState(conn);
+            MessageContext requestMsgCtx = TargetContext.get(conn).getRequestMsgCtx();
+            if (requestMsgCtx != null) {
+                targetErrorHandler.handleError(requestMsgCtx,
+                        ErrorCodes.SND_IO_ERROR,
+                        "Error in Sender",
+                        e,
+                        state);
+            }
+
+            TargetContext.updateState(conn, ProtocolState.CLOSING);
+            targetConfiguration.getConnections().shutdownConnection(conn);
+        }
+    }
+
     private boolean isResponseHaveBodyExpected(
             final String method, final HttpResponse response) {
 
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLSourceIOEventDispatch.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLSourceIOEventDispatch.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLSourceIOEventDispatch.java	(revision 1506662)
@@ -18,35 +18,45 @@
  */
 package org.apache.synapse.transport.passthru;
 
-import org.apache.http.impl.nio.reactor.SSLSetupHandler;
-import org.apache.http.impl.nio.ssl.SSLServerIOEventDispatch;
-import org.apache.http.nio.NHttpServerIOTarget;
-import org.apache.http.nio.NHttpServiceHandler;
+import org.apache.http.HttpRequestFactory;
+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.impl.nio.SSLNHttpServerConnectionFactory;
+import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+import org.apache.http.nio.util.ByteBufferAllocator;
 import org.apache.http.params.HttpParams;
 import org.apache.synapse.transport.passthru.logging.LoggingUtils;
 
 import javax.net.ssl.SSLContext;
 
-public class SSLSourceIOEventDispatch extends SSLServerIOEventDispatch {
+public class SSLSourceIOEventDispatch extends DefaultHttpServerIODispatch {
 
-    private HttpParams params = null;
-
-    public SSLSourceIOEventDispatch(NHttpServiceHandler handler,
+    public SSLSourceIOEventDispatch(NHttpServerEventHandler handler,
                                     SSLContext sslcontext,
                                     SSLSetupHandler sslHandler,
                                     HttpParams params) {
-        super(handler, sslcontext, sslHandler, params);
-        this.params = params;
+        super(handler, new SSLSourceConnectionFactory(sslcontext, sslHandler, params));
     }
 
-    @Override
-    protected NHttpServerIOTarget createConnection(IOSession session) {
-        session = LoggingUtils.decorate(session, "sslserver");
-        return LoggingUtils.createServerConnection(
-                session,
-                createHttpRequestFactory(),
-                createByteBufferAllocator(),
-                this.params);
+    private static class SSLSourceConnectionFactory extends SSLNHttpServerConnectionFactory {
+
+        public SSLSourceConnectionFactory(SSLContext sslcontext, SSLSetupHandler sslHandler, HttpParams params) {
+            super(sslcontext, sslHandler, params);
+        }
+
+        @Override
+        protected DefaultNHttpServerConnection createConnection(IOSession session,
+                                                                HttpRequestFactory requestFactory,
+                                                                ByteBufferAllocator allocator,
+                                                                HttpParams params) {
+            session = LoggingUtils.decorate(session, "sslserver");
+            return LoggingUtils.createServerConnection(
+                    session,
+                    requestFactory,
+                    allocator,
+                    params);
+        }
     }
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java	(revision 1506661)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java	(revision 1506662)
@@ -43,12 +43,12 @@
 import org.apache.http.HttpException;
 import org.apache.http.HttpStatus;
 import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;
-import org.apache.http.impl.nio.reactor.SSLSetupHandler;
-import org.apache.http.nio.NHttpClientHandler;
+import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.NHttpServerConnection;
 import org.apache.http.nio.reactor.IOEventDispatch;
 import org.apache.http.nio.reactor.IOReactorException;
 import org.apache.http.nio.reactor.IOReactorExceptionHandler;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.http.params.HttpParams;
 import org.apache.synapse.transport.nhttp.NhttpConstants;
 import org.apache.synapse.transport.nhttp.util.MessageFormatterDecoratorFactory;
@@ -114,8 +114,11 @@
 
     public void init(ConfigurationContext configurationContext,
                      TransportOutDescription transportOutDescription) throws AxisFault {
-        log.info("Initializing Pass-through HTTP/S Sender...");
 
+        if (log.isDebugEnabled()) {
+            log.debug("Initializing Pass-through HTTP/S Sender...");
+        }
+
         // is this an SSL Sender?
         SSLContext sslContext = getSSLContext(transportOutDescription);
         SSLSetupHandler sslSetupHandler = getSSLSetupHandler(transportOutDescription);
@@ -175,9 +178,8 @@
             String prefix = namePrefix + "-Sender I/O dispatcher";
 
             ioReactor = new DefaultConnectingIOReactor(
-                            targetConfiguration.getIOThreadsPerReactor(),
-                            new NativeThreadFactory(new ThreadGroup(prefix + " Thread Group"), prefix),
-                            targetConfiguration.getHttpParameters());
+                            targetConfiguration.getReactorConfig(),
+                            new NativeThreadFactory(new ThreadGroup(prefix + " Thread Group"), prefix));
 
             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {
 
@@ -231,7 +233,7 @@
 
         state = BaseConstants.STARTED;
 
-        log.info("Pass-through " + namePrefix + " Sender started...");
+        log.info("Pass-through " + namePrefix + " sender started...");
     }
 
     public void cleanup(org.apache.axis2.context.MessageContext messageContext) throws AxisFault {
@@ -247,7 +249,7 @@
     }
 
 
-    public InvocationResponse invoke(org.apache.axis2.context.MessageContext msgContext) throws AxisFault {
+    public InvocationResponse invoke(MessageContext msgContext) throws AxisFault {
         // remove unwanted HTTP headers (if any from the current message)
         PassThroughTransportUtils.removeUnwantedHeaders(msgContext,
                 targetConfiguration.isPreserveServerHeader(),
@@ -266,7 +268,8 @@
                     Pipe pipe = new Pipe(targetConfiguration.getBufferFactory().getBuffer(),
                             "Test", targetConfiguration);
                     msgContext.setProperty(PassThroughConstants.PASS_THROUGH_PIPE, pipe);
-                    msgContext.setProperty(PassThroughConstants.MESSAGE_BUILDER_INVOKED, Boolean.TRUE);
+                    msgContext.setProperty(PassThroughConstants.MESSAGE_BUILDER_INVOKED,
+                            Boolean.TRUE);
                 }
                 try {
                     URL url = new URL(epr.getAddress());
@@ -367,7 +370,7 @@
 					try {
 						msgContext.wait();
 					} catch (InterruptedException e) {
-						e.printStackTrace();
+						log.warn("Interrupted while waiting for message serialization to complete", e);
 					}
 				}
 			}
@@ -378,39 +381,46 @@
 
 			OutputStream out = (OutputStream) msgContext.getProperty("GET_ME_OUT");
 			if (out != null) {
-				String disableChunking = (String) msgContext.getProperty(PassThroughConstants.DISABLE_CHUNKING);
-				String forceHttp10 = (String) msgContext.getProperty(PassThroughConstants.FORCE_HTTP_1_0);
+				String disableChunking = (String) msgContext.getProperty(
+                        PassThroughConstants.DISABLE_CHUNKING);
+				String forceHttp10 = (String) msgContext.getProperty(
+                        PassThroughConstants.FORCE_HTTP_1_0);
 				Pipe pipe = (Pipe) msgContext.getProperty(PassThroughConstants.PASS_THROUGH_PIPE);
 				
 				if("true".equals(disableChunking) || "true".equals(forceHttp10) ){
 					ByteArrayOutputStream _out = new ByteArrayOutputStream();
-					MessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(msgContext);
+					MessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(
+                            msgContext);
 					OMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(msgContext);
 					formatter.writeTo(msgContext, format, _out, false);
 					try {
                         long messageSize = setStreamAsTempData(formatter,msgContext,format);
-                        msgContext.setProperty(PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH,messageSize);
+                        msgContext.setProperty(
+                                PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH, messageSize);
                         formatter.writeTo(msgContext, format, out, false);
                     } catch (IOException e) {
                     	 handleException("IO error while building message", e);
                     }
                 	pipe.setSerializationComplete(true);
-				}else {
+				} else {
 					
 					if ((disableChunking == null || !"true".equals(disableChunking)) ||
 					    (forceHttp10 == null || !"true".equals(forceHttp10))) {
-						MessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(msgContext);
-						OMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(msgContext);
+						MessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(
+                                msgContext);
+						OMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(
+                                msgContext);
 						formatter.writeTo(msgContext, format, out, false);
 					}
 					
-					if ((msgContext.getProperty(PassThroughConstants.REST_GET_DELETE_INVOKE) != null &&
-						    (Boolean) msgContext.getProperty(PassThroughConstants.REST_GET_DELETE_INVOKE))) {
+					if ((msgContext.getProperty(
+                            PassThroughConstants.REST_GET_DELETE_INVOKE) != null &&
+						    (Boolean) msgContext.getProperty(
+                                    PassThroughConstants.REST_GET_DELETE_INVOKE))) {
 							pipe.setSerializationCompleteWithoutData(true);
-					}else{
+					} else {
 						pipe.setSerializationComplete(true);
 					}
-			
 				}
 			}
 		}
@@ -428,10 +438,11 @@
      * @return an IOEventDispatch instance
      * @throws AxisFault on error
      */
-    protected IOEventDispatch getEventDispatch(NHttpClientHandler handler,
+    protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler,
                                                SSLContext sslContext,
                                                SSLSetupHandler sslIOSessionHandler,
-                                               HttpParams params, TransportOutDescription trpOut) throws AxisFault {
+                                               HttpParams params,
+                                               TransportOutDescription trpOut) throws AxisFault {
 
         return new TargetIOEventDispatch(handler, params);
     }
@@ -467,7 +478,8 @@
         NHttpServerConnection conn = (NHttpServerConnection) msgContext.getProperty(
                 PassThroughConstants.PASS_THROUGH_SOURCE_CONNECTION);
         if (conn == null) {
-            ServerWorker serverWorker = (ServerWorker) msgContext.getProperty(Constants.OUT_TRANSPORT_INFO);
+            ServerWorker serverWorker = (ServerWorker) msgContext.getProperty(
+                    Constants.OUT_TRANSPORT_INFO);
             if (serverWorker != null) {
                 MessageContext requestContext = serverWorker.getRequestContext();
                 conn = (NHttpServerConnection) requestContext.getProperty(
@@ -520,7 +532,8 @@
                 if (msgContext.isPropertyTrue(NhttpConstants.SC_ACCEPTED)) {
                     out.write(new byte[0]);
                 } else {
-                    MessageFormatter formatter = MessageProcessorSelector.getMessageFormatter(msgContext);
+                    MessageFormatter formatter = MessageProcessorSelector.getMessageFormatter(
+                            msgContext);
                     OMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(msgContext);
                     formatter.writeTo(msgContext, format, out, false);
                 }
@@ -532,11 +545,11 @@
             // nothing much to do as we have started the response already
             if (errorCode != null) {
                 if (log.isDebugEnabled()) {
-                    log.warn("A Source connection is closed because of an " +
+                    log.warn("A source connection is closed because of an " +
                             "error in target: " + conn);
                 }
             } else {
-                log.debug("A Source Connection is closed, because source handler " +
+                log.debug("A source connection is closed, because source handler " +
                         "is already in the process of writing a response while " +
                         "another response is submitted: " + conn);
             }
@@ -570,7 +583,7 @@
             state = BaseConstants.STOPPED;
             log.info("Sender shutdown in : " + (System.currentTimeMillis() - start) / 1000 + "s");
         } catch (IOException e) {
-            handleException("Error shutting down the IOReactor for maintenence", e);
+            handleException("Error shutting down the IOReactor for maintenance", e);
         }
     }
 
@@ -608,9 +621,9 @@
         return false;
     }
 
-    private void handleException(String s, Exception e) throws AxisFault {
-        log.error(s, e);
-        throw new AxisFault(s, e);
+    private void handleException(String msg, Exception e) throws AxisFault {
+        log.error(msg, e);
+        throw new AxisFault(msg, e);
     }
 
     private void handleException(String msg) throws AxisFault {
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java	(revision 1506661)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java	(revision 1506662)
@@ -16,6 +16,7 @@
  *  specific language governing permissions and limitations
  *  under the License.
  */
+
 package org.apache.synapse.samples.framework.clients;
 
 import org.apache.axiom.om.*;
@@ -73,7 +74,9 @@
     private void init(String addUrl, String trpUrl, String prxUrl,
                       String policyKey, long timeout) throws Exception {
 
-        log.info("Initializing sample Axis2 client");
+        if (log.isDebugEnabled()) {
+            log.debug("Initializing sample Axis2 client");
+        }
 
         configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(
                     clientConfig.getClientRepo(), clientConfig.getAxis2Xml());
@@ -118,8 +121,11 @@
 
     private void terminate() {
         if (serviceClient != null) {
+            if (log.isDebugEnabled()) {
+                log.debug("cleaning up client");
+            }
             try {
-                log.info("cleaning up client");
+                serviceClient.cleanupTransport();
                 serviceClient.cleanup();
                 configContext.terminate();
             } catch (AxisFault axisFault) {
@@ -155,8 +161,9 @@
         } catch (Exception e) {
             log.error("Error invoking service", e);
             clientResult.setException(e);
+        } finally {
+            terminate();
         }
-        terminate();
         return clientResult;
     }
 
@@ -187,8 +194,9 @@
         } catch (Exception e) {
             log.error("Error invoking service", e);
             clientResult.setException(e);
+        } finally {
+            terminate();
         }
-        terminate();
         return clientResult;
     }
 
@@ -208,8 +216,9 @@
         } catch (Exception e) {
             log.error("Error invoking service", e);
             clientResult.setException(e);
+        } finally {
+            terminate();
         }
-        terminate();
         return clientResult;
     }
 
@@ -232,8 +241,9 @@
         } catch (Exception e) {
             log.error("Error invoking service", e);
             clientResult.setException(e);
+        } finally {
+            terminate();
         }
-        terminate();
         return clientResult;
     }
 
@@ -254,8 +264,9 @@
         } catch (Exception e) {
             log.error("Error invoking service", e);
             clientResult.setException(e);
+        } finally {
+            terminate();
         }
-        terminate();
         return clientResult;
     }
 
@@ -286,8 +297,9 @@
         } catch (Exception e) {
             log.error("Error invoking service", e);
             clientResult.setException(e);
+        } finally {
+            terminate();
         }
-        terminate();
         return clientResult;
     }
 
@@ -356,8 +368,9 @@
         } catch (Exception e) {
             log.error("Error invoking service", e);
             clientResult.setException(e);
+        } finally {
+            terminate();
         }
-        terminate();
         return clientResult;
     }
 
Index: java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml	(revision 1506661)
+++ java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml	(revision 1506662)
@@ -165,21 +165,21 @@
     <!-- Transport Ins -->
     <!-- ================================================= -->
     <!-- the non blocking http transport based on HttpCore + NIO extensions -->
-    <transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
-    	<parameter name="port">8280</parameter>
-    	<parameter name="non-blocking">true</parameter>
+    <transportReceiver name="http" class="org.apache.synapse.transport.passthru.PassThroughHttpListener">
+        <parameter name="port">8280</parameter>
+        <parameter name="non-blocking">true</parameter>
+        <parameter name="httpGetProcessor" locked="false">org.apache.synapse.transport.passthru.api.PassThroughNHttpGetProcessor</parameter>
         <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
         <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
-        <!-- paramter name="priorityConfigFile" locked="false">location of priority configuration file<parameter-->
     </transportReceiver>
 
-    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
-    <!--transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
-    	<parameter name="port" locked="false">8243</parameter>
+    <transportReceiver name="https" class="org.apache.synapse.transport.passthru.PassThroughHttpSSLListener">
+        <parameter name="port" locked="false">8243</parameter>
         <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="httpGetProcessor" locked="false">org.apache.synapse.transport.passthru.api.PassThroughNHttpGetProcessor</parameter>
         <parameter name="keystore" locked="false">
             <KeyStore>
-                <Location>lib/identity.jks</Location>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
                 <Type>JKS</Type>
                 <Password>password</Password>
                 <KeyPassword>password</KeyPassword>
@@ -187,12 +187,14 @@
         </parameter>
         <parameter name="truststore" locked="false">
             <TrustStore>
-                <Location>lib/trust.jks</Location>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
                 <Type>JKS</Type>
                 <Password>password</Password>
             </TrustStore>
         </parameter>
-    </transportReceiver-->
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportReceiver>
 
     <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)-->
     <transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
@@ -242,7 +244,7 @@
     <!-- Transport Outs -->
     <!-- ================================================= -->
 
-    <transportSender name="http"  class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+    <transportSender name="http"  class="org.apache.synapse.transport.passthru.PassThroughHttpSender">
         <parameter name="non-blocking" locked="false">true</parameter>
         <parameter name="warnOnHTTP500" locked="false">*</parameter>
         <!--parameter name="http.proxyHost" locked="false">localhost</parameter>
@@ -249,12 +251,13 @@
         <parameter name="http.proxyPort" locked="false">3128</parameter>
         <parameter name="http.nonProxyHosts" locked="false">localhost|moon|sun</parameter-->
     </transportSender>
-    <!--transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+
+    <transportSender name="https" class="org.apache.synapse.transport.passthru.PassThroughHttpSSLSender">
         <parameter name="non-blocking" locked="false">true</parameter>
         <parameter name="warnOnHTTP500" locked="false">*</parameter>
         <parameter name="keystore" locked="false">
             <KeyStore>
-                <Location>lib/identity.jks</Location>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
                 <Type>JKS</Type>
                 <Password>password</Password>
                 <KeyPassword>password</KeyPassword>
@@ -262,12 +265,14 @@
         </parameter>
         <parameter name="truststore" locked="false">
             <TrustStore>
-                <Location>lib/trust.jks</Location>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
                 <Type>JKS</Type>
                 <Password>password</Password>
             </TrustStore>
         </parameter>
-    </transportSender-->
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportSender>
    
     <!-- Uncomment Transport sender for the non blocking local transport-->
     <!--transportSender name="local" class="org.apache.axis2.transport.local.NonBlockingLocalTransportSender"/-->
Index: java/modules/integration/src/test/resources/passthru-http.properties
===================================================================
--- java/modules/integration/src/test/resources/passthru-http.properties	(nonexistent)
+++ java/modules/integration/src/test/resources/passthru-http.properties	(revision 1506662)
@@ -0,0 +1,8 @@
+http.socket.timeout=60000
+http.connection.timeout=0
+http.socket.buffer-size=8096
+http.tcp.nodelay=true
+http.nio.interest-ops-queueing=false
+
+# This property is crucial for automated tests
+http.socket.reuseaddr=true
\ No newline at end of file
Index: java/modules/integration/src/test/resources/nhttp.properties
===================================================================
--- java/modules/integration/src/test/resources/nhttp.properties	(nonexistent)
+++ java/modules/integration/src/test/resources/nhttp.properties	(revision 1506662)
@@ -0,0 +1,8 @@
+http.socket.timeout=60000
+http.connection.timeout=0
+http.socket.buffer-size=8096
+http.tcp.nodelay=1
+http.nio.interest-ops-queueing=false
+
+# This property is crucial for automated tests
+http.socket.reuseaddr=true
\ No newline at end of file
-*-*-*-
Message: Migrating to HTTP Core 4.2.4.

* Changed the dependency version in pom.xml
* Migrated the pass through transport off deprecated APIs
* Migrated the NHTTP transport off deprecated APIs
* Added sample nhttp.properties and pass-through.properties to the integration test framework (enabled the SoReuseAddress=true in the test configurations as instructed by Oleg - Without this the integration tests throw a bind exception)
* Cleaned up and refactored the code in both transports


-*-*-*-
When: 2013-07-24 15:04:18 -0400 
-*-*-*-
Who: hiranya