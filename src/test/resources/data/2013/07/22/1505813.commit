Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java	(nonexistent)
@@ -1,33 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-package org.apache.synapse.samples.framework;
-
-/**
- * Specifies the operations associated with controlling
- * backend server - starting up and shutting down.
- */
-public interface BackEndServerController {
-
-    public String getServerName();
-
-    public boolean start();
-
-    public boolean stop();
-
-}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java	(nonexistent)
@@ -1,76 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.samples.framework;
-
-import org.apache.activemq.broker.BrokerService;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.synapse.samples.framework.config.JMSBrokerConfiguration;
-
-/**
- * Responsible for starting up and shutting down
- * a JMS broker instance in order to run a sample test.
- */
-public class JMSBrokerController implements BackEndServerController {
-
-    private static final Log log = LogFactory.getLog(JMSBrokerController.class);
-
-    private String serverName;
-    private JMSBrokerConfiguration configuration;
-    private BrokerService broker;
-
-    public JMSBrokerController(String serverName, JMSBrokerConfiguration configuration) {
-        this.serverName = serverName;
-        this.configuration = configuration;
-    }
-
-    public String getServerName() {
-        return serverName;
-    }
-
-    public boolean start() {
-        try {
-            log.info("JMSServerController: Preparing to start JMS Broker: " + serverName);
-            //using embedded jms broker
-            broker = new BrokerService();
-            // configure the broker
-            broker.setBrokerName("synapseSampleBroker");
-            broker.addConnector(configuration.getProviderURL());
-            broker.start();
-            log.info("JMSServerController: Broker is Successfully started. continuing tests");
-            return true;
-        } catch (Exception e) {
-            log.error("JMSServerController: There was an error starting JMS broker: " +
-                    serverName, e);
-            return false;
-        }
-    }
-
-    public boolean stop() {
-        try {
-            broker.stop();
-            return true;
-        } catch (Exception e) {
-            log.error("Error while shutting down the broker", e);
-            return false;
-        }
-    }
-
-}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java	(nonexistent)
@@ -1,80 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-package org.apache.synapse.samples.framework;
-
-/**
- * Sample configuration constants
- */
-public class SampleConfigConstants {
-
-    //xml tag names
-    public static final String TAG_SAMPLE_ID = "sampleID";
-    public static final String TAG_SAMPLE_NAME = "sampleName";
-
-    public static final String TAG_SYNAPSE_CONF = "synapseConfig";
-    public static final String TAG_SYNAPSE_CONF_AXIS2_REPO = "axis2Repo";
-    public static final String TAG_SYNAPSE_CONF_AXIS2_XML = "axis2Xml";
-    public static final String TAG_SYNAPSE_CONF_XML = "synapseXml";
-
-    public static final String TAG_BE_SERVER_CONF = "backEndServerConfig";
-    public static final String TAG_BE_SERVER_CONF_AXIS2_SERVER = "axis2Server";
-    public static final String TAG_BE_SERVER_CONF_JMS_BROKER = "jmsBroker";
-    public static final String TAG_BE_SERVER_CONF_DERBY_SERVER = "derbyServer";
-    public static final String TAG_BE_SERVER_CONF_QFIX_EXECUTOR = "fixExecutor";
-
-    public static final String TAG_BE_SERVER_CONF_AXIS2_REPO = "axis2Repo";
-    public static final String TAG_BE_SERVER_CONF_AXIS2_XML = "axis2Xml";
-    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT = "httpPort";
-    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT = "httpsPort";
-    public static final String TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED = "counterEnabled";
-
-    public static final String TAG_BE_SERVER_CONF_JMS_PROVIDER_URL = "providerURL";
-    public static final String TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY = "initialNamingFactory";
-
-    public static final String TAG_CLIENT_CONF = "clientConfig";
-    public static final String TAG_CLIENT_CONF_REPO = "clientRepo";
-    public static final String TAG_CLIENT_CONF_AXIS2_XML = "axis2Xml";
-    public static final String TAG_CLIENT_CONF_FILENAME = "fileName";
-
-    public static final String TAG_ENABLE_CLUSTERING = "enableClustering";
-
-    //default values
-    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_XML =
-            "modules/integration/target/test_repos/synapse/conf/axis2_def.xml";
-    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_REPO =
-            "modules/integration/target/test_repos/synapse";
-
-    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_XML =
-            "modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml";
-    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_REPO =
-            "modules/integration/target/test_repos/axis2Server";
-
-    public static final String DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL = "tcp://localhost:61616";
-    public static final String DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY =
-            "org.apache.activemq.jndi.ActiveMQInitialContextFactory";
-
-    public static final String DEFAULT_CLIENT_CONF_REPO =
-            "modules/integration/target/test_repos/axis2Client";
-    public static final String DEFAULT_CLIENT_CONF_FILENAME =
-            "./repository/samples/resources/asf-logo.gif";
-    public static final String DEFAULT_CLIENT_CONF_AXIS2_XML =
-            "modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml";
-
-
-}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample351.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample351.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample351.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample351 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample351() {
         super(351);
-        client = getStockQuoteClient();
     }
 
 
@@ -37,6 +35,7 @@
     public void testScriptMediationInLineJS() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Introduction to the script mediator using js scripts ");
         result = client.requestCustomQuote(addUrl, trpUrl, null, "IBM");
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample460.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample460.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample460.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample460 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample460() {
         super(460);
-        client = getStockQuoteClient();
     }
 
 
@@ -37,6 +35,7 @@
     public void testSpringBeanAsAMediator() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Spring Bean as a Mediator");
         result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample352.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample352.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample352.java	(revision 1505813)
@@ -26,18 +26,16 @@
 public class Sample352 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample352() {
         super(352);
-        client = getStockQuoteClient();
     }
 
 
-    public void testAccesingAPIUsingScripting() {
+    public void testAccessingAPIUsingScripting() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Accessing Synapse message context API methods using scripting language");
         result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample370.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample370.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample370.java	(revision 1505813)
@@ -26,17 +26,15 @@
 public class Sample370 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample370() {
         super(370);
-        client = getStockQuoteClient();
     }
 
 
     public void testThrottling() {
         String addUrl = "http://localhost:8280/";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Introduction to throttle mediator and concurrency throttling");
         result = client.requestStandardQuote(addUrl, null, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample362.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample362.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample362.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample362 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample362() {
         super(362);
-        client = getStockQuoteClient();
     }
 
 
@@ -37,7 +35,7 @@
     public void testDbLookupReport() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Action of dbreport and dblookup mediators together");
 
         result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample452.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample452.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample452.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample452 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample452() {
         super(452);
-        client = getStockQuoteClient();
     }
 
 
@@ -39,6 +37,7 @@
 
         String addUrl = "https://localhost/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
         result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM", null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
 
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample354.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample354.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample354.java	(revision 1505813)
@@ -26,16 +26,15 @@
 public class Sample354 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample354() {
         super(354);
-        client = getStockQuoteClient();
     }
 
     public void testScriptMediationWithInLineRuby() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Using In-lined Ruby scripts for mediation");
         result = client.requestCustomQuote(addUrl, trpUrl, null, "IBM");
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample371.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample371.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample371.java	(revision 1505813)
@@ -27,16 +27,15 @@
 public class Sample371 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample371() {
         super(371);
-        client = getStockQuoteClient();
     }
 
     public void testRestrictedThrottling() {
         String addUrl = "http://localhost:8280/";
         String expectedError = "Access Denied";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Restricting requests based on policies ");
         for (int i = 0; i < 4; i++) {
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample390.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample390.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample390.java	(revision 1505813)
@@ -26,17 +26,15 @@
 public class Sample390 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample390() {
         super(390);
-        client = getStockQuoteClient();
     }
 
 
     public void testXQuery() {
         String addUrl = "http://localhost:8280/services/StockQuoteProxy";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Introduction to the XQuery mediator");
         result = client.requestCustomQuote(addUrl, null, null, "IBM");
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample391.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample391.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample391.java	(revision 1505813)
@@ -26,16 +26,14 @@
 public class Sample391 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample391() {
         super(391);
-        client = getStockQuoteClient();
     }
 
     public void testExternalXQuery() {
         String addUrl = "http://localhost:8280/services/StockQuoteProxy";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: How to use the data from an external XML document with in XQuery ");
         result = client.requestStandardQuote(addUrl, null, null, "IBM",null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ActiveMQController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ActiveMQController.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ActiveMQController.java	(revision 1505813)
@@ -0,0 +1,73 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework;
+
+import org.apache.activemq.broker.BrokerService;
+import org.apache.axiom.om.OMElement;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.config.SampleConfigConstants;
+
+/**
+ * Responsible for starting up and shutting down
+ * a JMS broker instance in order to run a sample test.
+ */
+public class ActiveMQController extends AbstractBackEndServerController {
+
+    private static final Log log = LogFactory.getLog(ActiveMQController.class);
+
+    private String providerURL;
+
+    private BrokerService broker;
+
+    public ActiveMQController(OMElement element) {
+        super(element);
+        providerURL = SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_PROVIDER_URL,
+                SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL);
+    }
+
+    public boolean startProcess() {
+        try {
+            //using embedded jms broker
+            broker = new BrokerService();
+            // configure the broker
+            broker.setBrokerName("synapseSampleBroker");
+            broker.addConnector(providerURL);
+            broker.start();
+            log.info("JMSServerController: Broker is Successfully started. continuing tests");
+            return true;
+        } catch (Exception e) {
+            log.error("There was an error starting JMS broker: " + serverName, e);
+            return false;
+        }
+    }
+
+    public boolean stopProcess() {
+        try {
+            broker.stop();
+            return true;
+        } catch (Exception e) {
+            log.error("Error while shutting down the broker", e);
+            return false;
+        }
+    }
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java	(revision 1505813)
@@ -26,10 +26,10 @@
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.synapse.samples.framework.clients.EventSampleClient;
 import org.apache.synapse.samples.framework.clients.MTOMSwASampleClient;
 import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
-import org.apache.synapse.samples.framework.config.SampleConfiguration;
+import org.apache.synapse.samples.framework.config.Axis2ClientConfiguration;
+import org.apache.synapse.samples.framework.config.SampleConfigConstants;
 
 import javax.xml.namespace.QName;
 import java.io.File;
@@ -38,7 +38,6 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Properties;
 
 /**
  * This is the class from which all sample tests are derived. Loads and stores necessary
@@ -49,14 +48,12 @@
 
     protected final Log log = LogFactory.getLog(this.getClass());
 
-    private SampleConfiguration configuration;
-    private String sampleDescriptor;
     private int sampleId;
-    private ProcessController pc;
-    private ArrayList<BackEndServerController> backendServerControllers;
-    private OMElement sampleConfigElement;
+    private String sampleName;
 
-    private String currentLocation;
+    private SynapseProcessController synapseController;
+    private List<ProcessController> backendServerControllers;
+    private Axis2ClientConfiguration clientConfig;
 
     protected SynapseTestCase(int sampleId) {
         if (log.isDebugEnabled()) {
@@ -63,26 +60,56 @@
             log.debug("Creating SynapseTestCase for test " + sampleId);
         }
         this.sampleId = sampleId;
-        currentLocation = System.getProperty("user.dir") + File.separator;
-        sampleDescriptor = "/sample" + sampleId + ".xml";
-        configuration = new SampleConfiguration();
-        backendServerControllers = new ArrayList<BackEndServerController>();
         System.setProperty("java.io.tmpdir", FilenameUtils.normalize(
-                currentLocation + "modules/integration/target/temp"));
+                SynapseTestUtils.getCurrentDir() + "modules/integration/target/temp"));
+        loadConfiguration();
     }
 
+    private void loadConfiguration() {
+        // Parse the sample descriptor
+        OMElement sampleConfig = loadDescriptorInfoFile();
+        if (sampleConfig == null) {
+            fail("Failed to load the sample configuration for sample: " + sampleId);
+        }
+
+        // Verify sample ID
+        OMElement sampleIdElt = sampleConfig.getFirstChildWithName(
+                new QName(SampleConfigConstants.TAG_SAMPLE_ID));
+        if (sampleIdElt == null || sampleIdElt.getText() == null || "".equals(sampleIdElt.getText())) {
+            fail("Sample ID not specified in the descriptor");
+        } else if (this.sampleId != Integer.parseInt(sampleIdElt.getText())) {
+            fail("Sample ID in the descriptor does not match the current test case");
+        }
+
+        // Load sample name
+        OMElement sampleNameElt = sampleConfig.getFirstChildWithName(
+                new QName(SampleConfigConstants.TAG_SAMPLE_NAME));
+        if (sampleNameElt == null || sampleNameElt.getText() == null || "".equals(sampleNameElt.getText())) {
+            fail("Sample name not specified in the descriptor");
+        } else {
+            this.sampleName = sampleNameElt.getText();
+        }
+
+        // Load Synapse, backend server and client configurations
+        synapseController = initSynapseConfigInfo(sampleConfig);
+        backendServerControllers = initBackEndServersConfigInfo(sampleConfig);
+        if (backendServerControllers == null) {
+            fail("Failed to load backend server configurations for the sample " + sampleId);
+        }
+        clientConfig = initClientConfigInfo(sampleConfig);
+
+        if (synapseController.isClusteringEnabled()) {
+            assertTrue("Could not properly configure clustering", configureClustering());
+        }
+    }
+
     /**
      * Executed before this test case. That means, this will be executed before each test.
      * Loads all configuration info and starts the servers.
      */
     public void setUp() {
-        assertTrue("Could not load the global descriptor file for sample " + sampleId,
-                loadDescriptorInfoFile());
-        assertTrue("There are errors in global descriptor file for sample " + sampleId,
-                processDescriptorFile());
-
         // Print a short intro to the console, so the console output is more readable
-        String title = "Sample " + sampleId + ": " + configuration.getSampleName();
+        String title = "Sample " + sampleId + ": " + sampleName;
         String underline = "";
         for (int i = 0; i < title.length(); i++) {
             underline += "=";
@@ -90,25 +117,16 @@
         System.out.println("\n\n" + title);
         System.out.println(underline);
 
-        assertTrue("Could not load synapse configuration settings for the sample " + sampleId,
-                initSynapseConfigInfo());
-        assertTrue("Could not load axis2 configuration settings for the sample " + sampleId,
-                initBackEndServersConfigInfo());
-        assertTrue("Could not load client configuration settings for the sample " + sampleId,
-                initClientConfigInfo());
-
-        if (configuration.getSynapseServerConfig().isClusteringEnabled()) {
-            assertTrue("Could not properly configure clustering", configureClustering());
-        }
-
-        for (BackEndServerController bsc : backendServerControllers) {
-            if (!bsc.start()) {
+        // Start backend servers
+        for (ProcessController controller : backendServerControllers) {
+            if (!controller.startProcess()) {
                 doCleanup();
-                fail("Error starting the server: " + bsc.getServerName());
+                fail("Error starting the server: " + controller.getServerName());
             }
         }
 
-        if (!pc.startProcess()) {
+        // Start Synapse
+        if (!synapseController.startProcess()) {
             doCleanup();
             fail("Error starting synapse server");
         }
@@ -118,7 +136,7 @@
      * Executed after this test case. That means, This will be executed after each test
      */
     public void tearDown() {
-        log.info("Test " + sampleId + " is finished");
+        log.info("Sample " + sampleId + " is finished");
         doCleanup();
     }
 
@@ -126,24 +144,27 @@
      * shutting down servers, cleaning temp files
      */
     private void doCleanup() {
-        if (pc != null) {
+        if (synapseController != null) {
             log.debug("Stopping Synapse");
-            pc.stopProcess();
+            synapseController.stopProcess();
         }
 
-        ArrayList<BackEndServerController> clonedControllers = (ArrayList<BackEndServerController>)
-                backendServerControllers.clone();
-        for (BackEndServerController bsc : clonedControllers) {
+        List<ProcessController> removed = new ArrayList<ProcessController>();
+        for (ProcessController bsc : backendServerControllers) {
             if (bsc instanceof Axis2BackEndServerController) {
                 log.info("Stopping Server: " + bsc.getServerName());
-                bsc.stop();
-                backendServerControllers.remove(bsc);
+                bsc.stopProcess();
+                removed.add(bsc);
             }
         }
 
-        for (BackEndServerController bsc : backendServerControllers) {
+        for (ProcessController bsc : removed) {
+            backendServerControllers.remove(bsc);
+        }
+
+        for (ProcessController bsc : backendServerControllers) {
             log.info("Stopping Server: " + bsc.getServerName());
-            bsc.stop();
+            bsc.stopProcess();
         }
 
         //cleaning up temp dir
@@ -160,11 +181,12 @@
      *
      * @return true if the configuration was loaded successfully
      */
-    private boolean loadDescriptorInfoFile() {
+    private OMElement loadDescriptorInfoFile() {
+        String sampleDescriptor = "/sample" + sampleId + ".xml";
         if (log.isDebugEnabled()) {
             log.debug("Reading sample descriptor file from " + sampleDescriptor);
         }
-        sampleConfigElement = null;
+
         try {
             InputStream in = this.getClass().getResourceAsStream(sampleDescriptor);
             if (in == null) {
@@ -171,290 +193,73 @@
                 fail("Cannot read sample descriptor file");
             }
             StAXOMBuilder builder = new StAXOMBuilder(in);
-            sampleConfigElement = builder.getDocumentElement();
+            return builder.getDocumentElement();
         } catch (Exception e) {
             log.error("Error loading test descriptor", e);
-            return false;
+            return null;
         }
-        return sampleConfigElement != null;
     }
 
     /**
-     * Checks if sample id is matched
+     * Reads and initializes Synapse specific configuration information from descriptor
      *
-     * @return true If the sample ID matches
+     * @param config Sample descriptor
+     * @return A SynapseProcessController instance
      */
-    private boolean processDescriptorFile() {
-        int fileId = -1;
-        Iterator itr = sampleConfigElement.getChildrenWithLocalName(
-                SampleConfigConstants.TAG_SAMPLE_ID);
-        while (itr.hasNext()) {
-            fileId = Integer.parseInt(((OMElement) itr.next()).getText());
-        }
-        itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SAMPLE_NAME);
-        while (itr.hasNext()) {
-            String sampleName = ((OMElement) itr.next()).getText();
-            configuration.setSampleName(sampleName);
-        }
-
-        return sampleId == fileId;
+    private SynapseProcessController initSynapseConfigInfo(OMElement config) {
+        OMElement synapseConfig = config.getFirstChildWithName(
+                new QName(SampleConfigConstants.TAG_SYNAPSE_CONF));
+        return new SynapseProcessController(sampleId, synapseConfig);
     }
 
     /**
-     * Reads and stores synapse specific configuration information from descriptor
+     * Reads and initializes backend server specific configuration information from descriptor
      *
-     * @return true If the initialization is successful
+     * @param config Sample descriptor
+     * @return a List of ProcessController instances
      */
-    private boolean initSynapseConfigInfo() {
-        Properties synapseProperties = new Properties();
-        OMElement synEle = null;
-        Iterator itr = sampleConfigElement.getChildrenWithLocalName(
-                SampleConfigConstants.TAG_SYNAPSE_CONF);
-        while (itr.hasNext()) {
-            synEle = (OMElement) itr.next();
-        }
-        if (synEle == null) {
-            log.error("Cannot find synapse configuration information in sample descriptor file");
-            return false;
-        } else {
-            itr = synEle.getChildElements();
-        }
-        while (itr.hasNext()) {
-            OMElement ele = (OMElement) itr.next();
-            synapseProperties.setProperty(ele.getLocalName(), ele.getText());
-        }
-        log.debug("Initializing configuration information for synapse server...");
-        String synapseHome = currentLocation;
-
-        String synapseXml = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_XML);
-        String axis2Repo = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_REPO);
-        String axis2Xml = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_XML);
-        Boolean clusteringEnabled = Boolean.parseBoolean(
-                (String) synapseProperties.get(SampleConfigConstants.TAG_ENABLE_CLUSTERING));
-
-        configuration.getSynapseServerConfig().setServerName("SynapseServerForSample" + sampleId);
-
-        if (synapseXml == null) {
-            log.error("synapse config file must be specified for the sample");
-            return false;
-        } else {
-            configuration.getSynapseServerConfig().setSynapseXml(synapseHome + synapseXml);
-        }
-
-        if (axis2Repo == null) {
-            configuration.getSynapseServerConfig().setAxis2Repo(synapseHome +
-                    SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_REPO);
-        } else {
-            if (log.isDebugEnabled()) {
-                log.debug("Using Synapse Axis2 repository: " + axis2Repo);
-            }
-            configuration.getSynapseServerConfig().setAxis2Repo(synapseHome + axis2Repo);
-        }
-
-        if (axis2Xml == null) {
-            configuration.getSynapseServerConfig().setAxis2Xml(synapseHome +
-                    SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_XML);
-        } else {
-            if (log.isDebugEnabled()) {
-                log.debug("Using Synapse Axis2 XML: " + axis2Xml);
-            }
-            configuration.getSynapseServerConfig().setAxis2Xml(synapseHome + axis2Xml);
-        }
-
-        configuration.getSynapseServerConfig().setSynapseHome(synapseHome);
-        configuration.getSynapseServerConfig().setClusteringEnabled(clusteringEnabled);
-
-        pc = new SynapseProcessController(configuration.getSynapseServerConfig());
-        return true;
-    }
-
-    /**
-     * Reads and stores backend server specific configuration information from descriptor
-     *
-     * @return true If the initialization is successful
-     */
-    private boolean initBackEndServersConfigInfo() {
-        OMElement bESConfigEle = null;
-        Iterator itrBackEndElements = sampleConfigElement.getChildrenWithLocalName(
-                SampleConfigConstants.TAG_BE_SERVER_CONF);
-        while (itrBackEndElements.hasNext()) {
-            bESConfigEle = (OMElement) itrBackEndElements.next();
-        }
-        if (bESConfigEle == null) {
-            log.warn("No backend servers are defined");
-            return false;
-        }
+    private List<ProcessController> initBackEndServersConfigInfo(OMElement config) {
         log.debug("Initializing configuration information for backend servers...");
-
-        // Processing JMS servers
-        Properties jmsProperties = new Properties();
-        Iterator itrJmsServers = bESConfigEle.getChildrenWithLocalName(
-                SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_BROKER);
-        while (itrJmsServers.hasNext()) {
-            OMElement jmsServer = (OMElement) itrJmsServers.next();
-            String serverID = jmsServer.getAttributeValue(new QName("id"));
-            String serverName = "SampleJMSServer" + serverID;
-            configuration.addNewJMSBroker(serverName);
-
-            Iterator serverConfig = jmsServer.getChildElements();
-            while (serverConfig.hasNext()) {
-                OMElement ele = (OMElement) serverConfig.next();
-                jmsProperties.setProperty(ele.getLocalName(), ele.getText());
-            }
-
-            String providerURL = jmsProperties.getProperty(
-                    SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_PROVIDER_URL);
-            String initialNF = jmsProperties.getProperty(
-                    SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);
-
-            if (providerURL == null) {
-                configuration.getJMSConfig(serverName).setProviderURL(
-                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL);
-            } else {
-                log.info("Using provider URL: " + providerURL);
-                configuration.getJMSConfig(serverName).setProviderURL(providerURL);
-            }
-
-            if (initialNF == null) {
-                configuration.getJMSConfig(serverName).setInitialNamingFactory(
-                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);
-            } else {
-                log.info("Using initial context factory: " + initialNF);
-                configuration.getJMSConfig(serverName).setInitialNamingFactory(initialNF);
-            }
-
-            configuration.getJMSConfig(serverName).setServerName(serverName);
-
-            backendServerControllers.add(new JMSBrokerController(serverName,
-                    configuration.getJMSConfig(serverName)));
+        List<ProcessController> controllers = new ArrayList<ProcessController>();
+        OMElement backendServersConfig = config.getFirstChildWithName(
+                new QName(SampleConfigConstants.TAG_BE_SERVER_CONF));
+        if (backendServersConfig == null) {
+            log.warn("No backend servers defined");
+            return null;
         }
 
-
-        // Processing derby servers
-        Properties derbyProperties = new Properties();
-        Iterator itrDerbyServers = bESConfigEle.getChildrenWithLocalName(
-                SampleConfigConstants.TAG_BE_SERVER_CONF_DERBY_SERVER);
-        while (itrDerbyServers.hasNext()) {
-            OMElement derbyServer = (OMElement) itrDerbyServers.next();
-            String serverID = derbyServer.getAttributeValue(new QName("id"));
-            String serverName = "SampleDerbyServer" + serverID;
-            configuration.addNewDerbyServer(serverName);
-
-            Iterator serverConfig = derbyServer.getChildElements();
-            while (serverConfig.hasNext()) {
-                OMElement ele = (OMElement) serverConfig.next();
-                derbyProperties.setProperty(ele.getLocalName(), ele.getText());
-            }
-
-            configuration.getDerbyConfig(serverName).setServerName(serverName);
-            backendServerControllers.add(new DerbyServerController(serverName,
-                    configuration.getDerbyConfig(serverName)));
-        }
-
-        // Processing axis2 servers
-        Properties axis2Properties = new Properties();
-        Iterator itrAxis2Servers = bESConfigEle.getChildrenWithLocalName(
-                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_SERVER);
-        while (itrAxis2Servers.hasNext()) {
-            OMElement axis2Server = (OMElement) itrAxis2Servers.next();
-            String serverID = axis2Server.getAttributeValue(new QName("id"));
-            String serverName = "SampleAxis2Server" + serverID;
-            configuration.addNewAxis2Server(serverName);
-
-            Iterator serverConfig = axis2Server.getChildElements();
-            while (serverConfig.hasNext()) {
-                OMElement ele = (OMElement) serverConfig.next();
-                axis2Properties.setProperty(ele.getLocalName(), ele.getText());
-            }
-            String axis2Home = currentLocation;
-            String relAxis2Repo = axis2Properties.getProperty(
-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_REPO);
-            String relAxis2Xml = axis2Properties.getProperty(
-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_XML);
-            String axis2HttpPort = axis2Properties.getProperty(
-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT);
-            String axis2HttpsPort = axis2Properties.getProperty(
-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT);
-            String counterEnabled = axis2Properties.getProperty(
-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED);
-
-            configuration.getAxis2Config(serverName).setServerName(serverName);
-
-            if (relAxis2Repo == null) {
-                configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home +
-                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_REPO);
+        Iterator backendServers = backendServersConfig.getChildElements();
+        while (backendServers.hasNext()) {
+            OMElement backendServer = (OMElement) backendServers.next();
+            ProcessController controller = SynapseTestUtils.createController(backendServer);
+            if (controller != null) {
+                controllers.add(controller);
             } else {
-                log.info("Using Axis2 repository: " + relAxis2Repo);
-                configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home + relAxis2Repo);
+                log.error("Unrecognized backend server configuration: " + backendServer.getLocalName());
+                return null;
             }
-
-            if (relAxis2Xml == null) {
-                configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home +
-                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_XML);
-            } else {
-                log.info("Using Axis2 XML: " + relAxis2Xml);
-                configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home + relAxis2Xml);
-            }
-
-            configuration.getAxis2Config(serverName).setHttpPort(axis2HttpPort);
-            configuration.getAxis2Config(serverName).setHttpsPort(axis2HttpsPort);
-            if (Boolean.parseBoolean(counterEnabled)) {
-                configuration.getAxis2Config(serverName).setCounterEnabled(true);
-            }
-
-            backendServerControllers.add(new Axis2BackEndServerController(serverName,
-                    configuration.getAxis2Config(serverName)));
         }
 
-        return true;
+        return controllers;
     }
 
     /**
      * Reads and stores client specific configuration information from descriptor
+     *
+     * @param config Sample descriptor
+     * @return An Axis2ClientConfiguration instance
      */
-    private boolean initClientConfigInfo() {
-        Properties clientProperties = new Properties();
-        OMElement cliEle = null;
-        Iterator itr = sampleConfigElement.getChildrenWithLocalName(
-                SampleConfigConstants.TAG_CLIENT_CONF);
-        while (itr.hasNext()) {
-            cliEle = (OMElement) itr.next();
-        }
-        if (cliEle == null) {
-            return false;
-        } else {
-            itr = cliEle.getChildElements();
-        }
-        while (itr.hasNext()) {
-            OMElement ele = (OMElement) itr.next();
-            clientProperties.setProperty(ele.getLocalName(), ele.getText());
-        }
+    private Axis2ClientConfiguration initClientConfigInfo(OMElement config) {
+        Axis2ClientConfiguration clientConfig = new Axis2ClientConfiguration();
 
-        log.debug("Initializing configuration information for clients...");
-        String clientRepo = clientProperties.getProperty(
-                SampleConfigConstants.TAG_CLIENT_CONF_REPO);
-        String clientAxis2Xml = clientProperties.getProperty(
-                SampleConfigConstants.TAG_CLIENT_CONF_AXIS2_XML);
-
-        if (clientRepo == null) {
-            configuration.getAxis2ClientConfig().setClientRepo(FilenameUtils.normalize(
-                    currentLocation + SampleConfigConstants.DEFAULT_CLIENT_CONF_REPO));
-        } else {
-            log.info("Using client Axis2 repository location: " + clientRepo);
-            configuration.getAxis2ClientConfig().setClientRepo(FilenameUtils.normalize(
-                    currentLocation + clientRepo));
-        }
-
-        if (clientAxis2Xml == null) {
-            configuration.getAxis2ClientConfig().setAxis2Xml(FilenameUtils.normalize(
-                    currentLocation + SampleConfigConstants.DEFAULT_CLIENT_CONF_AXIS2_XML));
-        } else {
-            log.info("Using client Axis2 XML: " + clientAxis2Xml);
-            configuration.getAxis2ClientConfig().setAxis2Xml(FilenameUtils.normalize(
-                    currentLocation + clientAxis2Xml));
-        }
-        return true;
-
+        String currentDir = SynapseTestUtils.getCurrentDir();
+        clientConfig.setAxis2Xml(SynapseTestUtils.getParameter(config,
+                SampleConfigConstants.TAG_CLIENT_CONF_AXIS2_XML,
+                FilenameUtils.normalize(currentDir + SampleConfigConstants.DEFAULT_CLIENT_CONF_AXIS2_XML)));
+        clientConfig.setClientRepo(SynapseTestUtils.getParameter(config,
+                SampleConfigConstants.TAG_CLIENT_CONF_REPO,
+                FilenameUtils.normalize(currentDir + SampleConfigConstants.DEFAULT_CLIENT_CONF_REPO)));
+        return clientConfig;
     }
 
     private boolean configureClustering() {
@@ -464,25 +269,27 @@
                 log.fatal("Could not detect an active IP address");
                 return false;
             }
-            log.info(" Using the IP :" + ip);
+            log.info("Using the IP: " + ip);
 
-            String synapseAxis2Xml = configuration.getSynapseServerConfig().getAxis2Xml();
+            String synapseAxis2Xml = synapseController.getAxis2Xml();
             String axis2Config = FileUtils.readFileToString(new File(synapseAxis2Xml));
             String modifiedSynapseAxis2 = SynapseTestUtils.replace(axis2Config, "${replace.me}", ip);
             File tempSynapseAxis2 = File.createTempFile("axis2Syn-", "xml");
             tempSynapseAxis2.deleteOnExit();
             FileUtils.writeStringToFile(tempSynapseAxis2, modifiedSynapseAxis2);
-            configuration.getSynapseServerConfig().setAxis2Xml(tempSynapseAxis2.getAbsolutePath());
+            synapseController.setAxis2Xml(tempSynapseAxis2.getAbsolutePath());
 
-            for (BackEndServerController controller : backendServerControllers) {
-                String serverName = controller.getServerName();
-                String beAxis2Xml = configuration.getAxis2Config(serverName).getAxis2Xml();
-                String beAxis2Config = FileUtils.readFileToString(new File(beAxis2Xml));
-                String modifiedBEAxis2 = SynapseTestUtils.replace(beAxis2Config, "${replace.me}", ip);
-                File tempBEAxis2 = File.createTempFile("axis2BE-", "xml");
-                tempBEAxis2.deleteOnExit();
-                FileUtils.writeStringToFile(tempBEAxis2, modifiedBEAxis2);
-                configuration.getAxis2Config(serverName).setAxis2Xml(tempBEAxis2.getAbsolutePath());
+            for (ProcessController controller : backendServerControllers) {
+                if (controller instanceof Axis2BackEndServerController) {
+                    Axis2BackEndServerController axis2Controller = (Axis2BackEndServerController) controller;
+                    String beAxis2Xml = axis2Controller.getAxis2Xml();
+                    String beAxis2Config = FileUtils.readFileToString(new File(beAxis2Xml));
+                    String modifiedBEAxis2 = SynapseTestUtils.replace(beAxis2Config, "${replace.me}", ip);
+                    File tempBEAxis2 = File.createTempFile("axis2BE-", "xml");
+                    tempBEAxis2.deleteOnExit();
+                    FileUtils.writeStringToFile(tempBEAxis2, modifiedBEAxis2);
+                    axis2Controller.setAxis2Xml(tempBEAxis2.getAbsolutePath());
+                }
             }
             return true;
 
@@ -490,28 +297,18 @@
             log.error("Error configuring clustering", e);
             return false;
         }
-
-
     }
 
-    protected SampleConfiguration getConfiguration() {
-        return configuration;
-    }
-
-    protected ArrayList<BackEndServerController> getBackendServerControllers() {
+    protected List<ProcessController> getBackendServerControllers() {
         return backendServerControllers;
     }
 
     public StockQuoteSampleClient getStockQuoteClient() {
-        return new StockQuoteSampleClient(configuration.getAxis2ClientConfig());
+        return new StockQuoteSampleClient(clientConfig);
     }
 
-    public EventSampleClient getEventSubscriberSampleClient() {
-        return new EventSampleClient(configuration.getAxis2ClientConfig());
-    }
-
     public MTOMSwASampleClient getMTOMSwASampleClient() {
-        return new MTOMSwASampleClient(configuration.getAxis2ClientConfig());
+        return new MTOMSwASampleClient(clientConfig);
     }
 
     protected void assertResponseReceived(SampleClientResult result) {
@@ -519,8 +316,7 @@
     }
 
     protected Axis2BackEndServerController getAxis2Server() {
-        List<BackEndServerController> servers = getBackendServerControllers();
-        for (BackEndServerController server : servers) {
+        for (ProcessController server : backendServerControllers) {
             if (server instanceof Axis2BackEndServerController) {
                 return (Axis2BackEndServerController) server;
             }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java	(revision 1505813)
@@ -1,10 +1,11 @@
 package org.apache.synapse.samples.framework;
 
+import org.apache.axiom.om.OMElement;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.derby.drda.NetworkServerControl;
-import org.apache.synapse.samples.framework.config.DerbyConfiguration;
+import org.apache.synapse.samples.framework.config.SampleConfigConstants;
 
 import java.io.File;
 import java.net.InetAddress;
@@ -17,30 +18,26 @@
  * Responsible for starting up and shutting down
  * a derby server instance in order to run a sample test.
  */
-public class DerbyServerController implements BackEndServerController {
+public class DerbyServerController extends AbstractBackEndServerController {
 
     private static final Log log = LogFactory.getLog(DerbyServerController.class);
 
-    private String serverName;
-    private DerbyConfiguration configuration;
     private NetworkServerControl server;
+    private int port;
 
-    public DerbyServerController(String serverName, DerbyConfiguration configuration) {
-        this.serverName = serverName;
-        this.configuration = configuration;
+    public DerbyServerController(OMElement element) {
+        super(element);
+        port = Integer.parseInt(SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_BE_SERVER_CONF_DERBY_PORT,
+                SampleConfigConstants.DEFAULT_BE_SERVER_CONF_DERBY_PORT));
     }
 
-    public String getServerName() {
-        return serverName;
-    }
-
-    public boolean start() {
-        log.info("Preparing to start Derby server: " + serverName);
+    public boolean startProcess() {
         try {
             //server
             Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
             server = new NetworkServerControl
-                    (InetAddress.getByName("localhost"), 1527);
+                    (InetAddress.getByName("localhost"), port);
             server.start(null);
             while (true) {
                 try {
@@ -52,12 +49,17 @@
                 }
             }
             log.info("Derby is successfully started.");
-
+            initData();
+            return true;
         } catch (Exception e) {
-            log.warn("There was an error starting Derby server: " + serverName, e);
+            log.error("There was an error starting Derby server: " + serverName, e);
             return false;
         }
+    }
 
+    private void initData() throws Exception {
+        log.info("Creating the sample table and inserting values");
+
         //client
         String dbName = "synapsedb";
         String createTableQuery = "CREATE table company(name varchar(10), id varchar(10), price double)";
@@ -68,28 +70,28 @@
         props.put("password", "synapse");
         props.put("create", "true");
 
+        Connection conn = null;
         try {
             // on JDK 1.6 or higher, EmbeddedDriver get loaded automatically.
             Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
-
-            log.info("Creating the sample database and connecting to server");
-            Connection conn = DriverManager.getConnection(connectionURL, props);
-
+            conn = DriverManager.getConnection(connectionURL, props);
             Statement s = conn.createStatement();
-            log.info("Creating the sample table and inserting values");
             s.execute(createTableQuery);
             s.execute("INSERT into company values ('IBM','c1',0.0)");
             s.execute(" INSERT into company values ('SUN','c2',0.0)");
             s.execute(" INSERT into company values ('MSFT','c3',0.0)");
             conn.commit();
-            return true;
-        } catch (Exception e) {
-            log.error("Error executing SQL queries", e);
-            return false;
+        } finally {
+            if (conn != null) {
+                try {
+                    conn.close();
+                } catch (SQLException ignored) {
+                }
+            }
         }
     }
 
-    public boolean stop() {
+    public boolean stopProcess() {
         log.info("Shutting down Derby server...");
         try {
             try {
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java	(revision 1505813)
@@ -29,4 +29,6 @@
 
     public boolean stopProcess();
 
+    public String getServerName();
+
 }
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java	(revision 1505813)
@@ -25,16 +25,14 @@
 
 public class Sample10 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample10() {
         super(10);
-        client = getStockQuoteClient();
     }
 
 
     public void testDynamicEndPoints() {
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Dynamic EndPoints with Registry");
         SampleClientResult result = client.requestStandardQuote(null, trpUrl, null, "IBM", null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample11 extends SynapseTestCase {
 
-    StockQuoteSampleClient client;
-
     public Sample11() {
         super(11);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testFullRegistryBasedConfig() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Local Registry entry definitions, reusable endpoints and sequences");
         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM",null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java	(revision 1505813)
@@ -25,16 +25,14 @@
 
 public class Sample12 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample12() {
         super(12);
-        client = getStockQuoteClient();
     }
 
     public void testFireAndForget() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: One way messaging / fireAndForget through Synapse");
         SampleClientResult result = client.placeOrder(addUrl, trpUrl, null, "IBM");
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample13 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample13() {
         super(13);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testDualQuote() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Dual channel invocation through Synapse");
         SampleClientResult result = client.requestDualQuote(addUrl, trpUrl, null, "IBM");
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java	(revision 1505813)
@@ -25,16 +25,14 @@
 
 public class Sample15 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample15() {
         super(15);
-        client = getStockQuoteClient();
     }
 
 
     public void testMessageEnrichment() {
         String trpUrl = "http://localhost:8280/services/StockQuote";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Message Enrichment through Synapse");
         SampleClientResult result = client.requestStandardQuote(null, trpUrl, null, "IBM" ,null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample16 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample16() {
         super(16);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testDynamicStaticKeys() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Introduction to dynamic and static keys ");
         SampleClientResult result = client.requestCustomQuote(addUrl, trpUrl, null, "IBM");
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java	(revision 1505813)
@@ -21,15 +21,11 @@
 
 import org.apache.synapse.samples.framework.SampleClientResult;
 import org.apache.synapse.samples.framework.SynapseTestCase;
-import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
 
 public class Sample0 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample0() {
         super(0);
-        client = getStockQuoteClient();
     }
 
 
@@ -38,7 +34,8 @@
         String trpUrl = "http://localhost:8280/";
 
         log.info("Running test: Smart Client mode");
-        SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        SampleClientResult result = getStockQuoteClient().requestStandardQuote(
+                addUrl, trpUrl, null, "IBM" ,null);
         assertResponseReceived(result);
     }
 
@@ -48,7 +45,8 @@
         String prxUrl = "http://localhost:8280/";
 
         log.info("Running test: Using Synapse as a HTTP Proxy");
-        SampleClientResult result = client.requestStandardQuote(addUrl, null, prxUrl, "IBM", null);
+        SampleClientResult result = getStockQuoteClient().requestStandardQuote(
+                addUrl, null, prxUrl, "IBM", null);
         assertResponseReceived(result);
     }
 
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java	(revision 1505813)
@@ -25,19 +25,18 @@
 
 public class Sample1 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample1() {
         super(1);
-        client = getStockQuoteClient();
     }
 
 
     public void testDumbClientMode() {
         String trpUrl = "http://localhost:8280/services/StockQuote";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Dumb Client mode");
-        SampleClientResult result = client.requestStandardQuote(null, trpUrl, null, "IBM" ,null);
+        SampleClientResult result = client.requestStandardQuote(
+                null, trpUrl, null, "IBM", null);
         assertResponseReceived(result);
     }
 
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java	(revision 1505813)
@@ -25,21 +25,19 @@
 
 public class Sample2 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample2() {
         super(2);
-        client = getStockQuoteClient();
     }
 
     public void testCBR() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: CBR with the Switch-case mediator, using message properties");
-        SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM", null);
         assertResponseReceived(result);
-        result = client.requestStandardQuote(addUrl, trpUrl, null, "MSFT" ,null);
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "MSFT", null);
         assertResponseReceived(result);
     }
 
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample3 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample3() {
         super(3);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,9 +33,11 @@
     public void testLocalEntriesReusableEndPointsSequences() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Local Registry entry definitions, reusable endpoints and sequences");
-        SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        SampleClientResult result = client.requestStandardQuote(
+                addUrl, trpUrl, null, "IBM", null);
         assertResponseReceived(result);
     }
 
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java	(revision 1505813)
@@ -26,11 +26,8 @@
 
 public class Sample4 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample4() {
         super(4);
-        client = getStockQuoteClient();
     }
 
 
@@ -38,6 +35,8 @@
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280";
 
+        StockQuoteSampleClient client = getStockQuoteClient();
+
         log.info("Running test: Introduction to error handling");
         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
         assertResponseReceived(result);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java	(revision 1505813)
@@ -26,11 +26,8 @@
 
 public class Sample5 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample5() {
         super(5);
-        client = getStockQuoteClient();
     }
 
 
@@ -40,6 +37,8 @@
         String expectedError_MSFT = "Error while connecting to the endpoint (Connection Failed)";
         String expectedError_SUN = "Error while connecting to the endpoint (Connection Failed)";
 
+        StockQuoteSampleClient client = getStockQuoteClient();
+
         log.info("Running test: Creating SOAP fault messages and changing the direction of a message");
         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "MSFT" ,null);
         assertFalse("Must not get a response", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java	(revision 1505813)
@@ -25,15 +25,13 @@
 
 public class Sample6 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample6() {
         super(6);
-        client = getStockQuoteClient();
     }
 
     public void testManipulatingHeadersAndFiltering() {
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Dumb Client mode  ");
         SampleClientResult result = client.requestStandardQuote(null, trpUrl, null, null ,null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java	(revision 1505813)
@@ -26,11 +26,8 @@
 
 public class Sample7 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample7() {
         super(7);
-        client = getStockQuoteClient();
     }
 
 
@@ -38,6 +35,7 @@
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280";
         String expectedError = "Invalid custom quote request";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Creating SOAP fault messages and changing the direction of a message");
         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM",null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample8 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample8() {
         super(8);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testRegistryAndXSLTMediator() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Introduction to static and dynamic registry resources, and using XSLT transformations");
         SampleClientResult result = client.requestCustomQuote(addUrl, trpUrl, null, "IBM");
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample9 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample9() {
         super(9);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testDynamicSequences() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Dynamic Sequences with Registry");
         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample420.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample420.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample420.java	(revision 1505813)
@@ -26,16 +26,14 @@
 public class Sample420 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample420() {
         super(420);
-        client = getStockQuoteClient();
     }
 
     public void testCache() {
         String trpUrl = "http://localhost:8280/";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Simple cache implemented on Synapse for the actual service");
         result = client.requestStandardQuote(null, trpUrl, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample430.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample430.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample430.java	(revision 1505813)
@@ -26,17 +26,15 @@
 public class Sample430 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample430() {
         super(430);
-        client = getStockQuoteClient();
     }
 
     public void testCallOut() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Simple Callout Mediator for synchronizing web service invocation");
         result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java	(revision 1505813)
@@ -25,16 +25,15 @@
 public class Sample431 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample431() {
         super(431);
-        client = getStockQuoteClient();
     }
 
     public void testCallOutSecurity() {
         log.info("Running test: Callout Mediator with security");
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
         result = client.requestStandardQuote(null, trpUrl, null, "IBM" ,null);
         assertTrue("Client did not run successfully ", result.responseReceived());
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample350.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample350.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample350.java	(revision 1505813)
@@ -26,17 +26,15 @@
 public class Sample350 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample350() {
         super(350);
-        client = getStockQuoteClient();
     }
 
     public void testScriptMediationWithJS() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Introduction to the script mediator using js scripts ");
         result = client.requestCustomQuote(addUrl, trpUrl, null, "IBM");
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample450.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample450.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample450.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample450 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample450() {
         super(450);
-        client = getStockQuoteClient();
     }
 
 
@@ -38,7 +36,7 @@
         //String repo = getConfiguration().getClientConfig().getClientRepo();
         String addUrl = "http://localhost:9000/soap/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Introduction to the URL Rewrite Mediator");
         result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample360.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample360.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample360.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample360 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample360() {
         super(360);
-        client = getStockQuoteClient();
     }
 
 
@@ -37,6 +35,7 @@
     public void testDbLookup() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Introduction to dblookup mediator");
 
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample451.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample451.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample451.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample451 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample451() {
         super(451);
-        client = getStockQuoteClient();
     }
 
 
@@ -37,6 +35,7 @@
     public void testURLRewrite() {
         log.info("Running test: Conditional URL Rewriting");
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         String addUrl = "jms://localhost:9000/services/SimpleStockQuoteService";
         result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM", null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample361.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample361.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample361.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample361 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample361() {
         super(361);
-        client = getStockQuoteClient();
     }
 
 
@@ -37,6 +35,7 @@
     public void testDbReport() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Introduction to dbreport mediator");
 
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample353.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample353.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample353.java	(revision 1505813)
@@ -26,16 +26,15 @@
 public class Sample353 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample353() {
         super(353);
-        client = getStockQuoteClient();
     }
 
     public void testScriptMediationWithRuby() {
         String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
         String trpUrl = "http://localhost:8280/";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Using Ruby scripts for mediation");
         result = client.requestCustomQuote(addUrl, trpUrl, null, "IBM");
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample380.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample380.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample380.java	(revision 1505813)
@@ -26,17 +26,15 @@
 public class Sample380 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample380() {
         super(380);
-        client = getStockQuoteClient();
     }
 
 
     public void testCustomMediator() {
         String addUrl = "http://localhost:8280/";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Demonstrate the use of Class mediator to extend the mediation functionality");
         result = client.requestStandardQuote(addUrl, null, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample372.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample372.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample372.java	(revision 1505813)
@@ -26,16 +26,14 @@
 public class Sample372 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample372() {
         super(372);
-        client = getStockQuoteClient();
     }
 
     public void testConcurrencyAndRateThrottling() {
         String addUrl = "http://localhost:8280/services/StockQuoteProxy";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: concurrency throttling and request rate based throttling");
         result = client.requestStandardQuote(addUrl, null, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample52.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample52.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample52.java	(revision 1505813)
@@ -25,17 +25,14 @@
 
 public class Sample52 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample52() {
         super(52);
-        client = getStockQuoteClient();
     }
 
 
     public void testSessionLessLB() {
         String addUrl = "http://localhost:8280/services/LBService1";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Session-less load balancing between 3 endpoints");
         SampleClientResult result = client.sessionlessClient(addUrl, null, 100);
         assertResponseReceived(result);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfiguration.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfiguration.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfiguration.java	(nonexistent)
@@ -1,98 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.samples.framework.config;
-
-import java.util.HashMap;
-import java.util.Set;
-
-public class SampleConfiguration {
-
-    private String sampleName;
-    private SynapseServerConfiguration synapseServerConfig;
-    private HashMap<String, Axis2ServerConfiguration> axis2ServerConfigs;
-    private HashMap<String, JMSBrokerConfiguration> jmsConfigs;
-    private HashMap<String, DerbyConfiguration> derbyConfigs;
-    private Axis2ClientConfiguration axis2ClientConfig;
-
-    public SampleConfiguration() {
-        this.synapseServerConfig = new SynapseServerConfiguration();
-        this.axis2ServerConfigs = new HashMap<String, Axis2ServerConfiguration>();
-        this.jmsConfigs = new HashMap<String, JMSBrokerConfiguration>();
-        this.derbyConfigs = new HashMap<String, DerbyConfiguration>();
-        this.axis2ClientConfig = new Axis2ClientConfiguration();
-    }
-
-    public String getSampleName() {
-        return sampleName;
-    }
-
-    public void setSampleName(String sampleName) {
-        this.sampleName = sampleName;
-    }
-
-    public Axis2ClientConfiguration getAxis2ClientConfig() {
-        return axis2ClientConfig;
-    }
-
-    public void setAxis2Client(Axis2ClientConfiguration axis2ClientConfig) {
-        this.axis2ClientConfig = axis2ClientConfig;
-    }
-
-    public SynapseServerConfiguration getSynapseServerConfig() {
-        return synapseServerConfig;
-    }
-
-    public void setSynapseServerConfig(SynapseServerConfiguration synapseServerConfig) {
-        this.synapseServerConfig = synapseServerConfig;
-    }
-
-    public void addNewAxis2Server(String name) {
-        axis2ServerConfigs.put(name, new Axis2ServerConfiguration());
-    }
-
-    public void addNewJMSBroker(String name) {
-        jmsConfigs.put(name, new JMSBrokerConfiguration());
-    }
-
-    public void addNewDerbyServer(String name) {
-        derbyConfigs.put(name, new DerbyConfiguration());
-    }
-
-    public Axis2ServerConfiguration getAxis2Config(String name) {
-        return axis2ServerConfigs.get(name);
-    }
-
-    public JMSBrokerConfiguration getJMSConfig(String name) {
-        return jmsConfigs.get(name);
-    }
-
-    public DerbyConfiguration getDerbyConfig(String name) {
-        return derbyConfigs.get(name);
-    }
-
-    public Set<String> getAxis2ServersList() {
-        return axis2ServerConfigs.keySet();
-    }
-
-    public int getBackEndServerCount() {
-        return axis2ServerConfigs.size() + jmsConfigs.size();
-    }
-
-}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/DerbyConfiguration.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/DerbyConfiguration.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/DerbyConfiguration.java	(nonexistent)
@@ -1,33 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.samples.framework.config;
-
-public class DerbyConfiguration {
-
-    private String serverName;
-
-    public String getServerName() {
-        return serverName;
-    }
-
-    public void setServerName(String serverName) {
-        this.serverName = serverName;
-    }
-}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SynapseServerConfiguration.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SynapseServerConfiguration.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SynapseServerConfiguration.java	(nonexistent)
@@ -1,78 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.samples.framework.config;
-
-public class SynapseServerConfiguration {
-
-    private String serverName;
-    private String synapseHome;
-    private String axis2Repo;
-    private String axis2Xml;
-    private String synapseXml;
-    private boolean clusteringEnabled;
-
-    public String getServerName() {
-        return serverName;
-    }
-
-    public void setServerName(String serverName) {
-        this.serverName = serverName;
-    }
-
-    public String getSynapseHome() {
-        return synapseHome;
-    }
-
-    public void setSynapseHome(String synapseHome) {
-        this.synapseHome = synapseHome;
-    }
-
-    public String getAxis2Repo() {
-        return axis2Repo;
-    }
-
-    public void setAxis2Repo(String axis2Repo) {
-        this.axis2Repo = axis2Repo;
-    }
-
-    public String getAxis2Xml() {
-        return axis2Xml;
-    }
-
-    public void setAxis2Xml(String axis2Xml) {
-        this.axis2Xml = axis2Xml;
-    }
-
-    public String getSynapseXml() {
-        return synapseXml;
-    }
-
-    public void setSynapseXml(String synapseXml) {
-        this.synapseXml = synapseXml;
-    }
-
-    public boolean isClusteringEnabled() {
-        return clusteringEnabled;
-    }
-
-    public void setClusteringEnabled(boolean clusteringEnabled) {
-        this.clusteringEnabled = clusteringEnabled;
-    }
-}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ServerConfiguration.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ServerConfiguration.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ServerConfiguration.java	(nonexistent)
@@ -1,87 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.samples.framework.config;
-
-public class Axis2ServerConfiguration {
-
-    private String serverName;
-    private String axis2Repo;
-    private String axis2Xml;
-    private String httpPort;
-    private String httpsPort;
-    private boolean clusteringEnabled;
-    private boolean counterEnabled;
-
-    public String getServerName() {
-        return serverName;
-    }
-
-    public void setServerName(String serverName) {
-        this.serverName = serverName;
-    }
-
-    public String getAxis2Repo() {
-        return axis2Repo;
-    }
-
-    public void setAxis2Repo(String axis2Repo) {
-        this.axis2Repo = axis2Repo;
-    }
-
-    public String getAxis2Xml() {
-        return axis2Xml;
-    }
-
-    public void setAxis2Xml(String axis2Xml) {
-        this.axis2Xml = axis2Xml;
-    }
-
-    public String getHttpPort() {
-        return httpPort;
-    }
-
-    public void setHttpPort(String httpPort) {
-        this.httpPort = httpPort;
-    }
-
-    public String getHttpsPort() {
-        return httpsPort;
-    }
-
-    public void setHttpsPort(String httpsPort) {
-        this.httpsPort = httpsPort;
-    }
-
-    public boolean isClusteringEnabled() {
-        return clusteringEnabled;
-    }
-
-    public void setClusteringEnabled(boolean clusteringEnabled) {
-        this.clusteringEnabled = clusteringEnabled;
-    }
-
-    public boolean isCounterEnabled() {
-        return counterEnabled;
-    }
-
-    public void setCounterEnabled(boolean counterEnabled) {
-        this.counterEnabled = counterEnabled;
-    }
-}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/JMSBrokerConfiguration.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/JMSBrokerConfiguration.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/JMSBrokerConfiguration.java	(nonexistent)
@@ -1,51 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.samples.framework.config;
-
-public class JMSBrokerConfiguration {
-
-    private String serverName;
-    private String providerURL;
-    private String initialNamingFactory;
-
-    public String getServerName() {
-        return serverName;
-    }
-
-    public void setServerName(String serverName) {
-        this.serverName = serverName;
-    }
-
-    public String getProviderURL() {
-        return providerURL;
-    }
-
-    public void setProviderURL(String providerURL) {
-        this.providerURL = providerURL;
-    }
-
-    public String getInitialNamingFactory() {
-        return initialNamingFactory;
-    }
-
-    public void setInitialNamingFactory(String initialNamingFactory) {
-        this.initialNamingFactory = initialNamingFactory;
-    }
-}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample54.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample54.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample54.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample54 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample54() {
         super(54);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testSessionFullLB() {
         String addUrl = "http://localhost:8280/services/LBService1";
         log.info("Running test: Session affinity load balancing between 3 endpoints");
+        StockQuoteSampleClient client = getStockQuoteClient();
         SampleClientResult result = client.statefulClient(addUrl,null, 100);
         assertResponseReceived(result);
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample58.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample58.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample58.java	(revision 1505813)
@@ -26,15 +26,14 @@
 public class Sample58 extends SynapseTestCase {
 
     private SampleClientResult result;
-    private StockQuoteSampleClient client;
 
     public Sample58() {
         super(58);
-        client = getStockQuoteClient();
     }
 
     public void testStaticLB() {
         final String addUrl = "http://localhost:8280/services/LBService1";
+        final StockQuoteSampleClient client = getStockQuoteClient();
 
         new Thread(new Runnable() {
             public void run() {
@@ -46,7 +45,7 @@
         } catch (InterruptedException e) {
 
         }
-        getBackendServerControllers().get(0).stop();
+        getBackendServerControllers().get(0).stopProcess();
 
         try {
             Thread.sleep(2000);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java	(revision 1505813)
@@ -27,12 +27,10 @@
 public class Sample53 extends SynapseTestCase {
 
     private SampleClientResult result;
-    private StockQuoteSampleClient client;
     private String addUrl;
 
     public Sample53() {
         super(53);
-        client = getStockQuoteClient();
     }
 
 
@@ -40,6 +38,7 @@
         String expectedError = "COULDN'T SEND THE MESSAGE TO THE SERVER";
         addUrl = "http://localhost:8280/services/LBService1";
         log.info("Running test: Failover sending among 3 endpoints");
+        final StockQuoteSampleClient client = getStockQuoteClient();
 
         // Send some messages and check
         Thread t = new Thread(new Runnable() {
@@ -56,7 +55,7 @@
         assertResponseReceived(result);
 
         // Stop BE server 1
-        getBackendServerControllers().get(0).stop();
+        getBackendServerControllers().get(0).stopProcess();
         try {
             Thread.sleep(2000);
         } catch (InterruptedException e) {
@@ -78,7 +77,7 @@
         assertResponseReceived(result);
 
         // Stop BE server 2
-        getBackendServerControllers().get(1).stop();
+        getBackendServerControllers().get(1).stopProcess();
         try {
             Thread.sleep(2000);
         } catch (InterruptedException e) {
@@ -100,7 +99,7 @@
         assertResponseReceived(result);
 
         // Stop BE server 3
-        getBackendServerControllers().get(2).stop();
+        getBackendServerControllers().get(2).stopProcess();
         try {
             Thread.sleep(2000);
         } catch (InterruptedException e) {
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample57.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample57.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample57.java	(revision 1505813)
@@ -26,16 +26,14 @@
 public class Sample57 extends SynapseTestCase {
 
     private SampleClientResult result;
-    private StockQuoteSampleClient client;
 
     public Sample57() {
         super(57);
-        client = getStockQuoteClient();
     }
 
     public void testDynamicLB() {
         final String addUrl = "http://localhost:8280/services/LBService1";
-
+        final StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Dynamic load balancing between 3 nodes");
         try {
             Thread.sleep(3000);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample56.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample56.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample56.java	(revision 1505813)
@@ -25,17 +25,14 @@
 
 public class Sample56 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample56() {
         super(56);
-        client = getStockQuoteClient();
     }
 
 
     public void testSmartClientMode() {
         String addUrl = "http://localhost:8280";
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Smart Client mode");
         SampleClientResult result = client.requestStandardQuote(addUrl, null, null, "IBM" ,null);
         assertResponseReceived(result);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample151.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample151.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample151.java	(revision 1505813)
@@ -25,16 +25,14 @@
 
 public class Sample151 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample151() {
         super(151);
-        client = getStockQuoteClient();
     }
 
     public void testCustomSequencesEndpointsWithProxy() {
         String addUrl = "http://localhost:8280/services/StockQuoteProxy1";
         String addUrl2 = "http://localhost:8280/services/StockQuoteProxy2";
+        StockQuoteSampleClient client = getStockQuoteClient();
 
         log.info("Running test: Custom sequences and endpoints with proxy services");
         SampleClientResult result1 = client.requestStandardQuote(addUrl, null, null, "IBM" ,null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample155.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample155.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample155.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample155 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample155() {
         super(155);
-        client = getStockQuoteClient();
     }
 
 
@@ -38,6 +35,7 @@
 
         log.info("Running test: Dual channel invocation on both client side and server " +
                 "side of Synapse with Proxy Services");
+        StockQuoteSampleClient client = getStockQuoteClient();
         SampleClientResult result = client.requestDualQuote(addUrl, null, null, "IBM");
         assertTrue("Client did not get run successfully ", result.responseReceived());
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample101.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample101.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample101.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample101 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample101() {
         super(101);
-        client = getStockQuoteClient();
     }
 
 
@@ -38,6 +36,7 @@
         String addUrl = "http://localhost:8280/";
 
         log.info("Running test: Reliable message exchange");
+        StockQuoteSampleClient client = getStockQuoteClient();
         result = client.requestStandardQuote(addUrl, null, null, "IBM" ,null);
         assertTrue("Client did not run successfully ", result.responseReceived());
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/AbstractBackEndServerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/AbstractBackEndServerController.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/AbstractBackEndServerController.java	(revision 1505813)
@@ -0,0 +1,18 @@
+package org.apache.synapse.samples.framework;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.synapse.samples.framework.config.SampleConfigConstants;
+
+public abstract class AbstractBackEndServerController implements ProcessController {
+
+    protected String serverName;
+
+    public AbstractBackEndServerController(OMElement element) {
+        serverName = SynapseTestUtils.getAttribute(element,
+                SampleConfigConstants.ATTR_SERVER_ID, SampleConfigConstants.DEFAULT_SERVER_ID);
+    }
+
+    public String getServerName() {
+        return serverName;
+    }
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample51.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample51.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample51.java	(revision 1505813)
@@ -28,11 +28,8 @@
 
 public class Sample51 extends SynapseTestCase {
 
-    private MTOMSwASampleClient client;
-
     public Sample51() {
         super(51);
-        client = getMTOMSwASampleClient();
     }
 
     public void testMTOMOptimization() {
@@ -40,18 +37,18 @@
         String currentLocation = System.getProperty("user.dir") + File.separator;
         String filename = FilenameUtils.normalize(
                 currentLocation + "repository/conf/sample/resources/mtom/asf-logo.gif");
+        MTOMSwASampleClient client = getMTOMSwASampleClient();
         log.info("Running test: MTOM optimization and request/response correlation ");
         SampleClientResult result = client.sendUsingMTOM(filename, ep);
         assertResponseReceived(result);
     }
 
-
     public void testSWAOptimization() {
         String ep = "http://localhost:8280/services/MTOMSwASampleService";
         String currentLocation = System.getProperty("user.dir") + File.separator;
         String filename = FilenameUtils.normalize(
                 currentLocation + "repository/conf/sample/resources/mtom/asf-logo.gif");
-
+        MTOMSwASampleClient client = getMTOMSwASampleClient();
         log.info("Running test:SwA optimization and request/response correlation ");
         SampleClientResult result = client.sendUsingSWA(filename, ep);
         assertResponseReceived(result);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample154.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample154.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample154.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample154 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample154() {
         super(154);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testSessionFullLB() {
         String trpUrl = "http://localhost:8280/services/LBProxy";
         log.info("Running test: Load Balancing with Proxy Services ");
+        StockQuoteSampleClient client = getStockQuoteClient();
         SampleClientResult result = client.statefulClient(null, trpUrl, 100);
         assertTrue("Client did not run successfully ", result.responseReceived());
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample100.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample100.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample100.java	(revision 1505813)
@@ -26,11 +26,9 @@
 public class Sample100 extends SynapseTestCase {
 
     SampleClientResult result;
-    StockQuoteSampleClient client;
 
     public Sample100() {
         super(100);
-        client = getStockQuoteClient();
     }
 
 
@@ -37,6 +35,7 @@
     public void testWSSecurity() {
         String trpUrl = "http://localhost:8280/";
         log.info("Running test: Using WS-Security for outgoing messages");
+        StockQuoteSampleClient client = getStockQuoteClient();
         result = client.requestStandardQuote(null, trpUrl, null, "IBM", null);
         assertTrue("Client did not run successfully", result.responseReceived());
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfigConstants.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfigConstants.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfigConstants.java	(revision 1505813)
@@ -0,0 +1,89 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework.config;
+
+/**
+ * Sample configuration constants
+ */
+public class SampleConfigConstants {
+
+    public static final String ATTR_SERVER_ID = "id";
+
+    //xml tag names
+    public static final String TAG_SAMPLE_ID = "sampleID";
+    public static final String TAG_SAMPLE_NAME = "sampleName";
+
+    public static final String TAG_SYNAPSE_CONF = "synapseConfig";
+    public static final String TAG_SYNAPSE_CONF_AXIS2_REPO = "axis2Repo";
+    public static final String TAG_SYNAPSE_CONF_AXIS2_XML = "axis2Xml";
+    public static final String TAG_SYNAPSE_CONF_XML = "synapseXml";
+
+    public static final String TAG_BE_SERVER_CONF = "backEndServerConfig";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_SERVER = "axis2Server";
+    public static final String TAG_BE_SERVER_CONF_JMS_BROKER = "jmsBroker";
+    public static final String TAG_BE_SERVER_CONF_DERBY_SERVER = "derbyServer";
+    public static final String TAG_BE_SERVER_CONF_QFIX_EXECUTOR = "fixExecutor";
+
+    public static final String TAG_BE_SERVER_CONF_AXIS2_REPO = "axis2Repo";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_XML = "axis2Xml";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT = "httpPort";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT = "httpsPort";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED = "counterEnabled";
+
+    public static final String TAG_BE_SERVER_CONF_DERBY_PORT = "dbPort";
+
+    public static final String TAG_BE_SERVER_CONF_JMS_PROVIDER_URL = "providerURL";
+    public static final String TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY = "initialNamingFactory";
+
+    public static final String TAG_CLIENT_CONF = "clientConfig";
+    public static final String TAG_CLIENT_CONF_REPO = "clientRepo";
+    public static final String TAG_CLIENT_CONF_AXIS2_XML = "axis2Xml";
+    public static final String TAG_CLIENT_CONF_FILENAME = "fileName";
+
+    public static final String TAG_ENABLE_CLUSTERING = "enableClustering";
+
+    //default values
+    public static final String DEFAULT_SERVER_ID = "default";
+
+    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_XML =
+            "modules/integration/target/test_repos/synapse/conf/axis2_def.xml";
+    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_REPO =
+            "modules/integration/target/test_repos/synapse";
+
+    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_XML =
+            "modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml";
+    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_REPO =
+            "modules/integration/target/test_repos/axis2Server";
+
+    public static final String DEFAULT_BE_SERVER_CONF_DERBY_PORT = "1527";
+
+    public static final String DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL = "tcp://localhost:61616";
+    public static final String DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY =
+            "org.apache.activemq.jndi.ActiveMQInitialContextFactory";
+
+    public static final String DEFAULT_CLIENT_CONF_REPO =
+            "modules/integration/target/test_repos/axis2Client";
+    public static final String DEFAULT_CLIENT_CONF_FILENAME =
+            "./repository/samples/resources/asf-logo.gif";
+    public static final String DEFAULT_CLIENT_CONF_AXIS2_XML =
+            "modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml";
+
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample50.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample50.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample50.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample50 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample50() {
         super(50);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testRestToPox() {
         String trpUrl = "http://localhost:8280/services/StockQuote";
         log.info("Running test: HTTP REST request ");
+        StockQuoteSampleClient client = getStockQuoteClient();
         SampleClientResult result = client.requestRestQuote(null, trpUrl, null, "IBM");
         assertResponseReceived(result);
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample153.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample153.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample153.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample153 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample153() {
         super(153);
-        client = getStockQuoteClient();
     }
 
 
@@ -38,6 +35,7 @@
         String policy = "./repository/conf/sample/resources/policy/client_policy_3.xml";
         log.info("Running test: Routing the messages arrived to a proxy service without " +
                 "processing the security headers");
+        StockQuoteSampleClient client = getStockQuoteClient();
         SampleClientResult  result = client.requestStandardQuote(null, url, null, "IBM", policy);
         assertTrue("Client did not a response with https ", result.responseReceived());
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample150.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample150.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample150.java	(revision 1505813)
@@ -29,16 +29,14 @@
 
 public class Sample150 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample150() {
         super(150);
-        client = getStockQuoteClient();
     }
 
     public void testBasicProxy() {
         String addUrl = "http://localhost:8280/services/StockQuoteProxy";
         log.info("Running test: Introduction to proxy services");
+        StockQuoteSampleClient client = getStockQuoteClient();
         SampleClientResult result = client.requestStandardQuote(addUrl, null, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java	(revision 1505813)
@@ -18,14 +18,13 @@
  */
 package org.apache.synapse.samples.framework;
 
+import org.apache.axiom.om.OMElement;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.synapse.ServerConfigurationInformation;
 import org.apache.synapse.ServerManager;
-import org.apache.synapse.samples.framework.config.SynapseServerConfiguration;
+import org.apache.synapse.samples.framework.config.SampleConfigConstants;
 
-import java.util.concurrent.CountDownLatch;
-
 /**
  * Responsible for starting up and shutting down
  * a synapse server instance in order to run a sample test.
@@ -34,90 +33,147 @@
 
     private static final Log log = LogFactory.getLog(SynapseProcessController.class);
 
-    private ServerThread serverThread;
-    private SynapseServerConfiguration configuration;
+    private static final int UNDEFINED      = 1;
+    private static final int STARTING_UP    = 2;
+    private static final int SERVER_ACTIVE  = 3;
+    private static final int STARTUP_FAILED = 4;
+    private static final int SHUTTING_DOWN  = 5;
+
     private ServerConfigurationInformation information;
-    private ServerManager manager;
-    private CountDownLatch cdLatch;
+    private boolean clusteringEnabled;
+
+    private int serverState = UNDEFINED;
+
+    private final SynapseServer synapseServer;
     private Exception processException;
 
-    public SynapseProcessController(SynapseServerConfiguration configuration) {
-        this.configuration = configuration;
+    public SynapseProcessController(int sampleId, OMElement element) {
+        String synapseHome = SynapseTestUtils.getCurrentDir();
+        String synapseXml = SynapseTestUtils.getRequiredParameter(element,
+                SampleConfigConstants.TAG_SYNAPSE_CONF_XML);
+        String repoPath = SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_REPO,
+                SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_REPO);
+        String axis2Xml = SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_XML,
+                SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_XML);
+        String serverName = "Synapse" + sampleId;
+
+        clusteringEnabled = Boolean.parseBoolean(SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_ENABLE_CLUSTERING, "false"));
+
         information = new ServerConfigurationInformation();
-        manager = new ServerManager();
-        cdLatch = new CountDownLatch(1);
-        serverThread = new ServerThread();
-        serverThread.setName(configuration.getServerName() + " thread");
+        information.setSynapseHome(synapseHome);
+        information.setSynapseXMLLocation(synapseXml);
+        information.setServerName(serverName);
+        information.setAxis2Xml(axis2Xml);
+        information.setResolveRoot(repoPath);
+        information.setAxis2RepoLocation(repoPath);
+
+        synapseServer = new SynapseServer();
     }
 
+    public boolean isClusteringEnabled() {
+        return clusteringEnabled;
+    }
+
+    public String getAxis2Xml() {
+        return information.getAxis2Xml();
+    }
+
+    public void setAxis2Xml(String path) {
+        information.setAxis2Xml(path);
+    }
+
     public boolean startProcess() {
-        information.setSynapseHome(configuration.getSynapseHome());
-        information.setSynapseXMLLocation(configuration.getSynapseXml());
-        information.setServerName(configuration.getServerName());
-        information.setAxis2Xml(configuration.getAxis2Xml());
-        information.setResolveRoot(configuration.getAxis2Repo());
-        information.setAxis2RepoLocation(configuration.getAxis2Repo());
+        processException = null;
 
-        log.info("SynapseProcessController: Preparing to start synapse server");
-        serverThread.start();
+        synchronized (synapseServer) {
+            synapseServer.start();
+            while (serverState <= STARTING_UP) {
+                try {
+                    synapseServer.wait(1000);
+                } catch (InterruptedException e) {
+                    log.error("Synapse startup was interrupted", e);
+                    return false;
+                }
+            }
+        }
 
-        try {
-            log.info("SynapseProcessController: Waiting for synapse to start");
-            cdLatch.await();
-            if (processException == null) {
-                log.info("SynapseProcessController: synapse is started. continuing tests");
-                return true;
-            } else {
-                log.warn("SynapseProcessController: There was an error starting synapse", processException);
-                return false;
-            }
-        } catch (InterruptedException e) {
+        if (serverState == STARTUP_FAILED) {
+            log.error("Synapse failed to start", processException);
             return false;
         }
+        return true;
     }
 
     public boolean stopProcess() {
-        if (serverThread.isRunning) {
-            serverThread.isRunning = false;
-            try {
-                cdLatch = new CountDownLatch(1);
-                cdLatch.await();
-            } catch (InterruptedException e) {
-                log.warn("Thread interrupted");
+        if (serverState == SERVER_ACTIVE) {
+            synchronized (synapseServer) {
+                serverState = SHUTTING_DOWN;
+                synapseServer.notifyAll();
+
+                while (serverState > UNDEFINED) {
+                    try {
+                        synapseServer.wait(1000);
+                    } catch (InterruptedException e) {
+                        log.warn("Synapse shutdown was interrupted", e);
+                        return false;
+                    }
+                }
             }
         }
         return true;
     }
 
-    private class ServerThread extends Thread {
+    public String getServerName() {
+        return information.getServerName();
+    }
 
-        public boolean isRunning = false;
+    private class SynapseServer extends Thread {
 
+        SynapseServer() {
+            super(information.getServerName().toLowerCase());
+        }
+
         public void run() {
-            processException = null;
-            log.info("SynapseProcessController.ServerThread: Initializing Synapse Server...");
+            log.info("Starting up Synapse...");
+
+            ServerManager manager = new ServerManager();
             try {
                 manager.init(information, null);
-                log.info("SynapseProcessController.ServerThread: Starting Synapse Server...");
                 manager.start();
-                isRunning = true;
+                serverState = SERVER_ACTIVE;
             } catch (Exception e) {
                 processException = e;
+                serverState = STARTUP_FAILED;
+                return;
+            } finally {
+                synchronized (this) {
+                    this.notifyAll();
+                }
             }
-            cdLatch.countDown();
 
-            log.info("SynapseProcessController.ServerThread: Await until test are finished");
-            while (isRunning) {
-                //wait
-                try {
-                    sleep(1000);
-                } catch (InterruptedException e) {
-                    log.warn("Thread interrupted");
+            synchronized (this) {
+                while (serverState < SHUTTING_DOWN) {
+                    //wait for the tests
+                    try {
+                        this.wait(1000);
+                    } catch (InterruptedException e) {
+                        log.error("Axis2 server interrupted", e);
+                    }
                 }
             }
-            log.info("SynapseProcessController.ServerThread:Shutting down Synapse Server...");
-            manager.shutdown();
-            cdLatch.countDown();
+
+            log.info("Shutting down Synapse...");
+            try {
+                manager.shutdown();
+            } finally {
+                synchronized (this) {
+                    serverState = UNDEFINED;
+                    this.notifyAll();
+                }
+            }
         }
     }
 
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample55.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample55.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample55.java	(revision 1505813)
@@ -26,16 +26,15 @@
 public class Sample55 extends SynapseTestCase {
 
     private SampleClientResult result;
-    private StockQuoteSampleClient client;
 
     public Sample55() {
         super(55);
-        client = getStockQuoteClient();
     }
 
 
     public void testSessionFullLBFailOver() {
         final String addUrl = "http://localhost:8280/services/LBService1";
+        final StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Failover sending among 3 endpoints");
         Thread t = new Thread(new Runnable() {
             public void run() {
@@ -50,7 +49,7 @@
 
         }
 
-        getBackendServerControllers().get(0).stop();
+        getBackendServerControllers().get(0).stopProcess();
         try {
             Thread.sleep(2000);
         } catch (InterruptedException e) {
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample59.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample59.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample59.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample59 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample59() {
         super(59);
-        client = getStockQuoteClient();
     }
 
     public void testSessionLessLB() {
@@ -36,6 +33,7 @@
         String addUrl = "http://localhost:8280/services/LBService1";
 
         log.info("Running test: Weighted load balancing between 3 endpoints");
+        StockQuoteSampleClient client = getStockQuoteClient();
         SampleClientResult result = client.sessionlessClient(addUrl, null, 100);
         assertResponseReceived(result);
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample152.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample152.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample152.java	(revision 1505813)
@@ -26,11 +26,8 @@
 
 public class Sample152 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample152() {
         super(152);
-        client = getStockQuoteClient();
     }
 
 
@@ -39,7 +36,7 @@
         String trustStore = FilenameUtils.normalize(System.getProperty("user.dir") +
                 "/modules/integration/src/test/resources/trust.jks");
         System.setProperty("javax.net.ssl.trustStore", trustStore);
-
+        StockQuoteSampleClient client = getStockQuoteClient();
         log.info("Running test: Switching transports and message format from SOAP to REST/POX");
 
         SampleClientResult result2 = client.requestStandardQuote(null, url2, null, "IBM" ,null);
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample156.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample156.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample156.java	(revision 1505813)
@@ -25,11 +25,8 @@
 
 public class Sample156 extends SynapseTestCase {
 
-    private StockQuoteSampleClient client;
-
     public Sample156() {
         super(156);
-        client = getStockQuoteClient();
     }
 
 
@@ -36,6 +33,7 @@
     public void testServiceIntegration() {
         String addUrl = "http://localhost:8280/services/StockQuoteProxy";
         log.info("Running test: Service Integration with specifying the receiving sequence");
+        StockQuoteSampleClient client = getStockQuoteClient();
         SampleClientResult result = client.requestStandardQuote(addUrl, null, null, "IBM" ,null);
         assertTrue("Client did not get run successfully ", result.responseReceived());
     }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java	(revision 1505813)
@@ -19,6 +19,12 @@
 
 package org.apache.synapse.samples.framework;
 
+import org.apache.axiom.om.OMElement;
+import org.apache.synapse.SynapseException;
+import org.apache.synapse.samples.framework.config.SampleConfigConstants;
+
+import javax.xml.namespace.QName;
+import java.io.File;
 import java.net.Inet4Address;
 import java.net.InetAddress;
 import java.net.NetworkInterface;
@@ -78,4 +84,46 @@
         return ipAddress;
     }
 
+    public static String getParameter(OMElement root, String name, String def) {
+        OMElement child = root.getFirstChildWithName(new QName(name));
+        if (child != null && !"".equals(child.getText())) {
+            return child.getText();
+        } else {
+            return def;
+        }
+    }
+
+    public static String getRequiredParameter(OMElement root, String name) {
+        OMElement child = root.getFirstChildWithName(new QName(name));
+        if (child != null && !"".equals(child.getText())) {
+            return child.getText();
+        } else {
+            throw new SynapseException("Required parameter: " + name + " unspecified");
+        }
+    }
+
+    public static String getAttribute(OMElement root, String name, String def) {
+        String value = root.getAttributeValue(new QName(name));
+        if (value != null && !"".equals(value)) {
+            return value;
+        } else {
+            return def;
+        }
+    }
+
+    public static ProcessController createController(OMElement root) {
+        if (SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_SERVER.equals(root.getLocalName())) {
+            return new Axis2BackEndServerController(root);
+        } else if (SampleConfigConstants.TAG_BE_SERVER_CONF_DERBY_SERVER.equals(root.getLocalName())) {
+            return new DerbyServerController(root);
+        } else if (SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_BROKER.equals(root.getLocalName())) {
+            return new ActiveMQController(root);
+        }
+        return null;
+    }
+
+    public static String getCurrentDir() {
+        return System.getProperty("user.dir") + File.separator;
+    }
+
 }
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java	(revision 1505812)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java	(revision 1505813)
@@ -1,5 +1,26 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
 package org.apache.synapse.samples.framework;
 
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.AxisFault;
 import org.apache.axis2.clustering.ClusteringAgent;
 import org.apache.axis2.clustering.ClusteringConstants;
 import org.apache.axis2.context.ConfigurationContext;
@@ -10,69 +31,102 @@
 import org.apache.axis2.phaseresolver.PhaseMetadata;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.synapse.samples.framework.config.Axis2ServerConfiguration;
+import org.apache.synapse.samples.framework.config.SampleConfigConstants;
 
 import java.util.List;
-import java.util.concurrent.CountDownLatch;
 
 /**
  * Responsible for programatically starting up and shutting down
  * an Axis2 server instance in order to run a sample test.
  */
-public class Axis2BackEndServerController implements BackEndServerController {
+public class Axis2BackEndServerController extends AbstractBackEndServerController {
 
     private static final Log log = LogFactory.getLog(Axis2BackEndServerController.class);
 
-    private String serverName;
-    private BackEndServerThread serverThread;
-    private ConfigurationContext configContext;
-    private ListenerManager listenerManager;
-    private Axis2ServerConfiguration configuration;
-    private CountDownLatch cdLatch;
+    private static final int UNDEFINED      = 1;
+    private static final int STARTING_UP    = 2;
+    private static final int SERVER_ACTIVE  = 3;
+    private static final int STARTUP_FAILED = 4;
+    private static final int SHUTTING_DOWN  = 5;
+
+    private String repoPath;
+    private String axis2Xml;
+    private String httpPort;
+    private String httpsPort;
+    private boolean counterEnabled;
+
+    private int serverState = UNDEFINED;
+
+    private final Axis2Server axis2Server;
     private Exception processException;
     private MessageCounter counter;
 
-    public Axis2BackEndServerController(String serverName,
-                                        Axis2ServerConfiguration configuration) {
-        this.serverName = serverName;
-        this.configuration = configuration;
-        serverThread = new BackEndServerThread();
-        serverThread.setName(configuration.getServerName()+ " thread");
-        cdLatch = new CountDownLatch(1);
+    public Axis2BackEndServerController(OMElement element) {
+        super(element);
+        String currentDir = SynapseTestUtils.getCurrentDir();
+        repoPath = SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_REPO,
+                currentDir + SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_REPO);
+        axis2Xml = SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_XML,
+                currentDir + SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_XML);
+        httpPort = SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT, null);
+        httpsPort = SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT, null);
+
+        counterEnabled = Boolean.parseBoolean(SynapseTestUtils.getParameter(element,
+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED, "false"));
+
+        axis2Server = new Axis2Server();
     }
 
-    public String getServerName() {
-        return serverName;
+    public String getAxis2Xml() {
+        return axis2Xml;
     }
 
-    public boolean start() {
-        log.info("Preparing to start Axis2 Server: " + serverName);
-        serverThread.start();
-        try {
-            log.info("Waiting for Axis2 to start");
-            cdLatch.await();
-            if (processException == null) {
-                log.info("Axis2 is successfully started. continuing tests");
-                return true;
-            } else {
-                log.warn("There was an error starting Axis2 server: " + serverName, processException);
-                return false;
+    public void setAxis2Xml(String axis2Xml) {
+        this.axis2Xml = axis2Xml;
+    }
+
+    public boolean startProcess() {
+        processException = null;
+
+        synchronized (axis2Server) {
+            axis2Server.start();
+            while (serverState <= STARTING_UP) {
+                try {
+                    axis2Server.wait(1000); // Label: 1 [Wait for Axis2Server.run() to notify]
+                } catch (InterruptedException e) {
+                    log.error("Axis2 server startup was interrupted", e);
+                    return false;
+                }
             }
-        } catch (InterruptedException e) {
+        }
+
+        if (serverState == STARTUP_FAILED) {
+            log.error("Axis2 server failed to start", processException);
             return false;
         }
+        return true;
     }
 
-    public boolean stop() {
-        if (serverThread.isRunning) {
+    public boolean stopProcess() {
+        if (serverState == SERVER_ACTIVE) {
+            synchronized (axis2Server) {
+                serverState = SHUTTING_DOWN;
+                axis2Server.notifyAll(); // Notify Label: 2
+
+                while (serverState > UNDEFINED) {
+                    try {
+                        axis2Server.wait(1000); // Label: 3 [Wait for Axis2Server.run() to notify]
+                    } catch (InterruptedException e) {
+                        log.warn("Axis2 server shutdown was interrupted", e);
+                        return false;
+                    }
+                }
+            }
             counter = null;
-            serverThread.isRunning = false;
-            try {
-                cdLatch = new CountDownLatch(1);
-                cdLatch.await();
-            } catch (InterruptedException e) {
-                 return false;
-            }
         }
         return true;
     }
@@ -84,97 +138,99 @@
         return -1;
     }
 
-    class BackEndServerThread extends Thread {
+    class Axis2Server extends Thread {
 
-        public boolean isRunning = false;
+        Axis2Server() {
+            super("axis2-" + serverName);
+        }
 
         public void run() {processException = null;
-            log.info("ServerThread: Initializing Axis2 Server: " + serverName);
-            processException = null;
+            log.info("Starting up Axis2 server: " + serverName);
+
+            ListenerManager listenerManager;
+            ConfigurationContext configContext;
+
             try {
                 listenerManager = new ListenerManager();
+                configContext = ConfigurationContextFactory.
+                        createConfigurationContextFromFileSystem(repoPath, axis2Xml);
+                configure(configContext);
+                listenerManager.startSystem(configContext);
+                serverState = SERVER_ACTIVE;
 
-                configContext = ConfigurationContextFactory
-                        .createConfigurationContextFromFileSystem(configuration.getAxis2Repo(),
-                                configuration.getAxis2Xml());
-
-                // setting System.setProperty does not work since this all servers are run on same jvm
-                configContext.setProperty("server_name", serverName);
-
-                TransportInDescription httpTrsIn = configContext.getAxisConfiguration().
-                        getTransportsIn().get("http");
-                String httpPort = configuration.getHttpPort();
-                if (httpPort != null && httpPort.length() > 0) {
-                    try {
-                        new Integer(httpPort);
-                        httpTrsIn.getParameter("port").setValue(httpPort);
-                    } catch (NumberFormatException e) {
-                        log.error("Given port is not a valid integer. Using default value.");
-                    }
+            } catch (Exception e) {
+                processException = e;
+                serverState = STARTUP_FAILED;
+                // start up failed...nothing more to do here
+                return;
+            } finally {
+                synchronized (this) {
+                    this.notifyAll(); // Notify Label: 1
                 }
+            }
 
-                TransportInDescription httpsTrsIn = configContext.getAxisConfiguration().
-                        getTransportsIn().get("https");
-                String httpsPort = configuration.getHttpsPort();
-                if (httpsPort != null && httpsPort.length() > 0) {
+            synchronized (this) {
+                while (serverState < SHUTTING_DOWN) {
+                    //wait for the tests
                     try {
-                        new Integer(httpsPort);
-                        httpsTrsIn.getParameter("port").setValue(httpsPort);
-                    } catch (NumberFormatException e) {
-                        log.error("Given port is not a valid integer. Using default value.");
+                        this.wait(1000); // Label: 2 [Wait for the stop() to notify]
+                    } catch (InterruptedException e) {
+                        log.error("Axis2 server interrupted", e);
                     }
                 }
+            }
 
-                log.info("ServerThread: Starting Axis2 Server: " + serverName);
-
-
-                ClusteringAgent clusteringAgent =
-                        configContext.getAxisConfiguration().getClusteringAgent();
-                String avoidInit = ClusteringConstants.Parameters.AVOID_INITIATION;
-                if (clusteringAgent != null && clusteringAgent.getParameter(avoidInit) != null &&
-                        ((String) clusteringAgent.getParameter(avoidInit).getValue()).
-                                equalsIgnoreCase("true")) {
-                    clusteringAgent.setConfigurationContext(configContext);
-                    clusteringAgent.init();
+            log.info("Shutting down Axis2 server...");
+            try {
+                listenerManager.stop();
+                configContext.terminate();
+            } catch (Exception e) {
+                log.warn("Error while shutting down Axis2 server", e);
+            } finally {
+                synchronized (this) {
+                    serverState = UNDEFINED;
+                    this.notifyAll(); // Notify Label: 3
                 }
+            }
+        }
 
-                if (configuration.isCounterEnabled()) {
-                    log.info("Engaging server side message counter");
-                    List<Phase> phases = configContext.getAxisConfiguration().getInFlowPhases();
-                    for (Phase phase : phases) {
-                        if (PhaseMetadata.PHASE_DISPATCH.equals(phase.getName())) {
-                            counter = new MessageCounter();
-                            phase.addHandler(counter);
-                            break;
-                        }
-                    }
-                }
+        private void configure(ConfigurationContext configContext) throws AxisFault {
+            // setting System.setProperty does not work since all servers run on same jvm
+            configContext.setProperty("server_name", serverName);
 
-                listenerManager.startSystem(configContext);
-                isRunning = true;
+            if (httpPort != null) {
+                TransportInDescription httpTrsIn = configContext.getAxisConfiguration().
+                        getTransportsIn().get("http");
+                httpTrsIn.getParameter("port").setValue(httpPort);
+            }
 
-            } catch (Exception e) {
-                processException = e;
+            if (httpsPort != null) {
+                TransportInDescription httpsTrsIn = configContext.getAxisConfiguration().
+                        getTransportsIn().get("https");
+                httpsTrsIn.getParameter("port").setValue(httpsPort);
             }
-            cdLatch.countDown();
 
-            log.info("ServerThread: Wait until tests are finished");
-            while (isRunning) {
-                //wait
-                try {
-                    sleep(1000);
-                } catch (InterruptedException e) {
-                    log.info("Thread interrupted");
+            ClusteringAgent clusteringAgent =
+                    configContext.getAxisConfiguration().getClusteringAgent();
+            String avoidInit = ClusteringConstants.Parameters.AVOID_INITIATION;
+            if (clusteringAgent != null && clusteringAgent.getParameter(avoidInit) != null &&
+                    ((String) clusteringAgent.getParameter(avoidInit).getValue()).
+                            equalsIgnoreCase("true")) {
+                clusteringAgent.setConfigurationContext(configContext);
+                clusteringAgent.init();
+            }
+
+            if (counterEnabled) {
+                log.info("Engaging server side message counter");
+                List<Phase> phases = configContext.getAxisConfiguration().getInFlowPhases();
+                for (Phase phase : phases) {
+                    if (PhaseMetadata.PHASE_DISPATCH.equals(phase.getName())) {
+                        counter = new MessageCounter();
+                        phase.addHandler(counter);
+                        break;
+                    }
                 }
             }
-            log.info("ServerThread: Shutting down Axis2 Server...");
-            try {
-                listenerManager.stop();
-                configContext.terminate();
-            } catch (Exception e) {
-                log.warn("Error while shutting down Axis2 server", e);
-            }
-            cdLatch.countDown();
         }
     }
 }
-*-*-*-
Message: Finished refactoring the integration test framework. Removed the BackEndServerController interface and unified all server management tasks to the ProcessController interface. Made the SynapseTestCase class more coherent by moving backend server specific logic to respective ProcessController impls.
-*-*-*-
When: 2013-07-22 16:59:03 -0400 
-*-*-*-
Who: hiranya