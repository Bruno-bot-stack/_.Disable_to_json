Index: scratch/hiranya/website/src/site/site.xml
===================================================================
--- scratch/hiranya/website/src/site/site.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/site.xml	(revision 1221612)
@@ -35,8 +35,12 @@
         <menu name="Documentation">
             <item name="Quick Start Guide" href="userguide/quick_start.html"/>
             <item name="Samples Setup Guide" href="userguide/samples/setup/index.html"/>
+            <item name="Extending the Service Bus" href="userguide/extending.html"/>
             <item name="Samples Catalog" href="userguide/samples.html"/>
             <item name="Configuration Language" href="userguide/config.html"/>
+            <item name="Upgrading" href="userguide/upgrading.html"/>
+            <item name="Deployment" href="userguide/deployment.html"/>
+            <item name="Transport" href="userguide/transports.html"/>
         </menu>
         <menu name="Developer Resources">
             <item name="Checkout the Source"/>
Index: scratch/hiranya/website/src/site/xdoc/userguide/transports.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/transports.xml	(nonexistent)
+++ scratch/hiranya/website/src/site/xdoc/userguide/transports.xml	(revision 1221612)
@@ -0,0 +1,817 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<document>
+	<body>
+		<section name="Introduction" id="Introduction">
+			<p>
+                The Synapse project has developed a set of transport implementations that provide
+                protocol support and/or features that go beyond what is provided out of the box by
+                Axis2:
+			</p>
+			<ul>
+				<li>
+                    A non blocking HTTP transport that gives better performance in a highly
+                    asynchronous environment like Synapse.
+				</li>
+				<li>
+                    A VFS transport that can read messages from files and write outgoing messages to
+                    a file system. The file system can be local or remote, and several remote
+                    protocols are supported, such as FTP, SSH, WebDAV, etc.
+				</li>
+				<li>
+					A transport supporting the
+					<a class="externalLink" href="http://www.fixprotocol.org">Financial Information eXchange</a>
+					protocol. FIX is a public-domain messaging standard developed specifically for
+                    the real-time electronic exchange of securities transactions. It has a large user
+                    base and is developed by the collaborative effort of banks, broker-dealers,
+                    exchanges, industry utilities and associations, institutional investors, and IT
+                    providers around the world.
+				</li>
+			</ul>
+			<p>Note that while these transports are developed as part of the Synapse project,
+                they can be used with any Axis2 based application.
+			</p>
+			<p>
+				The Synapse distribution also comes bundled with the following transports from
+                the <a class="externalLink" href="http://axis.apache.org/axis2/java/transports/index.html">Axis2 Transport</a>
+				project:
+			</p>
+			<ul>
+				<li>
+					A
+					<a class="externalLink" href="http://axis.apache.org/axis2/java/transports/jms.html">JMS transport</a>
+					supporting any JMS 1.0 or 1.1 provider.
+				</li>
+				<li>
+					A
+					<a class="externalLink" href="http://axis.apache.org/axis2/java/transports/mail.html">Mail transport</a>
+					able to send messages using SMTP and poll messages from a POP3 or IMAP account.
+					<p>
+                        Apache Synapse is also compatible with the following transport implementations
+                        from the Apache Axis2 Transports project:
+					</p>
+				</li>
+				<li>
+					<a class="externalLink" href="http://axis.apache.org/axis2/java/transports/tcp-transport.html">TCP transport</a>
+				</li>
+				<li>
+					<a class="externalLink" href="http://axis.apache.org/axis2/java/transports/sms.html">SMS transport</a>
+				</li>
+				<li>UDP transport</li>
+				<li>
+					XMPP transport
+					<p>
+						These transports are not shipped with Apache Synapse by default and hence they
+                        should be
+						<a class="externalLink" href="http://axis.apache.org/axis2/java/transports/download.cgi">downloaded separately</a>
+						from the Axis2 transport website and installed in the Synapse runtime.
+					</p>
+				</li>
+			</ul>
+		</section>
+		<section name="Content" id="Content">
+			<ul>
+				<li>
+					<a href="#Introduction">Introduction</a>
+				</li>
+				<li>
+					<a href="#Contents">Contents</a>
+				</li>
+				<li>
+					<a href="#Non-blocking_HTTP_transport">Non-blocking HTTP transport</a>
+					<ul>
+						<li>
+							<a href="#Example_configurations">Example configurations</a>
+						</li>
+						<li>
+							<a href="#Transport_listener_parameters">Transport listener parameters</a>
+						</li>
+						<li>
+							<a href="#Transport_sender_parameters">Transport sender parameters</a>
+						</li>
+					</ul>
+				</li>
+				<li>
+					<a href="#VFS_transport">VFS transport</a>
+					<ul>
+						<li>
+							<a href="#Transport_listener">Transport listener</a>
+						</li>
+						<li>
+							<a href="#Transport_sender">Transport sender</a>
+						</li>
+						<li>
+							<a href="#Using_SFTP">Using SFTP</a>
+						</li>
+						<li>
+							<a href="#Known_issues">Known issues</a>
+						</li>
+					</ul>
+				</li>
+				<li>
+					<a href="#FIX_transport">FIX transport</a>
+					<ul>
+						<li>
+							<a href="#Setting_up_the_FIX_Transport">Setting up the FIX Transport</a>
+						</li>
+						<li>
+							<a href="#FIX_Transport_Parameters">FIX Transport Parameters</a>
+						</li>
+					</ul>
+				</li>
+			</ul>
+		</section>
+	    <section name="Non-blocking HTTP transport" id="Non-blocking_HTTP_transport">
+			<subsection name="Example configuration" id="Example_configurations">
+				<div class="xmlConf">&lt;transportReceiver name=&quot;http&quot; class=&quot;org.apache.synapse.transport.nhttp.HttpCoreNIOListener&quot;&gt;
+    &lt;parameter name=&quot;port&quot;&gt;8280&lt;/parameter&gt;
+    &lt;parameter name=&quot;non-blocking&quot;&gt;true&lt;/parameter&gt;
+&lt;/transportReceiver&gt;
+
+&lt;transportReceiver name=&quot;https&quot; class=&quot;org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener&quot;&gt;
+    &lt;parameter name=&quot;port&quot; locked=&quot;false&quot;&gt;8243&lt;/parameter&gt;
+    &lt;parameter name=&quot;non-blocking&quot; locked=&quot;false&quot;&gt;true&lt;/parameter&gt;
+    &lt;parameter name=&quot;keystore&quot; locked=&quot;false&quot;&gt;
+        &lt;KeyStore&gt;
+            &lt;Location&gt;lib/identity.jks&lt;/Location&gt;
+            &lt;Type&gt;JKS&lt;/Type&gt;
+            &lt;Password&gt;password&lt;/Password&gt;
+            &lt;KeyPassword&gt;password&lt;/KeyPassword&gt;
+        &lt;/KeyStore&gt;
+    &lt;/parameter&gt;
+    &lt;parameter name=&quot;truststore&quot; locked=&quot;false&quot;&gt;
+        &lt;TrustStore&gt;
+            &lt;Location&gt;lib/trust.jks&lt;/Location&gt;
+            &lt;Type&gt;JKS&lt;/Type&gt;
+            &lt;Password&gt;password&lt;/Password&gt;
+        &lt;/TrustStore&gt;
+    &lt;/parameter&gt;
+&lt;/transportReceiver&gt;
+
+&lt;transportSender name=&quot;http&quot;  class=&quot;org.apache.synapse.transport.nhttp.HttpCoreNIOSender&quot;&gt;
+    &lt;parameter name=&quot;non-blocking&quot; locked=&quot;false&quot;&gt;true&lt;/parameter&gt;
+    &lt;parameter name=&quot;warnOnHTTP500&quot; locked=&quot;false&quot;&gt;*&lt;/parameter&gt;
+&lt;/transportSender&gt;
+
+&lt;transportSender name=&quot;https&quot; class=&quot;org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender&quot;&gt;
+    &lt;parameter name=&quot;non-blocking&quot; locked=&quot;false&quot;&gt;true&lt;/parameter&gt;
+    &lt;parameter name=&quot;warnOnHTTP500&quot; locked=&quot;false&quot;&gt;*&lt;/parameter&gt;
+    &lt;parameter name=&quot;keystore&quot; locked=&quot;false&quot;&gt;
+        &lt;KeyStore&gt;
+            &lt;Location&gt;lib/identity.jks&lt;/Location&gt;
+            &lt;Type&gt;JKS&lt;/Type&gt;
+            &lt;Password&gt;password&lt;/Password&gt;
+            &lt;KeyPassword&gt;password&lt;/KeyPassword&gt;
+        &lt;/KeyStore&gt;
+    &lt;/parameter&gt;
+    &lt;parameter name=&quot;truststore&quot; locked=&quot;false&quot;&gt;
+        &lt;TrustStore&gt;
+            &lt;Location&gt;lib/trust.jks&lt;/Location&gt;
+            &lt;Type&gt;JKS&lt;/Type&gt;
+            &lt;Password&gt;password&lt;/Password&gt;
+        &lt;/TrustStore&gt;
+    &lt;/parameter&gt;
+&lt;/transportSender&gt;</div>
+			</subsection>
+			<subsection name="Transport listener parameters" id="Transport_listener_parameters">
+				<p>The following parameters are supported by both the HTTP and the HTTPS listener:</p>
+				<dl>
+					<dt>
+						<tt>port</tt>
+					</dt>
+					<dd>The TCP port to bind the listener to.</dd>
+					<dt>
+						<tt>bind-address</tt>
+					</dt>
+					<dd>
+                        The IP address to bind the listener to. This can be used on hosts that have
+                        more than one network interface or IP address to run multiple Synapse instances
+                        listening to the same port. If this parameter is not specified, the
+						listener will accept connections on any IP address.
+					</dd>
+					<dt>
+						<tt>hostname</tt>
+					</dt>
+					<dd>
+						The host name to use when computing endpoint references in generated WSDL files.
+                        The default value is the host name as provided by the operation system or
+						<tt>localhost</tt> if the host name can't be determined. The value of this
+                        parameter is ignored if <tt>WSDLEPRPrefix</tt> is specified.
+					</dd>
+					<dt>
+						<tt>WSDLEPRPrefix</tt>
+					</dt>
+					<dd>
+						The URL prefix to use when computing endpoint references in generated WSDL files.
+                        The value must be a valid URL with at least a protocol and host. If this value
+                        is unspecified, endpoint references will be computed based on the listener type
+                        (HTTP or HTTPS) and <tt>hostname</tt> and <tt>port</tt> parameters.
+						<p>
+							This parameter should be used if clients connect to Synapse through a frontend
+                            server, e.g. a (load balancing) Apache, and these clients rely on the address
+                            information in the WSDL documents exposed through <tt>...?wsdl</tt> URLs.
+						</p>
+					</dd>
+				</dl>
+				<p>The following parameters are specific to the HTTPS listener: </p>
+				<dl>
+					<dt>
+						<tt>keystore</tt>
+					</dt>
+					<dd>
+						The keystore configuration. The value of this parameter must be a
+						<tt>&lt;KeyStore&gt;</tt>
+						element as shown in the example configurations above.
+					</dd>
+					<dt>
+						<tt>truststore</tt>
+					</dt>
+					<dd>
+						The truststore configuration. The value of this parameter must be a
+						<tt>&lt;TrustStore&gt;</tt>
+						element as shown in the example configurations above.
+					</dd>
+					<dt>
+						<tt>SSLVerifyClient</tt>
+					</dt>
+					<dd>
+						This parameter has the same meaning as the corresponding
+						<a class="externalLink" href="http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslverifyclient">mod_ssl directive</a>
+						and sets the desired certificate verification level for client authentication:
+						<ul>
+							<li>
+								<tt>none</tt> (default): no client certificate is required at all
+							</li>
+							<li>
+								<tt>optional</tt>: the client may present a valid certificate, but is
+                                not required to do so
+							</li>
+							<li>
+								<tt>require</tt>: the client has to present a valid certificate,
+                                otherwise the connection request will be terminated during SSL handshake
+							</li>
+						</ul>
+					</dd>
+				</dl>
+			</subsection>
+			<subsection name="Transport sender parameters" id="Transport_sender_parameters">
+				<p>
+                    The following property can be used to control based on content-types whether the
+                    HTTP/HTTPS sender shall output a warning for responses with HTTP status code 500.
+				</p>
+				<dl>
+					<dt>
+						<tt>warnOnHTTP500</tt>
+					</dt>
+					<dd>
+                        A list of content-types for which Synapse shall output a warning when receiving
+                        an HTTP 500 response (each value each separated by a |). By default Synapse
+                        outputs a warning for any HTTP 500 response, irrespective of the content-type.
+                        Consequently, also for each SOAP fault a warning will be logged. If only for
+                        specific content-types a warning shall be logged, please provide a |-separated
+                        list. To output the warning for messages which do not have a content-type set,
+                        please use the value 'none'.
+						<p>
+                            Example value: x-application/hessian|none
+                        </p>
+					</dd>
+				</dl>
+				<p>
+					The following properties can be used to configure the HTTP sender to use a proxy.
+                    They can be specified either as transport parameters in declared in
+					<tt>&lt;transportSender&gt;</tt> or as system properties.
+				</p>
+				<dl>
+					<dt>
+						<tt>http.proxyHost</tt>
+					</dt>
+					<dd>The host name or address of the proxy server.</dd>
+					<dt>
+						<tt>http.proxyPort</tt>
+					</dt>
+					<dd>The TCP port of the proxy server.</dd>
+					<dt>
+						<tt>http.nonProxyHosts</tt>
+					</dt>
+					<dd>
+						The hosts to which the HTTP sender should connect directly and not through
+                        the proxy server. The value can be a list of hosts, each separated by a |, and
+                        in addition a wildcard character (*) can be used for matching.
+						<p>
+							Example value:
+							<tt>*.foo.com|localhost</tt>
+						</p>
+					</dd>
+				</dl>
+				<p>Note that the HTTPS sender has no proxy support yet.</p>
+				<p>The following parameters are specific to the HTTP sender:</p>
+				<dl>
+					<dt>
+						<tt>keystore</tt>
+					</dt>
+					<dd>
+						The keystore configuration. The value of this parameter must be a
+						<tt>&lt;KeyStore&gt;</tt> element as shown in the example configurations
+                        above.
+					</dd>
+					<dt>
+						<tt>truststore</tt>
+					</dt>
+					<dd>
+						The truststore configuration. The value of this parameter must be a
+						<tt>&lt;TrustStore&gt;</tt>
+						element as shown in the example configurations above.
+					</dd>
+					<dt>
+						<tt>novalidatecert</tt>
+					</dt>
+					<dd>
+						When set to <tt>true</tt>, this parameter disables server certificate
+                        validation (trust). The default value is <tt>false</tt>. This parameter will
+                        be ignored if <tt>truststore</tt> is set.
+						<p>
+							Setting his parameter to <tt>true</tt>
+							is useful in development and test environments, but should not be used in
+                            production environments. If validation is disabled, a warning message will
+                            be logged at startup.
+						</p>
+					</dd>
+					<dt>
+						<tt>HostnameVerifier</tt>
+					</dt>
+					<dd>
+						This optional parameter specifies the policy to apply when checking that the
+                        hostname of the server matches the names stored inside the X.509 certificate
+                        presented by the server. Possible values are <tt>Strict</tt>, <tt>AllowAll</tt>
+                        and <tt>DefaultAndLocalhost</tt>. See the
+						<a href="apidocs/org/apache/synapse/transport/nhttp/HostnameVerifier.html">HostnameVerifier Javadoc</a>
+						for more details.
+					</dd>
+				</dl>
+		</subsection>
+		</section>
+		 <section name="VFS transport" id="VFS_transport">
+			<subsection name="Transport listener" id="Transport_listener">
+		
+				<p>
+                    The VFS transport listener receives messages dropped in a given local or remote file
+                    system location. The location is specified by a URL that either identifies a single
+                    file or a directory. The transport listener will periodically poll the specified
+                    location and process any file(s) found. After a file has been processed it will be
+					deleted or moved to another location. Note that this is absolutely mandatory to
+                    prevent the listener from processing files multiple times. Therefore the VFS transport
+                    listener can only be used in situations where it has write access to the file system
+                    location and where deleting or moving the dropped files is acceptable.
+				</p>
+				<p>
+					The transport is based on
+					<a class="externalLink" href="http://commons.apache.org/vfs/">Apache Commons VFS</a>
+					and supports any protocol for which a VFS provider is available. The transport is
+                    pre-configured with providers for local files (
+					<tt>file:</tt>
+					scheme), HTTP, HTTPS, FTP and SFTP (i.e. file transfer over SSH).
+				</p>
+				<p>
+                    There is a fundamental difference between the VFS transport and transports such as
+                    HTTP and it is important to understand this difference to be able to use the VFS
+                    transport correctly. The HTTP transport binds to a single protocol endpoint, i.e.
+                    a TCP port on which it accepts incoming HTTP requests. These requests are then
+                    dispatched to the right service based on the request URI. On the other hand, the
+                    VFS transport only receives the payload of a message, but no additional information
+                    that could be used to dispatch the message to a service. This means that file system
+                    locations must be explicitly mapped to services. This is done using a set of service
+                    parameters.
+				</p>
+				<p>For Synapse this means that the VFS transport listener can only be used in
+                    conjunction with proxy services. The relevant service parameters are then specified
+                    as follows:
+				</p>
+				<div class="xmlConf">&lt;proxy name=&quot;MyVFSService&quot; transports=&quot;vfs&quot;&gt;
+    &lt;parameter name=&quot;transport.vfs.FileURI&quot;&gt;file:///var/spool/synapse/in&lt;/parameter&gt;
+    &lt;parameter name=&quot;transport.vfs.ContentType&quot;&gt;application/xml&lt;/parameter&gt;
+    ...
+    &lt;target&gt;
+	    ...
+    &lt;/target&gt;
+&lt;/proxy&gt;</div>
+				<p>
+					In this example the file system location
+					<tt>file:///var/spool/synapse/in</tt>
+					is explicitly bound to
+					<tt>MyVFSService</tt>
+					, i.e. any message dropped in that location will be predispatched to that service, bypassing any other configured
+					dispatch mechanisms that would apply to messages received through HTTP.
+				</p>
+				<p>The VFS transport recognizes the following service parameters:</p>
+				<dl>
+					<dt>
+						<tt>transport.vfs.FileURI</tt>(Required)
+					</dt>
+					<dd>
+                        The primary File (or Directory) URI in the vfs* transport format, for this
+                        service
+                    </dd>
+					<dt>
+						<tt>transport.vfs.ContentType</tt> (Required)
+					</dt>
+					<dd>
+						The expected content type for files retrieved for this service. The VFS
+                        transport uses this information to select the appropriate message builder.
+						<p>Examples:</p>
+						<ul>
+							<li>
+								<tt>text/xml</tt> for plain XML or SOAP
+							</li>
+							<li>
+								<tt>text/plain; charset=ISO-8859-1</tt> for text files
+							</li>
+							<li>
+								<tt>application/octet-stream</tt> for binary data
+							</li>
+						</ul>
+					</dd>
+					<dt>
+						<tt>transport.vfs.FileNamePattern</tt>
+						(Optional)
+					</dt>
+					<dd>
+                        A file name regex pattern to match files against a directory specified by
+                        the FileURI
+                    </dd>
+					<dt>
+						<tt>transport.PollInterval</tt> (Optional)
+					</dt>
+					<dd> The poll interval (in seconds)</dd>
+					<dt>
+						<tt>transport.vfs.ActionAfterProcess</tt> (Optional)
+					</dt>
+					<dd> DELETE or MOVE</dd>
+					<dt>
+						<tt>transport.vfs.MoveAfterProcess</tt> (Optional)
+					</dt>
+					<dd>
+                        The directory to move files after processing (i.e. all files process
+                        successfully)
+                    </dd>
+					<dt>
+						<tt>transport.vfs.ActionAfterErrors</tt> (Optional)
+					</dt>
+					<dd> DELETE or MOVE</dd>
+					<dt>
+						<tt>transport.vfs.MoveAfterErrors</tt> (Optional)
+					</dt>
+					<dd>
+                        The directory to move files after errors (i.e. some of the files succeed
+                        but some fail)
+                    </dd>
+					<dt>
+						<tt>transport.vfs.ActionAfterFailure</tt> (Optional)
+					</dt>
+					<dd> DELETE or MOVE</dd>
+					<dt>
+						<tt>transport.vfs.MoveAfterFailure</tt> (Optional)
+					</dt>
+					<dd> The directory to move after failure (i.e. all files fail)</dd>
+					<dt>
+						<tt>transport.vfs.ReplyFileURI</tt> (Optional)
+					</dt>
+					<dd> Reply file URI</dd>
+					<dt>
+						<tt>transport.vfs.ReplyFileName</tt> (Optional)
+					</dt>
+					<dd> Reply file name (defaults to response.xml)</dd>
+					<dt>
+						<tt>transport.vfs.MoveTimestampFormat</tt> (Optional)
+					</dt>
+					<dd>
+                        Timestamp prefix format for processed file name. java.text.SimpleDateFormat
+                        compatible string. e.g. yyMMddHHmmss'-'
+					</dd>
+					<dt>
+						<tt>transport.vfs.Locking</tt> (Optional)
+					</dt>
+					<dd>
+						By-default file locking is turned on in the VFS transport, and this parameter
+                        lets you configure the locking behaviour on a per service basis. Possible values are
+						<tt>enable</tt> or <tt>disable</tt>, and both these values are important because
+                        the locking can be disabled at the global level by specifying that at the
+                        receiver level and selectively enable locking only for a set of services.
+					</dd>
+					<dt>
+						<tt>transport.vfs.Streaming</tt> (Optional)
+					</dt>
+					<dd>
+						If this parameter is set to <tt>true</tt>, the transport will attempt to use a
+						<tt>javax.activation.DataSource</tt> (instead of a <tt>java.io.InputStream</tt>
+						) object to pass the content of the file to the message builder. Note that this
+                        is only supported by some message builders, e.g. for plain text and binary.
+						<p>
+                            This allows processing of the message without storing the entire content
+                            in memory. It also has two other side effects:
+						</p>
+						<ul>
+							<li>
+                                The incoming file (or connection in case of a remote file) will only
+                                be opened on demand.
+                            </li>
+							<li>
+                                Since the data is not cached, the file might be read several times.
+                            </li>
+						</ul>
+						<p>
+                            This option can be used to achieve streaming of large payloads. Note that
+                            this feature is still somewhat experimental and might be superseded by a
+                            more flexible mechanism in a future release.
+						</p>
+					</dd>
+				</dl>
+				<p>
+					Note that since the VFS endpoints are configured at the level of the service, the
+                    only parameter that is available at the listener is the file locking configuration
+                    parameter which is optional and the transport listener is enabled in
+					<tt>axis2.xml</tt>
+					simply as follows:
+				</p>
+				<div class="xmlConf">&lt;transportReceiver name=&quot;vfs&quot; class=&quot;org.apache.synapse.transport.vfs.VFSTransportListener&quot;&gt;
+    &lt;parameter name=&quot;transport.vfs.Locking&quot;&gt;enable | disable&lt;/parameter&gt; ?
+&lt;/transportReceiver&gt;</div>
+			</subsection>
+			<subsection name="Transport sender" id="Transport_sender">
+				<p>
+                    The VFS transport sender allows to write outgoing messages to local or remote files.
+                    As with the listener, the transport sender supports any protocol for which there
+                    is a VFS provider.
+				</p>
+				<p>
+					The sender is enabled be the following directive in
+					<tt>axis2.xml</tt> file locking which is by-default enabled can be configured
+                    using the <tt>transport.vfs.Locking</tt> parameter:
+				</p>
+				<div class="xmlConf">&lt;transportSender name=&quot;vfs&quot; class=&quot;org.apache.synapse.transport.vfs.VFSTransportSender&quot;&gt;
+    &lt;parameter name=&quot;transport.vfs.Locking&quot;&gt;enable | disable&lt;/parameter&gt; ?
+&lt;/transportSender&gt;</div>
+				<p>
+					To send a message using the VFS transport, the destination URI must start with
+					<tt>vfs:</tt> followed by a valid VFS URL. For example, in a Synapse mediation,
+                    one would use:
+				</p>
+				<div class="xmlConf">&lt;endpoint&gt;
+    &lt;address uri=&quot;vfs:file:///var/spool/synapse/out&quot;/&gt;
+&lt;/endpoint&gt;</div>
+				<p>
+					Other examples of valid VFS URLs are (see
+					<a class="externalLink" href="http://commons.apache.org/vfs/filesystems.html">http://commons.apache.org/vfs/filesystems.html</a>
+					for more samples):
+				</p>
+				<ul>
+					<li>
+						<tt>file:///directory/filename.ext</tt>
+					</li>
+					<li>
+						<tt>file:////somehost/someshare/afile.txt</tt>
+					</li>
+					<li>
+						<tt>jar:../lib/classes.jar!/META-INF/manifest.mf</tt>
+					</li>
+					<li>
+						<tt>jar:zip:outer.zip!/nested.jar!/somedir</tt>
+					</li>
+					<li>
+						<tt>ftp://myusername:mypassword@somehost/pub/downloads/somefile.tgz[?vfs.passive=true]</tt>
+					</li>
+				</ul>
+				<p>
+					The global configuration of the file locking can be overriden by providing the
+					<tt>transport.vfs.Locking</tt> as a URL parameter with the appropriate value (
+					<tt>enable</tt>, or <tt>disable</tt>) on a given endpoint.
+				</p>
+				<p>
+                    It should be noted that by its nature, the VFS transport sender doesn't support
+                    synchronous responses and should only be invoked using the out-only message
+                    exchange pattern. In a Synapse mediation, this can be forced using the
+					following mediator:
+				</p>
+				<div class="xmlConf">&lt;property action=&quot;set&quot; name=&quot;OUT_ONLY&quot; value=&quot;true&quot;/&gt;</div>
+			</subsection>
+			<subsection name="Using SFTP" id="Using_SFTP">
+				<p>
+                    To avoid man-in-the-middle attacks, SSH clients will only connect to hosts with
+                    a known host key. When connecting for the first time to an SSH server, a typical
+                    command line SSH client would request confirmation from the user to add the
+                    server and its fingerprint to the list of known hosts.
+				</p>
+				<p>
+					The VFS transports supports SFTP through the
+					<a class="externalLink" href="http://www.jcraft.com/jsch/">JSch</a>
+					library and this library also requires a list of known hosts. Since Synapse is
+                    not an interactive process, it can't request confirmation from the user and is
+                    therefore unable to automatically add a host to the list. This implies that the
+                    list of known hosts must be set up manually before the transport can connect.
+				</p>
+				<p>
+					Jsch loads the list of known hosts from a file called <tt>known_hosts</tt> in
+                    the <tt>.ssh</tt> sub-directory of the user's home directory, i.e. <tt>$HOME/.ssh</tt>
+					in Unix and <tt>%HOMEPATH%\.ssh</tt> in Windows. The location and format of this
+                    file are compatible with the <a class="externalLink" href="http://www.openssh.com/">OpenSSH</a>
+					client.
+				</p>
+				<p>
+					Since the file not only contains a list of host names but also the fingerprints
+                    of their host keys, the easiest way to add a new host to that file is to simply
+                    use the OpenSSH client to open an SSH session on the target host. The client will
+                    then ask to add the credentials to the <tt>known_hosts</tt> file. Note that if
+                    the SSH server is configured to only allow SFTP sessions, but no interactive
+                    sessions, the connection will actually fail. Since this doesn't rollback the
+                    change to the <tt>known_hosts</tt> file, this error can be ignored.
+				</p>
+			</subsection>
+			<subsection name="Known issues" id="Known_issues">
+				<p>
+                    The VFS listener will start reading a file as soon as it appears in the configured
+                    location. To avoid processing half written files, the creation of these files should
+                    be made atomic. On most platforms this can be achieved by writing the data to a
+                    temporary file and then moving the file to the target location. Note however that
+                    a move operation is only atomic if the source and destination are on the same
+                    physical file system. The location for the temporary file should be chosen with
+                    that constraint in mind.
+				</p>
+				<p>
+                    It should also be noted that the VFS transport sender doesn't create files atomically.
+                </p>
+			</subsection>
+		</section>
+		<section name="FIX transport" id="FIX_transport">
+			<p>A general overview about the FIX transport can be found in the following articles:</p>
+			<ul>
+				<li>
+					<a class="externalLink" href="http://wso2.org/library/3449">Apache Synapse FIX'ed</a>
+				</li>
+				<li>
+					<a class="externalLink" href="http://wso2.org/library/3837">Using the WSO2 ESB and FIX</a>
+					(also applies to Synapse)
+				</li>
+			</ul>
+			<subsection name="Setting up the FIX Transport" id="Setting_up_the_FIX_Transport">
+				<p>
+					To use the FIX transport, you need a local
+					<a class="externalLink" href="http://www.quickfixj.org">Quickfix/J</a>
+					installation. Download Quickfix/J from
+					<a class="externalLink" href="http://www.quickfixj.org/downloads">http://www.quickfixj.org/downloads</a>
+					.
+				</p>
+				<p>
+                    To enable the FIX transport, you need to uncomment the FIX transport sender and
+                    FIX transport receiver configurations in the SYNAPSE_HOME/repository/conf/axis2.xml.
+                    Simply locate and uncomment the FIXTransportSender and FIXTransportListener sample
+                    configurations. Also add the following jars to the Synapse class path
+					(SYNAPSE_HOME/lib directory).
+				</p>
+				<ul>
+					<li>quickfixj-core.jar</li>
+					<li>quickfixj-msg-fix40.jar</li>
+					<li>quickfixj-msg-fix41.jar</li>
+					<li>quickfixj-msg-fix42.jar</li>
+					<li>quickfixj-msg-fix43.jar</li>
+					<li>quickfixj-msg-fix44.jar</li>
+					<li>mina-core.jar</li>
+					<li>slf4j-api.jar</li>
+					<li>slf4j-jdk14.jar</li>
+				</ul>
+				<p>All these jars are shipped with the Quickfix/J binary distribution.</p>
+			</subsection>
+			<subsection name="FIX Transport Parameters" id="FIX_Transport_Parameters">
+				<p>
+                    This is the list of all parameters accepted by the FIX transport. Refer the
+                    sample 257 and 258 to see how some of them are used in practice.
+				</p>
+				<dl>
+					<dt>
+						<tt>transport.fix.AcceptorConfigURL</tt>
+					</dt>
+					<dd>
+                        If a service needs to listen to incoming FIX messages from a remote initiator
+                        then Synapse needs to create an acceptor. This parameter should contain the
+                        URL of the file which contains the FIX configuration for the acceptor.
+						(See sample 257)
+					</dd>
+					<dt>
+						<tt>transport.fix.InitiatorConfigURL</tt>
+					</dt>
+					<dd>
+                        If a service needs to send FIX messages to a remote acceptor Synapse should
+                        create an initiator. This parameter should contain the URL of the file which
+                        contains the FIX configuration for the initiator. (See sample 257)
+					</dd>
+					<dt>
+						<tt>transport.fix.AcceptorMessageStore</tt>
+					</dt>
+					<dd>
+                        The type of message store to be used with the acceptor. Allowed values for
+                        this parameter are 'file', 'jdbc', 'memory' and 'sleepycat'. If not specified
+                        memory based message store will be used by default. Additional parameters
+                        required to configure each of the message stores should be specified in the
+                        acceptor configuration file.
+					</dd>
+					<dt>
+						<tt>transport.fix.InitiatorMessageStore</tt>
+					</dt>
+					<dd>
+                        Same as the above but applies only for the initiators. Additional parameters
+                        required to configure each of the message stores should be specified in the
+                        initiator configuration file.
+					</dd>
+					<dt>
+						<tt>transport.fix.AcceptorLogFactory</tt>
+					</dt>
+					<dd>
+                        Specifies the transport level log factory to be used to log messages going
+                        through the acceptor. FIX messages are logged without putting them in SOAP
+                        envelopes at this level. Accepted values are 'console', 'file' and 'jdbc'.
+						If not specified no logging will be done at the transport level. Additional
+                        parameters required to configure each of the lof factories should be specified
+                        in the acceptor configuration file.
+					</dd>
+					<dt>
+						<tt>transport.fix.InitiatorLogFactory</tt>
+					</dt>
+					<dd>
+                        Specifies the transport level log factory to be used to log messages going
+                        through the initiator. Functionality is similar to the above. Additional
+                        parameters required to configure each of the lof factories should be specified
+						in the initiator configuration file.
+					</dd>
+					<dt>
+						<tt>transport.fix.ResponseDeliverToCompID</tt>
+					</dt>
+					<dd>
+                        If a response FIX message sent from Synapse to a remote FIX engine should be
+                        forwarded from the remote engine to another party this parameter can be used
+                        to set the DeliverToCompID field of the messages at Synapse.
+					</dd>
+					<dt>
+						<tt>transport.fix.ResponseDeliverToSubID</tt>
+					</dt>
+					<dd>
+                        If a response FIX message sent from Synapse to a remote FIX engine should be
+                        forwarded from the remote engine to another party this parameter can be used
+                        to set the DeliverToSubID field of the messages at Synapse.
+					</dd>
+					<dt>
+						<tt>transport.fix.ResponseDeliverToLocationID</tt>
+					</dt>
+					<dd>
+                        If a response FIX message sent from Synapse to a remote FIX engine should be
+                        forwarded from the remote engine to another party this parameter can be used
+                        to set the DeliverToLocationID field of the messages at Synapse.
+					</dd>
+					<dt>
+						<tt>transport.fix.ServiceName</tt>
+					</dt>
+					<dd>
+                        Used when messages coming over a different protocol has to be forwarded over
+                        FIX. The value must be equal to the name of the service and the scope must be
+                        'axis2-client' (See sample 258)
+					</dd>
+					<dt>
+						<tt>transport.fix.SendAllToInSequence</tt>
+					</dt>
+					<dd>
+                        When there are multiple responses to a FIX request and when we need only one
+                        of them to be sent to the original requester this parameter has to be set to
+                        'false'. This mostly comes handy when the original requester is communicating
+                        over a different protocol (like HTTP). If this parameter is not set to 'false'
+                        at such scenarios messages might get into a loop. (See sample 258)
+					</dd>
+					<dt>
+						<tt>transport.fix.BeginStringValidation</tt>
+					</dt>
+					<dd>
+                        When the FIX messages sent to Synapse should not be forwarded to a FIX session
+                        with a different BeginString value this parameter can be set to 'true'. Setting
+                        this parameter to 'true' will enforce this restriction.
+					</dd>
+				</dl>
+			</subsection>
+		</section>
+
+	</body>
+</document>
\ No newline at end of file
Index: scratch/hiranya/website/src/site/xdoc/userguide/deployment.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/deployment.xml	(nonexistent)
+++ scratch/hiranya/website/src/site/xdoc/userguide/deployment.xml	(revision 1221612)
@@ -0,0 +1,347 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<document>
+    <body>
+        <section name="Content">
+            <ul>
+                <li>
+                    <a href="#Platform_requirements">Platform requirements</a>
+                </li>
+                <li>
+                    <a href="#Overview_of_available_deployment_options">Overview of available deployment options</a>
+                </li>
+                <li>
+                    <a href="#Stand-alone_deployment">Stand-alone deployment</a>
+                    <ul>
+                        <li>
+                            <a href="#Using_the_standard_binary_distribution">Using the standard binary distribution</a>
+                        </li>
+                        <li>
+                            <a href="#Using_Maven_to_build_a_custom_distribution">Using Maven to build a custom distribution</a>
+                        </li>
+                    </ul>
+                </li>
+                <li>
+                    <a href="#WAR_deployment">WAR deployment</a>
+                </li>
+            </ul>
+        </section>
+        <section name="Platform requirements" id="Platform_requirements">
+
+            <p>
+                Synapse requires Java 1.5 or higher and has been tested on Java runtime environments
+                from Sun, IBM and Apple. Note that the recommended Java version is 1.6. Synapse is
+                used on various operation systems, including Linux, Mac OS X, Solaris, Windows and AIX,
+                as well as mainframe environments. The recommended operation system for production use
+                is Linux since it offers a wider range of options to tune the TCP/IP stack. This is
+                important to optimize the performance of the NIO HTTP transport.
+            </p>
+            <p>
+                When selecting the environment for deployment, the following known issues should be taken into account:
+            </p>
+            <ul>
+                <li>
+                    The <tt>synapse.bat</tt> and <tt>synapse.sh</tt> scripts included in the binary
+                    distribution use the <tt>-server</tt> option which is not supported by IBM's JRE.
+                    This problem can be easily solved by manually editing these scripts to
+                    remove the unsupported <tt>-server</tt> option. See
+                    <a class="externalLink" href="https://issues.apache.org/jira/browse/SYNAPSE-454">SYNAPSE-454</a>
+                    .
+                </li>
+                <li>
+                    In the past several issues related to subtle concurrency problems have been reported
+                    with the non-blocking HTTP transport (which is the recommended HTTP implementation
+                    for Synapse) when used on more &quot;exotic&quot; platforms. While this has been
+                    improved it is recommended to thoroughly test the HTTP transport before deploying
+                    Synapse in a production environment based on these platforms. Please don't hesitate
+                    to report any issues using JIRA or by posting a message on the mailing list.
+                </li>
+            </ul>
+        </section>
+
+        <section name="Overview of available deployment options" id="Overview_of_available_deployment_options">
+
+            <p>Synapse can be deployed in two different ways:</p>
+            <ul>
+                <li>Stand-alone, i.e. as an independently managed Java process.</li>
+                <li>
+                    As a J2EE application (WAR) deployed into a simple servlet container (e.g. Tomcat)
+                    or a full-featured J2EE application server.
+                </li>
+            </ul>
+            <p>
+                Since Synapse doesn't rely on any container API, the features offered are the same in
+                both deployment scenarios, with very few exceptions:
+            </p>
+            <ul>
+                <li>
+                    There is a minor issue that prevents classpath resources from being used in a
+                    WAR deployment. See <a class="externalLink" href="https://issues.apache.org/jira/browse/SYNAPSE-207">SYNAPSE-207</a>
+                    .
+                </li>
+                <li>
+                    When deployed as a WAR file, Synapse can be configured with the standard Axis2
+                    servlet based HTTP transport: while the recommended HTTP implementation for Synapse
+                    is the NIO HTTP transport, there might be situations where it is preferable or
+                    mandatory to use the HTTP protocol implementation of the application server.
+                </li>
+            </ul>
+            <p>
+                In some scenarios Synapse is used to proxy services that are deployed themselves on
+                an application server. In these cases it would be interesting to deploy Synapse on
+                the same application server and use an in-VM transport instead of HTTP to communicate
+                with these services. Note that for the moment no production-grade implementation of
+                this type of transport exists yet for Axis2, but this might change in the future.
+            </p>
+            <p>
+                Since the features offered are almost the same, the differences between the two
+                deployment options are mainly related to packaging and operational considerations:
+            </p>
+            <ul>
+                <li>
+                    Many IT departments prefer deploying J2EE applications than managing stand-alone
+                    Java processes, because this allows them to leverage the management and monitoring
+                    facilities offered by the application server.
+                </li>
+                <li>
+                    If the use case relies on JNDI resources such as JMS connection factories,
+                    JDBC data source and transactions it might be easier to set up and configure these
+                    resources when Synapse is deployed directly on the application
+                    server that hosts these resources.
+                </li>
+            </ul>
+        </section>
+
+        <section name="Stand-alone deployment" id="Stand-alone_deployment">
+            <subsection name="Using the standard binary distribution" id="Using_the_standard_binary_distribution">
+                <p>
+                    The easiest way to get started with a stand-alone deployment is using the standard
+                    binary distribution ZIP or tarball (see <a href="download.html">download.html</a>).
+                    It already contains everything that is needed to run Synapse stand-alone and you
+                    only need to customize it according to your requirements:
+                </p>
+                <ul>
+                    <li>
+                        Place your mediation in <tt>repository/conf/synapse.xml</tt>.
+                    </li>
+                    <li>
+                        Place any additional files such as WSDL files, endpoint definitions, etc.
+                        referenced by your configuration in the <tt>repository</tt> directory.
+                    </li>
+                    <li>
+                        Customize <tt>repository/conf/axis2.xml</tt>
+                        to enable and disable transports according to your needs.
+                    </li>
+                    <li>
+                        Add any additional libraries required by your mediation to the
+                        <tt>lib</tt>directory. Alternatively modify <tt>repository/conf/wrapper.conf</tt>
+                        to add directories and JAR files to the classpath.
+                    </li>
+                    <li>
+                        Add any required modules to <tt>repository/modules</tt>.
+                    </li>
+                    <li>
+                        If necessary, modify <tt>lib/log4j.properties</tt> to configure logging.
+                    </li>
+                </ul>
+                <p>
+                    Since the standard binary distribution also contains samples and documentation,
+                    you might want to remove the following folders:
+                </p>
+                <ul>
+                    <li>
+                        <tt>docs</tt>
+                    </li>
+                    <li>
+                        <tt>repository/conf/sample</tt>
+                    </li>
+                    <li>
+                        <tt>samples</tt>
+                    </li>
+                </ul>
+                <p>
+                    The <tt>bin</tt> directory contains Unix and Windows scripts to run Synapse:
+                </p>
+                <ul>
+                    <li>
+                        <tt>synapse.sh</tt> and <tt>synapse.bat</tt> allow to run Synapse in non
+                        daemon mode.
+                    </li>
+                    <li>
+                        <tt>synapse-daemon.sh</tt> is a Sys V init script that can be used on Unix
+                        systems to start and stop Synapse in daemon mode.
+                    </li>
+                    <li>
+                        <tt>install-synapse-service.bat</tt> and <tt>uninstall-synapse-service.bat</tt>
+                        can be used on Windows to install Synapse as an NT service.
+                    </li>
+                </ul>
+            </subsection>
+            <subsection name="Using Maven to build a custom distribution" id="Using_Maven_to_build_a_custom_distribution">
+                <p>
+                    Building a custom Synapse package based on the standard binary distribution is a
+                    manual process and this has some drawbacks:
+                </p>
+                <ul>
+                    <li>
+                        The JAR files required to run Synapse must be selected manually and it is not easy to identify unused JARs
+                        that could be safely removed.
+                    </li>
+                    <li>
+                        The process is not suitable if there is a requirement for strict configuration management. In particular:
+                        <ul>
+                            <li>
+                                Because of the large number of JAR files, managing the artifacts using
+                                a source control repository is not practical.
+                            </li>
+                            <li>
+                                The process is not repeatable and there is no way to go back to a
+                                previous version of the artifacts.
+                            </li>
+                        </ul>
+                    </li>
+                    <li>
+                        When upgrading to a newer version of Synapse (or when working with snapshot
+                        versions), it is necessary either to manually replace the JARs in the current
+                        package or to start again from a new version of the standard binary
+                        distribution.
+                    </li>
+                    <li>
+                        If Synapse needs to be deployed with slightly different configurations in
+                        multiple environments (e.g. test and production), the corresponding packages
+                        need to be prepared manually.
+                    </li>
+                </ul>
+                <p>
+                    Note that these problems not only arise in the development and maintenance phases
+                    of a project, but also when doing proof of concepts that you want to keep in a safe
+                    place for later reuse. One approach to overcome these difficulties is to use Maven
+                    to assemble a custom package. When used correctly, this approach solves all of the
+                    issues identified above. In particular Maven's dependency management together with
+                    the excellent <a class="externalLink" href="http://maven.apache.org/plugins/maven-assembly-plugin/">assembly plugin</a>
+                    can be used to automatically select the relevant JARs to include and pull them
+                    from Maven repositories. The remaining artifacts required to assemble the package
+                    can then be easily stored in a source control repository.
+                </p>
+                <p>
+                    Synapse provides a Maven archetype that allows to set up this kind of project in
+                    only a few simple steps. To begin with, change to the directory where you want to
+                    create the project and issue the following command:
+                </p>
+                <div class="source">
+                    <div class="command">mvn archetype:generate -DarchetypeCatalog=http://synapse.apache.org</div>
+                </div>
+                <p>
+                    In case of problems, you can try to use the latest version of the archetype catalog:
+                </p>
+                <div class="source">
+                    <div class="command">mvn archetype:generate <br/>-DarchetypeCatalog=http://svn.apache.org/repos/asf/synapse/trunk/java/src/site/resources</div>
+                </div>
+                <p>
+                    Finally, if you have build Synapse from sources, you don't need to specify a
+                    catalog at all: the archetype is added automatically to the local catalog during
+                    the build.
+                </p>
+                <p>
+                    In any case, when prompted by Maven, select <tt>synapse-package-archetype</tt>
+                    for the Synapse version you want to use. In the next step enter the values for
+                    <tt>groupId</tt>, <tt>artifactId</tt> and <tt>version</tt> for your project. You
+                    will also be prompted for a package name. Since the archetype doesn't contain any source
+                    code, this value is irrelevant and you can continue with the default value.
+                </p>
+                <p>
+                    At this stage a Maven project has been created in a sub-directory with the same
+                    name as the <tt>artifactId</tt> specified previously. You should now customize this
+                    projects according to your needs:
+                </p>
+                <ul>
+                    <li>
+                        Add your mediation configuration to <tt>repository/conf/synapse.xml</tt>.
+                    </li>
+                    <li>
+                        Customize the dependencies in <tt>pom.xml</tt>. In particular if additional
+                        transports such as JMS are needed, add the required dependencies here. Additional
+                        Axis2 modules should also be added here.
+                    </li>
+                    <li>
+                        Enable and configure additional transports in <tt>repository/conf/axis2.xml</tt>.
+                    </li>
+                    <li>
+                        Place any other files referenced by <tt>synapse.xml</tt> into the
+                        <tt>repository</tt> directory.
+                    </li>
+                </ul>
+                <p>
+                    The project is built as usually with the following command:
+                </p>
+                <div class="source">
+                    <div class="command">mvn package</div>
+                </div>
+                <p>
+                    This will create a ZIP file (in the <tt>target</tt> directory) containing
+                    everything that is needed to run your custom Synapse configuration. You only
+                    need to extract it and use the appropriate script in the <tt>bin</tt>
+                    directory to start Synapse.
+                </p>
+            </subsection>
+        </section>
+        <section name="WAR deployment" id="WAR_deployment">
+            <p>
+                Synapse provides a standard WAR file that can be used to deploy mediation on a servlet
+                container or on a J2EE application server. Note that this WAR file is not part of the
+                downloadable distributions. It can be retrieved from the following location:
+            </p>
+            <ul>
+                <li>
+                    <a class="externalLink" href="http://repo1.maven.org/maven2/org/apache/synapse/synapse-war/">http://repo1.maven.org/maven2/org/apache/synapse/synapse-war/</a>
+                    for released versions.
+                </li>
+                <li>
+                    <a class="externalLink" href="http://hudson.zones.apache.org/hudson/job/Synapse%20-%20Trunk/org.apache.synapse$synapse-war/">http://hudson.zones.apache.org/hudson/job/Synapse%20-%20Trunk/org.apache.synapse$synapse-war/
+                    </a>
+                    for snapshot versions.
+                </li>
+            </ul>
+            <p>
+                Customization of the Web application is similar to the stand-alone option, but the
+                default directory structure is different:
+            </p>
+            <ul>
+                <li>
+                    <tt>synapse.xml</tt> and <tt>axis2.xml</tt> are placed into the <tt>WEB-INF/conf</tt>
+                    directory. All other files referenced by your mediation should go to the
+                    <tt>WEB-INF/repository</tt>
+                    directory.
+                </li>
+                <li>
+                    Additional libraries must be placed into the standard <tt>WEB-INF/lib</tt>
+                    directory.
+                </li>
+                <li>
+                    Axis2 modules are located in <tt>repository/modules</tt>.
+                </li>
+                <li>
+                    <tt>log4j.properties</tt> is located in <tt>WEB-INF/classes</tt>.
+                </li>
+            </ul>
+        </section>
+    </body>
+</document>
\ No newline at end of file
Index: scratch/hiranya/website/src/site/xdoc/userguide/upgrading.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/upgrading.xml	(nonexistent)
+++ scratch/hiranya/website/src/site/xdoc/userguide/upgrading.xml	(revision 1221612)
@@ -0,0 +1,342 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<document>
+	<body>
+		<section name="Content">
+				<ul>
+					<li>
+						<a href="#General_comments">General comments</a>
+					</li>
+					<li>
+						<a href="#Upgrading_from_1.2_to_2.0.0">Upgrading from 1.2 to 2.0.0</a>
+						<ul>
+							<li>
+								<a href="#Configuration_file_vs_multi_XML_configuration">Configuration file vs multi XML configuration</a>
+							</li>
+							<li>
+								<a href="#Endpoint_URLs_for_proxy_services">Endpoint URLs for proxy services</a>
+							</li>
+							<li>
+								<a href="#Mediator_Deployer">Mediator Deployer</a>
+							</li>
+							<li>
+								<a href="#Main_Sequence">Main Sequence</a>
+							</li>
+							<li>
+								<a href="#Filter_Mediator">Filter Mediator</a>
+							</li>
+							<li>
+								<a href="#Migration_Tool">Migration Tool</a>
+							</li>
+							<li>
+								<a href="#Custom_Extensions_and_API_changes">Custom Extensions and API changes</a>
+							</li>
+						</ul>
+					</li>
+				</ul>
+		</section>
+		<section name="General comments" id="General_comments">
+			<p>
+                If you are using custom extensions (mediators, startups, etc.) implemented in Java and
+				depending on Synapse APIs, you should go through the following process before upgrading
+				to a new release:
+			</p>
+			<ol type="1">
+				<li>
+                    Compile the extension with the libraries from the Synapse release you are
+					currently using and check for any deprecation warnings. You should change your
+                    code to eliminate all those warnings. In general the Javadoc of the
+					deprecated class or method gives you a hint on how to change your code. Test all
+                    your changes with your current Synapse release.
+				</li>
+				<li>
+                    Recompile and test the extension with the libraries from the new Synapse release.
+					We try to avoid to introduce incompatible changes to Synapse's core APIs between
+					releases (except if the related classes or methods were deprecated in the previous
+					release). However, it is not always possible to maintain compatibility. In addition
+					your code might depend on features that are not part of the core API. Therefore,
+                    even if you don't use deprecated methods and classes, there is no guarantee that
+                    your code will not break when upgrading to a new release and you always need to
+                    recompile and test them before deploying to the new release.
+				</li>
+				<li>
+                    Upgrade your Synapse installation and deploy the new version of your extensions.
+                </li>
+			</ol>
+			<p>
+                If you are skipping releases when upgrading your installation, you might nevertheless
+                want to go through the first step for all the intermediate releases. This will make
+                the migration easier.
+			</p>
+		</section>
+		
+		<section name="Upgrading from 1.2 to 2.0.0" id="Upgrading_from_1.2_to_2.0.0">
+			<subsection name="Configuration file vs multi XML configuration" id="Configuration_file_vs_multi_XML_configuration">
+				<p>
+                    In 1.2 you have been using a single synapse.xml file which resides on the
+                    repository/conf directory of the distribution, where as on 2.0.0 we have structured
+                    this into a configuration repository with multiple directories to have different
+                    artifact types and each and every artifact configuration to reside on a different
+                    files inside the desired repository directory. This repository directory on the 2.0.0
+					release resides in the repository/conf directory too, and named as synapse-config.
+					The repository directory structure inside the synapse-config directory
+					looks like follows;
+				</p>
+				<div class="xmlConf">synapse-config
+  /api
+  /endpoints
+  /event-sources
+  /local-entries
+  /priority-executors
+  /proxy-services
+  /sequences
+	 main.xml
+	 fault.xml
+  /tasks
+  /templates
+	 registry.xml
+	 synapse.xml</div>
+				<p>
+                    As you can see in the above sketch of the repository though it is a repository based
+					configuration, it also supports the old style single flat synapse.xml file in which
+                    case it has to reside inside the root of the repository.
+				</p>
+				<p>
+					So the easiest way to migrate the configuration is to move your already existing
+                    synapse.xml file in repository/conf directory in 1.2 version into the
+                    repository/conf/synapse-config directory of the 2.x version. <em>Note: When doing this
+                    migration you should also delete the main.xml and fault.xml files which are there on the
+                    sequences directory of the repository, otherwise there will be 2 main and fault
+                    sequences one coming from the sequences directory and the other coming from your just
+                    copied synapse.xml file.</em>
+				</p>
+			</subsection>
+			<subsection name="Endpoint URLs for proxy services" id="Endpoint_URLs_for_proxy_services">
+				<p>
+					In release 2.0.0 the endpoint URLs for proxy services have changed from
+					<tt>/soap</tt> to <tt>/services</tt>. E.g. <tt>http://localhost:8280/services/StockQuote</tt>
+					should be used instead of <tt>http://localhost:8280/soap/StockQuote</tt>.
+				</p>
+			</subsection>
+			<subsection name="MediatorDeployer" id="Mediator_Deployer">
+				<p>
+					Release 1.3 has enhanced capabilities for extension deployment. While in 1.2 extension
+					deployment was limited to mediators bundled as simple JAR files, 1.3 extended this
+                    support to tasks and defined a new archive format (XAR) that allows to bundle
+                    these extensions together with their dependency JARs (see
+					<a class="externalLink" href="http://issues.apache.org/jira/browse/SYNAPSE-377">SYNAPSE-377</a>
+					for more details). Enabling these features requires changes to the <tt>axis2.xml</tt>
+					configuration file. In 1.2 the deployer was configured as follows:
+				</p>
+				<div class="xmlConf">&lt;deployer extension=&quot;jar&quot; directory=&quot;mediators&quot;
+    class=&quot;org.apache.synapse.core.axis2.MediatorDeployer&quot;/&gt;</div>
+				<p>
+                    In 2.0.0 the suggested configuration is:
+                </p>
+				<div class="xmlConf">&lt;deployer extension=&quot;xar&quot; directory=&quot;extensions&quot;
+    class=&quot;org.apache.synapse.deployers.ExtensionDeployer&quot;/&gt; </div>
+				<p>
+                    It is possible to have multiple configuration entries for the extension deployer
+                    with different settings. For example, if you used the deployer in 1.2 you might
+                    want to have the following configuration:
+				</p>
+				<div class="xmlConf">&lt;deployer extension=&quot;jar&quot; directory=&quot;mediators&quot;
+    class=&quot;org.apache.synapse.deployers.ExtensionDeployer&quot;/&gt;
+&lt;deployer extension=&quot;xar&quot;
+    directory=&quot;extensions&quot;
+	class=&quot;org.apache.synapse.deployers.ExtensionDeployer&quot;/&gt;</div>
+			</subsection>
+			<subsection name="JMS transport" id="JMS_transport">
+				<p>
+					The way the JMS transport determines the content type of incoming messages has
+                    slightly changed between Synapse 1.2 and 2.x. The mechanism is also more flexible.
+                    See SYNAPSE-304 and SYNAPSE-424 for the reasons of this change and refer to the
+					<a class="externalLink" href="http://ws.apache.org/commons/transport/">WS-Commons Transport project</a>
+					for documentation.
+				</p>
+			</subsection>
+			<subsection name="Main Sequence" id="Main_Sequence">
+				<p>
+					On Synapse 1.2 you could have mediator configuration on the top level definitions
+                    tag and they were treated as the <strong>main</strong> sequence if there is no
+                    main sequence defined in the configuration. How ever removing the conflict of having
+                    top level mediators and a main sequence leading the synapse to fail to start on
+                    2.x Synapse configuration builder simply ignores the top level mediators. So you
+                    need to wrap the top level mediators, if there are any, with the sequence named
+					<strong>main</strong> on the new 2.0.0 version.
+				</p>
+				<p>
+					To further explain this lets have a look at the following valid configuration bit
+					(this is the sample 0 configuration) on the 1.2;
+					<div class="xmlConf">&lt;definitions xmlns=&quot;http://ws.apache.org/ns/synapse&quot;&gt;
+    &lt;!-- log all attributes of messages passing through --&gt;
+    &lt;log level=&quot;full&quot;/&gt;
+
+    &lt;!-- Send the message to implicit destination --&gt;
+    &lt;send/&gt;
+&lt;/definitions&gt;</div>
+					which needs to be changed to the following configuration on 2.0.0
+					<div class="xmlConf">&lt;definitions xmlns=&quot;http://ws.apache.org/ns/synapse&quot;&gt;
+
+    &lt;sequence name=&quot;main&quot;&gt;
+        &lt;!-- log all attributes of messages passing through --&gt;
+        &lt;log level=&quot;full&quot;/&gt;
+
+        &lt;!-- Send the message to implicit destination --&gt;
+        &lt;send/&gt;
+    &lt;sequence/&gt;
+
+&lt;/definitions&gt;</div>
+				</p>
+			</subsection>
+			<subsection name="Filter Mediator" id="Filter_Mediator">
+				<p>
+                    From 2.0.0 onwards Synapse filter mediator supports the else close as well, and hence
+					the filter matching set of mediators has to be enclosed within a &lt;then&gt; element.
+                </p>
+				<p>
+					If we consider the following sample from the 1.2 version of synapse;
+					<div class="xmlConf">&lt;filter source=&quot;get-property('To')&quot; regex=&quot;.*/StockQuote.*&quot;&gt;
+    &lt;send&gt;
+        &lt;endpoint&gt;
+            &lt;address uri=&quot;http://localhost:9000/soap/SimpleStockQuoteService&quot;/&gt;
+        &lt;/endpoint&gt;
+    &lt;/send&gt;
+    &lt;drop/&gt;
+&lt;/filter&gt;</div>
+					the equivalent configuration for the 2.0.0 release is going to be;
+					<div class="xmlConf">&lt;filter source=&quot;get-property('To')&quot; regex=&quot;.*/StockQuote.*&quot;&gt;
+    &lt;then&gt;
+        &lt;send&gt;
+            &lt;endpoint&gt;
+                &lt;address uri=&quot;http://localhost:9000/soap/SimpleStockQuoteService&quot;/&gt;
+            &lt;/endpoint&gt;
+        &lt;/send&gt;
+        &lt;drop/&gt;
+    &lt;then/&gt;
+&lt;/filter&gt;</div>
+					You could also add an else close to this conditional statement as follows on 2.x
+                    which is not possible on 1.2
+					<div class="xmlConf">&lt;filter source=&quot;get-property('To')&quot; regex=&quot;.*/StockQuote.*&quot;&gt;
+    &lt;then&gt;
+        &lt;send&gt;
+            &lt;endpoint&gt;
+                &lt;address uri=&quot;http://localhost:9000/soap/SimpleStockQuoteService&quot;/&gt;
+            &lt;/endpoint&gt;
+        &lt;/send&gt;
+        &lt;drop/&gt;
+    &lt;then/&gt;
+    &lt;else/&gt;
+        &lt;log/&gt;
+    &lt;else/&gt;
+&lt;/filter&gt;</div>
+				</p>
+			</subsection>
+			<subsection name="Migration Tool" id="Migration_Tool">
+				<p>
+                    In general it is recommended to run the configuration through the migration tool
+					provided with the Synapse 2.x release, on your synapse 1.2 configuration before
+                    using it with the 2.0.0.
+				</p>
+				<p>
+					To run the migration tool execute the synapse-config-migrator.sh by passing the
+					synapse.xml file location of the
+					1.2 configuration. Which will create the 2.0.0
+					compatible configuration with the .new suffix. For example;
+					<pre>sh bin/synapse-config-migrator.sh synapse-i1.2/repository/conf/synapse.xml</pre>
+				</p>
+			</subsection>
+			<subsection name="Custom Extensions and API changes" id="Custom_Extensions_and_API_changes">
+				<p>
+                    Even though there is a migration tool it just takes care of your configuration and not
+					custom extensions that you have done for example like CustomMediators or Tasks
+                    and so forth. There are some API changes that affect your custom extensions
+                    unfortunately. This section tries to list all the public API changes which affects
+                    the backward compatibility of the custom extensions that you have been running
+                    with the 1.2 version of Synapse.
+				</p>
+				<table class="bodyTable">
+					<tr class="a">
+						<th>Class</th>
+						<th>Method</th>
+						<th>Change Description</th>
+					</tr>
+					<tr class="b">
+						<td>
+							<a href="apidocs/org/apache/synapse/config/xml/AbstractMediatorFactory.html">AbstractMediatorFactory</a>
+						</td>
+						<td>createMediator(OMElement)</td>
+						<td>
+							This was the method that you have been overwriting on the 1.2 version to
+							implement a new custom mediator factory to build the mediator by looking at
+							the XML configuration. On the 2.0.0 version you should be extending the
+							<a href="apidocs/org/apache/synapse/config/xml/AbstractMediatorFactory.html#createSpecificMediator(org.apache.axiom.om.OMElement,%20java.util.Properties)">createSpecificMediator(OMElement, Properties)</a>
+							. Note that in the process of changing the method to be extended, the method
+							<a href="apidocs/org/apache/synapse/config/xml/AbstractMediatorFactory.html#createMediator(org.apache.axiom.om.OMElement,%20java.util.Properties)">createMediator</a>
+							method has been changed to be final. From a users point of view of this
+                            interface he/she should be using the createMediator method which is what
+                            Synapse does.
+						</td>
+					</tr>
+					<tr class="a">
+						<td>
+							<a href="apidocs/org/apache/synapse/config/xml/AbstractMediatorSerializer.html">AbstractMediatorSerializer</a>
+						</td>
+						<td>serializeMediator(Mediator)</td>
+						<td>
+							This was the method that you have been overwriting on the 1.2 version to
+							implement a new custom mediator serializer to serialize to the XML
+                            Configuration by walking through the mediator properties. On the 2.0.0
+                            version you should be extending the
+							<a href="apidocs/org/apache/synapse/config/xml/AbstractMediatorSerializer.html#serializeSpecificMediator(org.apache.synapse.Mediator)">serializeSpecificMediator(Mediator)</a>
+							. Note that in the process of changing the method to be extended, the method
+							<a href="apidocs/org/apache/synapse/config/xml/AbstractMediatorSerializer.html#serializeMediator(org.apache.axiom.om.OMElement,%20org.apache.synapse.Mediator)">serializeMediator</a>
+							method has been changed to be final. From a users point of view of this
+                            interface he/she should be using the serializeMediator method which is
+                            what Synapse does.
+						</td>
+					</tr>
+				</table>
+				<p>
+					Further to that if you have been using
+					<a href="apidocs/org/apache/synapse/ServerManager.html">ServerManager</a>
+					class you may have noticed that the class is no more a singleton and doesn't have
+                    the static getInstance method. Also note that the common utilities like data
+                    sources JMX and RMI registration stuff have been moved to a new module with
+                    org.apache.synapse.commons package name.
+				</p>
+				<p>
+					On the configuration building front all entities are given a properties map to
+                    construct its instance and that has been used to pass in any additional information
+                    required like RESOLVE_ROOT, or SYNAPSE_HOME startup parameters. For example if you
+                    look at the
+					<a href="apidocs/org/apache/synapse/config/xml/MediatorFactoryFinder.html">MediatorFactoryFinder</a>
+					class the
+					<a href="apidocs/org/apache/synapse/config/xml/MediatorFactoryFinder.html#getMediator(org.apache.axiom.om.OMElement,%20java.util.Properties)">getMediator</a>
+					method is expecting a properties map apart from the OMElement argument.
+					It is safe to pass in a empty properties map if you are using these methods for
+                    any testing purposes or even in cases where you do not resolve dependencies.
+				</p>
+			</subsection>
+		</section>
+	</body>
+</document>
\ No newline at end of file
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples.xml	(revision 1221612)
@@ -50,9 +50,8 @@
                         <li><a href="samples/sample10.html">Sample 10: Introduction to dynamic endpoints with registry</a></li>
                         <li><a href="samples/sample11.html">Sample 11: A full registry based configuration, and sharing a configuration between multiple instances</a></li>
                         <li><a href="samples/sample12.html">Sample 12: One-way messaging / fire-and-forget through Synapse</a></li>
-                        <li><a href="samples/sample13.html">Sample 13: Dual channel invocation through Synapse</a></li> 
-                        <li><a href="samples/sample14.html">Sample 14: Sequences and Endpoints as local registry items</a></li>
-                     </ul>
+                        <li><a href="samples/sample13.html">Sample 13: Dual channel invocation through Synapse</a></li>
+                    </ul>
                 </p>
             </subsection>
             <subsection name="Endpoints">
@@ -74,8 +73,7 @@
                 <p>
                     <ul>
                         <li><a href="samples/sample100.html">Sample 100: Using WS-Security for outgoing messages</a></li>
-                        <li><a href="samples/sample101.html">Sample 101: Using WS-ReliableMessaging for outgoing messages 1.0</a></li>
-                        <li><a href="samples/sample102.html">Sample 102: Using WS-ReliableMessaging for outgoing messages 1.1</a></li>
+                        <li><a href="samples/sample101.html">Sample 101: Using WS-ReliableMessaging for outgoing messages</a></li>
                     </ul>
                 </p>
             </subsection>
@@ -112,10 +110,10 @@
                         <li><a href="samples/sample257.html">Sample 257: Proxy services with the FIX transport</a></li>
                         <li><a href="samples/sample258.html">Sample 258: Switching from HTTP to FIX </a></li>
                         <li><a href="samples/sample259.html">Sample 259: Switching from FIX to HTTP </a></li>
-                        <li><a href="samples/sample260.html">Sample 260: Switching from FIX to AMQP </a></li>
+                        <li><a href="">Sample 260: Switching from FIX to AMQP </a></li>
                         <li><a href="samples/sample261.html">Sample 261: Switch between different FIX versions </a></li>
                         <li><a href="samples/sample262.html">Sample 262: Content Based Routing of FIX messages </a></li>
-                        <li><a href="samples/sample263.html">Sample 263: Transport switching - JMS to http/s using JBoss Messaging (JBM)</a></li>
+                        <li><a href="">Sample 263: Transport switching - JMS to http/s using JBoss Messaging (JBM)</a></li>
                         <li><a href="samples/sample264.html">Sample 264: Request-response invocations with the JMS transport</a></li>
                         <li><a href="samples/sample265.html">Sample 265: Switching from TCP to HTTP/S</a></li>
                         <li><a href="samples/sample266.html">Sample 266: Switching from UDP to HTTP/S</a></li>
@@ -125,7 +123,7 @@
             <subsection name="Scheduled Tasks">
                 <p>
                     <ul>
-                        <li><a href="samples/sample300.html">Sample 300: Introduction to tasks with simple trigger</a></li>
+                        <li><a href="#Sample300">Sample 300: Introduction to tasks with simple trigger</a></li>
                     </ul>
                 </p>
             </subsection>
@@ -228,7 +226,7 @@
                     </ul>
                 </p>
             </subsection>
-             <subsection name="Priority Based Mediation">
+            <subsection name="Priority Based Mediation">
                 <p>
                     <ul>
                         <li><a href="samples/sample650.html">Sample 650: Introduction to priority based mediation</a></li>
@@ -247,7 +245,7 @@
                 <p>
                     <ul>
                         <!-- This sample should be renamed -->
-                        <li><a href="samples/sample440.html">Sample 440: Exposing a SOAP service over JSON</a></li>
+                        <li><a href="#Sample440">Sample 440: Exposing a SOAP service over JSON</a></li>
                     </ul>
                 </p>
             </subsection>
Index: scratch/hiranya/website/src/site/xdoc/userguide/extending.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/extending.xml	(nonexistent)
+++ scratch/hiranya/website/src/site/xdoc/userguide/extending.xml	(revision 1221612)
@@ -0,0 +1,487 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<document>
+	<properties>
+		<title>Apache Synapse - Extending the Service Bus</title>
+	</properties>
+	<body>
+			<div id="contentBox">
+				   <section name="Apache Synapse ESB - Extending the Service Bus">
+					<p>
+						Apache Synapse provides a number of extension points so that
+						users can plug-in custom developed code to extend the
+						functionality of the ESB. While the built-in mediators are sufficient to implement
+						most integration scenarios, sometimes it is very helpful to be able to deploy some custom code into the
+						service bus and make the solution simpler. Most Synapse APIs are in Java and
+						therefore the users looking to extend Synapse are expected to have a
+						decent knowledge and experience in Java programming.
+					</p>
+					</section>
+					<section name="Writing custom Mediator implementations">
+				
+					<p>
+						The primary interface of the Synapse API is the MessageContext
+						interface defined below. This essentially defines the per-message
+						context passed through the chain of mediators, for each and every
+						message received and processed by Synapse. Each message instance is
+						wrapped within a MessageContext instance, and the message context
+						is set with the references to the SynapseConfiguration and
+						SynapseEnvironment objects. The
+						<a href="apidocs/org/apache/synapse/config/SynapseConfiguration.html">SynapseConfiguration</a>
+
+						object holds the global configuration model that defines
+						mediation rules, local registry entries and other and configuration, while
+						the
+						<a href="apidocs/org/apache/synapse/core/SynapseEnvironment.html">SynapseEnvironment</a>
+
+						object gives access to the underlying SOAP implementation used -
+						Axis2. A typical mediator would need to manipulate the
+						MessageContext by referring to the SynapseConfiguration. However it
+						is strongly recommended that the SynapseConfiguration is not
+						updated by mediator instances as it is shared by all messages, and
+						may be updated by Synapse administration or configuration modules.
+						Mediator instances may store local message properties into the
+						MessageContext for later retrieval by successive mediators.
+						<br />
+					</p>
+					<h4>
+						<a class="externalLink"
+							href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/MessageContext.java?view=markup">MessageContext
+							Interface
+						</a>
+					</h4>
+					<p></p>
+					<div class="xmlConf">package org.apache.synapse;
+
+import ...
+
+public interface MessageContext {
+
+    /**
+     * Get a reference to the current SynapseConfiguration
+     *
+     * @return the current synapse configuration
+     */
+    public SynapseConfiguration getConfiguration();
+
+    /**
+     * Set or replace the Synapse Configuration instance to be used. May be used to
+     * programatically change the configuration at runtime etc.
+     *
+     * @param cfg The new synapse configuration instance
+     */
+    public void setConfiguration(SynapseConfiguration cfg);
+
+    /**
+     * Returns a reference to the host Synapse Environment
+     * @return the Synapse Environment
+     */
+    public SynapseEnvironment getEnvironment();
+
+    /**
+     * Sets the SynapseEnvironment reference to this context
+     * @param se the reference to the Synapse Environment
+     */
+    public void setEnvironment(SynapseEnvironment se);
+
+    /**
+     * Get the value of a custom (local) property set on the message instance
+     * @param key key to look up property
+     * @return value for the given key
+     */
+    public Object getProperty(String key);
+
+    /**
+     * Set a custom (local) property with the given name on the message instance
+     * @param key key to be used
+     * @param value value to be saved
+     */
+    public void setProperty(String key, Object value);
+
+    /**
+     * Returns the Set of keys over the properties on this message context
+     * @return a Set of keys over message properties
+     */
+    public Set getPropertyKeySet();
+
+    /**
+     * Get the SOAP envelope of this message
+     * @return the SOAP envelope of the message
+     */
+    public SOAPEnvelope getEnvelope();
+
+    /**
+     * Sets the given envelope as the current SOAPEnvelope for this message
+     * @param envelope the envelope to be set
+     * @throws org.apache.axis2.AxisFault on exception
+     */
+    public void setEnvelope(SOAPEnvelope envelope) throws AxisFault;
+
+    /**
+     * SOAP message related getters and setters
+     */
+    public ....get/set()...
+
+}</div>
+					<p>
+						The MessageContext interface is based on the Axis2
+						MessageContext 	interface, and uses the Axis2 EndpointReference and
+						SOAPEnvelope classes/interfaces. The purpose of this interface is
+						to capture a message as it flows through the system. As you will
+						see the message payload is represented using the SOAP infoset.
+						Binary messages can be embedded in the Envelope using MTOM or SwA
+						attachments using the AXIOM object model.
+					</p>
+					<h4>
+						<a class="externalLink"
+							href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/Mediator.java?view=markup">Mediator
+							interface
+						</a>
+					</h4>
+					<p>
+						The second key interface for mediator writers is the Mediator
+						interface:
+					</p>
+					<div class="xmlConf">package org.apache.synapse;
+
+import org.apache.synapse.MessageContext;
+
+/**
+ * All Synapse mediators must implement this Mediator interface. As a message passes
+ * through the synapse system, each mediator's mediate() method is invoked in the
+ * sequence/order defined in the SynapseConfiguration.
+ */
+public interface <span style="font-weight: bold;">Mediator </span>{
+
+    /**
+     * Invokes the mediator passing the current message for mediation. Each
+     * mediator performs its mediation action, and returns true if mediation
+     * should continue, or false if further mediation should be aborted.
+     *
+     * @param synCtx the current message for mediation
+     * @return true if further mediation should continue
+     */
+    public boolean mediate(MessageContext synCtx);
+
+    /**
+     * This is used for debugging purposes and exposes the type of the current
+     * mediator for logging and debugging purposes
+     * @return a String representation of the mediator type
+     */
+    public String getType();
+}</div>
+					<p>
+						A mediator can read and/or modify the message encapsulated in
+						the MessageContext in any suitable manner - adjusting the routing
+						headers or changing the message body. If the mediate() method
+						returns false, it signals to the Synapse processing model to stop
+						further processing of the message. For example, if the mediator is
+						a security agent it may decide that this message is dangerous and
+						should not be processed further. This is generally the exception as
+						mediators are usually designed to co-operate to rocess the message
+						onwards.
+					</p>
+					</section>
+					
+					<h3>
+						Leaf and Node Mediators, List mediators and Filter mediators
+					</h3>
+					<p>
+						Mediators may be Node mediators (i.e. these that can contain
+						child mediators) or Leaf mediators (mediators that does not hold
+						any	other child mediators). A Node mediator must implement the
+						org.apache.synapse.mediators.ListMediator interface listed below,
+						or extend from the
+						org.apache.synapse.mediators.AbstractListMediator.
+					</p>
+					<h4>
+						<a class="externalLink"
+							href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/ListMediator.java?view=markup">The
+							ListMediator interface
+						</a>
+					</h4>
+					<div class="xmlConf">package org.apache.synapse.mediators;
+
+import java.util.List;
+
+/**
+* The List mediator executes a given sequence/list of child mediators
+*/
+public interface ListMediator extends Mediator {
+    /**
+    * Appends the specified mediator to the end of this mediator's (children) list
+    * @param m the mediator to be added
+    * @return true (as per the general contract of the Collection.add method)
+    */
+    public boolean addChild(Mediator m);
+
+    /**
+    * Appends all of the mediators in the specified collection to the end of this mediator's (children)
+    * list, in the order that they are returned by the specified collection's iterator
+    * @param c the list of mediators to be added
+    * @return true if this list changed as a result of the call
+    */
+    public boolean addAll(List c);
+
+    /**
+    * Returns the mediator at the specified position
+    * @param pos index of mediator to return
+    * @return the mediator at the specified position in this list
+    */
+    public Mediator getChild(int pos);
+
+    /**
+    * Removes the first occurrence in this list of the specified mediator
+    * @param m mediator to be removed from this list, if present
+    * @return true if this list contained the specified mediator
+    */
+    public boolean removeChild(Mediator m);
+
+    /**
+    * Removes the mediator at the specified position in this list
+    * @param pos the index of the mediator to remove
+    * @return the mediator previously at the specified position
+    */
+    public Mediator removeChild(int pos);
+
+    /**
+    * Return the list of mediators of this List mediator instance
+    * @return the child/sub mediator list
+    */
+    public List getList();
+}</div>
+					<p>
+						A ListMediator implementation should call super.mediate(synCtx)
+						to process 	its sub mediator sequence. A FilterMediator is a
+						ListMediator which executes its sequence of sub mediators on
+						successful outcome of a test condition. The Mediator instance which
+						performs filtering should implement the FilterMediator interface.
+					</p>
+					<h4>
+						<a class="externalLink"
+							href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/FilterMediator.java?view=markup">FilterMediator
+							interface
+						</a>
+					</h4>
+					<div class="xmlConf">package org.apache.synapse.mediators;
+
+import org.apache.synapse.MessageContext;
+
+/**
+ * The filter mediator is a list mediator, which executes the given (sub) list of mediators
+ * if the specified condition is satisfied
+ *
+ * @see FilterMediator#test(org.apache.synapse.MessageContext)
+ */
+public interface <span style="font-weight: bold;">FilterMediator </span>extends ListMediator {
+
+    /**
+     * Should return true if the sub/child mediators should execute. i.e. if the filter
+     * condition is satisfied
+     * @param synCtx
+     * @return true if the configured filter condition evaluates to true
+     */
+    public boolean test(MessageContext synCtx);
+}</div>
+				</div>
+				<section name="Writing custom Configuration implementations for mediators">
+					<p>
+						You may write your own custom configurator for the Mediator
+						implementation 	you write without relying on the Class mediator or
+						Spring extension for its initialization. You could thus write a
+						MediatorFactory implementation 	which defines how to digest a custom
+						XML configuration element to be used to create and configure the
+						custom mediator instance. A MediatorSerializer implementation
+						defines how a configuration should be serialized back into
+						an XML configuration. The custom MediatorFactory &amp;
+						MediatorSerializer 	implementations and the mediator class/es must be bundled in a JAR
+						file conforming to the J2SE Service Provider model (See the
+						description for Extensions below for more details and examples) and
+						placed into the SYNAPSE_HOME/lib folder, so that the Synapse
+						runtime could find and load the definition. Essentially this means
+						that a custom JAR file must bundle your class implementing the
+						Mediator interface, and the MediatorFactory implementation class and
+						contain two text files named
+						&quot;org.apache.synapse.config.xml.MediatorFactory&quot; and
+						&quot;org.apache.synapse.config.xml.MediatorSerializer&quot; which
+						will contain the fully qualified name(s) of your MediatorFactory
+						and MediatorSerializer implementation classes. You should also
+						place any dependency JARs into the same lib folder so that the
+						correct classpath references could be made.
+						The MediatorFactory interface listing is given below, which you
+						should implement, and its getTagQName() method must define the fully qualified
+						element of interest for custom configuration. The Synapse
+						initialization will call back to this MediatorFactory instance through the
+						createMediator(OMElement elem) method passing in this XML element,
+						so that an instance of the mediator could be created utilizing the
+						custom XML specification and returned. See the ValidateMediator and
+						the ValidateMediatorFactory classes under modules/extensions in the
+						Synapse source distribution for examples.
+					</p>
+					<h4>
+						<a class="externalLink"
+							href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorFactory.java?view=markup">The
+							MediatorFactory interface
+						</a>
+					</h4>
+					<div class="xmlConf">package org.apache.synapse.config.xml;
+
+import ...
+
+/**
+ * A mediator factory capable of creating an instance of a mediator through a given
+ * XML should implement this interface
+ */
+public interface MediatorFactory {
+    /**
+     * Creates an instance of the mediator using the OMElement
+     * @param elem
+     * @return the created mediator
+     */
+    public Mediator createMediator(OMElement elem);
+
+    /**
+     * The QName of this mediator element in the XML config
+     * @return QName of the mediator element
+     */
+    public QName getTagQName();
+}</div>
+					<p></p>
+					<h4>
+						<a class="externalLink"
+							href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorSerializer.java?view=markup">The
+							MediatorSerializer interface
+						</a>
+					</h4>
+					<div class="xmlConf">package org.apache.synapse.config.xml;
+
+import ...
+
+/**
+ * Interface which should be implemented by mediator serializers. Does the
+ * reverse of the MediatorFactory
+ */
+public interface MediatorSerializer {
+
+    /**
+     * Return the XML representation of this mediator
+     * @param m mediator to be serialized
+     * @param parent the OMElement to which the serialization should be attached
+     * @return the serialized mediator XML
+     */
+    public OMElement serializeMediator(OMElement parent, Mediator m);
+
+    /**
+     * Return the class name of the mediator which can be serialized
+     * @return the class name
+     */
+    public String getMediatorClassName();
+}</div>
+				</section>
+				<section name="Configuring mediators">
+					<p>
+						Mediators could access the Synapse registry to load resources
+						and configure the local behaviour. Refer to the Spring mediator and
+						Script mediator implementations for examples on how this could be
+						achieved.
+					</p>
+					<h4>
+						Loading of Extensions by the Synapse runtime
+					</h4>
+					<p>
+						Synapse loads available extensions from the runtime classpath
+						using the
+						<a class="externalLink"
+							href="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service%20Provider">J2SE
+							Service Provider model
+						</a>
+						. This essentially iterates over the available JAR files, for a META-INF/services directory within each file,
+						and looks for a text file with the name org.apache.synapse.config.xml.MediatorFactory
+						which contains a list of fully qualified classname that implement
+						the above interface, listing each class in a separate line. e.g. The
+						built-in synapse-extensions.jar contains the following structure
+					</p>
+					<div class="xmlConf">synapse-extensions.jar
+    /META-INF/services
+        org.apache.synapse.config.xml.MediatorFactory
+        org.apache.synapse.config.xml.MediatorSerializer
+    /... the implementation classes as usual...</div>
+				</section>
+				
+				
+				<section name="Writing Synapse Observers">
+					<p>
+						A Synapse observer is developed by either implementing the
+						org.apache.synapse.config.SynapseObserver interface or by
+						extending the org.apache.synapse.config.AbstractSynapseObserver
+						class. A Synapse observer is notified by the Synapse configuration
+						when new elements are added to the configuration and
+						when existing elements are removed from the configuration. The
+						following event handlers are available to the Synapse observer implementations.
+					</p>
+					<div class="xmlConf"> public void sequenceAdded(Mediator sequence);
+ public void sequenceRemoved(Mediator sequence);
+ public void entryAdded(Entry entry);
+ public void entryRemoved(Entry entry);
+ public void endpointAdded(Endpoint endpoint);
+ public void endpointRemoved(Endpoint endpoint);
+ public void proxyServiceAdded(ProxyService proxy);
+ public void proxyServiceRemoved(ProxyService proxy);
+ public void startupAdded(Startup startup);
+ public void startupRemoved(Startup startup);
+ public void eventSourceAdded(SynapseEventSource eventSource);
+ public void eventSourceRemoved(SynapseEventSource eventSource);</div>
+					<p>
+						The AbstractSynapseObserver provides default implementations to
+						all these event handlers. It simply logs any received events.
+					</p>
+					<p>
+						In situations where the custom code has access to the
+						SynapseConfiguration class observers can be directly registered
+						with the SynapseConfiguration by using
+						the registerObserver(SynapseObserver o) method. Otherwise
+						SynapseObserver implementations
+						can be defined in the synapse.properties file which resides in the
+						SYNAPSE_HOME/lib directory. The following example shows how two observers are
+						registered with the Synapse configuration using the
+						synapse.properties file.
+					</p>
+					<div class="xmlConf">synapse.observers=test.LoggingObserverImpl, test.SimpleObserverImpl</div>
+				</section>
+				
+        <section name="Scheduled Tasks">
+            <p>
+                A scheduled task is a custom developed piece of Java code that
+                is scheduled in the ESB to execute periodically. A scheduled task
+                must implement the org.apache.synapse.task.Task
+                interface. This interface has a single 'execute' method. Once scheduled the
+                execute method is called by Synapse periodically.
+            </p>
+            <p>
+                Synapse also comes with a built-in task implementation known as
+                the	MessageInjector.This task can be used to inject messages into
+                the service bus	periodically. Refer	sample 300 to see how to use the
+                MessageInjector task.
+            </p>
+         </section>
+	</body>
+</document>
\ No newline at end of file
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/sample255.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/sample255.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/sample255.xml	(revision 1221612)
@@ -79,7 +79,9 @@
                             more details).
                         </li>
                         <li>
-                            Enable the mail transport sender for Synapse (refer <a href="setup/mail.html#mailTransportSender"> Mail transport setup</a> guide for more details).
+                            Enable the mail transport sender for Synapse
+                            (refer <a href="setup/mail.html#mailTransportSender"> Mail transport setup</a>
+                            guide for more details).
                         </li>
                         <li>
                             Create a new test directory in the FTP site.
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/sample652.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/sample652.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/sample652.xml	(revision 1221612)
@@ -99,16 +99,16 @@
                     <ul>
                         <li>
                               Deploy the SimpleStockQuoteService in the sample Axis2 server and start Axis2
-                              <p>To run this sample it is required to deploy synpase on JBoss application server(This is only tested with JBoss application sever), you 
-                              can use the war distribution to deploy synapse on JBoss application server. Use the synpase_sample_652.xml as the synapse confiuration 
-                              file and start JBoss with that synpase configuration file. Also you need to define two XA datasources for above two datasources. 
+                              <p>To run this sample it is required to deploy synpase on JBoss application server(This is only tested with JBoss application sever), you
+                              can use the war distribution to deploy synapse on JBoss application server. Use the synpase_sample_652.xml as the synapse confiuration
+                              file and start JBoss with that synpase configuration file. Also you need to define two XA datasources for above two datasources.
                               You'll need to refer JBoss documentation to see how to do this.</p>
                               <p>
-                                It also required to have two database instances, this will be used by the two XA datasources. 
+                                It also required to have two database instances, this will be used by the two XA datasources.
                                 Refer the <a href="setup/db.html#derby">Sample Setup Guide </a> to see how you can set up the derby database server.
                               </p>
                               <p>
-                                In this sample a record is delete from one database and it is added into the second database. 
+                                In this sample a record is delete from one database and it is added into the second database.
                                 If either of the operations(deleting from the 1st database and adding into the second database)
                                 fails everything will be roll backed. The records will be untoched.
                               </p>
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/sample256.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/sample256.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/sample256.xml	(revision 1221612)
@@ -85,7 +85,8 @@
                         </li>
                         <li>
                             Enable the mail transport listener and mail transport sender for Synapse
-                            (refer  <a href="setup/mail.html#mailTransportSender"> Mail transport setup</a> guide for more details)
+                            (refer  <a href="setup/mail.html#mailTransportSender">Mail transport setup</a>
+                            guide for more details)
                         </li>
                         <li>
                             Start Synapse using the configuration numbered 256 (repository/conf/sample/synapse_sample_256.xml)
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/script.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/script.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/script.xml	(revision 1221612)
@@ -84,15 +84,14 @@
       			of Synapse and add the following two entries under the 'messageBuilders' and
       			'messageFormatters' sections respectively.
     			</p>
-    			<div class="xmlConf">
-    &lt;messageBuilder contentType=&quot;application/json&quot;
-                         class=&quot;org.apache.axis2.json.JSONOMBuilder&quot;/&gt;
+    			<div class="xmlConf">&lt;messageBuilder contentType=&quot;application/json&quot;
+    class=&quot;org.apache.axis2.json.JSONOMBuilder&quot;/&gt;
 
-     &lt;messageFormatter contentType=&quot;application/json&quot;
-                         class=&quot;org.apache.axis2.json.JSONMessageFormatter&quot;/&gt;
-    			</div>
+&lt;messageFormatter contentType=&quot;application/json&quot;
+    class=&quot;org.apache.axis2.json.JSONMessageFormatter&quot;/&gt;</div>
     			<p>
-     If you are planning to run sample 440, you should also add the above two entries to the 'samples/axis2Client/client_repo/conf/axis2.xml' file.
+                    If you are planning to run sample 440, you should also add the above two entries
+                    to the 'samples/axis2Client/client_repo/conf/axis2.xml' file.
     			</p>
 			</subsection>
 
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/db.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/db.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/db.xml	(revision 1221612)
@@ -20,7 +20,7 @@
 
 <document>
     <properties>
-        <title>Configuring Synapse for Script Mediator Support</title>
+        <title>Apache Synapse - Database Setup Guide</title>
     </properties>
     <body>
         <section name="Contents">
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/index.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/index.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/index.xml	(revision 1221612)
@@ -382,7 +382,6 @@
                 <li><a href="fix.html">FIX Setup Guide</a></li>
                 <li><a href="tcp_udp.html">TCP/UDP Setup Guide</a></li>
                 <li><a href="db.html">Database Setup Guide</a></li>
-                <li><a href="script.html">Script Setup Guide</a></li>
             </ul>
         </section>
     </body>
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/jms.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/jms.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/setup/jms.xml	(revision 1221612)
@@ -187,58 +187,5 @@
                 default and so you only need to meet the prerequisites described above.
             </p>
         </section>
-        <section name="Configure Synapse for AMQP Transport" id="amqp">
-	<p>
-		The samples used in this guide assumes the existence of a local QPid
-		(1.0-M2 or higher) installation properly installed and started up. You
-		also
-		need to copy the following client JAR files into the Synapse 'lib' folder
-		to support AMQP. These files are found in the 'lib' directory of the
-		QPid installation.
-	</p>
-	<ul>
-		<li>qpid-client-1.0-incubating-M2.jar</li>
-		<li>qpid-common-1.0-incubating-M2.jar</li>
-		<li>geronimo-jms_1.1_spec-1.0.jar</li>
-		<li>slf4j-api-1.4.0.jar **</li>
-		<li>slf4j-log4j12-1.4.0.jar **</li>
-	</ul>
-	<p>
-		** To configure FIX (Quickfix/J 1.3) with AMQP (QPid-1.0-M2) copy the
-		sl4j-* libraries comes with QPid and ignore the sl4j-* libraries with
-		Quickfix/J.
-	</p>
-	<p>
-		To enable the AMQP over JMS transport, you need to uncomment the JMS
-		transport
-		listener configuration. To enable AMQP over JMS for synapse, the
-		repository/conf/axis2.xml must be updated,
-		while to enable JMS support for the sample Axis2 server the
-		samples/axis2Server/repository/conf/axis2.xml file must be updated.
-	</p>
-	<div class="xmlConf">&lt;!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment --&gt;
-        &lt;transportReceiver name=&quot;jms&quot; class=&quot;org.apache.synapse.transport.jms.JMSListener&quot;&gt;
-        &lt;/transportReceiver&gt;
-        &lt;transportSender name=&quot;jms&quot; class=&quot;org.apache.synapse.transport.jms.JMSSender&quot;&gt;
-        &lt;/transportReceiver&gt;</div>
-      <p>Locate and edit the AMQP connection settings file for the message consumer, this fle is usually named direct.properties.</p>
-      <div class="xmlConf">java.naming.factory.initial = org.apache.qpid.jndi.PropertiesFileInitialContextFactory
-# register some connection factories
-# connectionfactory.[jndiname] = [ConnectionURL]
-connectionfactory.qpidConnectionfactory = amqp://guest:guest@clientid/test?brokerlist='tcp://localhost:5672'
-# Register an AMQP destination in JNDI
-# destination.[jniName] = [BindingURL]
-destination.directQueue = direct://amq.direct//QpidStockQuoteService?routingkey='QpidStockQuoteService'
-destination.replyQueue = direct://amq.direct//replyQueue?routingkey='replyQueue'</div>
-	  <p>Locate and edit the AMQP connection settings file for Synapse, this fle is usually named con.properties.</p>
-	   <div class="xmlConf">#initial context factory
-#java.naming.factory.initial =org.apache.qpid.jndi.PropertiesFileInitialContextFactory
-# register some connection factories
-# connectionfactory.[jndiname] = [ConnectionURL]
-connectionfactory.qpidConnectionfactory=amqp://guest:guest@clientid/test?brokerlist='tcp://localhost:5672'
-# Register an AMQP destination in JNDI
-# destination.[jndiName] = [BindingURL]
-destination.directQueue=direct://amq.direct//QpidStockQuoteService</div>
-</section>
-     </body>
+    </body>
 </document>
\ No newline at end of file
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/sample101.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/sample101.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/sample101.xml	(revision 1221612)
@@ -23,7 +23,7 @@
         <title>Apache Synapse - Sample 101</title>
     </properties>
     <body>
-        <section name="Sample 101: Using WS-ReliableMessaging for Outgoing Messages 1.0">
+        <section name="Sample 101: Using WS-ReliableMessaging for Outgoing Messages">
             <div class="xmlConf">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
 
     &lt;sequence name="main"&gt;
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/sample260.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/sample260.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/sample260.xml	(revision 1221612)
@@ -63,7 +63,7 @@
                          <li>
                            Configure the AMQP transport for Synapse. See Configure Synapse for  <a href="setup/jms.html#amqp"> AMQP Transport setup</a> for detail
                         </li>
-                        <li> 
+                        <li>
                            To get an idea about the various transport parameters being used in this sample see FIX Transport Parameters .
                         </li>
                     </ul>
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/sample354.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/sample354.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/sample354.xml	(revision 1221612)
@@ -72,9 +72,8 @@
                 <p>
                     <ul>
                      	<li>
-                           This sample uses Ruby so first setup support for this in Synapse as described at
+                           This sample uses Ruby, so first setup support for this in Synapse as described at
 							<a href="setup/script.html#ruby">Configuring JRuby</a>
-							<br />
                         </li>
                         <li>
                             Deploy the SimpleStockQuoteService in the sample Axis2 server and start Axis2
Index: scratch/hiranya/website/src/site/xdoc/userguide/samples/sample440.xml
===================================================================
--- scratch/hiranya/website/src/site/xdoc/userguide/samples/sample440.xml	(revision 1221611)
+++ scratch/hiranya/website/src/site/xdoc/userguide/samples/sample440.xml	(revision 1221612)
@@ -80,7 +80,7 @@
                 <p>
                     <ul>
                         <li>
-                            Setup Synapse and the sample Axis2 client for JSON  (Refer  Synapse <a href="setup/script.html#json">Samples Setup Guide</a> for details) 
+                            Setup Synapse and the sample Axis2 client for JSON  (Refer  Synapse <a href="setup/script.html#json">Samples Setup Guide</a> for details)
                         </li>
                         <li>
                             Deploy the SimpleStockQuoteService in the sample Axis2 server and start Axis2
@@ -89,7 +89,7 @@
                             Start Synapse using the configuration numbered 440 (repository/conf/sample/synapse_sample_440.xml)
                             <div class="command">
                                 Unix/Linux: sh synapse.sh -sample 440<br/>
-                                Windows: synapse.bat -sample 710
+                                Windows: synapse.bat -sample 440
                             </div>
                         </li>
                     </ul>
@@ -104,7 +104,7 @@
 					JSON client.</p>
 				<p>You may use a tool like TCPMon to monitor the JSON requests sent
 						over the wire. A sample JSON request and response is shown below:</p>
-				
+
                 <div class="consoleOutput">{"getQuote":{"request":{"symbol":"IBM"}}}</div>
 
                 <div class="consoleOutput">{"getQuoteResponse":{"return":{"change":3.853593376681722,"earnings":12.802850763714854,"high":67.92488310190126,"last":66.14619264746406,"lastTradeTimestamp":"Mon Aug 23 16:48:40 IST 2010","low":-66.04000424423522,"marketCap":-9334516.42324327,"name":"IBM Company","open":-64.61950137150009,"peRatio":-19.78600441437058,"percentageChange":5.411779328273005,"prevClose":71.2075112994578,"symbol":"IBM","volume":16842}}}</div>
-*-*-*-
Message: Doc update
-*-*-*-
When: 2011-12-21 00:10:42 -0500 
-*-*-*-
Who: hiranya