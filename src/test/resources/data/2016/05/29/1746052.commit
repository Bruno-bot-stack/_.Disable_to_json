Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/PassThroughTransportUtils.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/PassThroughTransportUtils.java	(revision 1746051)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/PassThroughTransportUtils.java	(revision 1746052)
@@ -118,9 +118,8 @@
                                              boolean preserveServerHeader,
                                              boolean preserveUserAgentHeader) {
         Map headers = (Map) msgContext.getProperty(MessageContext.TRANSPORT_HEADERS);
-        Map excessHeaders = (Map) msgContext.getProperty(NhttpConstants.EXCESS_TRANSPORT_HEADERS);
+		Map excessHeaders = (Map) msgContext.getProperty(NhttpConstants.EXCESS_TRANSPORT_HEADERS);
 
-
         if (headers == null || headers.isEmpty()) {
             return;
         }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/TargetRequestFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/TargetRequestFactory.java	(revision 1746051)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/TargetRequestFactory.java	(revision 1746052)
@@ -129,17 +129,17 @@
                 request.setFullUrl(true);                
             }
             
-            // Add excess respsonse header.
-            String excessProp = NhttpConstants.EXCESS_TRANSPORT_HEADERS;
-            Map excessHeaders = (Map) msgContext.getProperty(excessProp);
-            if (excessHeaders != null) {
-                    for (Iterator iterator = excessHeaders.keySet().iterator(); iterator.hasNext();) {
-                            String key = (String) iterator.next();
-                            for (String excessVal : (Collection<String>) excessHeaders.get(key)) {
-                                    request.addHeader(key, (String) excessVal);
-                            }
-                    }
-            }
+			// Add excess respsonse header.
+			String excessProp = NhttpConstants.EXCESS_TRANSPORT_HEADERS;
+			Map excessHeaders = (Map) msgContext.getProperty(excessProp);
+			if (excessHeaders != null) {
+				for (Iterator iterator = excessHeaders.keySet().iterator(); iterator.hasNext();) {
+					String key = (String) iterator.next();
+					for (String excessVal : (Collection<String>) excessHeaders.get(key)) {
+						request.addHeader(key, (String) excessVal);
+					}
+				}
+			}
 
             return request;
         } catch (MalformedURLException e) {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java	(revision 1746051)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java	(revision 1746052)
@@ -62,9 +62,9 @@
 
     private Pipe pipe = null;
 
-    /** Headers map */
-    private Map<String, TreeSet<String>> headers = new HashMap<String, TreeSet<String>>();
-    
+	/** Headers map */
+	private Map<String, TreeSet<String>> headers = new HashMap<String, TreeSet<String>>();
+
     /** URL */
     private URL url;
 
@@ -129,14 +129,14 @@
         long contentLength = -1;
         String contentLengthHeader = null;
         
-        if(headers.get(HTTP.CONTENT_LEN) != null && headers.get(HTTP.CONTENT_LEN).size() > 0) {
-	        contentLengthHeader = headers.get(HTTP.CONTENT_LEN).first();
-	    }
-         
-        if (contentLengthHeader != null) {
-            contentLength = Integer.parseInt(contentLengthHeader);
-            headers.remove(HTTP.CONTENT_LEN);
-        }
+		if (headers.get(HTTP.CONTENT_LEN) != null && headers.get(HTTP.CONTENT_LEN).size() > 0) {
+			contentLengthHeader = headers.get(HTTP.CONTENT_LEN).first();
+		}
+
+		if (contentLengthHeader != null) {
+			contentLength = Integer.parseInt(contentLengthHeader);
+			headers.remove(HTTP.CONTENT_LEN);
+		}
   
         
         MessageContext requestMsgCtx = TargetContext.get(conn).getRequestMsgCtx();
@@ -193,15 +193,15 @@
         }
 
         
-        Set<Map.Entry<String, TreeSet<String>>> entries = headers.entrySet();
-        for (Map.Entry<String, TreeSet<String>> entry : entries) {
-             if (entry.getKey() != null) {
-                Iterator<String> i = entry.getValue().iterator();
-                 while(i.hasNext()) {
-                        request.addHeader(entry.getKey(), i.next());
-                 }
-             }
-         }
+		Set<Map.Entry<String, TreeSet<String>>> entries = headers.entrySet();
+		for (Map.Entry<String, TreeSet<String>> entry : entries) {
+			if (entry.getKey() != null) {
+				Iterator<String> i = entry.getValue().iterator();
+				while (i.hasNext()) {
+					request.addHeader(entry.getKey(), i.next());
+				}
+			}
+		}
         
         //setup wsa action..
         if (request != null){
@@ -250,7 +250,7 @@
     }
 
     
-    public void addHeader(String name, String value) {
+	public void addHeader(String name, String value) {
 		if (headers.get(name) == null) {
 			TreeSet<String> values = new TreeSet<String>();
 			values.add(value);
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetResponse.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetResponse.java	(revision 1746051)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetResponse.java	(revision 1746052)
@@ -78,16 +78,16 @@
         this.status = response.getStatusLine().getStatusCode();
         this.statusLine = response.getStatusLine().getReasonPhrase();
 
-        Header[] headers = response.getAllHeaders();
-        if (headers != null) {
-            for (Header header : headers) {
-            	if(this.headers.containsKey(header.getName())) {
-            		addExcessHeader(header);
-            	} else {
-            		this.headers.put(header.getName(), header.getValue());
-            	}
-             }        
-        }   
+		Header[] headers = response.getAllHeaders();
+		if (headers != null) {
+			for (Header header : headers) {
+				if (this.headers.containsKey(header.getName())) {
+					addExcessHeader(header);
+				} else {
+					this.headers.put(header.getName(), header.getValue());
+				}
+			}
+		}
 
         this.expectResponseBody = expectResponseBody;
     }    
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceRequest.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceRequest.java	(revision 1746051)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceRequest.java	(revision 1746052)
@@ -67,10 +67,9 @@
     /** The connection from the client */
     private NHttpServerConnection connection = null;
     
-    /** Excess headers of the request */
-    private Map excessHeaders = new MultiValueMap();
+	/** Excess headers of the request */
+	private Map excessHeaders = new MultiValueMap();
 
-
     public SourceRequest(SourceConfiguration sourceConfiguration,
                          HttpRequest request,
                          NHttpServerConnection conn) {
@@ -89,16 +88,16 @@
             this.version = HttpVersion.HTTP_1_1;
         }
 
-        Header[] headers = request.getAllHeaders();
-        if (headers != null) {
-            for (Header header : headers) {
-                if(this.headers.containsKey(header.getName())) {
-	                 addExcessHeader(header);
-	            } else {
-	                 this.headers.put(header.getName(), header.getValue());
-	            }
-	        }
-	    }
+		Header[] headers = request.getAllHeaders();
+		if (headers != null) {
+			for (Header header : headers) {
+				if (this.headers.containsKey(header.getName())) {
+					addExcessHeader(header);
+				} else {
+					this.headers.put(header.getName(), header.getValue());
+				}
+			}
+		}
     }
 
     /**
@@ -191,11 +190,11 @@
         return entityEnclosing;
     }
     
-    public Map getExcessHeaders() {
-        return this.excessHeaders;
-   }
+	public Map getExcessHeaders() {
+		return this.excessHeaders;
+	}
     
-    public void addExcessHeader(Header h) {
-        this.excessHeaders.put(h.getName(), h.getValue());
-   }
+	public void addExcessHeader(Header h) {
+		this.excessHeaders.put(h.getName(), h.getValue());
+	}
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java	(revision 1746051)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java	(revision 1746052)
@@ -40,8 +40,8 @@
 
     private Pipe pipe = null;
 
-    /** Transport headers */
-    private Map<String, TreeSet<String>> headers = new HashMap<String, TreeSet<String>>();
+	/** Transport headers */
+	private Map<String, TreeSet<String>> headers = new HashMap<String, TreeSet<String>>();
 
     /** Status of the response */
     private int status = HttpStatus.SC_OK;
@@ -122,17 +122,17 @@
 
         response.setEntity(entity);
 
-        // set any transport headers
-        Set<Map.Entry<String, TreeSet<String>>> entries = headers.entrySet();
+		// set any transport headers
+		Set<Map.Entry<String, TreeSet<String>>> entries = headers.entrySet();
 
-        for (Map.Entry<String, TreeSet<String>> entry : entries) {
-            if (entry.getKey() != null) {     
-            	Iterator<String> i = entry.getValue().iterator();
-                while(i.hasNext()) {
-                	response.addHeader(entry.getKey(), i.next());
-                }   
-            }
-        }
+		for (Map.Entry<String, TreeSet<String>> entry : entries) {
+			if (entry.getKey() != null) {
+				Iterator<String> i = entry.getValue().iterator();
+				while (i.hasNext()) {
+					response.addHeader(entry.getKey(), i.next());
+				}
+			}
+		}
         
 
         SourceContext.updateState(conn, ProtocolState.RESPONSE_HEAD);
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NhttpConstants.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NhttpConstants.java	(revision 1746051)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NhttpConstants.java	(revision 1746052)
@@ -167,9 +167,9 @@
     //property name of nhttp log directory
     public static final String NHTTP_LOG_DIRECTORY = "nhttp.log.directory";
     
-    /**
-     * This holds a MultiValue Map, which keeps transport headers' values other than last value
-     * (in order they appear) against the transport header.
-     */
-    public static final String EXCESS_TRANSPORT_HEADERS = "EXCESS_TRANSPORT_HEADERS";
+	/**
+	 * This holds a MultiValue Map, which keeps transport headers' values other
+	 * than last value (in order they appear) against the transport header.
+	 */
+	public static final String EXCESS_TRANSPORT_HEADERS = "EXCESS_TRANSPORT_HEADERS";
 }
Index: java/modules/transports/core/nhttp/pom.xml
===================================================================
--- java/modules/transports/core/nhttp/pom.xml	(revision 1746051)
+++ java/modules/transports/core/nhttp/pom.xml	(revision 1746052)
@@ -157,13 +157,11 @@
         <dependency>
             <groupId>commons-lang</groupId>
             <artifactId>commons-lang</artifactId>
-        </dependency>
-        
-       <dependency>
-        <groupId>commons-collections</groupId>
-        <artifactId>commons-collections</artifactId>
-      </dependency>
-
+        </dependency>   
+        <dependency>
+        	<groupId>commons-collections</groupId>
+        	<artifactId>commons-collections</artifactId>
+      	</dependency>
         <!-- BouncyCastle API which is required when validating Certificates. -->
         <dependency>
             <groupId>org.bouncycastle</groupId>
-*-*-*-
Message: correcting code styles for the fix SYNAPSE-1025
-*-*-*-
When: 2016-05-29 15:28:02 -0400 
-*-*-*-
Who: dushan