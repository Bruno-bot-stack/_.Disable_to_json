Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java	(revision 1776099)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java	(nonexistent)
@@ -1,172 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.conn.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.http.Header;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.config.MessageConstraints;
-import org.apache.http.impl.ConnSupport;
-import org.apache.http.impl.entity.StrictContentLengthStrategy;
-import org.apache.http.impl.nio.DefaultNHttpClientConnection;
-import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;
-import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;
-import org.apache.http.nio.*;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.SessionInputBuffer;
-import org.apache.http.nio.reactor.SessionOutputBuffer;
-import org.apache.http.nio.util.HeapByteBufferAllocator;
-import org.apache.synapse.transport.nhttp.AccessHandler;
-
-import java.io.IOException;
-
-/**
- * A connection factory implementation for DefaultNHttpClientConnection instances.
- * Based on the current logging configuration, this factory decides whether to create
- * regular DefaultNHttpClientConnection objects or to create LoggingNHttpClientConnection
- * objects. Also, depending on the logging configuration, this factory may choose to
- * wrap IOSession instances in LoggingIOSession objects.
- */
-public class LoggingNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {
-
-    private static final Log targetConnLog = LogFactory.getLog(
-            LoggingConstants.TARGET_CONNECTION_LOG_ID);
-    private static final Log targetHeaderLog = LogFactory.getLog(
-            LoggingConstants.TARGET_HEADER_LOG_ID);
-    private static final Log targetSessionLog = LogFactory.getLog(
-            LoggingConstants.TARGET_SESSION_LOG_ID);
-    private static final Log targetWireLog = LogFactory.getLog(
-            LoggingConstants.TARGET_WIRE_LOG_ID);
-
-    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =
-            new LoggingNHttpRequestWriterFactory();
-    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =
-            new LoggingNHttpResponseParserFactory();
-
-    private final ConnectionConfig config;
-
-    public LoggingNHttpClientConnectionFactory(ConnectionConfig config) {
-        this.config = config;
-    }
-
-    public DefaultNHttpClientConnection createConnection(IOSession session) {
-        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {
-            session = new LoggingIOSession(targetSessionLog, targetWireLog,
-                    session, "http-sender");
-        }
-
-        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {
-            return new LoggingNHttpClientConnection(
-                    session,
-                    config.getBufferSize(),
-                    config.getFragmentSizeHint(),
-                    HeapByteBufferAllocator.INSTANCE,
-                    ConnSupport.createDecoder(config),
-                    ConnSupport.createEncoder(config),
-                    config.getMessageConstraints(),
-                    StrictContentLengthStrategy.INSTANCE,
-                    StrictContentLengthStrategy.INSTANCE,
-                    requestWriterFactory,
-                    responseParserFactory,
-                    targetConnLog);
-        } else {
-            return new DefaultNHttpClientConnection(
-                    session,
-                    config.getBufferSize(),
-                    config.getFragmentSizeHint(),
-                    HeapByteBufferAllocator.INSTANCE,
-                    ConnSupport.createDecoder(config),
-                    ConnSupport.createEncoder(config),
-                    config.getMessageConstraints(),
-                    StrictContentLengthStrategy.INSTANCE,
-                    StrictContentLengthStrategy.INSTANCE,
-                    requestWriterFactory,
-                    responseParserFactory);
-        }
-    }
-
-    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {
-        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {
-            return new LoggingNHttpRequestWriter(sessionBuffer);
-        }
-    }
-
-    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {
-        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,
-                                                      MessageConstraints messageConstraints) {
-            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);
-        }
-    }
-
-    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {
-
-        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {
-            super(buffer);
-        }
-
-        public void write(final HttpRequest request) throws IOException, HttpException {
-            if (request != null) {
-                if (targetHeaderLog.isDebugEnabled()) {
-                    targetHeaderLog.debug(">> " + request.getRequestLine().toString());
-                    Header[] headers = request.getAllHeaders();
-                    for (Header header : headers) {
-                        targetHeaderLog.debug(">> " + header.toString());
-                    }
-                }
-
-                if (AccessHandler.getAccessLog().isInfoEnabled()) {
-                    AccessHandler.getAccess().addAccessToQueue(request);
-                }
-            }
-            super.write(request);
-        }
-
-    }
-
-    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {
-
-        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {
-            super(buffer, constraints);
-        }
-
-        public HttpResponse parse() throws IOException, HttpException {
-            HttpResponse response = super.parse();
-            if (response != null) {
-                if (targetHeaderLog.isDebugEnabled()) {
-                    targetHeaderLog.debug("<< " + response.getStatusLine().toString());
-                    Header[] headers = response.getAllHeaders();
-                    for (Header header : headers) {
-                        targetHeaderLog.debug("<< " + header.toString());
-                    }
-                }
-
-                if (AccessHandler.getAccessLog().isInfoEnabled()) {
-                    AccessHandler.getAccess().addAccessToQueue(response);
-                }
-            }
-            return response;
-        }
-
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java	(revision 1776099)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java	(nonexistent)
@@ -1,80 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.conn.logging;
-
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.impl.nio.DefaultNHttpClientConnection;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.ssl.SSLIOSession;
-import org.apache.http.nio.reactor.ssl.SSLMode;
-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
-
-import javax.net.ssl.SSLContext;
-import java.net.InetSocketAddress;
-import java.util.Map;
-
-/**
- * The SSL-enabled version of the LoggingNHttpClientConnectionFactory. Identical in behavior
- * to the parent class, but wraps IOSession instances with SSLIOSession instances. This
- * implementation also supports using different SSLContext instances for different target
- * I/O sessions.
- */
-public class LoggingNHttpSSLClientConnectionFactory extends LoggingNHttpClientConnectionFactory {
-
-    private SSLContext sslContext;
-    private SSLSetupHandler sslSetupHandler;
-    private Map<String,SSLContext> customContexts;
-
-    public LoggingNHttpSSLClientConnectionFactory(ConnectionConfig config,
-                                                  SSLContext sslContext,
-                                                  SSLSetupHandler sslSetupHandler,
-                                                  Map<String, SSLContext> customContexts) {
-        super(config);
-        this.sslContext = sslContext;
-        this.sslSetupHandler = sslSetupHandler;
-        this.customContexts = customContexts;
-    }
-
-    @Override
-    public DefaultNHttpClientConnection createConnection(IOSession session) {
-        final SSLIOSession ssliosession = new SSLIOSession(
-                session,
-                SSLMode.CLIENT,
-                getSSLContext(session),
-                sslSetupHandler);
-        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);
-        return super.createConnection(ssliosession);
-    }
-
-    private SSLContext getSSLContext(IOSession session) {
-        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();
-        String host = address.getHostName() + ":" + address.getPort();
-        SSLContext customContext = null;
-        if (customContexts != null) {
-            // See if there's a custom SSL profile configured for this server
-            customContext = customContexts.get(host);
-        }
-
-        if (customContext == null) {
-            customContext = sslContext;
-        }
-        return customContext;
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java	(revision 1776099)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java	(nonexistent)
@@ -1,170 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.conn.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.http.Header;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.config.MessageConstraints;
-import org.apache.http.impl.ConnSupport;
-import org.apache.http.impl.entity.StrictContentLengthStrategy;
-import org.apache.http.impl.nio.DefaultNHttpServerConnection;
-import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;
-import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;
-import org.apache.http.nio.*;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.SessionInputBuffer;
-import org.apache.http.nio.reactor.SessionOutputBuffer;
-import org.apache.http.nio.util.HeapByteBufferAllocator;
-import org.apache.synapse.transport.nhttp.AccessHandler;
-
-import java.io.IOException;
-
-/**
- * A connection factory implementation for DefaultNHttpServerConnection instances.
- * Based on the current logging configuration, this factory decides whether to create
- * regular DefaultNHttpServerConnection objects or to create LoggingNHttpServerConnection
- * objects. Also, depending on the logging configuration, this factory may choose to
- * wrap IOSession instances in LoggingIOSession objects.
- */
-public class LoggingNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {
-
-    private static final Log sourceConnLog = LogFactory.getLog(
-            LoggingConstants.SOURCE_CONNECTION_LOG_ID);
-    private static final Log sourceHeaderLog = LogFactory.getLog(
-            LoggingConstants.SOURCE_HEADER_LOG_ID);
-    private static final Log sourceSessionLog = LogFactory.getLog(
-            LoggingConstants.SOURCE_SESSION_LOG_ID);
-    private static final Log sourceWireLog = LogFactory.getLog(
-            LoggingConstants.SOURCE_WIRE_LOG_ID);
-
-    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =
-            new LoggingNHttpRequestParserFactory();
-    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =
-            new LoggingNHttpResponseWriterFactory();
-
-    private final ConnectionConfig config;
-
-    public LoggingNHttpServerConnectionFactory(ConnectionConfig config) {
-        this.config = config;
-    }
-
-    public DefaultNHttpServerConnection createConnection(IOSession session) {
-        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {
-            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,
-                    session, "http-listener");
-        }
-
-        if (sourceConnLog.isDebugEnabled()) {
-            return new LoggingNHttpServerConnection(
-                    session,
-                    config.getBufferSize(),
-                    config.getFragmentSizeHint(),
-                    HeapByteBufferAllocator.INSTANCE,
-                    ConnSupport.createDecoder(config),
-                    ConnSupport.createEncoder(config),
-                    config.getMessageConstraints(),
-                    StrictContentLengthStrategy.INSTANCE,
-                    StrictContentLengthStrategy.INSTANCE,
-                    requestParserFactory,
-                    responseWriterFactory,
-                    sourceConnLog);
-        } else {
-            return new DefaultNHttpServerConnection(
-                    session,
-                    config.getBufferSize(),
-                    config.getFragmentSizeHint(),
-                    HeapByteBufferAllocator.INSTANCE,
-                    ConnSupport.createDecoder(config),
-                    ConnSupport.createEncoder(config),
-                    config.getMessageConstraints(),
-                    StrictContentLengthStrategy.INSTANCE,
-                    StrictContentLengthStrategy.INSTANCE,
-                    requestParserFactory,
-                    responseWriterFactory);
-        }
-    }
-
-    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {
-        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,
-                                                      MessageConstraints messageConstraints) {
-            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);
-        }
-    }
-
-    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {
-        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {
-            return new LoggingNHttpResponseWriter(sessionBuffer);
-        }
-    }
-
-    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {
-
-        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {
-            super(buffer, constraints);
-        }
-
-        public HttpRequest parse() throws IOException, HttpException {
-            HttpRequest request = super.parse();
-            if (request != null) {
-                if (sourceHeaderLog.isDebugEnabled()) {
-                    sourceHeaderLog.debug(">> " + request.getRequestLine().toString());
-                    Header[] headers = request.getAllHeaders();
-                    for (Header header : headers) {
-                        sourceHeaderLog.debug(">> " + header.toString());
-                    }
-                }
-
-                if (AccessHandler.getAccessLog().isInfoEnabled()) {
-                    AccessHandler.getAccess().addAccessToQueue(request);
-                }
-            }
-            return request;
-        }
-    }
-
-    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {
-
-        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {
-            super(buffer);
-        }
-
-        public void write(final HttpResponse response) throws IOException, HttpException {
-            if (response != null) {
-                if (response != null && sourceHeaderLog.isDebugEnabled()) {
-                    sourceHeaderLog.debug("<< " + response.getStatusLine().toString());
-                    Header[] headers = response.getAllHeaders();
-                    for (Header header : headers) {
-                        sourceHeaderLog.debug("<< " + header.toString());
-                    }
-                }
-
-                if (AccessHandler.getAccessLog().isInfoEnabled()) {
-                    AccessHandler.getAccess().addAccessToQueue(response);
-                }
-            }
-            super.write(response);
-        }
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java	(revision 1776099)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java	(nonexistent)
@@ -1,57 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.conn.logging;
-
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.impl.nio.DefaultNHttpServerConnection;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.ssl.SSLIOSession;
-import org.apache.http.nio.reactor.ssl.SSLMode;
-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
-
-import javax.net.ssl.SSLContext;
-
-/**
- * The SSL-enabled version of the LoggingNHttpServerConnectionFactory. Identical in behavior
- * to the parent class, but wraps IOSession instances with SSLIOSession instances.
- */
-public class LoggingNHttpSSLServerConnectionFactory extends LoggingNHttpServerConnectionFactory {
-
-    private SSLContext sslContext;
-    private SSLSetupHandler sslSetupHandler;
-
-    public LoggingNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,
-                                                  SSLSetupHandler sslSetupHandler) {
-        super(config);
-        this.sslContext = sslContext;
-        this.sslSetupHandler = sslSetupHandler;
-    }
-
-    @Override
-    public DefaultNHttpServerConnection createConnection(IOSession session) {
-        final SSLIOSession ssliosession = new SSLIOSession(
-                session,
-                SSLMode.SERVER,
-                sslContext,
-                sslSetupHandler);
-        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);
-        return super.createConnection(ssliosession);
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnection.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnection.java	(revision 1776100)
@@ -0,0 +1,84 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn;
+
+import org.apache.http.HttpException;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.config.MessageConstraints;
+import org.apache.http.entity.ContentLengthStrategy;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.nio.NHttpClientEventHandler;
+import org.apache.http.nio.NHttpMessageParserFactory;
+import org.apache.http.nio.NHttpMessageWriterFactory;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.util.ByteBufferAllocator;
+
+import java.io.IOException;
+import java.nio.charset.CharsetDecoder;
+import java.nio.charset.CharsetEncoder;
+
+/**
+ * An extension of the DefaultNHttpClientConnection class, that has some
+ * additional stuff related to synapse NHttp transport implementation
+ */
+public class SynapseNHttpClientConnection extends DefaultNHttpClientConnection {
+
+    public SynapseNHttpClientConnection(IOSession session,
+                                        int bufferSize,
+                                        int fragmentSizeHint,
+                                        ByteBufferAllocator allocator,
+                                        CharsetDecoder charDecoder,
+                                        CharsetEncoder charEncoder,
+                                        MessageConstraints constraints,
+                                        ContentLengthStrategy incomingContentStrategy,
+                                        ContentLengthStrategy outgoingContentStrategy,
+                                        NHttpMessageWriterFactory<HttpRequest> requestWriterFactory,
+                                        NHttpMessageParserFactory<HttpResponse> responseParserFactory) {
+        super(session, bufferSize, fragmentSizeHint, allocator,
+              charDecoder, charEncoder, constraints, incomingContentStrategy,
+              outgoingContentStrategy, requestWriterFactory, responseParserFactory);
+    }
+
+    @Override
+    public void close() throws IOException {
+        super.close();
+    }
+
+    @Override
+    public void shutdown() throws IOException {
+        super.shutdown();
+    }
+
+    @Override
+    public void submitRequest(final HttpRequest request) throws IOException, HttpException {
+        super.submitRequest(request);
+    }
+
+    @Override
+    public void consumeInput(final NHttpClientEventHandler handler) {
+        super.consumeInput(handler);
+    }
+
+    @Override
+    public void produceOutput(final NHttpClientEventHandler handler) {
+        super.produceOutput(handler);
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpServerConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpServerConnectionFactory.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpServerConnectionFactory.java	(revision 1776100)
@@ -0,0 +1,173 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.Header;
+import org.apache.http.HttpException;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.config.MessageConstraints;
+import org.apache.http.impl.ConnSupport;
+import org.apache.http.impl.entity.StrictContentLengthStrategy;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;
+import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;
+import org.apache.http.nio.*;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.SessionInputBuffer;
+import org.apache.http.nio.reactor.SessionOutputBuffer;
+import org.apache.http.nio.util.HeapByteBufferAllocator;
+import org.apache.synapse.transport.nhttp.AccessHandler;
+import org.apache.synapse.transport.utils.conn.logging.LoggingConstants;
+import org.apache.synapse.transport.utils.conn.logging.LoggingIOSession;
+import org.apache.synapse.transport.utils.conn.logging.LoggingNHttpServerConnection;
+
+import java.io.IOException;
+
+/**
+ * A connection factory implementation for DefaultNHttpServerConnection instances.
+ * Based on the current logging configuration, this factory decides whether to create
+ * regular DefaultNHttpServerConnection objects or to create LoggingNHttpServerConnection
+ * objects. Also, depending on the logging configuration, this factory may choose to
+ * wrap IOSession instances in LoggingIOSession objects.
+ */
+public class SynapseNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {
+
+    private static final Log sourceConnLog = LogFactory.getLog(
+            LoggingConstants.SOURCE_CONNECTION_LOG_ID);
+    private static final Log sourceHeaderLog = LogFactory.getLog(
+            LoggingConstants.SOURCE_HEADER_LOG_ID);
+    private static final Log sourceSessionLog = LogFactory.getLog(
+            LoggingConstants.SOURCE_SESSION_LOG_ID);
+    private static final Log sourceWireLog = LogFactory.getLog(
+            LoggingConstants.SOURCE_WIRE_LOG_ID);
+
+    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =
+            new LoggingNHttpRequestParserFactory();
+    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =
+            new LoggingNHttpResponseWriterFactory();
+
+    private final ConnectionConfig config;
+
+    public SynapseNHttpServerConnectionFactory(ConnectionConfig config) {
+        this.config = config;
+    }
+
+    public DefaultNHttpServerConnection createConnection(IOSession session) {
+        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {
+            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,
+                                           session, "http-listener");
+        }
+
+        if (sourceConnLog.isDebugEnabled()) {
+            return new LoggingNHttpServerConnection(
+                    session,
+                    config.getBufferSize(),
+                    config.getFragmentSizeHint(),
+                    HeapByteBufferAllocator.INSTANCE,
+                    ConnSupport.createDecoder(config),
+                    ConnSupport.createEncoder(config),
+                    config.getMessageConstraints(),
+                    StrictContentLengthStrategy.INSTANCE,
+                    StrictContentLengthStrategy.INSTANCE,
+                    requestParserFactory,
+                    responseWriterFactory,
+                    sourceConnLog);
+        } else {
+            return new DefaultNHttpServerConnection(
+                    session,
+                    config.getBufferSize(),
+                    config.getFragmentSizeHint(),
+                    HeapByteBufferAllocator.INSTANCE,
+                    ConnSupport.createDecoder(config),
+                    ConnSupport.createEncoder(config),
+                    config.getMessageConstraints(),
+                    StrictContentLengthStrategy.INSTANCE,
+                    StrictContentLengthStrategy.INSTANCE,
+                    requestParserFactory,
+                    responseWriterFactory);
+        }
+    }
+
+    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {
+        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,
+                                                      MessageConstraints messageConstraints) {
+            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);
+        }
+    }
+
+    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {
+        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {
+            return new LoggingNHttpResponseWriter(sessionBuffer);
+        }
+    }
+
+    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {
+
+        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {
+            super(buffer, constraints);
+        }
+
+        public HttpRequest parse() throws IOException, HttpException {
+            HttpRequest request = super.parse();
+            if (request != null) {
+                if (sourceHeaderLog.isDebugEnabled()) {
+                    sourceHeaderLog.debug(">> " + request.getRequestLine().toString());
+                    Header[] headers = request.getAllHeaders();
+                    for (Header header : headers) {
+                        sourceHeaderLog.debug(">> " + header.toString());
+                    }
+                }
+
+                if (AccessHandler.getAccessLog().isInfoEnabled()) {
+                    AccessHandler.getAccess().addAccessToQueue(request);
+                }
+            }
+            return request;
+        }
+    }
+
+    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {
+
+        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {
+            super(buffer);
+        }
+
+        public void write(final HttpResponse response) throws IOException, HttpException {
+            if (response != null) {
+                if (response != null && sourceHeaderLog.isDebugEnabled()) {
+                    sourceHeaderLog.debug("<< " + response.getStatusLine().toString());
+                    Header[] headers = response.getAllHeaders();
+                    for (Header header : headers) {
+                        sourceHeaderLog.debug("<< " + header.toString());
+                    }
+                }
+
+                if (AccessHandler.getAccessLog().isInfoEnabled()) {
+                    AccessHandler.getAccess().addAccessToQueue(response);
+                }
+            }
+            super.write(response);
+        }
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLServerConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLServerConnectionFactory.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLServerConnectionFactory.java	(revision 1776100)
@@ -0,0 +1,57 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn;
+
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLIOSession;
+import org.apache.http.nio.reactor.ssl.SSLMode;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+
+import javax.net.ssl.SSLContext;
+
+/**
+ * The SSL-enabled version of the SynapseNHttpServerConnectionFactory. Identical in behavior
+ * to the parent class, but wraps IOSession instances with SSLIOSession instances.
+ */
+public class SynapseNHttpSSLServerConnectionFactory extends SynapseNHttpServerConnectionFactory {
+
+    private SSLContext sslContext;
+    private SSLSetupHandler sslSetupHandler;
+
+    public SynapseNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,
+                                                  SSLSetupHandler sslSetupHandler) {
+        super(config);
+        this.sslContext = sslContext;
+        this.sslSetupHandler = sslSetupHandler;
+    }
+
+    @Override
+    public DefaultNHttpServerConnection createConnection(IOSession session) {
+        final SSLIOSession ssliosession = new SSLIOSession(
+                session,
+                SSLMode.SERVER,
+                sslContext,
+                sslSetupHandler);
+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);
+        return super.createConnection(ssliosession);
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java	(revision 1776099)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java	(revision 1776100)
@@ -25,12 +25,12 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.config.MessageConstraints;
 import org.apache.http.entity.ContentLengthStrategy;
-import org.apache.http.impl.nio.DefaultNHttpClientConnection;
 import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.NHttpMessageParserFactory;
 import org.apache.http.nio.NHttpMessageWriterFactory;
 import org.apache.http.nio.reactor.IOSession;
 import org.apache.http.nio.util.ByteBufferAllocator;
+import org.apache.synapse.transport.utils.conn.SynapseNHttpClientConnection;
 
 import java.io.IOException;
 import java.nio.charset.CharsetDecoder;
@@ -41,7 +41,7 @@
  * additional logging features. This implementation enhances the default connection
  * class by logging all the major events that occur on the connection instance.
  */
-public class LoggingNHttpClientConnection extends DefaultNHttpClientConnection {
+public class LoggingNHttpClientConnection extends SynapseNHttpClientConnection {
 
     private final Log log;
 
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java	(revision 1776099)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java	(revision 1776100)
@@ -27,6 +27,10 @@
 import org.apache.http.nio.NHttpClientEventHandler;
 import org.apache.http.nio.NHttpServerEventHandler;
 import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+import org.apache.synapse.transport.utils.conn.SynapseNHttpClientConnectionFactory;
+import org.apache.synapse.transport.utils.conn.SynapseNHttpSSLClientConnectionFactory;
+import org.apache.synapse.transport.utils.conn.SynapseNHttpSSLServerConnectionFactory;
+import org.apache.synapse.transport.utils.conn.SynapseNHttpServerConnectionFactory;
 
 import javax.net.ssl.SSLContext;
 import java.util.Map;
@@ -45,7 +49,7 @@
     public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,
                                                                   final ConnectionConfig config) {
         return new DefaultHttpServerIODispatch(decorate(handler),
-                new LoggingNHttpServerConnectionFactory(config));
+                new SynapseNHttpServerConnectionFactory(config));
     }
 
     /**
@@ -64,7 +68,7 @@
                                                                   final SSLContext sslContext,
                                                                   final SSLSetupHandler sslSetupHandler) {
         return new DefaultHttpServerIODispatch(decorate(handler),
-                new LoggingNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));
+                new SynapseNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));
     }
 
     /**
@@ -79,7 +83,7 @@
     public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,
                                                                   final ConnectionConfig config) {
         return new DefaultHttpClientIODispatch(decorate(handler),
-                new LoggingNHttpClientConnectionFactory(config));
+                new SynapseNHttpClientConnectionFactory(config));
     }
 
     /**
@@ -100,7 +104,7 @@
                                                                   final SSLSetupHandler sslSetupHandler,
                                                                   Map<String, SSLContext> customContexts) {
         return new DefaultHttpClientIODispatch(decorate(handler),
-                new LoggingNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));
+                new SynapseNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));
     }
 
     private static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnectionFactory.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnectionFactory.java	(revision 1776100)
@@ -0,0 +1,176 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.Header;
+import org.apache.http.HttpException;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.config.MessageConstraints;
+import org.apache.http.impl.ConnSupport;
+import org.apache.http.impl.entity.StrictContentLengthStrategy;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;
+import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;
+import org.apache.http.nio.*;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.SessionInputBuffer;
+import org.apache.http.nio.reactor.SessionOutputBuffer;
+import org.apache.http.nio.util.HeapByteBufferAllocator;
+import org.apache.synapse.transport.nhttp.AccessHandler;
+import org.apache.synapse.transport.utils.conn.SynapseNHttpClientConnection;
+import org.apache.synapse.transport.utils.conn.logging.LoggingConstants;
+import org.apache.synapse.transport.utils.conn.logging.LoggingIOSession;
+import org.apache.synapse.transport.utils.conn.logging.LoggingNHttpClientConnection;
+
+import java.io.IOException;
+
+/**
+ * A connection factory implementation for DefaultNHttpClientConnection instances.
+ * Based on the current logging configuration, this factory decides whether to create
+ * regular SynapseNHttpClientConnection objects or to create LoggingNHttpClientConnection
+ * objects. Also, depending on the logging configuration, this factory may choose to
+ * wrap IOSession instances in LoggingIOSession objects.
+ */
+public class SynapseNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {
+
+    private static final Log targetConnLog = LogFactory.getLog(
+            LoggingConstants.TARGET_CONNECTION_LOG_ID);
+    private static final Log targetHeaderLog = LogFactory.getLog(
+            LoggingConstants.TARGET_HEADER_LOG_ID);
+    private static final Log targetSessionLog = LogFactory.getLog(
+            LoggingConstants.TARGET_SESSION_LOG_ID);
+    private static final Log targetWireLog = LogFactory.getLog(
+            LoggingConstants.TARGET_WIRE_LOG_ID);
+
+    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =
+            new LoggingNHttpRequestWriterFactory();
+    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =
+            new LoggingNHttpResponseParserFactory();
+
+    private final ConnectionConfig config;
+
+    public SynapseNHttpClientConnectionFactory(ConnectionConfig config) {
+        this.config = config;
+    }
+
+    public DefaultNHttpClientConnection createConnection(IOSession session) {
+        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {
+            session = new LoggingIOSession(targetSessionLog, targetWireLog,
+                                           session, "http-sender");
+        }
+
+        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {
+            return new LoggingNHttpClientConnection(
+                    session,
+                    config.getBufferSize(),
+                    config.getFragmentSizeHint(),
+                    HeapByteBufferAllocator.INSTANCE,
+                    ConnSupport.createDecoder(config),
+                    ConnSupport.createEncoder(config),
+                    config.getMessageConstraints(),
+                    StrictContentLengthStrategy.INSTANCE,
+                    StrictContentLengthStrategy.INSTANCE,
+                    requestWriterFactory,
+                    responseParserFactory,
+                    targetConnLog);
+        } else {
+            return new SynapseNHttpClientConnection(
+                    session,
+                    config.getBufferSize(),
+                    config.getFragmentSizeHint(),
+                    HeapByteBufferAllocator.INSTANCE,
+                    ConnSupport.createDecoder(config),
+                    ConnSupport.createEncoder(config),
+                    config.getMessageConstraints(),
+                    StrictContentLengthStrategy.INSTANCE,
+                    StrictContentLengthStrategy.INSTANCE,
+                    requestWriterFactory,
+                    responseParserFactory);
+        }
+    }
+
+    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {
+        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {
+            return new LoggingNHttpRequestWriter(sessionBuffer);
+        }
+    }
+
+    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {
+        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,
+                                                      MessageConstraints messageConstraints) {
+            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);
+        }
+    }
+
+    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {
+
+        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {
+            super(buffer);
+        }
+
+        public void write(final HttpRequest request) throws IOException, HttpException {
+            if (request != null) {
+                if (targetHeaderLog.isDebugEnabled()) {
+                    targetHeaderLog.debug(">> " + request.getRequestLine().toString());
+                    Header[] headers = request.getAllHeaders();
+                    for (Header header : headers) {
+                        targetHeaderLog.debug(">> " + header.toString());
+                    }
+                }
+
+                if (AccessHandler.getAccessLog().isInfoEnabled()) {
+                    AccessHandler.getAccess().addAccessToQueue(request);
+                }
+            }
+            super.write(request);
+        }
+
+    }
+
+    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {
+
+        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {
+            super(buffer, constraints);
+        }
+
+        public HttpResponse parse() throws IOException, HttpException {
+            HttpResponse response = super.parse();
+            if (response != null) {
+                if (targetHeaderLog.isDebugEnabled()) {
+                    targetHeaderLog.debug("<< " + response.getStatusLine().toString());
+                    Header[] headers = response.getAllHeaders();
+                    for (Header header : headers) {
+                        targetHeaderLog.debug("<< " + header.toString());
+                    }
+                }
+
+                if (AccessHandler.getAccessLog().isInfoEnabled()) {
+                    AccessHandler.getAccess().addAccessToQueue(response);
+                }
+            }
+            return response;
+        }
+
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLClientConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLClientConnectionFactory.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLClientConnectionFactory.java	(revision 1776100)
@@ -0,0 +1,80 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn;
+
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLIOSession;
+import org.apache.http.nio.reactor.ssl.SSLMode;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+
+import javax.net.ssl.SSLContext;
+import java.net.InetSocketAddress;
+import java.util.Map;
+
+/**
+ * The SSL-enabled version of the SynapseNHttpClientConnectionFactory. Identical in behavior
+ * to the parent class, but wraps IOSession instances with SSLIOSession instances. This
+ * implementation also supports using different SSLContext instances for different target
+ * I/O sessions.
+ */
+public class SynapseNHttpSSLClientConnectionFactory extends SynapseNHttpClientConnectionFactory {
+
+    private SSLContext sslContext;
+    private SSLSetupHandler sslSetupHandler;
+    private Map<String,SSLContext> customContexts;
+
+    public SynapseNHttpSSLClientConnectionFactory(ConnectionConfig config,
+                                                  SSLContext sslContext,
+                                                  SSLSetupHandler sslSetupHandler,
+                                                  Map<String, SSLContext> customContexts) {
+        super(config);
+        this.sslContext = sslContext;
+        this.sslSetupHandler = sslSetupHandler;
+        this.customContexts = customContexts;
+    }
+
+    @Override
+    public DefaultNHttpClientConnection createConnection(IOSession session) {
+        final SSLIOSession ssliosession = new SSLIOSession(
+                session,
+                SSLMode.CLIENT,
+                getSSLContext(session),
+                sslSetupHandler);
+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);
+        return super.createConnection(ssliosession);
+    }
+
+    private SSLContext getSSLContext(IOSession session) {
+        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();
+        String host = address.getHostName() + ":" + address.getPort();
+        SSLContext customContext = null;
+        if (customContexts != null) {
+            // See if there's a custom SSL profile configured for this server
+            customContext = customContexts.get(host);
+        }
+
+        if (customContext == null) {
+            customContext = sslContext;
+        }
+        return customContext;
+    }
+}
-*-*-*-
Message: Refactoring connection factory class names
-*-*-*-
When: 2016-12-27 04:55:18 -0500 
-*-*-*-
Who: isudana