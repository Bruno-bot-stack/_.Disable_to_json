Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleClientResult.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleClientResult.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleClientResult.java	(revision 1211407)
@@ -0,0 +1,64 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework;
+
+import java.util.Properties;
+
+/**
+ * Stores the results after executing a client
+ */
+public class SampleClientResult {
+
+    private boolean gotResponse;
+    private boolean isFinished;
+    private Exception exception;
+    private Properties clientProperties = new Properties();
+
+    public void setGotResponse(boolean gotResponse) {
+        this.gotResponse = gotResponse;
+    }
+
+    public void setException(Exception exception) {
+        this.exception = exception;
+    }
+
+    public boolean gotResponse() {
+        return gotResponse;
+    }
+
+    public Exception getException() {
+        return exception;
+    }
+
+    public boolean isFinished() {
+        return isFinished;
+    }
+
+    public void setFinished(boolean finished) {
+        isFinished = finished;
+    }
+
+    public void addProperty(String pName, String pValue){
+        clientProperties.setProperty(pName,pValue);
+    }
+
+    public String getProperty(String pName){
+        return clientProperties.getProperty(pName);
+    }
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteHandler.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteHandler.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteHandler.java	(revision 1211407)
@@ -0,0 +1,364 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework.clients;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.om.xpath.AXIOMXPath;
+
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+/**
+ * A class that can create messages to, and parse replies from our sample StockQuote service
+ */
+public class StockQuoteHandler {
+
+    private static final Random RANDOM = new Random();
+
+    /**
+     * Create a new custom quote request with a body as follows
+     * <m0:CheckPriceRequest xmlns:m0="http://services.samples">
+     *   <m0:Code>symbol</m0:Code>
+     * </m0:CheckPriceRequest>
+     * @param symbol the stock symbol
+     * @return OMElement for SOAP body
+     */
+    public static OMElement createCustomQuoteRequest(String symbol) {
+        OMFactory factory   = OMAbstractFactory.getOMFactory();
+        OMNamespace ns      = factory.createOMNamespace(
+            "http://services.samples", "m0");
+        OMElement chkPrice  = factory.createOMElement("CheckPriceRequest", ns);
+        OMElement code      = factory.createOMElement("Code", ns);
+        chkPrice.addChild(code);
+        code.setText(symbol);
+        return chkPrice;
+    }
+
+    /**
+     * Create a new quote request with a body as follows
+     *  <m:GetQuote xmlns:m="http://services.samples">
+     *      <m:request>
+     *          <m:symbol>IBM</m:symbol>
+     *      </m:request>
+     *  </m:GetQuote>
+     * @param symbol the stock symbol
+     * @return OMElement for SOAP body
+     */
+    public static OMElement createStandardQuoteRequest(String symbol, int itrCount) {
+        OMFactory factory   = OMAbstractFactory.getOMFactory();
+        OMNamespace ns      = factory.createOMNamespace("http://services.samples", "m0");
+        OMElement getQuote  = factory.createOMElement("getQuote", ns);
+        for (int i =0; i<itrCount; i++) {
+            OMElement request   = factory.createOMElement("request", ns);
+            OMElement symb      = factory.createOMElement("symbol", ns);
+            request.addChild(symb);
+            getQuote.addChild(request);
+            symb.setText(symbol);
+        }
+        return getQuote;
+    }
+
+    /**
+     * Create a new full quote request with a body as follows
+     *  <m:GetFullQuote xmlns:m="http://services.samples">
+     *      <m:request>
+     *          <m:symbol>IBM</m:symbol>
+     *      </m:request>
+     *  </m:GetFullQuote>
+     * @param symbol the stock symbol
+     * @return OMElement for SOAP body
+     */
+    public static OMElement createFullQuoteRequest(String symbol) {
+        OMFactory factory   = OMAbstractFactory.getOMFactory();
+        OMNamespace ns      = factory.createOMNamespace("http://services.samples", "m0");
+        OMElement getQuote  = factory.createOMElement("getFullQuote", ns);
+        OMElement request   = factory.createOMElement("request", ns);
+        OMElement symb      = factory.createOMElement("symbol", ns);
+        request.addChild(symb);
+        getQuote.addChild(request);
+        symb.setText(symbol);
+        return getQuote;
+    }
+
+    /**
+     * Create a new market activity request with a body as follows
+     *  <m:getMarketActivity xmlns:m="http://services.samples">
+     *      <m:request>
+     *          <m:symbol>IBM</m:symbol>
+     *          ...
+     *          <m:symbol>MSFT</m:symbol>
+     *      </m:request>
+     *  </m:getMarketActivity>
+     * @return OMElement for SOAP body
+     */
+    public static OMElement createMarketActivityRequest() {
+        OMFactory factory   = OMAbstractFactory.getOMFactory();
+        OMNamespace ns      = factory.createOMNamespace("http://services.samples", "m0");
+        OMElement getQuote  = factory.createOMElement("getMarketActivity", ns);
+        OMElement request   = factory.createOMElement("request", ns);
+
+        OMElement symb = null;
+        for (int i=0; i<100; i++) {
+            symb = factory.createOMElement("symbols", ns);
+            symb.setText(randomString(3));
+            request.addChild(symb);
+        }
+
+        getQuote.addChild(request);
+        return getQuote;
+    }
+
+    /**
+     * Create a new order for a quantiry of a stock at a given price
+     * <m:placeOrder xmlns:m="http://services.samples">
+     *	  <m:order>
+     *	      <m:price>3.141593E0</m:price>
+     *	      <m:quantity>4</m:quantity>
+     *	      <m:symbol>IBM</m:symbol>
+     *    </m:order>
+     * 	</m:placeOrder>
+     *
+     * @param purchPrice the purchase price
+     * @param qty the quantiry
+     * @param symbol the stock
+     * @return an OMElement payload for the order
+     */
+    public static OMElement createPlaceOrderRequest(double purchPrice, int qty, String symbol) {
+        OMFactory factory   = OMAbstractFactory.getOMFactory();
+        OMNamespace ns      = factory.createOMNamespace("http://services.samples", "m0");
+        OMElement placeOrder= factory.createOMElement("placeOrder", ns);
+        OMElement order     = factory.createOMElement("order", ns);
+        OMElement price     = factory.createOMElement("price", ns);
+        OMElement quantity  = factory.createOMElement("quantity", ns);
+        OMElement symb      = factory.createOMElement("symbol", ns);
+        price.setText(Double.toString(purchPrice));
+        quantity.setText(Integer.toString(qty));
+        symb.setText(symbol);
+        order.addChild(price);
+        order.addChild(quantity);
+        order.addChild(symb);
+        placeOrder.addChild(order);        
+        return placeOrder;
+    }
+
+    /**
+     * Digests the standard StockQuote response and extracts the last trade price
+     * @param result
+     * @return
+     * @throws javax.xml.stream.XMLStreamException
+     *
+     *  <ns:getQuoteResponse xmlns:ns="http://services.samples">
+     *      <ns:return>
+     *          <ns:change>-2.3238706829151026</ns:change>
+     *          ...
+     *          <ns:symbol>IBM</ns:symbol>
+     *          <ns:volume>17949</ns:volume>
+     *      </ns:return>
+     *  </ns:getQuoteResponse>
+     */
+    public static String parseStandardQuoteResponse(OMElement result) throws Exception {
+
+        AXIOMXPath xPath = new AXIOMXPath("//ns:last");
+        xPath.addNamespace("ns","http://services.samples/xsd");
+        OMElement last = (OMElement) xPath.selectSingleNode(result);
+        if (last != null) {
+            return last.getText();
+        } else {
+            throw new Exception("Unexpected response : " + result);
+        }
+    }
+
+    /**
+     * <ns:getFullQuoteResponse xmlns:ns="http://services.samples">
+            <ns:return>
+               <tradeHistory xmlns="http://services.samples">
+                  <day>0</day>
+                  <quote>
+                     <change>-2.367492989603466</change>
+                     <earnings>13.14956711287784</earnings>
+                     <high>-155.58844623078153</high>
+                     <last>157.47582716569198</last>
+                     <lastTradeTimestamp>Mon Apr 16 23:29:58 LKT 2007</lastTradeTimestamp>
+                     <low>-155.31924118819015</low>
+                     <marketCap>6373750.467022192</marketCap>
+                     <name>IBM Company</name>
+                     <open>-154.84071720443495</open>
+                     <peRatio>-17.353258031353164</peRatio>
+                     <percentageChange>-1.3910235348298898</percentageChange>
+                     <prevClose>170.1979104108393</prevClose>
+                     <symbol>IBM</symbol>
+                     <volume>8935</volume>
+                  </quote>
+               </tradeHistory>
+               <tradeHistory xmlns="http://services.samples">
+                  <day>1</day>
+                  <quote>
+                     <change>3.794122022240518</change>
+                     <earnings>-8.656536789776045</earnings>
+                     <high>176.77136802352928</high>
+                     <last>170.28677783945102</last>
+                     <lastTradeTimestamp>Mon Apr 16 23:29:58 LKT 2007</lastTradeTimestamp>
+                     <low>-166.64126635049223</low>
+                     <marketCap>-6112014.916847887</marketCap>
+                     <name>IBM Company</name>
+                     <open>-168.30884678174925</open>
+                     <peRatio>-18.644628475049693</peRatio>
+                     <percentageChange>-2.29678289479374</percentageChange>
+                     <prevClose>-165.19288918603885</prevClose>
+                     <symbol>IBM</symbol>
+                     <volume>5825</volume>
+                  </quote>
+               </tradeHistory>
+               ...
+            </ns:return>
+         </ns:getFullQuoteResponse>
+     *
+     * @param result
+     * @return
+     * @throws Exception
+     */
+    public static String parseFullQuoteResponse(OMElement result) throws Exception {
+
+        AXIOMXPath xPath = new AXIOMXPath("//ns:last");
+        xPath.addNamespace("ns","http://services.samples/xsd");
+        List lastNodes = xPath.selectNodes(result);
+
+        if (lastNodes == null) {
+            throw new Exception("Unexpected response : " + result);
+        }
+
+        double total = 0;
+        int count = 0;
+
+        Iterator iter = lastNodes.iterator();
+        while (iter.hasNext()) {
+            OMElement last = (OMElement) iter.next();
+            total += Double.parseDouble(last.getText());
+            count++;
+        }
+
+        return Double.toString(total/count);
+    }
+
+    /**
+     * <ns:getMarketActivityResponse xmlns:ns="http://services.samples">
+            <ns:return>
+               <quotes xmlns="http://services.samples">
+                  <change>4.183958555301184</change>
+                  <earnings>-8.585281368244686</earnings>
+                  <high>-158.70528805517333</high>
+                  <last>160.83784480071603</last>
+                  <lastTradeTimestamp>Tue Apr 17 02:21:30 LKT 2007</lastTradeTimestamp>
+                  <low>-157.4950051860593</low>
+                  <marketCap>5.9907588733164035E7</marketCap>
+                  <name>EHM Company</name>
+                  <open>-160.18368223376558</open>
+                  <peRatio>24.0926205053427</peRatio>
+                  <percentageChange>-2.6141745708181374</percentageChange>
+                  <prevClose>-160.04893483420904</prevClose>
+                  <symbol>EHM</symbol>
+                  <volume>6319</volume>
+               </quotes>
+               <quotes xmlns="http://services.samples">
+                  ....
+                  <volume>7613</volume>
+               </quotes>
+               ...
+            </ns:return>
+        <ns:getMarketActivityResponse>
+     * @param result
+     * @return the average last price for each stock symbol
+     * @throws Exception
+     */
+    public static String parseMarketActivityResponse(OMElement result) throws Exception {
+
+        AXIOMXPath xPath = new AXIOMXPath("//ns:last");
+        xPath.addNamespace("ns","http://services.samples/xsd");
+        List lastNodes = xPath.selectNodes(result);
+
+        if (lastNodes == null) {
+            throw new Exception("Unexpected response : " + result);
+        }
+
+        double total = 0;
+        int count = 0;
+
+        Iterator iter = lastNodes.iterator();
+        while (iter.hasNext()) {
+            OMElement last = (OMElement) iter.next();
+            total += Double.parseDouble(last.getText());
+            count++;
+        }
+
+        return Double.toString(total/count);
+    }
+
+    /**
+     * Digests the custom quote response and extracts the last trade price
+     * @param result
+     * @return
+     * @throws javax.xml.stream.XMLStreamException
+     *
+     *      <CheckPriceResponse xmlns="http://ws.invesbot.com/" >
+     *          <Code>IBM</Code>
+     *          <Price>82.90</Price>
+     *      </CheckPriceResponse>
+     */
+    public static String parseCustomQuoteResponse(OMElement result) throws Exception {
+
+        AXIOMXPath xPath = new AXIOMXPath("//ns:Price");
+        xPath.addNamespace("ns","http://services.samples/xsd");
+        OMElement price = (OMElement) xPath.selectSingleNode(result);        
+        if (price != null) {
+            return price.getText();
+        } else {
+            throw new Exception("Unexpected response : " + result);
+        }
+    }
+
+    /**
+     * Return a random String of letters
+     * @param count number of letters
+     * @return the random string
+     */
+    public static String randomString(int count) {
+        int end = 'Z' + 1;
+        int start = 'A';
+
+        StringBuffer buffer = new StringBuffer();
+        int gap = end - start;
+
+        while (count-- != 0) {
+            char ch;
+            ch = (char) (RANDOM.nextInt(gap) + start);
+            if (Character.isLetter(ch)) {
+                buffer.append(ch);
+            } else {
+                count++;
+            }
+        }
+        return buffer.toString();
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/MTOMSwASampleClient.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/MTOMSwASampleClient.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/MTOMSwASampleClient.java	(revision 1211407)
@@ -0,0 +1,197 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.clients;
+
+import org.apache.axiom.attachments.Attachments;
+import org.apache.axiom.om.*;
+import org.apache.axiom.soap.SOAPBody;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.OperationClient;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.wsdl.WSDLConstants;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SampleConfiguration;
+
+import javax.activation.DataHandler;
+import javax.activation.FileDataSource;
+import javax.xml.namespace.QName;
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+
+public class MTOMSwASampleClient {
+    private static final Log log = LogFactory.getLog(StockQuoteSampleClient.class);
+    ConfigurationContext configContext = null;
+
+    Options options;
+    SampleClientResult clientResult;
+    OMElement payload;
+    OMElement response;
+    ServiceClient serviceClient;
+    boolean completed;
+    SampleConfiguration.ClientSampleConfiguration configuration;
+
+    public MTOMSwASampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {
+        this.configuration = configuration;
+    }
+
+    public SampleClientResult sendUsingMTOM(String fileName, String targetEPR) {
+        clientResult = new SampleClientResult();
+        try {
+            OMFactory factory = OMAbstractFactory.getOMFactory();
+            OMNamespace ns = factory.createOMNamespace("http://services.samples", "m0");
+            payload = factory.createOMElement("uploadFileUsingMTOM", ns);
+            OMElement request = factory.createOMElement("request", ns);
+            OMElement image = factory.createOMElement("image", ns);
+
+            log.info("Sending file : " + fileName + " as MTOM");
+            FileDataSource fileDataSource = new FileDataSource(new File(fileName));
+            DataHandler dataHandler = new DataHandler(fileDataSource);
+            OMText textData = factory.createOMText(dataHandler, true);
+            image.addChild(textData);
+            request.addChild(image);
+            payload.addChild(request);
+
+            ConfigurationContext configContext =
+                    ConfigurationContextFactory.
+                            createConfigurationContextFromFileSystem(configuration.getClientRepo(),
+                                    configuration.getAxis2Xml());
+
+            serviceClient = new ServiceClient(configContext, null);
+
+            Options options = new Options();
+            options.setTo(new EndpointReference(targetEPR));
+            options.setAction("urn:uploadFileUsingMTOM");
+            options.setProperty(Constants.Configuration.ENABLE_MTOM, Constants.VALUE_TRUE);
+
+            serviceClient.setOptions(options);
+            OMElement response = serviceClient.sendReceive(payload);
+
+            OMText binaryNode = (OMText) response.
+                    getFirstChildWithName(new QName("http://services.samples", "response")).
+                    getFirstChildWithName(new QName("http://services.samples", "image")).
+                    getFirstOMChild();
+            dataHandler = (DataHandler) binaryNode.getDataHandler();
+            InputStream is = dataHandler.getInputStream();
+            log.info("temp.dir: " + System.getProperty("java.io.tmpdir"));
+            File tempFile = File.createTempFile("mtom-", ".gif");
+            FileOutputStream fos = new FileOutputStream(tempFile);
+            BufferedOutputStream dest = new BufferedOutputStream(fos, 2048);
+
+            byte data[] = new byte[2048];
+            int count;
+            while ((count = is.read(data, 0, 2048)) != -1) {
+                dest.write(data, 0, count);
+            }
+
+            dest.flush();
+            dest.close();
+            log.info("Saved response to file : " + tempFile.getAbsolutePath());
+
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+
+        return clientResult;
+
+    }
+
+    public SampleClientResult sendUsingSWA(String fileName, String targetEPR) {
+        clientResult = new SampleClientResult();
+        try {
+            Options options = new Options();
+            options.setTo(new EndpointReference(targetEPR));
+            options.setAction("urn:uploadFileUsingSwA");
+            options.setProperty(Constants.Configuration.ENABLE_SWA, Constants.VALUE_TRUE);
+
+            ConfigurationContext configContext =
+                    ConfigurationContextFactory.
+                            createConfigurationContextFromFileSystem(configuration.getClientRepo(),
+                                    configuration.getAxis2Xml());
+
+            ServiceClient sender = new ServiceClient(configContext, null);
+
+            sender.setOptions(options);
+            OperationClient mepClient = sender.createClient(ServiceClient.ANON_OUT_IN_OP);
+
+            MessageContext mc = new MessageContext();
+
+            log.info("Sending file : " + fileName + " as SwA");
+            FileDataSource fileDataSource = new FileDataSource(new File(fileName));
+            DataHandler dataHandler = new DataHandler(fileDataSource);
+            String attachmentID = mc.addAttachment(dataHandler);
+
+
+            SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();
+            SOAPEnvelope env = factory.getDefaultEnvelope();
+            OMNamespace ns = factory.createOMNamespace("http://services.samples", "m0");
+            OMElement payload = factory.createOMElement("uploadFileUsingSwA", ns);
+            OMElement request = factory.createOMElement("request", ns);
+            OMElement imageId = factory.createOMElement("imageId", ns);
+            imageId.setText(attachmentID);
+            request.addChild(imageId);
+            payload.addChild(request);
+            env.getBody().addChild(payload);
+            mc.setEnvelope(env);
+
+            mepClient.addMessageContext(mc);
+            mepClient.execute(true);
+            MessageContext response = mepClient.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
+
+            SOAPBody body = response.getEnvelope().getBody();
+            String imageContentId = body.
+                    getFirstChildWithName(new QName("http://services.samples", "uploadFileUsingSwAResponse")).
+                    getFirstChildWithName(new QName("http://services.samples", "response")).
+                    getFirstChildWithName(new QName("http://services.samples", "imageId")).
+                    getText();
+
+            Attachments attachment = response.getAttachmentMap();
+            dataHandler = attachment.getDataHandler(imageContentId);
+            File tempFile = File.createTempFile("swa-", ".gif");
+            FileOutputStream fos = new FileOutputStream(tempFile);
+            dataHandler.writeTo(fos);
+            fos.flush();
+            fos.close();
+
+            log.info("Saved response to file : " + tempFile.getAbsolutePath());
+
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+
+        return clientResult;
+
+    }
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java	(revision 1211407)
@@ -0,0 +1,76 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework;
+
+import org.apache.activemq.broker.BrokerService;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * Responsible for starting up and shutting down
+ * a JMS broker instance in order to run a sample test.
+ */
+public class JMSBrokerController implements BackEndServerController {
+
+    private static final Log log = LogFactory.getLog(JMSBrokerController.class);
+
+    private String serverName;
+    private SampleConfiguration.JMSBrokerSampleConfiguration configuration;
+    private BrokerService broker;
+
+    public JMSBrokerController(String serverName,
+                               SampleConfiguration.JMSBrokerSampleConfiguration configuration) {
+        this.serverName = serverName;
+        this.configuration = configuration;
+    }
+
+    public String getServerName() {
+        return serverName;
+    }
+
+    public boolean start() {
+        try {
+            log.info("JMSServerController: Preparing to start JMS Broker: " + serverName);
+            //using embedded jms broker
+            broker = new BrokerService();
+            // configure the broker
+            broker.setBrokerName("synapseSampleBroker");
+            broker.addConnector(configuration.getProviderURL());
+            broker.start();
+            log.info("JMSServerController: Broker is Successfully started. continuing tests");
+            return true;
+        } catch (Exception e) {
+            log.error("JMSServerController: There was an error starting JMS broker: " +
+                    serverName, e);
+            return false;
+        }
+    }
+
+    public boolean stop() {
+        try {
+            broker.stop();
+            return true;
+        } catch (Exception e) {
+            log.error("Error while shutting down the broker", e);
+            return false;
+        }
+    }
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_clustering.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_clustering.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_clustering.xml	(revision 1211407)
@@ -0,0 +1,483 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+
+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false
+            on production environments, unless you really want to use hot deployment in production -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">true</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- Extension deployer
+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->
+    <!--<deployer extension="xar" directory="extensions" class="org.apache.synapse.deployers.ExtensionDeployer"/>-->
+
+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production
+                unless you really want to use hot deployment/update -->
+    <deployer extension="xml" directory="conf/synapse-config/sequences" class="org.apache.synapse.deployers.SequenceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/endpoints" class="org.apache.synapse.deployers.EndpointDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/local-entries" class="org.apache.synapse.deployers.LocalEntryDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/proxy-services" class="org.apache.synapse.deployers.ProxyServiceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/event-sources" class="org.apache.synapse.deployers.EventSourceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/tasks" class="org.apache.synapse.deployers.TaskDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/priority-executors" class="org.apache.synapse.deployers.PriorityExecutorDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/templates" class="org.apache.synapse.deployers.TemplateDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-stores" class="org.apache.synapse.deployers.MessageStoreDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-processors" class="org.apache.synapse.deployers.MessageProcessorDeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+        <!--<messageFormatter contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType="application/json"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>-->
+
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+        <!--<messageBuilder contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>-->
+        <!--<messageBuilder contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>-->
+        <!--<messageBuilder contentType="application/json"
+                         class="org.apache.axis2.json.JSONOMBuilder"/>-->
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->
+    <transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+    	<parameter name="port">8280</parameter>
+    	<parameter name="non-blocking">true</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
+        <!-- paramter name="priorityConfigFile" locked="false">location of priority configuration file<parameter-->
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">8243</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">http://apachehost:port/somepath</parameter-->
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportReceiver>
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"  class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <!--parameter name="http.proxyHost" locked="false">localhost</parameter>
+        <parameter name="http.proxyPort" locked="false">3128</parameter>
+        <parameter name="http.nonProxyHosts" locked="false">localhost|moon|sun</parameter-->
+    </transportSender>
+    <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>
+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
+    </transportSender>
+   
+    <!-- Uncomment Transport sender for the non blocking local transport-->
+    <!--transportSender name="local" class="org.apache.axis2.transport.local.NonBlockingLocalTransportSender"/-->
+ 
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!--                  Clustering                       -->
+    <!-- ================================================= -->
+    <!-- Configure the following for preparing Synapse to a clustered environment -->
+    <clustering class="org.apache.axis2.clustering.tribes.TribesClusteringAgent" enable="true">
+
+        <!--
+           This parameter indicates whther the cluster has to be automatically initalized
+           when the AxisConfiguration is built. If set to "true" the initialization will not be
+           done at that stage, and some other party will have to explictly initialize the cluster.
+        -->
+        <parameter name="AvoidInitiation">false</parameter>
+
+        <!--
+           The membership scheme used in this setup. The only values supported at the moment are
+           "multicast" and "wka"
+
+           1. multicast - membership is automatically discovered using multicasting
+           2. wka - Well-Known Address based multicasting. Membership is discovered with the help
+                    of one or more nodes running at a Well-Known Address. New members joining a
+                    cluster will first connect to a well-known node, register with the well-known node
+                    and get the membership list from it. When new members join, one of the well-known
+                    nodes will notify the others in the group. When a member leaves the cluster or
+                    is deemed to have left the cluster, it will be detected by the Group Membership
+                    Service (GMS) using a TCP ping mechanism.
+        -->
+        <parameter name="membershipScheme">multicast</parameter>
+
+        <!--
+         The clustering domain/group. Nodes in the same group will belong to the same multicast
+         domain. There will not be interference between nodes in different groups.
+        -->
+        <parameter name="domain">apache.synapse.domain</parameter>
+
+        <!--
+           When a Web service request is received, and processed, before the response is sent to the
+           client, should we update the states of all members in the cluster? If the value of
+           this parameter is set to "true", the response to the client will be sent only after
+           all the members have been updated. Obviously, this can be time consuming. In some cases,
+           such this overhead may not be acceptable, in which case the value of this parameter
+           should be set to "false"
+        -->
+        <parameter name="synchronizeAll">true</parameter>
+
+        <!--
+          The maximum number of times we need to retry to send a message to a particular node
+          before giving up and considering that node to be faulty
+        -->
+        <parameter name="maxRetries">10</parameter>
+
+        <!-- The multicast address to be used -->
+        <parameter name="mcastAddress">228.0.0.4</parameter>
+
+        <!-- The multicast port to be used -->
+        <parameter name="mcastPort">45564</parameter>
+
+        <!-- The frequency of sending membership multicast messages (in ms) -->
+        <parameter name="mcastFrequency">500</parameter>
+
+        <!-- The time interval within which if a member does not respond, the member will be
+         deemed to have left the group (in ms)
+         -->
+        <parameter name="memberDropTime">3000</parameter>
+
+        <!--
+           The IP address of the network interface to which the multicasting has to be bound to.
+           Multicasting would be done using this interface.
+        -->
+        <parameter name="mcastBindAddress">${replace.me}</parameter>
+
+        <!-- The host name or IP address of this member -->
+        <parameter name="localMemberHost">${replace.me}</parameter>
+
+        <!--
+        The TCP port used by this member. This is the port through which other nodes will
+        contact this member
+         -->
+        <parameter name="localMemberPort">4000</parameter>
+
+        <!--
+           The list of static or well-known members. These entries will only be valid if the
+           "membershipScheme" above is set to "wka"
+        -->
+        <members>
+            <member>
+                <hostName>127.0.0.1</hostName>
+                <port>4000</port>
+            </member>
+            <member>
+                <hostName>127.0.0.1</hostName>
+                <port>4001</port>
+            </member>
+        </members>
+
+        <!--
+        Enable the load balancer entry if you need to run this node as a load balancer.
+        Multiple application domains with different LoadBalanceEventHandler implementations
+        can be defined in this section.
+        -->
+        <!--loadBalancer enable="true">
+            <applicationDomain name="apache.axis2.app.domain"
+                               handler="org.apache.axis2.clustering.DefaultLoadBalanceEventHandler"/>
+        </loadBalancer>-->
+
+        <groupManagement enable="true">
+            <applicationDomain agent="org.apache.axis2.clustering.management.DefaultGroupManagementAgent" description="Axis2 group" name="apache.axis2.app.domain"/>
+        </groupManagement>
+            
+        <!--
+           This interface is responsible for handling context replication. The property changes in
+           the Axis2 context hierarchy in this node, are propagated to all other nodes in the cluster.
+
+           The "excludes" patterns can be used to specify the prefixes (e.g. local_*) or
+           suffixes (e.g. *_local) of the properties to be excluded from replication. The pattern
+           "*" indicates that all properties in a particular context should not be replicated.
+
+            The "enable" attribute indicates whether context replication has been enabled
+        -->
+        <contextManager class="org.apache.axis2.clustering.context.DefaultContextManager"
+                         enable="false">
+            <listener class="org.apache.axis2.clustering.context.DefaultContextManagerListener"/>
+            <replication>
+                <defaults>
+                    <exclude name="local_*"/>
+                    <exclude name="LOCAL_*"/>
+                </defaults>
+                <context class="org.apache.axis2.context.ConfigurationContext">
+                    <exclude name="UseAsyncOperations"/>
+                    <exclude name="SequencePropertyBeanMap"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceGroupContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+            </replication>
+        </contextManager>
+    </clustering>
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="CustomURIBasedDispatcher"
+                     class="org.apache.synapse.core.axis2.CustomURIBasedDispatcher"/>
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/sample9.xml
===================================================================
--- java/modules/integration/src/test/resources/sample9.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample9.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>9</sampleID>
+    <sampleName>Introduction to dynamic sequences with the Registry</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_9.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/identity.jks
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: java/modules/integration/src/test/resources/identity.jks
===================================================================
--- java/modules/integration/src/test/resources/identity.jks	(nonexistent)
+++ java/modules/integration/src/test/resources/identity.jks	(revision 1211407)

Property changes on: java/modules/integration/src/test/resources/identity.jks
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/modules/integration/src/test/resources/sample10.xml
===================================================================
--- java/modules/integration/src/test/resources/sample10.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample10.xml	(revision 1211407)
@@ -0,0 +1,24 @@
+<synapseSample>
+    <sampleID>10</sampleID>
+    <sampleName>Introduction to dynamic endpoints with the Registry</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_10.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+         <axis2Server id='1'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+	    <httpPort>9001</httpPort>
+	    <httpsPort>9003</httpsPort>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample11.xml
===================================================================
--- java/modules/integration/src/test/resources/sample11.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample11.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>11</sampleID>
+    <sampleName>A full registry based configuration, and sharing a configuration between multiple instances</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_11.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample12.xml
===================================================================
--- java/modules/integration/src/test/resources/sample12.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample12.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>12</sampleID>
+    <sampleName>One way messaging / fireAndForget through Synapse</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_12.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample13.xml
===================================================================
--- java/modules/integration/src/test/resources/sample13.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample13.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>13</sampleID>
+    <sampleName>Dual channel invocation through Synapse</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_0.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample15.xml
===================================================================
--- java/modules/integration/src/test/resources/sample15.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample15.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>15</sampleID>
+    <sampleName>Message Enrichment through Synapse</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_15.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/test-log4j.properties
===================================================================
--- java/modules/integration/src/test/resources/test-log4j.properties	(nonexistent)
+++ java/modules/integration/src/test/resources/test-log4j.properties	(revision 1211407)
@@ -0,0 +1,49 @@
+#
+#  Licensed to the Apache Software Foundation (ASF) under one
+#  or more contributor license agreements.  See the NOTICE file
+#  distributed with this work for additional information
+#  regarding copyright ownership.  The ASF licenses this file
+#  to you under the Apache License, Version 2.0 (the
+#  "License"); you may not use this file except in compliance
+#  with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+#  Unless required by applicable law or agreed to in writing,
+#  software distributed under the License is distributed on an
+#   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+#  KIND, either express or implied.  See the License for the
+#  specific language governing permissions and limitations
+#  under the License.
+#
+
+##
+# Sample Automation Framework specific logs
+##
+
+# the root category is ERROR (applies for all 3rd party JARs etc) and will be logged to the
+# LOG_APPENDER and the CONSOLE_APPENDER
+log4j.rootCategory=ERROR, LOG_APPENDER, CONSOLE_APPENDER
+
+# Synapse log level is info, so are transports
+log4j.category.org.apache.synapse=INFO
+log4j.category.org.apache.synapse.transport=INFO
+log4j.category.org.apache.axis2.transport=INFO
+log4j.category.samples.util=INFO
+#log4j.category.org.apache.synapse.transport.nhttp.util=DEBUG
+#log4j.category.org.apache.http.impl.nio.reactor=DEBUG
+#log4j.category.samples.userguide=INFO
+
+# The console appender is used to display general information at console
+log4j.appender.CONSOLE_APPENDER=org.apache.log4j.ConsoleAppender
+log4j.appender.CONSOLE_APPENDER.layout=org.apache.log4j.PatternLayout
+log4j.appender.CONSOLE_APPENDER.layout.ConversionPattern=%d{ISO8601} [%X{ip}-%X{host}] [%t] %5p %c{1} %m%n
+
+# The standard log file that may be set upto DEBUG/TRACE for general purpose logging
+# Logs information at startup/initialization etc. and also could be used as the developer log
+log4j.appender.LOG_APPENDER=org.apache.log4j.RollingFileAppender
+log4j.appender.LOG_APPENDER.File=sampleAutomationLogs/synapse-${timeStamp}.log
+log4j.appender.LOG_APPENDER.MaxFileSize=1000KB
+log4j.appender.LOG_APPENDER.MaxBackupIndex=10
+log4j.appender.LOG_APPENDER.layout=org.apache.log4j.PatternLayout
+log4j.appender.LOG_APPENDER.layout.ConversionPattern=%d{ISO8601} [%X{ip}-%X{host}] [%t] %5p %c{1} %m%n
Index: java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_udp.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_udp.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_udp.xml	(revision 1211407)
@@ -0,0 +1,315 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <!--<parameter name="contextRoot">axis2</parameter>-->
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath" locked="false">services</parameter>
+    <parameter name="restPath" locked="false">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->
+    <deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+	<transportReceiver name="http"
+                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port">8200</parameter>
+        <!-- Here is the complete list of supported parameters (see example settings further below):
+            port: the port to listen on (default 6060)
+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)
+            originServer:  value of http Server header in outgoing messages                                         (default "Simple-Server/1.1")
+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
+                                false to minimize bandwidth consumption by combining segments
+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)
+                                       note that default queue never fills up:  see HttpFactory
+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
+                                  note that no such threads can exist with default unbounded request queue
+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
+        -->
+        <!-- <parameter name="hostname">http://www.myApp.com/ws</parameter> -->
+        <!-- <parameter name="originServer">My-Server/1.1</parameter>           -->
+        <!-- <parameter name="requestTimeout">10000</parameter>                   -->
+        <!-- <parameter name="requestTcpNoDelay">false</parameter>                   -->
+        <!-- <parameter name="requestCoreThreadPoolSize">50</parameter>                      -->
+        <!-- <parameter name="RequestMaxThreadPoolSize">100</parameter>                     -->
+        <!-- <parameter name="threadKeepAliveTime">240000</parameter>                  -->
+        <!-- <parameter name="threadKeepAliveTimeUnit">MILLISECONDS</parameter>            -->
+    </transportReceiver>
+
+    <!--transportReceiver name="tcp"
+                       class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port">6060</parameter>
+    </transportReceiver-->
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <!--transportSender name="tcp"
+                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/-->
+    <transportSender name="udp"
+                     class="org.apache.axis2.transport.udp.UDPSender"/>
+    <!--transportSender name="local"
+                     class="org.apache.axis2.transport.local.LocalTransportSender"/ -->
+	<transportSender name="http"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+
+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->
+        <!--  <parameter name="OmitSOAP12Action">true</parameter>  -->
+    </transportSender>
+
+    <transportSender name="https"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+    </transportSender>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Clustering  -->
+    <!-- ================================================= -->
+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->
+    <!--
+    <cluster class="org.apache.axis2.cluster.tribes.TribesClusterManager">
+        <parameter name="param1">value1</parameter>
+        <parameter name="domain">apache.axis2.domain</parameter>
+    	<configurationManager class="org.apache.axis2.cluster.configuration.TribesConfigurationManager">
+    	    <listener class="org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener"/>
+    	</configurationManager>
+    	<contextManager class="org.apache.axis2.cluster.context.TribesContextManager">
+    	    <listener class="org.apache.axis2.cluster.context.DefaultContextManagerListener"/>
+    	</contextManager>
+    </cluster>
+     -->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_def.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_def.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_def.xml	(revision 1211407)
@@ -0,0 +1,356 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <!--<parameter name="contextRoot">axis2</parameter>-->
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath" locked="false">services</parameter>
+    <parameter name="restPath" locked="false">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->
+    <deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+	<transportReceiver name="http"
+                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port">8200</parameter>
+        <!-- Here is the complete list of supported parameters (see example settings further below):
+            port: the port to listen on (default 6060)
+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)
+            originServer:  value of http Server header in outgoing messages                                         (default "Simple-Server/1.1")
+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
+                                false to minimize bandwidth consumption by combining segments
+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)
+                                       note that default queue never fills up:  see HttpFactory
+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
+                                  note that no such threads can exist with default unbounded request queue
+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
+        -->
+        <!-- <parameter name="hostname">http://www.myApp.com/ws</parameter> -->
+        <!-- <parameter name="originServer">My-Server/1.1</parameter>           -->
+        <!-- <parameter name="requestTimeout">10000</parameter>                   -->
+        <!-- <parameter name="requestTcpNoDelay">false</parameter>                   -->
+        <!-- <parameter name="requestCoreThreadPoolSize">50</parameter>                      -->
+        <!-- <parameter name="RequestMaxThreadPoolSize">100</parameter>                     -->
+        <!-- <parameter name="threadKeepAliveTime">240000</parameter>                  -->
+        <!-- <parameter name="threadKeepAliveTimeUnit">MILLISECONDS</parameter>            -->
+    </transportReceiver>
+
+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)
+    <transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
+        <parameter name="myTopicConnectionFactory">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">TopicConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">topic</parameter>
+        </parameter>
+
+        <parameter name="myQueueConnectionFactory">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
+        </parameter>
+
+        <parameter name="default">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
+        </parameter>
+    </transportReceiver>-->
+
+    <!--transportReceiver name="mailto" class="org.apache.axis2.transport.mail.MailTransportListener">
+    </transportReceiver-->
+
+    <!--transportReceiver name="tcp"
+                       class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port">6060</parameter>
+    </transportReceiver-->
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <!--transportSender name="tcp"
+                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+    <transportSender name="udp"
+                     class="org.apache.axis2.transport.udp.UDPSender"/-->
+    <!--transportSender name="local"
+                     class="org.apache.axis2.transport.local.LocalTransportSender"/ -->
+	<transportSender name="http"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+
+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->
+        <!--  <parameter name="OmitSOAP12Action">true</parameter>  -->
+    </transportSender>
+
+    <transportSender name="https"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+    </transportSender>
+    <!--transportSender name="jms"
+                     class="org.apache.axis2.transport.jms.JMSSender"/-->
+
+    <!-- configure the SMTP server information
+    check com.sun.mail.smtp package documentation for descriptions of properties-->
+    <!--transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
+        <parameter name="mail.smtp.host">smtp.gmail.com</parameter>
+        <parameter name="mail.smtp.port">587</parameter>
+        <parameter name="mail.smtp.starttls.enable">true</parameter>
+        <parameter name="mail.smtp.auth">true</parameter>
+        <parameter name="mail.smtp.user">synapse.demo.0</parameter>
+        <parameter name="mail.smtp.password">mailpassword</parameter>
+        <parameter name="mail.smtp.from">synapse.demo.0@gmail.com</parameter>
+    </transportSender-->
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Clustering  -->
+    <!-- ================================================= -->
+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->
+    <!--
+    <cluster class="org.apache.axis2.cluster.tribes.TribesClusterManager">
+        <parameter name="param1">value1</parameter>
+        <parameter name="domain">apache.axis2.domain</parameter>
+    	<configurationManager class="org.apache.axis2.cluster.configuration.TribesConfigurationManager">
+    	    <listener class="org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener"/>
+    	</configurationManager>
+    	<contextManager class="org.apache.axis2.cluster.context.TribesContextManager">
+    	    <listener class="org.apache.axis2.cluster.context.DefaultContextManagerListener"/>
+    	</contextManager>
+    </cluster>
+     -->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/sample8.xml
===================================================================
--- java/modules/integration/src/test/resources/sample8.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample8.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>8</sampleID>
+    <sampleName>Introduction to static and dynamic registry resources, and using XSLT transformations</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_8.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java	(revision 1211407)
@@ -0,0 +1,485 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework;
+
+import junit.framework.TestCase;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.clients.EventSampleClient;
+import org.apache.synapse.samples.framework.clients.MTOMSwASampleClient;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+import javax.xml.namespace.QName;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.Properties;
+
+/**
+ * This is the class from which all sample tests are derived. Loads and stores necessary
+ * configuration information. Starts the mediation engine and backend server(s) before each test.
+ * Shuts down running servers after a test is complete.
+ */
+public abstract class SynapseTestCase extends TestCase {
+
+    private static final Log log = LogFactory.getLog(SynapseTestCase.class);
+
+    private SampleConfiguration configuration;
+    private String sampleDescriptor;
+    private int sampleId;
+    private ProcessController pc;
+    private ArrayList<BackEndServerController> backendServerControllers;
+    private OMElement sampleConfigElement;
+
+    private String currentLocation;
+
+    protected SynapseTestCase(int sampleId) {
+        this.sampleId = sampleId;
+        log.info("Creating Synapse TestCase for test " + sampleId);
+        currentLocation = System.getProperty("user.dir") + "/";
+        sampleDescriptor = "/sample" + sampleId + ".xml";
+        configuration = new SampleConfiguration();
+        backendServerControllers = new ArrayList<BackEndServerController>();
+        System.setProperty("java.io.tmpdir", currentLocation + "modules/integration/target/temp");
+    }
+
+    /**
+     * Executed before this test case. That means, this will be executed before each test.
+     * Loads all configuration info. and starts the servers.
+     */
+    public void setUp() {
+        log.info("SynapseTestCase: Performing necessary steps to run test " + sampleId);
+
+        assertTrue("Could not load the global descriptor file for sample " + sampleId,
+                loadDescriptorInfoFile());
+        assertTrue("There are errors in global descriptor file for sample " + sampleId,
+                processDescriptorFile());
+        assertTrue("Could not load synapse configuration settings for the sample " + sampleId,
+                initSynapseConfigInfo());
+        assertTrue("Could not load axis2 configuration settings for the sample " + sampleId,
+                initBackEndServersConfigInfo());
+        assertTrue("Could not load client configuration settings for the sample " + sampleId,
+                initClientConfigInfo());
+
+        if (configuration.getSynapseConfig().isClusteringEnabled()) {
+            assertTrue("Could not properly configure clustering", configureClustering());
+        }
+
+        for (BackEndServerController bsc : backendServerControllers) {
+            if (!bsc.start()) {
+                doCleanup();
+                fail("There was an error starting the server: " + bsc.getServerName());
+            }
+        }
+
+        if (!pc.startProcess()) {
+            doCleanup();
+            fail("There was an error starting synapse server");
+        }
+    }
+
+    /**
+     * Executed after this test case. That means, This will be executed after each test
+     */
+    public void tearDown() {
+        log.info("Test " + sampleId + " is finished");
+        doCleanup();
+    }
+
+    /**
+     * shutting down servers, cleaning temp files
+     */
+    private void doCleanup() {
+        if (pc != null) {
+            log.info("Stopping Synapse");
+            pc.stopProcess();
+        }
+
+        ArrayList<BackEndServerController> clonedControllers = (ArrayList<BackEndServerController>)
+                backendServerControllers.clone();
+        for (BackEndServerController bsc : clonedControllers) {
+            if (bsc instanceof Axis2BackEndServerController) {
+                log.info("Stopping Server: " + bsc.getServerName());
+                bsc.stop();
+                backendServerControllers.remove(bsc);
+            }
+        }
+
+        for (BackEndServerController bsc : backendServerControllers) {
+            log.info("Stopping Server: " + bsc.getServerName());
+            bsc.stop();
+        }
+
+        //cleaning up temp dir
+        try {
+            FileUtils.cleanDirectory(new File(System.getProperty("java.io.tmpdir")));
+        } catch (IOException e) {
+            log.warn("Error while cleaning temp directory", e);
+        }
+    }
+
+    /**
+     * Reads the specific descriptor file for the particular sample
+     * from resource directory
+     *
+     * @return true if the configuration was loaded successfully
+     */
+    private boolean loadDescriptorInfoFile() {
+        log.info("Reading sample descriptor file from " + sampleDescriptor);
+        sampleConfigElement = null;
+        try {
+            InputStream in = this.getClass().getResourceAsStream(sampleDescriptor);
+            if (in == null) {
+                fail("Cannot read sample descriptor file. Verify that it exists in the resource dir");
+            }
+            StAXOMBuilder builder = new StAXOMBuilder(in);
+            sampleConfigElement = builder.getDocumentElement();
+        } catch (Exception e) {
+            log.error("Error loading test descriptor", e);
+            return false;
+        }
+        return sampleConfigElement != null;
+    }
+
+    /**
+     * Checks if sample id is matched
+     *
+     * @return true If the sample ID matches
+     */
+    private boolean processDescriptorFile() {
+        int fileID = -1;
+        Iterator itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SAMPLE_ID);
+        while (itr.hasNext()) {
+            fileID = Integer.parseInt(((OMElement) itr.next()).getText());
+        }
+        itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SAMPLE_NAME);
+        while (itr.hasNext()) {
+            String sampleName = ((OMElement) itr.next()).getText();
+            configuration.setSampleName(sampleName);
+        }
+
+        return sampleId == fileID;
+    }
+
+    /**
+     * Reads and stores synapse specific configuration information from descriptor
+     *
+     * @return true If the initialization is successful
+     */
+    private boolean initSynapseConfigInfo() {
+        Properties synapseProperties = new Properties();
+        OMElement synEle = null;
+        Iterator itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SYNAPSE_CONF);
+        while (itr.hasNext()) {
+            synEle = (OMElement) itr.next();
+        }
+        if (synEle == null) {
+            log.error("Cannot find synapse configuration information in sample descriptor file");
+            return false;
+        } else {
+            itr = synEle.getChildElements();
+        }
+        while (itr.hasNext()) {
+            OMElement ele = (OMElement) itr.next();
+            synapseProperties.setProperty(ele.getLocalName(), ele.getText());
+        }
+        log.info("Initializing Configuration information for synapse server...");
+        String synapseHome = currentLocation;
+
+        String synapseXml = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_XML);
+        String axis2Repo = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_REPO);
+        String axis2Xml = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_XML);
+        Boolean clusteringEnabled = Boolean.parseBoolean(
+                (String) synapseProperties.get(SampleConfigConstants.TAG_ENABLE_CLUSTERING));
+
+        configuration.getSynapseConfig().setServerName("SynapseServerForSample" + sampleId);
+
+        if (synapseXml == null) {
+            log.error("synapse config file must be specified for the sample");
+            return false;
+        } else {
+            configuration.getSynapseConfig().setSynapseXml(synapseHome + synapseXml);
+        }
+        if (axis2Repo == null) {
+            log.info("synapse repository is not specified in the descriptor. using default value...");
+            configuration.getSynapseConfig().setAxis2Repo(synapseHome +
+                    SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_REPO);
+        } else {
+            configuration.getSynapseConfig().setAxis2Repo(synapseHome + axis2Repo);
+        }
+        if (axis2Xml == null) {
+            log.info("synapse axis2.xml is not specified in the descriptor. using default value...");
+            configuration.getSynapseConfig().setAxis2Xml(synapseHome +
+                    SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_XML);
+        } else {
+            configuration.getSynapseConfig().setAxis2Xml(synapseHome + axis2Xml);
+        }
+
+        configuration.getSynapseConfig().setSynapseHome(synapseHome);
+        configuration.getSynapseConfig().setClusteringEnabled(clusteringEnabled);
+
+        pc = new SynapseProcessController(configuration.getSynapseConfig());
+        return true;
+    }
+
+    /**
+     * Reads and stores backend server specific configuration information from descriptor
+     *
+     * @return true If the initialization is successful
+     */
+    private boolean initBackEndServersConfigInfo() {
+        OMElement bESConfigEle = null;
+        Iterator itr_BEEle = sampleConfigElement.getChildrenWithLocalName(
+                SampleConfigConstants.TAG_BE_SERVER_CONF);
+        while (itr_BEEle.hasNext()) {
+            bESConfigEle = (OMElement) itr_BEEle.next();
+        }
+        if (bESConfigEle == null) {
+            log.warn("No backend servers are defined");
+            return false;
+        }
+        log.info("Initializing Configuration information for backend servers...");
+
+        // Processing JMS servers
+        Properties jmsProperties = new Properties();
+        Iterator itr_JMS_Servers = bESConfigEle.getChildrenWithLocalName(
+                SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_BROKER);
+        while (itr_JMS_Servers.hasNext()) {
+            OMElement jmsServer = (OMElement) itr_JMS_Servers.next();
+            String serverID = jmsServer.getAttributeValue(new QName("id"));
+            String serverName = "SampleJMSServer" + serverID;
+            configuration.addNewJMSBroker(serverName);
+
+            Iterator serverConfig = jmsServer.getChildElements();
+            while (serverConfig.hasNext()) {
+                OMElement ele = (OMElement) serverConfig.next();
+                jmsProperties.setProperty(ele.getLocalName(), ele.getText());
+            }
+
+            String providerURL = jmsProperties.getProperty(
+                    SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_PROVIDER_URL);
+            String initialNF = jmsProperties.getProperty(
+                    SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);
+
+            if (providerURL == null) {
+                log.info("Using default provider url");
+                configuration.getJMSConfig(serverName).setProviderURL(
+                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL);
+            } else {
+                configuration.getJMSConfig(serverName).setProviderURL(providerURL);
+            }
+            if (initialNF == null) {
+                log.info("Using default initial naming factory");
+                configuration.getJMSConfig(serverName).setInitialNamingFactory(
+                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);
+            } else {
+                configuration.getJMSConfig(serverName).setInitialNamingFactory(initialNF);
+            }
+
+            configuration.getJMSConfig(serverName).setServerName(serverName);
+
+            backendServerControllers.add(new JMSBrokerController(serverName,
+                    configuration.getJMSConfig(serverName)));
+        }
+
+
+        // Processing derby servers
+        Properties derbyProperties = new Properties();
+        Iterator itrDerbyServers = bESConfigEle.getChildrenWithLocalName(
+                SampleConfigConstants.TAG_BE_SERVER_CONF_DERBY_SERVER);
+        while (itrDerbyServers.hasNext()) {
+            OMElement derbyServer = (OMElement) itrDerbyServers.next();
+            String serverID = derbyServer.getAttributeValue(new QName("id"));
+            String serverName = "SampleDerbyServer" + serverID;
+            configuration.addNewDerbyServer(serverName);
+
+            Iterator serverConfig = derbyServer.getChildElements();
+            while (serverConfig.hasNext()) {
+                OMElement ele = (OMElement) serverConfig.next();
+                derbyProperties.setProperty(ele.getLocalName(), ele.getText());
+            }
+
+            configuration.getDerbyConfig(serverName).setServerName(serverName);
+            backendServerControllers.add(new DerbyServerController(serverName,
+                    configuration.getDerbyConfig(serverName)));
+        }
+
+        // Processing axis2 servers
+        Properties axis2Properties = new Properties();
+        Iterator itr_Axis2_Servers = bESConfigEle.getChildrenWithLocalName(
+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_SERVER);
+        while (itr_Axis2_Servers.hasNext()) {
+            OMElement axis2Server = (OMElement) itr_Axis2_Servers.next();
+            String serverID = axis2Server.getAttributeValue(new QName("id"));
+            String serverName = "SampleAxis2Server" + serverID;
+            configuration.addNewAxis2Server(serverName);
+
+            Iterator serverConfig = axis2Server.getChildElements();
+            while (serverConfig.hasNext()) {
+                OMElement ele = (OMElement) serverConfig.next();
+                axis2Properties.setProperty(ele.getLocalName(), ele.getText());
+            }
+            String axis2Home = currentLocation;
+            String relAxis2Repo = axis2Properties.getProperty(
+                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_REPO);
+            String relAxis2Xml = axis2Properties.getProperty(
+                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_XML);
+            String axis2HttpPort = axis2Properties.getProperty(
+                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT);
+            String axis2HttpsPort = axis2Properties.getProperty(
+                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT);
+
+            configuration.getAxis2Config(serverName).setServerName(serverName);
+
+            if (relAxis2Repo == null) {
+                log.info("axis2 repository is not specified in the descriptor. using default value...");
+                configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home +
+                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_REPO);
+            } else {
+                configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home + relAxis2Repo);
+            }
+            if (relAxis2Xml == null) {
+                log.info("axis2.xml is not specified in the descriptor. using default value...");
+                configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home +
+                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_XML);
+            } else {
+                configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home + relAxis2Xml);
+            }
+
+            configuration.getAxis2Config(serverName).setHttpPort(axis2HttpPort);
+            configuration.getAxis2Config(serverName).setHttpsPort(axis2HttpsPort);
+
+            backendServerControllers.add(new Axis2BackEndServerController(serverName,
+                    configuration.getAxis2Config(serverName)));
+        }
+
+        return true;
+    }
+
+    /*
+     * reads and stores client specific configuration information from descriptor
+     */
+    private boolean initClientConfigInfo() {
+        Properties clientProperties = new Properties();
+        OMElement cliEle = null;
+        Iterator itr = sampleConfigElement.getChildrenWithLocalName(
+                SampleConfigConstants.TAG_CLIENT_CONF);
+        while (itr.hasNext()) {
+            cliEle = (OMElement) itr.next();
+        }
+        if (cliEle == null) {
+            return false;
+        } else {
+            itr = cliEle.getChildElements();
+        }
+        while (itr.hasNext()) {
+            OMElement ele = (OMElement) itr.next();
+            clientProperties.setProperty(ele.getLocalName(), ele.getText());
+        }
+
+        log.info("Initializing Configuration information for clients...");
+        String clientRepo = clientProperties.getProperty(
+                SampleConfigConstants.TAG_CLIENT_CONF_REPO);
+        String clientAxis2Xml = clientProperties.getProperty(
+                SampleConfigConstants.TAG_CLIENT_CONF_AXIS2_XML);
+
+        if (clientRepo == null) {
+            log.info("client repository location is not specified in the descriptor. using default value...");
+            configuration.getClientConfig().setClientRepo(currentLocation +
+                    SampleConfigConstants.DEFAULT_CLIENT_CONF_REPO);
+
+        } else {
+            configuration.getClientConfig().setClientRepo(currentLocation + clientRepo);
+        }
+
+        if (clientAxis2Xml == null) {
+            log.info("client axis2.xml is not specified in the descriptor. using default value...");
+            configuration.getClientConfig().setAxis2Xml(currentLocation +
+                    SampleConfigConstants.DEFAULT_CLIENT_CONF_AXIS2_XML);
+
+        } else {
+            configuration.getClientConfig().setAxis2Xml(currentLocation + clientAxis2Xml);
+        }
+        return true;
+
+    }
+
+    private boolean configureClustering() {
+        try {
+            String ip = SynapseTestUtils.getIPAddress();
+            if (ip == null || ip.isEmpty()) {
+                log.fatal("Could not detect an active IP address");
+                return false;
+            }
+            log.info(" Using the IP :" + ip);
+
+            String synapseAxis2Xml = configuration.getSynapseConfig().getAxis2Xml();
+            String axis2Config = FileUtils.readFileToString(new File(synapseAxis2Xml));
+            String modifiedSynapseAxis2 = SynapseTestUtils.replace(axis2Config, "${replace.me}", ip);
+            File tempSynapseAxis2 = File.createTempFile("axis2Syn-", "xml");
+            tempSynapseAxis2.deleteOnExit();
+            FileUtils.writeStringToFile(tempSynapseAxis2, modifiedSynapseAxis2);
+            configuration.getSynapseConfig().setAxis2Xml(tempSynapseAxis2.getAbsolutePath());
+
+            for (BackEndServerController besc : backendServerControllers) {
+                String serverName = besc.getServerName();
+                String beAxis2Xml = configuration.getAxis2Config(serverName).getAxis2Xml();
+                String beAxis2Config = FileUtils.readFileToString(new File(beAxis2Xml));
+                String modifiedBEAxis2 = SynapseTestUtils.replace(beAxis2Config, "${replace.me}", ip);
+                File tempBEAxis2 = File.createTempFile("axis2BE-", "xml");
+                tempBEAxis2.deleteOnExit();
+                FileUtils.writeStringToFile(tempBEAxis2, modifiedBEAxis2);
+                configuration.getAxis2Config(serverName).setAxis2Xml(tempBEAxis2.getAbsolutePath());
+            }
+            return true;
+
+        } catch (Exception e) {
+            log.error("Error configuring clustering", e);
+            return false;
+        }
+
+
+    }
+
+    protected SampleConfiguration getConfiguration() {
+        return configuration;
+    }
+
+    protected ArrayList<BackEndServerController> getBackendServerControllers() {
+        return backendServerControllers;
+    }
+
+    public StockQuoteSampleClient getStockQuoteClient() {
+        return new StockQuoteSampleClient(configuration.getClientConfig());
+    }
+
+    public EventSampleClient getEventSubscriberSampleClient() {
+        return new EventSampleClient(configuration.getClientConfig());
+    }
+
+    public MTOMSwASampleClient getMTOMSwASampleClient() {
+        return new MTOMSwASampleClient(configuration.getClientConfig());
+    }
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteCallback.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteCallback.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteCallback.java	(revision 1211407)
@@ -0,0 +1,43 @@
+package org.apache.synapse.samples.framework.clients;
+
+import org.apache.axiom.om.OMElement;
+import org.apache.axis2.client.async.AxisCallback;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * 
+ */
+public class StockQuoteCallback implements AxisCallback {
+
+    private static final Log log = LogFactory.getLog(StockQuoteCallback.class);
+
+    StockQuoteSampleClient client;
+
+    public StockQuoteCallback(StockQuoteSampleClient client) {
+        this.client=client;
+    }
+
+    public void onMessage(org.apache.axis2.context.MessageContext messageContext) {
+        log.info("Response received to the callback");
+        OMElement result
+                = messageContext.getEnvelope().getBody().getFirstElement();
+        // Detach the result to make sure that the element we return to the sample client
+        // is completely built
+        result.detach();
+        client.setResponse(result);
+    }
+
+    public void onFault(org.apache.axis2.context.MessageContext messageContext) {
+        log.warn("Fault received to the callback : " + messageContext.getEnvelope().
+                getBody().getFault());
+    }
+
+    public void onError(Exception e) {
+        log.warn("Error inside callback : " + e);
+    }
+
+    public void onComplete() {
+        client.setCompleted(true);
+    }
+}
Index: java/modules/integration/src/test/resources/sample16.xml
===================================================================
--- java/modules/integration/src/test/resources/sample16.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample16.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>16</sampleID>
+    <sampleName>Introduction to dynamic and static keys</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_16.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample0.xml
===================================================================
--- java/modules/integration/src/test/resources/sample0.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample0.xml	(revision 1211407)
@@ -0,0 +1,19 @@
+<synapseSample>
+    <sampleID>0</sampleID>
+    <sampleName>Introduction to Synapse</sampleName>
+    <synapseConfig>
+	<!--if we don't specify the optional values, framework will use defaults-->
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_0.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample1.xml
===================================================================
--- java/modules/integration/src/test/resources/sample1.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample1.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>1</sampleID>
+    <sampleName>Simple content based routing (CBR) of messages</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_1.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java	(revision 1211407)
@@ -0,0 +1,47 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample1 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample1.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample1() {
+        super(1);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testDumbClientMode() {
+        String trpUrl = "http://localhost:8280/services/StockQuote";
+
+        log.info("Running test: Dumb Client mode");
+        result = client.requestStandardQuote(null, trpUrl, null, "IBM" ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java	(revision 1211407)
@@ -0,0 +1,50 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample2 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample2.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample2() {
+        super(2);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testCBR() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280";
+
+        log.info("Running test: CBR with the Switch-case mediator, using message properties");
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "MSFT" ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/resources/sample2.xml
===================================================================
--- java/modules/integration/src/test/resources/sample2.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample2.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>2</sampleID>
+    <sampleName>CBR with the Switch-case mediator, using message properties</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_2.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample3.xml
===================================================================
--- java/modules/integration/src/test/resources/sample3.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample3.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>3</sampleID>
+    <sampleName>Local Registry entry definitions, reusable endpoints and sequences</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_3.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample4.xml
===================================================================
--- java/modules/integration/src/test/resources/sample4.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample4.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>4</sampleID>
+    <sampleName>Introduction to error handling</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_4.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample5.xml
===================================================================
--- java/modules/integration/src/test/resources/sample5.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample5.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>5</sampleID>
+    <sampleName>Creating SOAP fault messages and changing the direction of a message</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_5.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/resources/sample6.xml
===================================================================
--- java/modules/integration/src/test/resources/sample6.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample6.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>6</sampleID>
+    <sampleName>Manipulating SOAP headers, and filtering incoming and outgoing messages</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_6.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java	(revision 1211407)
@@ -0,0 +1,491 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.clients;
+
+import org.apache.axiom.om.*;
+import org.apache.axiom.om.impl.builder.StAXOMBuilder;
+import org.apache.axiom.soap.SOAPBody;
+import org.apache.axiom.soap.SOAPEnvelope;
+import org.apache.axiom.soap.SOAPFactory;
+import org.apache.axiom.soap.SOAPHeader;
+import org.apache.axis2.AxisFault;
+import org.apache.axis2.Constants;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.OperationClient;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.context.MessageContext;
+import org.apache.axis2.transport.http.HTTPConstants;
+import org.apache.axis2.transport.http.HttpTransportProperties;
+import org.apache.axis2.wsdl.WSDLConstants;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.neethi.Policy;
+import org.apache.neethi.PolicyEngine;
+import org.apache.rampart.RampartMessageData;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SampleConfiguration;
+
+import javax.xml.namespace.QName;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Random;
+
+public class StockQuoteSampleClient {
+
+    private static final Log log = LogFactory.getLog(StockQuoteSampleClient.class);
+
+    private final static String COOKIE = "Cookie";
+    private final static String SET_COOKIE = "Set-Cookie";
+    private ConfigurationContext configContext = null;
+
+    private Options options;
+    private ServiceClient serviceClient;
+    private SampleClientResult clientResult;
+    private OMElement payload;
+    private OMElement response;
+    private boolean completed;
+    private SampleConfiguration.ClientSampleConfiguration configuration;
+
+    public StockQuoteSampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {
+        this.configuration = configuration;
+    }
+
+    private void initializeClient(String addUrl, String trpUrl, String prxUrl,
+                                  String svcPolicy, long timeout) throws Exception {
+        log.info("initialing client config...");
+        options = new Options();
+        clientResult = new SampleClientResult();
+        clientResult.setGotResponse(false);
+        payload = null;
+
+        log.info("creating axis2 configuration context using the repo: " + configuration.getClientRepo());
+
+        configContext = ConfigurationContextFactory.
+                createConfigurationContextFromFileSystem(configuration.getClientRepo(),
+                        configuration.getAxis2Xml());
+        serviceClient = new ServiceClient(configContext, null);
+
+        log.info("setting address, transport, proxy urls where applicable");
+        if (addUrl != null && !"null".equals(addUrl)) {
+            serviceClient.engageModule("addressing");
+            options.setTo(new EndpointReference(addUrl));
+        }
+        if (trpUrl != null && !"null".equals(trpUrl)) {
+            options.setProperty(Constants.Configuration.TRANSPORT_URL, trpUrl);
+        }
+
+        if (prxUrl != null && !"null".equals(prxUrl)) {
+            HttpTransportProperties.ProxyProperties proxyProperties =
+                    new HttpTransportProperties.ProxyProperties();
+            URL url = new URL(prxUrl);
+            proxyProperties.setProxyName(url.getHost());
+            proxyProperties.setProxyPort(url.getPort());
+            proxyProperties.setUserName("");
+            proxyProperties.setPassWord("");
+            proxyProperties.setDomain("");
+            options.setProperty(HTTPConstants.PROXY, proxyProperties);
+        }
+
+        // apply any service policies if any
+        if (svcPolicy != null && !"null".equals(svcPolicy) && svcPolicy.length() > 0) {
+            log.info("Using WS-Security");
+            serviceClient.engageModule("addressing");
+            serviceClient.engageModule("rampart");
+            StAXOMBuilder builder = new StAXOMBuilder(svcPolicy);
+            Policy policy = PolicyEngine.getPolicy(builder.getDocumentElement());
+            options.setProperty(
+                    RampartMessageData.KEY_RAMPART_POLICY, policy);
+        }
+
+        if (timeout > 0) {
+            log.info("setting client timeout to: " + timeout);
+            options.setTimeOutInMilliSeconds(timeout);
+        }
+
+        serviceClient.setOptions(options);
+    }
+
+    private void deInitializeClient() {
+        if (serviceClient != null) {
+            try {
+                log.info("cleaning up client");
+                serviceClient.cleanup();
+                configContext.terminate();
+            } catch (AxisFault axisFault) {
+                log.error("Error terminating client", axisFault);
+            }
+        }
+    }
+
+    public SampleClientResult requestStandardQuote(String addUrl, String trpUrl, String prxUrl,
+                                                   String symbol, String svcPolicy) {
+        log.info("sending standard quote request");
+        try {
+            initializeClient(addUrl, trpUrl, prxUrl, svcPolicy, 10000);
+
+            payload = StockQuoteHandler.createStandardQuoteRequest(
+                    symbol, 1);
+            options.setAction("urn:getQuote");
+            OMElement resultElement = serviceClient.sendReceive(payload);
+            log.info("Standard :: Stock price = $" +
+                    StockQuoteHandler.parseStandardQuoteResponse(resultElement));
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+
+        return clientResult;
+
+    }
+
+    public SampleClientResult requestDualQuote(String addUrl, String trpUrl,
+                                               String prxUrl, String symbol) {
+        log.info("sending dual quote request");
+
+        try {
+            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);
+
+            payload = StockQuoteHandler.createStandardQuoteRequest(
+                    symbol, 1);
+            options.setAction("urn:getQuote");
+            //serviceClient.engageModule("addressing");
+            setCompleted(false);
+            serviceClient.sendReceiveNonBlocking(payload, new StockQuoteCallback(this));
+
+            while (true) {
+                if (isCompleted()) {
+                    log.info("Standard dual channel :: Stock price = $" +
+                            StockQuoteHandler.parseStandardQuoteResponse(getResponse()));
+                    clientResult.setGotResponse(true);
+                    break;
+                } else {
+                    Thread.sleep(100);
+                }
+            }
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+
+        return clientResult;
+    }
+
+    public SampleClientResult requestCustomQuote(String addUrl, String trpUrl,
+                                                 String prxUrl, String symbol) {
+        log.info("sending custom quote request");
+
+        try {
+            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);
+
+            payload = StockQuoteHandler.createCustomQuoteRequest(symbol);
+            options.setAction("urn:getQuote");
+            OMElement resultElement = serviceClient.sendReceive(payload);
+            log.info("Custom :: Stock price = $" +
+                    StockQuoteHandler.parseCustomQuoteResponse(resultElement));
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+
+        return clientResult;
+    }
+
+    public SampleClientResult placeOrder(String addUrl, String trpUrl, String prxUrl, String symbol) {
+        log.info("sending fire and forget (place order) request");
+
+        try {
+
+            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);
+            double price = getRandom(100, 0.9, true);
+            int quantity = (int) getRandom(10000, 1.0, true);
+            payload = StockQuoteHandler.createPlaceOrderRequest(price, quantity, symbol);
+            options.setAction("urn:placeOrder");
+
+            serviceClient.fireAndForget(payload);
+            Thread.sleep(5000);
+
+            log.info("Order placed for " + quantity
+                    + " shares of stock " + symbol
+                    + " at a price of $ " + price);
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+
+        return clientResult;
+    }
+
+    public SampleClientResult requestRestQuote(String addUrl, String trpUrl,
+                                               String prxUrl, String symbol) {
+        log.info("sending rest request");
+
+        try {
+            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);
+
+            payload = StockQuoteHandler.createStandardQuoteRequest(
+                    symbol, 1);
+            options.setAction("urn:getQuote");
+            options.setProperty(Constants.Configuration.ENABLE_REST, Constants.VALUE_TRUE);
+            OMElement resultElement = serviceClient.sendReceive(payload);
+            log.info("Standard :: Stock price = $" +
+                    StockQuoteHandler.parseStandardQuoteResponse(resultElement));
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+
+        return clientResult;
+
+    }
+
+
+    public SampleClientResult sessionlessClient(String addUrl, String trpUrl, int iterations) {
+        try {
+            boolean infinite = iterations <= 0;
+            OMFactory fac = OMAbstractFactory.getOMFactory();
+            OMElement value = fac.createOMElement("Value", null);
+            value.setText("Sample string");
+
+            initializeClient(addUrl, trpUrl, null, null, 10000);
+
+            options.setAction("urn:sampleOperation");
+
+
+            String testString = "";
+
+            long i = 0;
+            while (i < iterations || infinite) {
+                serviceClient.getOptions().setManageSession(true);
+                OMElement responseElement = serviceClient.sendReceive(value);
+                String response = responseElement.getText();
+
+                if (!clientResult.gotResponse()) {
+                    clientResult.setGotResponse(true);
+                }
+
+                i++;
+                log.info("Request: " + i + " ==> " + response);
+                testString = testString.concat(":" + i + ">" + response + ":");
+            }
+
+            clientResult.setFinished(true);
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setFinished(true);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+
+        return clientResult;
+    }
+
+    public SampleClientResult statefulClient(String addUrl, String trpUrl, int iterations) {
+        boolean infinite = false;
+        String session = null;
+
+        clientResult = new SampleClientResult();
+        clientResult.setGotResponse(false);
+
+        try {
+
+            SOAPEnvelope env1 = buildSoapEnvelope("c1", "v1");
+            SOAPEnvelope env2 = buildSoapEnvelope("c2", "v1");
+            SOAPEnvelope env3 = buildSoapEnvelope("c3", "v1");
+            SOAPEnvelope[] envelopes = {env1, env2, env3};
+
+            initializeClient(addUrl, trpUrl, null, null, 10000);
+
+            options.setAction("urn:sampleOperation");
+
+            int i = 0;
+            int sessionNumber;
+            String[] cookies = new String[3];
+            boolean httpSession = session != null && "http".equals(session);
+            int cookieNumber;
+            while (i < iterations || infinite) {
+                i++;
+                MessageContext messageContext = new MessageContext();
+                sessionNumber = getSessionTurn(envelopes.length);
+
+                messageContext.setEnvelope(envelopes[sessionNumber]);
+                cookieNumber = getSessionTurn(cookies.length);
+                String cookie = cookies[cookieNumber];
+                if (httpSession) {
+                    setSessionID(messageContext, cookie);
+                }
+                try {
+                    OperationClient op = serviceClient.createClient(ServiceClient.ANON_OUT_IN_OP);
+                    op.addMessageContext(messageContext);
+                    op.execute(true);
+
+                    MessageContext responseContext =
+                            op.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);
+                    String receivedCookie = extractSessionID(responseContext);
+                    String receivedSetCookie = getSetCookieHeader(responseContext);
+                    if (httpSession) {
+
+                        if (receivedSetCookie != null && !"".equals(receivedSetCookie)) {
+                            cookies[cookieNumber] = receivedCookie;
+                        }
+                    }
+
+                    SOAPEnvelope responseEnvelope = responseContext.getEnvelope();
+
+                    OMElement vElement =
+                            responseEnvelope.getBody().getFirstChildWithName(new QName("Value"));
+
+                    if (!clientResult.gotResponse()) {
+                        clientResult.setGotResponse(true);
+                    }
+
+                    log.info("Request: " + i + " with Session ID: " +
+                                    (httpSession ? cookie : sessionNumber) + " ---- " +
+                                    "Response : with  " + (httpSession && receivedCookie != null ?
+                                    (receivedSetCookie != null ? receivedSetCookie :
+                                            receivedCookie) : " ") + " " + vElement.getText());
+                } catch (AxisFault axisFault) {
+                    log.error("Request with session id " +
+                            (httpSession ? cookie : sessionNumber) + " " +
+                            "- Get a Fault : " + axisFault.getMessage(), axisFault);
+                }
+            }
+
+            clientResult.setFinished(true);
+        } catch (Exception e) {
+            log.error("Error invoking service", e);
+            clientResult.setFinished(true);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+
+        return clientResult;
+    }
+
+
+    private int getSessionTurn(int max) {
+        Random random = new Random();
+        return random.nextInt(max);
+    }
+
+    protected String getSetCookieHeader(MessageContext axis2MessageContext) {
+
+        Object o = axis2MessageContext.getProperty(MessageContext.TRANSPORT_HEADERS);
+
+        if (o != null && o instanceof Map) {
+            Map headerMap = (Map) o;
+            return (String) headerMap.get(SET_COOKIE);
+        }
+        return null;
+    }
+
+    protected void setSessionID(MessageContext axis2MessageContext, String value) {
+
+        if (value == null) {
+            return;
+        }
+        Map map = (Map) axis2MessageContext.getProperty(HTTPConstants.HTTP_HEADERS);
+        if (map == null) {
+            map = new HashMap();
+            axis2MessageContext.setProperty(HTTPConstants.HTTP_HEADERS, map);
+        }
+        map.put(COOKIE, value);
+    }
+
+    protected String extractSessionID(MessageContext axis2MessageContext) {
+
+        Object o = axis2MessageContext.getProperty(MessageContext.TRANSPORT_HEADERS);
+
+        if (o != null && o instanceof Map) {
+            Map headerMap = (Map) o;
+            String cookie = (String) headerMap.get(SET_COOKIE);
+            if (cookie == null) {
+                cookie = (String) headerMap.get(COOKIE);
+            } else {
+                cookie = cookie.split(";")[0];
+            }
+            return cookie;
+        }
+        return null;
+    }
+
+    private SOAPEnvelope buildSoapEnvelope(String clientID, String value) {
+        SOAPFactory soapFactory = OMAbstractFactory.getSOAP12Factory();
+
+        SOAPEnvelope envelope = soapFactory.createSOAPEnvelope();
+
+        SOAPHeader header = soapFactory.createSOAPHeader();
+        envelope.addChild(header);
+
+        OMNamespace synNamespace = soapFactory.
+                createOMNamespace("http://ws.apache.org/ns/synapse", "syn");
+        OMElement clientIDElement = soapFactory.createOMElement("ClientID", synNamespace);
+        clientIDElement.setText(clientID);
+        header.addChild(clientIDElement);
+
+        SOAPBody body = soapFactory.createSOAPBody();
+        envelope.addChild(body);
+
+        OMElement valueElement = soapFactory.createOMElement("Value", null);
+        valueElement.setText(value);
+        body.addChild(valueElement);
+
+        return envelope;
+    }
+
+
+    private double getRandom(double base, double varience, boolean onlypositive) {
+        double rand = Math.random();
+        return (base + ((rand > 0.5 ? 1 : -1) * varience * base * rand))
+                * (onlypositive ? 1 : (rand > 0.5 ? 1 : -1));
+    }
+
+    public boolean isCompleted() {
+        return completed;
+    }
+
+    public void setCompleted(boolean completed) {
+        this.completed = completed;
+    }
+
+    public OMElement getResponse() {
+        return response;
+    }
+
+    public void setResponse(OMElement response) {
+        this.response = response;
+    }
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java	(revision 1211407)
@@ -0,0 +1,33 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework;
+
+/**
+ * Specifies the operations associated with controlling
+ * backend server - starting up and shutting down.
+ */
+public interface BackEndServerController {
+
+    public String getServerName();
+
+    public boolean start();
+
+    public boolean stop();
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java	(revision 1211407)
@@ -0,0 +1,58 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample0 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample0.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample0() {
+        super(0);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testSmartClientMode() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280/";
+
+        log.info("Running test: Smart Client mode");
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+
+    public void testSynapseAsHTTPProxy() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String prxUrl = "http://localhost:8280/";
+
+        log.info("Running test: Using Synapse as a HTTP Proxy");
+        result = client.requestStandardQuote(addUrl, null, prxUrl, "IBM" ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java	(revision 1211407)
@@ -0,0 +1,61 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.axis2.AxisFault;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample4 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample4.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample4() {
+        super(4);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testErrorHandling() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280";
+
+        log.info("Running test: Introduction to error handling");
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        assertTrue("Did not get the correct response", result.gotResponse());
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "MSFT" ,null);
+        assertFalse("Must not get a response", result.gotResponse());
+        Exception resultEx = result.getException();
+        assertNotNull("Did not receive expected error" , resultEx);
+        log.info("Got an error as expected: " + resultEx.getMessage());
+        assertTrue("Did not receive expected error", resultEx instanceof AxisFault);
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "SUN" ,null);
+        assertFalse("Must not get a response", result.gotResponse());
+        Exception resultEx2 = result.getException();
+        assertNotNull("Did not receive expected error" , resultEx);
+        log.info("Got an error as expected: " + resultEx.getMessage());
+        assertTrue("Did not receive expected error", resultEx2 instanceof AxisFault);
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java	(revision 1211407)
@@ -0,0 +1,73 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.axis2.AxisFault;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample5 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample5.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample5() {
+        super(5);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testCreateFaultAndChangeDirection() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280";
+        String expectedError_MSFT = "bogus";
+        String expectedError_SUN = "Connection refused";
+        String expectedError_IBM = "The input stream for an incoming message is null";
+
+        log.info("Running test: Creating SOAP fault messages and changing the direction of a message");
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "MSFT" ,null);
+        assertFalse("Must not get a response", result.gotResponse());
+        Exception resultEx = result.getException();
+        assertNotNull("Did not receive expected error", resultEx);
+        log.info("Got an error as expected: " + resultEx.getMessage());
+        assertTrue("Did not receive expected error", resultEx instanceof AxisFault);
+        assertTrue("Did not receive expected error", resultEx.getMessage().indexOf(expectedError_MSFT)!=-1);
+
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "SUN" ,null);
+        assertFalse("Must not get a response", result.gotResponse());
+        resultEx = result.getException();
+        assertNotNull("Did not receive expected error", resultEx);
+        log.info("Got an error as expected: " + resultEx.getMessage());
+        assertTrue("Did not receive expected error", resultEx instanceof AxisFault);
+        assertTrue("Did not receive expected error", resultEx.getMessage().indexOf(expectedError_SUN)!=-1);
+
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        assertFalse("Must not get a response", result.gotResponse());
+        resultEx = result.getException();
+        assertNotNull("Did not receive expected error", resultEx);
+        log.info("Got an error as expected: " + resultEx.getMessage());
+        assertTrue("Did not receive expected error", resultEx instanceof AxisFault);
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java	(revision 1211407)
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample8 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample8.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample8() {
+        super(8);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testRegistryAndXSLTMediator() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280/";
+
+        log.info("Running test: Introduction to static and dynamic registry resources, and using XSLT transformations  ");
+        result = client.requestCustomQuote(addUrl, trpUrl, null, "IBM");
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/resources/trust.jks
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: java/modules/integration/src/test/resources/trust.jks
===================================================================
--- java/modules/integration/src/test/resources/trust.jks	(nonexistent)
+++ java/modules/integration/src/test/resources/trust.jks	(revision 1211407)

Property changes on: java/modules/integration/src/test/resources/trust.jks
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_jms.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_jms.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_jms.xml	(revision 1211407)
@@ -0,0 +1,378 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->
+    <deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <transportReceiver name="http"
+                       class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+        <parameter name="port">9000</parameter>
+    	<parameter name="non-blocking" locked="false">true</parameter>
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">9002</parameter>
+    	<parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+    </transportReceiver>
+
+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)-->
+    <transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
+        <parameter name="myTopicConnectionFactory">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">TopicConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">topic</parameter>
+        </parameter>
+
+        <parameter name="myQueueConnectionFactory">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
+        </parameter>
+
+        <parameter name="default">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
+        </parameter>
+    </transportReceiver>
+
+    <!--transportReceiver name="mailto" class="org.apache.axis2.transport.mail.MailTransportListener"-->
+        <!-- configure any optional POP3/IMAP properties
+        check com.sun.mail.pop3 and com.sun.mail.imap package documentation for more details
+    </transportReceiver-->
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"
+                     class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+    </transportSender>
+
+    <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+    </transportSender>
+
+    <transportSender name="jms"
+                     class="org.apache.axis2.transport.jms.JMSSender"/>
+
+    <!-- Uncomment and configure the SMTP server information
+    check com.sun.mail.smtp package documentation for descriptions of properties
+    <transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
+        <parameter name="mail.smtp.host">smtp.gmail.com</parameter>
+        <parameter name="mail.smtp.port">587</parameter>
+        <parameter name="mail.smtp.starttls.enable">true</parameter>
+        <parameter name="mail.smtp.user">synapse.test.0</parameter>
+        <parameter name="mail.smtp.password">mailpassword</parameter>
+        <parameter name="mail.smtp.auth">true</parameter>
+    </transportSender>-->
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Clustering  -->
+    <!-- ================================================= -->
+    <!-- Configure the following for preparing Axis2 to a clustered environment -->
+    <cluster class="org.apache.axis2.clustering.tribes.TribesClusterManager" enable="false">
+        <parameter name="AvoidInitiation">true</parameter>
+        <parameter name="membershipScheme">multicast</parameter>
+        <parameter name="domain">apache.axis2.app.domain</parameter>
+        <parameter name="synchronizeAll">true</parameter>
+        <parameter name="maxRetries">10</parameter>
+        <parameter name="mcastAddress">228.0.0.4</parameter>
+        <parameter name="mcastPort">45564</parameter>
+        <parameter name="mcastFrequency">500</parameter>
+        <parameter name="memberDropTime">3000</parameter>
+        <parameter name="mcastBindAddress">127.0.0.1</parameter>
+        <parameter name="localMemberHost">127.0.0.1</parameter>
+        <contextManager class="org.apache.axis2.clustering.context.DefaultContextManager"
+                         enable="false">
+            <listener class="org.apache.axis2.clustering.context.DefaultContextManagerListener"/>
+            <replication>
+                <defaults>
+                    <exclude name="local_*"/>
+                    <exclude name="LOCAL_*"/>
+                </defaults>
+                <context class="org.apache.axis2.context.ConfigurationContext">
+                    <exclude name="UseAsyncOperations"/>
+                    <exclude name="SequencePropertyBeanMap"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceGroupContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+            </replication>
+        </contextManager>
+    </cluster>
+     
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java	(revision 1211407)
@@ -0,0 +1,47 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample6 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample6.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample6() {
+        super(6);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testManipulatingHeadersAndFiltering() {
+        String trpUrl = "http://localhost:8280/";
+
+        log.info("Running test: Dumb Client mode  ");
+        result = client.requestStandardQuote(null, trpUrl, null, null ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java	(revision 1211407)
@@ -0,0 +1,47 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample10 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample10.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample10() {
+        super(10);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testDynamicEndPoints() {
+        String trpUrl = "http://localhost:8280/";
+
+        log.info("Running test: Dynamic EndPoints with Registry");
+        result = client.requestStandardQuote(null, trpUrl, null, "IBM", null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java	(revision 1211407)
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample9 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample9.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample9() {
+        super(9);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testDynamicSequences() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280/";
+
+        log.info("Running test: Dynamic Sequences with Registry");
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java	(revision 1211407)
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample13 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample13.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample13() {
+        super(13);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testDualQuote() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280/";
+
+        log.info("Running test: Dual channel invocation through Synapse");
+        result = client.requestDualQuote(addUrl, trpUrl, null, "IBM");
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java	(revision 1211407)
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample12 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample12.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample12() {
+        super(12);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testFireAndForget() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280/";
+
+        log.info("Running test: One way messaging / fireAndForget through Synapse");
+        result = client.placeOrder(addUrl, trpUrl, null, "IBM");
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java	(revision 1211407)
@@ -0,0 +1,81 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework;
+
+import java.net.Inet4Address;
+import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.List;
+
+public class SynapseTestUtils {
+
+    static String replace(String str, String pattern, String replace) {
+        int s = 0;
+        int e;
+        StringBuilder result = new StringBuilder();
+
+        while ((e = str.indexOf(pattern, s)) >= 0) {
+            result.append(str.substring(s, e));
+            result.append(replace);
+            s = e + pattern.length();
+        }
+        result.append(str.substring(s));
+        return result.toString();
+    }
+
+    static String getIPAddress() throws Exception {
+        List<InetAddress> ipAddresses = new ArrayList<InetAddress>();
+        String ipAddress = null;
+
+        Enumeration e = NetworkInterface.getNetworkInterfaces();
+        while (e.hasMoreElements()) {
+            NetworkInterface ni = (NetworkInterface) e.nextElement();
+            // Clustering doesn't work for loop-back addresses, so we are not interested
+            // we are not interested in inactive interfaces either
+            if (ni.isLoopback() || !ni.isUp()) continue;
+
+            Enumeration e2 = ni.getInetAddresses();
+            while (e2.hasMoreElements()) {
+                InetAddress ip = (InetAddress) e2.nextElement();
+                ipAddresses.add(ip);
+            }
+        }
+
+        if (ipAddresses.isEmpty()) {
+            return null;
+        } else {
+            for (InetAddress ip : ipAddresses) {
+                if (ip instanceof Inet4Address) {
+                    ipAddress = ip.getHostAddress();
+                    break;
+                }
+            }
+        }
+
+        if (ipAddress == null) {
+            ipAddress = ipAddresses.get(0).getHostAddress();
+        }
+
+        return ipAddress;
+    }
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfiguration.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfiguration.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfiguration.java	(revision 1211407)
@@ -0,0 +1,301 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework;
+
+import java.util.HashMap;
+import java.util.Set;
+
+/**
+* Stores the configuration information for Synapse, Axis2 Server and Clients.
+* All the information loaded from sample descriptor files are stored here.
+*/
+public class SampleConfiguration {
+    private String sampleName;
+    private SynapseSampleConfiguration synapseConfig;
+    private HashMap<String, Axis2SampleConfiguration> axis2Configs;
+    private HashMap<String, JMSBrokerSampleConfiguration> jmsConfigs;
+    private HashMap<String, DerbyServerSampleConfiguration> derbyConfigs;
+    private HashMap<String, FIXExecutorSampleConfiguration> executorConfigs;
+    private ClientSampleConfiguration clientConfig;
+
+    public SampleConfiguration() {
+        this.synapseConfig = new SynapseSampleConfiguration();
+        this.axis2Configs = new HashMap<String, Axis2SampleConfiguration>();
+        this.jmsConfigs = new HashMap<String, JMSBrokerSampleConfiguration>();
+        this.derbyConfigs = new HashMap<String, DerbyServerSampleConfiguration>();
+        this.executorConfigs = new HashMap<String, FIXExecutorSampleConfiguration>();
+        this.clientConfig = new ClientSampleConfiguration();
+    }
+
+    public String getSampleName() {
+        return sampleName;
+    }
+
+    public void setSampleName(String name) {
+        this.sampleName = sampleName;
+    }
+
+    public SynapseSampleConfiguration getSynapseConfig() {
+        return synapseConfig;
+    }
+
+    public void addNewAxis2Server(String name) {
+        axis2Configs.put(name, new Axis2SampleConfiguration());
+    }
+
+    public void addNewJMSBroker(String name) {
+        jmsConfigs.put(name, new JMSBrokerSampleConfiguration());
+    }
+
+    public void addNewDerbyServer(String name) {
+        derbyConfigs.put(name, new DerbyServerSampleConfiguration());
+    }
+
+    public void addNewFIXExecutor(String name) {
+        executorConfigs.put(name, new FIXExecutorSampleConfiguration());
+    }
+
+    public Axis2SampleConfiguration getAxis2Config(String name) {
+        return axis2Configs.get(name);
+    }
+
+    public JMSBrokerSampleConfiguration getJMSConfig(String name) {
+        return jmsConfigs.get(name);
+    }
+
+    public DerbyServerSampleConfiguration getDerbyConfig(String name) {
+        return derbyConfigs.get(name);
+    }
+
+    public FIXExecutorSampleConfiguration getFIXExecutorConfig(String name) {
+        return executorConfigs.get(name);
+    }
+
+    public Set<String> getAxis2ServersList() {
+        return axis2Configs.keySet();
+    }
+
+    public int getBackEndServerCount() {
+        return axis2Configs.size() + jmsConfigs.size();
+    }
+
+    public ClientSampleConfiguration getClientConfig() {
+        return clientConfig;
+    }
+
+    class SynapseSampleConfiguration {
+        private String serverName;
+        private String synapseHome;
+        private String axis2Repo;
+        private String axis2Xml;
+        private String synapseXml;
+        private boolean clusteringEnabled;
+
+        public String getServerName() {
+            return serverName;
+        }
+
+        public void setServerName(String serverName) {
+            this.serverName = serverName;
+        }
+
+        public String getSynapseHome() {
+            return synapseHome;
+        }
+
+        public void setSynapseHome(String synapseHome) {
+            this.synapseHome = synapseHome;
+        }
+
+        public String getAxis2Repo() {
+            return axis2Repo;
+        }
+
+        public void setAxis2Repo(String axis2Repo) {
+            this.axis2Repo = axis2Repo;
+        }
+
+        public String getAxis2Xml() {
+            return axis2Xml;
+        }
+
+        public void setAxis2Xml(String axis2Xml) {
+            this.axis2Xml = axis2Xml;
+        }
+
+        public String getSynapseXml() {
+            return synapseXml;
+        }
+
+        public void setSynapseXml(String synapseXml) {
+            this.synapseXml = synapseXml;
+        }
+
+        public boolean isClusteringEnabled() {
+            return clusteringEnabled;
+        }
+
+        public void setClusteringEnabled(boolean clusteringEnabled) {
+            this.clusteringEnabled = clusteringEnabled;
+        }
+    }
+
+    class Axis2SampleConfiguration {
+        private String serverName;
+        private String axis2Repo;
+        private String axis2Xml;
+        private String httpPort;
+        private String httpsPort;
+        private boolean clusteringEnabled;
+
+        public String getServerName() {
+            return serverName;
+        }
+
+        public void setServerName(String serverName) {
+            this.serverName = serverName;
+        }
+
+        public String getAxis2Repo() {
+            return axis2Repo;
+        }
+
+        public void setAxis2Repo(String axis2Repo) {
+            this.axis2Repo = axis2Repo;
+        }
+
+        public String getAxis2Xml() {
+            return axis2Xml;
+        }
+
+        public void setAxis2Xml(String axis2Xml) {
+            this.axis2Xml = axis2Xml;
+        }
+
+        public String getHttpPort() {
+            return httpPort;
+        }
+
+        public void setHttpPort(String httpPort) {
+            this.httpPort = httpPort;
+        }
+
+        public String getHttpsPort() {
+            return httpsPort;
+        }
+
+        public void setHttpsPort(String httpsPort) {
+            this.httpsPort = httpsPort;
+        }
+
+        public boolean isClusteringEnabled() {
+            return clusteringEnabled;
+        }
+
+        public void setClusteringEnabled(boolean clusteringEnabled) {
+            this.clusteringEnabled = clusteringEnabled;
+        }
+    }
+
+    class JMSBrokerSampleConfiguration {
+        private String serverName;
+        private String providerURL;
+        private String initialNamingFactory;
+
+        public String getServerName() {
+            return serverName;
+        }
+
+        public void setServerName(String serverName) {
+            this.serverName = serverName;
+        }
+
+        public String getProviderURL() {
+            return providerURL;
+        }
+
+        public void setProviderURL(String providerURL) {
+            this.providerURL = providerURL;
+        }
+
+        public String getInitialNamingFactory() {
+            return initialNamingFactory;
+        }
+
+        public void setInitialNamingFactory(String initialNamingFactory) {
+            this.initialNamingFactory = initialNamingFactory;
+        }
+    }
+
+
+    class DerbyServerSampleConfiguration {
+        private String serverName;
+
+        public String getServerName() {
+            return serverName;
+        }
+
+        public void setServerName(String serverName) {
+            this.serverName = serverName;
+        }
+    }
+
+    class FIXExecutorSampleConfiguration {
+        private String serverName;
+
+        public String getServerName() {
+            return serverName;
+        }
+
+        public void setServerName(String serverName) {
+            this.serverName = serverName;
+        }
+    }
+
+    public class ClientSampleConfiguration {
+        private String clientRepo;
+        private String fileName;
+        private String axis2Xml;
+
+        public String getClientRepo() {
+            return clientRepo;
+        }
+
+        public void setClientRepo(String clientRepo) {
+            this.clientRepo = clientRepo;
+        }
+
+        public String getFileName() {
+            return fileName;
+        }
+
+        public void setFileName(String fileName) {
+            this.fileName = fileName;
+        }
+
+        public String getAxis2Xml() {
+            return axis2Xml;
+        }
+
+        public void setAxis2Xml(String axis2Xml) {
+            this.axis2Xml = axis2Xml;
+        }
+    }
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java	(revision 1211407)
@@ -0,0 +1,47 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample15 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample15.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample15() {
+        super(15);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testMessageEnrichment() {
+        String trpUrl = "http://localhost:8280/services/StockQuote";
+
+        log.info("Running test: Message Enrichment through Synapse");
+        result = client.requestStandardQuote(null, trpUrl, null, "IBM" ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java	(revision 1211407)
@@ -0,0 +1,123 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.ServerConfigurationInformation;
+import org.apache.synapse.ServerManager;
+
+import java.util.concurrent.CountDownLatch;
+
+/**
+ * Responsible for starting up and shutting down
+ * a synapse server instance in order to run a sample test.
+ */
+public class SynapseProcessController implements ProcessController {
+
+    private static final Log log = LogFactory.getLog(SynapseProcessController.class);
+
+    private ServerThread serverThread;
+    private SampleConfiguration.SynapseSampleConfiguration configuration;
+    private ServerConfigurationInformation information;
+    private ServerManager manager;
+    private CountDownLatch cdLatch;
+    private Exception processException;
+
+    public SynapseProcessController(SampleConfiguration.SynapseSampleConfiguration configuration) {
+        this.configuration = configuration;
+        information = new ServerConfigurationInformation();
+        manager = new ServerManager();
+        cdLatch = new CountDownLatch(1);
+        serverThread = new ServerThread();
+        serverThread.setName(configuration.getServerName() + " thread");
+    }
+
+    public boolean startProcess() {
+        information.setSynapseHome(configuration.getSynapseHome());
+        information.setSynapseXMLLocation(configuration.getSynapseXml());
+        information.setServerName(configuration.getServerName());
+        information.setAxis2Xml(configuration.getAxis2Xml());
+        information.setResolveRoot(configuration.getAxis2Repo());
+        information.setAxis2RepoLocation(configuration.getAxis2Repo());
+
+        log.info("SynapseProcessController: Preparing to start synapse server");
+        serverThread.start();
+
+        try {
+            log.info("SynapseProcessController: Waiting for synapse to start");
+            cdLatch.await();
+            if (processException == null) {
+                log.info("SynapseProcessController: synapse is started. continuing tests");
+                return true;
+            } else {
+                log.warn("SynapseProcessController: There was an error starting synapse", processException);
+                return false;
+            }
+        } catch (InterruptedException e) {
+            return false;
+        }
+    }
+
+    public boolean stopProcess() {
+        if (serverThread.isRunning) {
+            serverThread.isRunning = false;
+            try {
+                cdLatch = new CountDownLatch(1);
+                cdLatch.await();
+            } catch (InterruptedException e) {
+                log.warn("Thread interrupted");
+            }
+        }
+        return true;
+    }
+
+    private class ServerThread extends Thread {
+
+        public boolean isRunning = false;
+
+        public void run() {
+            processException = null;
+            log.info("SynapseProcessController.ServerThread: Initializing Synapse Server...");
+            try {
+                manager.init(information, null);
+                log.info("SynapseProcessController.ServerThread: Starting Synapse Server...");
+                manager.start();
+                isRunning = true;
+            } catch (Exception e) {
+                processException = e;
+            }
+            cdLatch.countDown();
+
+            log.info("SynapseProcessController.ServerThread: Await until test are finished");
+            while (isRunning) {
+                //wait
+                try {
+                    sleep(1000);
+                } catch (InterruptedException e) {
+                    log.warn("Thread interrupted");
+                }
+            }
+            log.info("SynapseProcessController.ServerThread:Shutting down Synapse Server...");
+            manager.shutdown();
+            cdLatch.countDown();
+        }
+    }
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java	(revision 1211407)
@@ -0,0 +1,79 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework;
+
+/**
+ * Sample configuration constants
+ */
+public class SampleConfigConstants {
+
+    //xml tag names
+    public static final String TAG_SAMPLE_ID = "sampleID";
+    public static final String TAG_SAMPLE_NAME = "sampleName";
+
+    public static final String TAG_SYNAPSE_CONF = "synapseConfig";
+    public static final String TAG_SYNAPSE_CONF_AXIS2_REPO = "axis2Repo";
+    public static final String TAG_SYNAPSE_CONF_AXIS2_XML = "axis2Xml";
+    public static final String TAG_SYNAPSE_CONF_XML = "synapseXml";
+
+    public static final String TAG_BE_SERVER_CONF = "backEndServerConfig";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_SERVER = "axis2Server";
+    public static final String TAG_BE_SERVER_CONF_JMS_BROKER = "jmsBroker";
+    public static final String TAG_BE_SERVER_CONF_DERBY_SERVER = "derbyServer";
+    public static final String TAG_BE_SERVER_CONF_QFIX_EXECUTOR = "fixExecutor";
+
+    public static final String TAG_BE_SERVER_CONF_AXIS2_REPO = "axis2Repo";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_XML = "axis2Xml";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT = "httpPort";
+    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT = "httpsPort";
+
+    public static final String TAG_BE_SERVER_CONF_JMS_PROVIDER_URL = "providerURL";
+    public static final String TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY = "initialNamingFactory";
+
+    public static final String TAG_CLIENT_CONF = "clientConfig";
+    public static final String TAG_CLIENT_CONF_REPO = "clientRepo";
+    public static final String TAG_CLIENT_CONF_AXIS2_XML = "axis2Xml";
+    public static final String TAG_CLIENT_CONF_FILENAME = "fileName";
+
+    public static final String TAG_ENABLE_CLUSTERING = "enableClustering";
+
+    //default values
+    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_XML =
+            "modules/integration/target/test_repos/synapse/conf/axis2_def.xml";
+    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_REPO =
+            "modules/integration/target/test_repos/synapse";
+
+    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_XML =
+            "modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml";
+    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_REPO =
+            "modules/integration/target/test_repos/axis2Server";
+
+    public static final String DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL = "tcp://localhost:61616";
+    public static final String DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY =
+            "org.apache.activemq.jndi.ActiveMQInitialContextFactory";
+
+    public static final String DEFAULT_CLIENT_CONF_REPO =
+            "modules/integration/target/test_repos/axis2Client";
+    public static final String DEFAULT_CLIENT_CONF_FILENAME =
+            "./repository/samples/resources/asf-logo.gif";
+    public static final String DEFAULT_CLIENT_CONF_AXIS2_XML =
+            "modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml";
+
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_def.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_def.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_def.xml	(revision 1211407)
@@ -0,0 +1,339 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->
+    <deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <transportReceiver name="http"
+                       class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+        <parameter name="port">9000</parameter>
+    	<parameter name="non-blocking" locked="false">true</parameter>
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">9002</parameter>
+    	<parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportReceiver>
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"
+                     class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+    </transportSender>
+
+    <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>
+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
+    </transportSender>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Clustering  -->
+    <!-- ================================================= -->
+    <!-- Configure the following for preparing Axis2 to a clustered environment -->
+    <cluster class="org.apache.axis2.clustering.tribes.TribesClusterManager" enable="false">
+        <parameter name="AvoidInitiation">true</parameter>
+        <parameter name="membershipScheme">multicast</parameter>
+        <parameter name="domain">apache.axis2.app.domain</parameter>
+        <parameter name="synchronizeAll">true</parameter>
+        <parameter name="maxRetries">10</parameter>
+        <parameter name="mcastAddress">228.0.0.4</parameter>
+        <parameter name="mcastPort">45564</parameter>
+        <parameter name="mcastFrequency">500</parameter>
+        <parameter name="memberDropTime">3000</parameter>
+        <parameter name="mcastBindAddress">127.0.0.1</parameter>
+        <parameter name="localMemberHost">127.0.0.1</parameter>
+        <contextManager class="org.apache.axis2.clustering.context.DefaultContextManager"
+                         enable="false">
+            <listener class="org.apache.axis2.clustering.context.DefaultContextManagerListener"/>
+            <replication>
+                <defaults>
+                    <exclude name="local_*"/>
+                    <exclude name="LOCAL_*"/>
+                </defaults>
+                <context class="org.apache.axis2.context.ConfigurationContext">
+                    <exclude name="UseAsyncOperations"/>
+                    <exclude name="SequencePropertyBeanMap"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceGroupContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+            </replication>
+        </contextManager>
+    </cluster>
+     
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_clustering.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_clustering.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_clustering.xml	(revision 1211407)
@@ -0,0 +1,339 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->
+    <deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <transportReceiver name="http"
+                       class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+        <parameter name="port">9000</parameter>
+    	<parameter name="non-blocking" locked="false">true</parameter>
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">9002</parameter>
+    	<parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportReceiver>
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"
+                     class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+    </transportSender>
+
+    <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>
+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
+    </transportSender>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Clustering  -->
+    <!-- ================================================= -->
+    <!-- Configure the following for preparing Axis2 to a clustered environment -->
+    <clustering class="org.apache.axis2.clustering.tribes.TribesClusteringAgent" enable="true">
+        <parameter name="AvoidInitiation">true</parameter>
+        <parameter name="membershipScheme">multicast</parameter>
+        <parameter name="domain">apache.axis2.app.domain</parameter>
+        <parameter name="synchronizeAll">true</parameter>
+        <parameter name="maxRetries">10</parameter>
+        <parameter name="mcastAddress">228.0.0.4</parameter>
+        <parameter name="mcastPort">45564</parameter>
+        <parameter name="mcastFrequency">500</parameter>
+        <parameter name="memberDropTime">3000</parameter>
+        <parameter name="mcastBindAddress">${replace.me}</parameter>
+        <parameter name="localMemberHost">${replace.me}</parameter>
+        <contextManager class="org.apache.axis2.clustering.context.DefaultContextManager"
+                         enable="false">
+            <listener class="org.apache.axis2.clustering.context.DefaultContextManagerListener"/>
+            <replication>
+                <defaults>
+                    <exclude name="local_*"/>
+                    <exclude name="LOCAL_*"/>
+                </defaults>
+                <context class="org.apache.axis2.context.ConfigurationContext">
+                    <exclude name="UseAsyncOperations"/>
+                    <exclude name="SequencePropertyBeanMap"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceGroupContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+            </replication>
+        </contextManager>
+    </clustering>
+     
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System pre defined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_fix.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_fix.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_fix.xml	(revision 1211407)
@@ -0,0 +1,342 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+
+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false
+            on production environments, unless you really want to use hot deployment in production -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">true</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- Extension deployer
+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->
+    <!--<deployer extension="xar" directory="extensions" class="org.apache.synapse.deployers.ExtensionDeployer"/>-->
+
+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production
+                unless you really want to use hot deployment/update -->
+    <deployer extension="xml" directory="conf/synapse-config/sequences" class="org.apache.synapse.deployers.SequenceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/endpoints" class="org.apache.synapse.deployers.EndpointDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/local-entries" class="org.apache.synapse.deployers.LocalEntryDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/proxy-services" class="org.apache.synapse.deployers.ProxyServiceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/event-sources" class="org.apache.synapse.deployers.EventSourceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/tasks" class="org.apache.synapse.deployers.TaskDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/priority-executors" class="org.apache.synapse.deployers.PriorityExecutorDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/templates" class="org.apache.synapse.deployers.TemplateDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-stores" class="org.apache.synapse.deployers.MessageStoreDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-processors" class="org.apache.synapse.deployers.MessageProcessorDeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+        <!--<messageFormatter contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType="application/json"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>-->
+
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->
+    <transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+    	<parameter name="port">8280</parameter>
+    	<parameter name="non-blocking">true</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
+        <!-- paramter name="priorityConfigFile" locked="false">location of priority configuration file<parameter-->
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">8243</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">http://apachehost:port/somepath</parameter-->
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportReceiver>     
+
+    <transportReceiver name="fix" class="org.apache.synapse.transport.fix.FIXTransportListener">
+        <parameter name="non-blocking">true</parameter>
+    </transportReceiver>  
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"  class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <!--parameter name="http.proxyHost" locked="false">localhost</parameter>
+        <parameter name="http.proxyPort" locked="false">3128</parameter>
+        <parameter name="http.nonProxyHosts" locked="false">localhost|moon|sun</parameter-->
+    </transportSender>
+    <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>
+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
+    </transportSender>
+
+    <transportSender name="fix" class="org.apache.synapse.transport.fix.FIXTransportSender">
+	    <parameter name="non-blocking">true</parameter>
+    </transportSender>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="CustomURIBasedDispatcher"
+                     class="org.apache.synapse.core.axis2.CustomURIBasedDispatcher"/>
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_tcp.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_tcp.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_tcp.xml	(revision 1211407)
@@ -0,0 +1,484 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements.  See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership.  The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License.  You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied.  See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+
+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false
+            on production environments, unless you really want to use hot deployment in production -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">true</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- Extension deployer
+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->
+    <!--<deployer extension="xar" directory="extensions" class="org.apache.synapse.deployers.ExtensionDeployer"/>-->
+
+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production
+                unless you really want to use hot deployment/update -->
+    <deployer extension="xml" directory="conf/synapse-config/sequences" class="org.apache.synapse.deployers.SequenceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/endpoints" class="org.apache.synapse.deployers.EndpointDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/local-entries" class="org.apache.synapse.deployers.LocalEntryDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/proxy-services" class="org.apache.synapse.deployers.ProxyServiceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/event-sources" class="org.apache.synapse.deployers.EventSourceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/tasks" class="org.apache.synapse.deployers.TaskDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/priority-executors" class="org.apache.synapse.deployers.PriorityExecutorDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/templates" class="org.apache.synapse.deployers.TemplateDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-stores" class="org.apache.synapse.deployers.MessageStoreDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-processors" class="org.apache.synapse.deployers.MessageProcessorDeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+        <!--<messageFormatter contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType="application/json"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>-->
+
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+        <!--<messageBuilder contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>-->
+        <!--<messageBuilder contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>-->
+        <!--<messageBuilder contentType="application/json"
+                         class="org.apache.axis2.json.JSONOMBuilder"/>-->
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->
+    <transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+    	<parameter name="port">8280</parameter>
+    	<parameter name="non-blocking">true</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
+        <!-- paramter name="priorityConfigFile" locked="false">location of priority configuration file<parameter-->
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">8243</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">http://apachehost:port/somepath</parameter-->
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportReceiver>
+
+    <transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port">6060</parameter>
+    </transportReceiver>
+ 
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"  class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <!--parameter name="http.proxyHost" locked="false">localhost</parameter>
+        <parameter name="http.proxyPort" locked="false">3128</parameter>
+        <parameter name="http.nonProxyHosts" locked="false">localhost|moon|sun</parameter-->
+    </transportSender>
+    <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>
+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
+    </transportSender>
+   
+    <transportSender name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!--                  Clustering                       -->
+    <!-- ================================================= -->
+    <!-- Configure the following for preparing Synapse to a clustered environment -->
+    <cluster class="org.apache.axis2.clustering.tribes.TribesClusterManager" enable="false">
+
+        <!--
+           This parameter indicates whther the cluster has to be automatically initalized
+           when the AxisConfiguration is built. If set to "true" the initialization will not be
+           done at that stage, and some other party will have to explictly initialize the cluster.
+        -->
+        <parameter name="AvoidInitiation">false</parameter>
+
+        <!--
+           The membership scheme used in this setup. The only values supported at the moment are
+           "multicast" and "wka"
+
+           1. multicast - membership is automatically discovered using multicasting
+           2. wka - Well-Known Address based multicasting. Membership is discovered with the help
+                    of one or more nodes running at a Well-Known Address. New members joining a
+                    cluster will first connect to a well-known node, register with the well-known node
+                    and get the membership list from it. When new members join, one of the well-known
+                    nodes will notify the others in the group. When a member leaves the cluster or
+                    is deemed to have left the cluster, it will be detected by the Group Membership
+                    Service (GMS) using a TCP ping mechanism.
+        -->
+        <parameter name="membershipScheme">multicast</parameter>
+
+        <!--
+         The clustering domain/group. Nodes in the same group will belong to the same multicast
+         domain. There will not be interference between nodes in different groups.
+        -->
+        <parameter name="domain">apache.synapse.domain</parameter>
+
+        <!--
+           When a Web service request is received, and processed, before the response is sent to the
+           client, should we update the states of all members in the cluster? If the value of
+           this parameter is set to "true", the response to the client will be sent only after
+           all the members have been updated. Obviously, this can be time consuming. In some cases,
+           such this overhead may not be acceptable, in which case the value of this parameter
+           should be set to "false"
+        -->
+        <parameter name="synchronizeAll">true</parameter>
+
+        <!--
+          The maximum number of times we need to retry to send a message to a particular node
+          before giving up and considering that node to be faulty
+        -->
+        <parameter name="maxRetries">10</parameter>
+
+        <!-- The multicast address to be used -->
+        <parameter name="mcastAddress">228.0.0.4</parameter>
+
+        <!-- The multicast port to be used -->
+        <parameter name="mcastPort">45564</parameter>
+
+        <!-- The frequency of sending membership multicast messages (in ms) -->
+        <parameter name="mcastFrequency">500</parameter>
+
+        <!-- The time interval within which if a member does not respond, the member will be
+         deemed to have left the group (in ms)
+         -->
+        <parameter name="memberDropTime">3000</parameter>
+
+        <!--
+           The IP address of the network interface to which the multicasting has to be bound to.
+           Multicasting would be done using this interface.
+        -->
+        <parameter name="mcastBindAddress">127.0.0.1</parameter>
+
+        <!-- The host name or IP address of this member -->
+        <parameter name="localMemberHost">127.0.0.1</parameter>
+
+        <!--
+        The TCP port used by this member. This is the port through which other nodes will
+        contact this member
+         -->
+        <parameter name="localMemberPort">4000</parameter>
+
+        <!--
+           The list of static or well-known members. These entries will only be valid if the
+           "membershipScheme" above is set to "wka"
+        -->
+        <members>
+            <member>
+                <hostName>127.0.0.1</hostName>
+                <port>4000</port>
+            </member>
+            <member>
+                <hostName>127.0.0.1</hostName>
+                <port>4001</port>
+            </member>
+        </members>
+
+        <!--
+        Enable the load balancer entry if you need to run this node as a load balancer.
+        Multiple application domains with different LoadBalanceEventHandler implementations
+        can be defined in this section.
+        -->
+        <loadBalancer enable="false">
+            <applicationDomain name="apache.axis2.app.domain"
+                               handler="org.apache.axis2.clustering.DefaultLoadBalanceEventHandler"/>
+        </loadBalancer>
+            
+        <!--
+           This interface is responsible for handling context replication. The property changes in
+           the Axis2 context hierarchy in this node, are propagated to all other nodes in the cluster.
+
+           The "excludes" patterns can be used to specify the prefixes (e.g. local_*) or
+           suffixes (e.g. *_local) of the properties to be excluded from replication. The pattern
+           "*" indicates that all properties in a particular context should not be replicated.
+
+            The "enable" attribute indicates whether context replication has been enabled
+        -->
+        <contextManager class="org.apache.axis2.clustering.context.DefaultContextManager"
+                         enable="false">
+            <listener class="org.apache.axis2.clustering.context.DefaultContextManagerListener"/>
+            <replication>
+                <defaults>
+                    <exclude name="local_*"/>
+                    <exclude name="LOCAL_*"/>
+                </defaults>
+                <context class="org.apache.axis2.context.ConfigurationContext">
+                    <exclude name="UseAsyncOperations"/>
+                    <exclude name="SequencePropertyBeanMap"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceGroupContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+            </replication>
+        </contextManager>
+    </cluster>
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="CustomURIBasedDispatcher"
+                     class="org.apache.synapse.core.axis2.CustomURIBasedDispatcher"/>
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_udp.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_udp.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_udp.xml	(revision 1211407)
@@ -0,0 +1,352 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+
+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false
+            on production environments, unless you really want to use hot deployment in production -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">true</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- Extension deployer
+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->
+    <!--<deployer extension="xar" directory="extensions" class="org.apache.synapse.deployers.ExtensionDeployer"/>-->
+
+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production
+                unless you really want to use hot deployment/update -->
+    <deployer extension="xml" directory="conf/synapse-config/sequences" class="org.apache.synapse.deployers.SequenceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/endpoints" class="org.apache.synapse.deployers.EndpointDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/local-entries" class="org.apache.synapse.deployers.LocalEntryDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/proxy-services" class="org.apache.synapse.deployers.ProxyServiceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/event-sources" class="org.apache.synapse.deployers.EventSourceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/tasks" class="org.apache.synapse.deployers.TaskDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/priority-executors" class="org.apache.synapse.deployers.PriorityExecutorDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/templates" class="org.apache.synapse.deployers.TemplateDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-stores" class="org.apache.synapse.deployers.MessageStoreDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-processors" class="org.apache.synapse.deployers.MessageProcessorDeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+        <!--<messageFormatter contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType="application/json"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>-->
+
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+        <!--<messageBuilder contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>-->
+        <!--<messageBuilder contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>-->
+        <!--<messageBuilder contentType="application/json"
+                         class="org.apache.axis2.json.JSONOMBuilder"/>-->
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->
+    <transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+    	<parameter name="port">8280</parameter>
+    	<parameter name="non-blocking">true</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
+        <!-- paramter name="priorityConfigFile" locked="false">location of priority configuration file<parameter-->
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">8243</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">http://apachehost:port/somepath</parameter-->
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportReceiver>
+
+    
+    <!--transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port">6060</parameter>
+    </transportReceiver-->
+
+    <transportReceiver name="udp" class="org.apache.axis2.transport.udp.UDPListener"/>     
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"  class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <!--parameter name="http.proxyHost" locked="false">localhost</parameter>
+        <parameter name="http.proxyPort" locked="false">3128</parameter>
+        <parameter name="http.nonProxyHosts" locked="false">localhost|moon|sun</parameter-->
+    </transportSender>
+    <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>
+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
+    </transportSender>
+  
+      <transportSender name="udp" class="org.apache.axis2.transport.udp.UDPSender"/>
+
+
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="CustomURIBasedDispatcher"
+                     class="org.apache.synapse.core.axis2.CustomURIBasedDispatcher"/>
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml	(revision 1211407)
@@ -0,0 +1,563 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+
+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false
+            on production environments, unless you really want to use hot deployment in production -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">true</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- Extension deployer
+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->
+    <!--<deployer extension="xar" directory="extensions" class="org.apache.synapse.deployers.ExtensionDeployer"/>-->
+
+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production
+                unless you really want to use hot deployment/update -->
+    <deployer extension="xml" directory="conf/synapse-config/sequences" class="org.apache.synapse.deployers.SequenceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/endpoints" class="org.apache.synapse.deployers.EndpointDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/local-entries" class="org.apache.synapse.deployers.LocalEntryDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/proxy-services" class="org.apache.synapse.deployers.ProxyServiceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/event-sources" class="org.apache.synapse.deployers.EventSourceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/tasks" class="org.apache.synapse.deployers.TaskDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/priority-executors" class="org.apache.synapse.deployers.PriorityExecutorDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/templates" class="org.apache.synapse.deployers.TemplateDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-stores" class="org.apache.synapse.deployers.MessageStoreDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-processors" class="org.apache.synapse.deployers.MessageProcessorDeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+        <!--<messageFormatter contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType="application/json"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>-->
+
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+        <!--<messageBuilder contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>-->
+        <!--<messageBuilder contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>-->
+        <!--<messageBuilder contentType="application/json"
+                         class="org.apache.axis2.json.JSONOMBuilder"/>-->
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->
+    <transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+    	<parameter name="port">8280</parameter>
+    	<parameter name="non-blocking">true</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
+        <!-- paramter name="priorityConfigFile" locked="false">location of priority configuration file<parameter-->
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <!--transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">8243</parameter>
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>lib/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>lib/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+    </transportReceiver-->
+
+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)-->
+    <transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
+        <parameter name="myTopicConnectionFactory">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">TopicConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">topic</parameter>
+        </parameter>
+
+        <parameter name="myQueueConnectionFactory">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
+        </parameter>
+
+        <parameter name="default">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
+        </parameter>
+    </transportReceiver>
+
+    <!--transportReceiver name="vfs" class="org.apache.synapse.transport.vfs.VFSTransportListener"/-->
+
+    <!--transportReceiver name="mailto" class="org.apache.axis2.transport.mail.MailTransportListener">
+        <configure any optional POP3/IMAP properties
+        check com.sun.mail.pop3 and com.sun.mail.imap package documentation for more details
+    </transportReceiver-->
+
+     <!--Uncomment this for FIX transport support
+    <transportReceiver name="fix" class="org.apache.synapse.transport.fix.FIXTransportListener">
+        <parameter name="non-blocking">true</parameter>
+    </transportReceiver>-->
+
+    <!--Uncomment this for TCP transport support
+    <transportReceiver name="tcp" class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port">6060</parameter>
+    </transportReceiver>-->
+
+    <!--Uncomment this for UDP transport support
+    <transportReceiver name="udp" class="org.apache.axis2.transport.udp.UDPListener"/>-->        
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"  class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <!--parameter name="http.proxyHost" locked="false">localhost</parameter>
+        <parameter name="http.proxyPort" locked="false">3128</parameter>
+        <parameter name="http.nonProxyHosts" locked="false">localhost|moon|sun</parameter-->
+    </transportSender>
+    <!--transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>lib/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>lib/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+    </transportSender-->
+   
+    <!-- Uncomment Transport sender for the non blocking local transport-->
+    <!--transportSender name="local" class="org.apache.axis2.transport.local.NonBlockingLocalTransportSender"/-->
+ 
+    <transportSender name="jms" class="org.apache.axis2.transport.jms.JMSSender">
+        <!-- uncomment this and configure to use connection pools for sending messages
+        <parameter name="myTopicConnectionFactory">
+            <parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+            <parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+            <parameter name="transport.jms.ConnectionFactoryJNDIName">TopicConnectionFactory</parameter>
+        </parameter>
+    
+        <parameter name="myQueueConnectionFactory">
+            <parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+            <parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+            <parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+        </parameter>
+    
+        <parameter name="default">
+            <parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+            <parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+            <parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter> 
+        </parameter> -->
+    </transportSender>
+    
+    <!--transportSender name="vfs" class="org.apache.synapse.transport.vfs.VFSTransportSender"/-->
+
+    <!-- Uncomment and configure the SMTP server information
+    check com.sun.mail.smtp package documentation for descriptions of properties
+    <transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
+        <parameter name="mail.smtp.host">smtp.gmail.com</parameter>
+        <parameter name="mail.smtp.port">587</parameter>
+        <parameter name="mail.smtp.starttls.enable">true</parameter>
+        <parameter name="mail.smtp.auth">true</parameter>
+        <parameter name="mail.smtp.user">synapse.demo.0</parameter>
+        <parameter name="mail.smtp.password">mailpassword</parameter>
+        <parameter name="mail.smtp.from">synapse.demo.0@gmail.com</parameter>
+    </transportSender>-->
+
+    <!--Uncomment this for FIX transport support
+    <transportSender name="fix" class="org.apache.synapse.transport.fix.FIXTransportSender">
+	    <parameter name="non-blocking">true</parameter>
+    </transportSender>-->
+
+    <!--Uncomment this for TCP transport support
+    <transportSender name="tcp" class="org.apache.axis2.transport.tcp.TCPTransportSender"/>-->
+
+    <!--Uncomment this for UDP transport support
+    <transportSender name="udp" class="org.apache.axis2.transport.udp.UDPSender"/>-->
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!--                  Clustering                       -->
+    <!-- ================================================= -->
+    <!-- Configure the following for preparing Synapse to a clustered environment -->
+    <cluster class="org.apache.axis2.clustering.tribes.TribesClusterManager" enable="false">
+
+        <!--
+           This parameter indicates whther the cluster has to be automatically initalized
+           when the AxisConfiguration is built. If set to "true" the initialization will not be
+           done at that stage, and some other party will have to explictly initialize the cluster.
+        -->
+        <parameter name="AvoidInitiation">false</parameter>
+
+        <!--
+           The membership scheme used in this setup. The only values supported at the moment are
+           "multicast" and "wka"
+
+           1. multicast - membership is automatically discovered using multicasting
+           2. wka - Well-Known Address based multicasting. Membership is discovered with the help
+                    of one or more nodes running at a Well-Known Address. New members joining a
+                    cluster will first connect to a well-known node, register with the well-known node
+                    and get the membership list from it. When new members join, one of the well-known
+                    nodes will notify the others in the group. When a member leaves the cluster or
+                    is deemed to have left the cluster, it will be detected by the Group Membership
+                    Service (GMS) using a TCP ping mechanism.
+        -->
+        <parameter name="membershipScheme">multicast</parameter>
+
+        <!--
+         The clustering domain/group. Nodes in the same group will belong to the same multicast
+         domain. There will not be interference between nodes in different groups.
+        -->
+        <parameter name="domain">apache.synapse.domain</parameter>
+
+        <!--
+           When a Web service request is received, and processed, before the response is sent to the
+           client, should we update the states of all members in the cluster? If the value of
+           this parameter is set to "true", the response to the client will be sent only after
+           all the members have been updated. Obviously, this can be time consuming. In some cases,
+           such this overhead may not be acceptable, in which case the value of this parameter
+           should be set to "false"
+        -->
+        <parameter name="synchronizeAll">true</parameter>
+
+        <!--
+          The maximum number of times we need to retry to send a message to a particular node
+          before giving up and considering that node to be faulty
+        -->
+        <parameter name="maxRetries">10</parameter>
+
+        <!-- The multicast address to be used -->
+        <parameter name="mcastAddress">228.0.0.4</parameter>
+
+        <!-- The multicast port to be used -->
+        <parameter name="mcastPort">45564</parameter>
+
+        <!-- The frequency of sending membership multicast messages (in ms) -->
+        <parameter name="mcastFrequency">500</parameter>
+
+        <!-- The time interval within which if a member does not respond, the member will be
+         deemed to have left the group (in ms)
+         -->
+        <parameter name="memberDropTime">3000</parameter>
+
+        <!--
+           The IP address of the network interface to which the multicasting has to be bound to.
+           Multicasting would be done using this interface.
+        -->
+        <parameter name="mcastBindAddress">127.0.0.1</parameter>
+
+        <!-- The host name or IP address of this member -->
+        <parameter name="localMemberHost">127.0.0.1</parameter>
+
+        <!--
+        The TCP port used by this member. This is the port through which other nodes will
+        contact this member
+         -->
+        <parameter name="localMemberPort">4000</parameter>
+
+        <!--
+           The list of static or well-known members. These entries will only be valid if the
+           "membershipScheme" above is set to "wka"
+        -->
+        <members>
+            <member>
+                <hostName>127.0.0.1</hostName>
+                <port>4000</port>
+            </member>
+            <member>
+                <hostName>127.0.0.1</hostName>
+                <port>4001</port>
+            </member>
+        </members>
+
+        <!--
+        Enable the load balancer entry if you need to run this node as a load balancer.
+        Multiple application domains with different LoadBalanceEventHandler implementations
+        can be defined in this section.
+        -->
+        <loadBalancer enable="false">
+            <applicationDomain name="apache.axis2.app.domain"
+                               handler="org.apache.axis2.clustering.DefaultLoadBalanceEventHandler"/>
+        </loadBalancer>
+            
+        <!--
+           This interface is responsible for handling context replication. The property changes in
+           the Axis2 context hierarchy in this node, are propagated to all other nodes in the cluster.
+
+           The "excludes" patterns can be used to specify the prefixes (e.g. local_*) or
+           suffixes (e.g. *_local) of the properties to be excluded from replication. The pattern
+           "*" indicates that all properties in a particular context should not be replicated.
+
+            The "enable" attribute indicates whether context replication has been enabled
+        -->
+        <contextManager class="org.apache.axis2.clustering.context.DefaultContextManager"
+                         enable="false">
+            <listener class="org.apache.axis2.clustering.context.DefaultContextManagerListener"/>
+            <replication>
+                <defaults>
+                    <exclude name="local_*"/>
+                    <exclude name="LOCAL_*"/>
+                </defaults>
+                <context class="org.apache.axis2.context.ConfigurationContext">
+                    <exclude name="UseAsyncOperations"/>
+                    <exclude name="SequencePropertyBeanMap"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceGroupContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+                <context class="org.apache.axis2.context.ServiceContext">
+                    <exclude name="my.sandesha.*"/>
+                </context>
+            </replication>
+        </contextManager>
+    </cluster>
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="CustomURIBasedDispatcher"
+                     class="org.apache.synapse.core.axis2.CustomURIBasedDispatcher"/>
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_def.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_def.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_def.xml	(revision 1211407)
@@ -0,0 +1,334 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+
+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false
+            on production environments, unless you really want to use hot deployment in production -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">true</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <parameter name="contextRoot">/</parameter>
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath">services</parameter>
+    <parameter name="restPath">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!-- Extension deployer
+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->
+    <!--<deployer extension="xar" directory="extensions" class="org.apache.synapse.deployers.ExtensionDeployer"/>-->
+
+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production
+                unless you really want to use hot deployment/update -->
+    <deployer extension="xml" directory="conf/synapse-config/sequences" class="org.apache.synapse.deployers.SequenceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/endpoints" class="org.apache.synapse.deployers.EndpointDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/local-entries" class="org.apache.synapse.deployers.LocalEntryDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/proxy-services" class="org.apache.synapse.deployers.ProxyServiceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/event-sources" class="org.apache.synapse.deployers.EventSourceDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/tasks" class="org.apache.synapse.deployers.TaskDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/priority-executors" class="org.apache.synapse.deployers.PriorityExecutorDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/templates" class="org.apache.synapse.deployers.TemplateDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-stores" class="org.apache.synapse.deployers.MessageStoreDeployer"/>
+    <deployer extension="xml" directory="conf/synapse-config/message-processors" class="org.apache.synapse.deployers.MessageProcessorDeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+        <!--<messageFormatter contentType="x-application/hessian"
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType=""
+                         class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>-->
+        <!--<messageFormatter contentType="application/json"
+                         class="org.apache.axis2.json.JSONMessageFormatter"/>-->
+
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->
+    <transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
+    	<parameter name="port">8280</parameter>
+    	<parameter name="non-blocking">true</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
+        <!-- paramter name="priorityConfigFile" locked="false">location of priority configuration file<parameter-->
+    </transportReceiver>
+
+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
+    <transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
+    	<parameter name="port" locked="false">8243</parameter>
+        <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
+        <!--parameter name="WSDLEPRPrefix" locked="false">http://apachehost:port/somepath</parameter-->
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="SSLVerifyClient">require</parameter>
+            supports optional|require or defaults to none -->
+    </transportReceiver>       
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="http"  class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <!--parameter name="http.proxyHost" locked="false">localhost</parameter>
+        <parameter name="http.proxyPort" locked="false">3128</parameter>
+        <parameter name="http.nonProxyHosts" locked="false">localhost|moon|sun</parameter-->
+    </transportSender>
+    <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
+        <parameter name="non-blocking" locked="false">true</parameter>
+        <parameter name="warnOnHTTP500" locked="false">*</parameter>
+        <parameter name="keystore" locked="false">
+            <KeyStore>
+                <Location>modules/integration/src/test/resources/identity.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+                <KeyPassword>password</KeyPassword>
+            </KeyStore>
+        </parameter>
+        <parameter name="truststore" locked="false">
+            <TrustStore>
+                <Location>modules/integration/src/test/resources/trust.jks</Location>
+                <Type>JKS</Type>
+                <Password>password</Password>
+            </TrustStore>
+        </parameter>
+        <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>
+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
+    </transportSender>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="CustomURIBasedDispatcher"
+                     class="org.apache.synapse.core.axis2.CustomURIBasedDispatcher"/>
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_tcp.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_tcp.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_tcp.xml	(revision 1211407)
@@ -0,0 +1,315 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <!--<parameter name="contextRoot">axis2</parameter>-->
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath" locked="false">services</parameter>
+    <parameter name="restPath" locked="false">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->
+    <deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+	<transportReceiver name="http"
+                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port">8200</parameter>
+        <!-- Here is the complete list of supported parameters (see example settings further below):
+            port: the port to listen on (default 6060)
+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)
+            originServer:  value of http Server header in outgoing messages                                         (default "Simple-Server/1.1")
+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
+                                false to minimize bandwidth consumption by combining segments
+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)
+                                       note that default queue never fills up:  see HttpFactory
+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
+                                  note that no such threads can exist with default unbounded request queue
+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
+        -->
+        <!-- <parameter name="hostname">http://www.myApp.com/ws</parameter> -->
+        <!-- <parameter name="originServer">My-Server/1.1</parameter>           -->
+        <!-- <parameter name="requestTimeout">10000</parameter>                   -->
+        <!-- <parameter name="requestTcpNoDelay">false</parameter>                   -->
+        <!-- <parameter name="requestCoreThreadPoolSize">50</parameter>                      -->
+        <!-- <parameter name="RequestMaxThreadPoolSize">100</parameter>                     -->
+        <!-- <parameter name="threadKeepAliveTime">240000</parameter>                  -->
+        <!-- <parameter name="threadKeepAliveTimeUnit">MILLISECONDS</parameter>            -->
+    </transportReceiver>
+
+    <transportReceiver name="tcp"
+                       class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port">6060</parameter>
+    </transportReceiver>
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <transportSender name="tcp"
+                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+    <!--transportSender name="udp"
+                     class="org.apache.axis2.transport.udp.UDPSender"/-->
+    <!--transportSender name="local"
+                     class="org.apache.axis2.transport.local.LocalTransportSender"/ -->
+	<transportSender name="http"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+
+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->
+        <!--  <parameter name="OmitSOAP12Action">true</parameter>  -->
+    </transportSender>
+
+    <transportSender name="https"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+    </transportSender>
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Clustering  -->
+    <!-- ================================================= -->
+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->
+    <!--
+    <cluster class="org.apache.axis2.cluster.tribes.TribesClusterManager">
+        <parameter name="param1">value1</parameter>
+        <parameter name="domain">apache.axis2.domain</parameter>
+    	<configurationManager class="org.apache.axis2.cluster.configuration.TribesConfigurationManager">
+    	    <listener class="org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener"/>
+    	</configurationManager>
+    	<contextManager class="org.apache.axis2.cluster.context.TribesContextManager">
+    	    <listener class="org.apache.axis2.cluster.context.DefaultContextManagerListener"/>
+    	</contextManager>
+    </cluster>
+     -->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_jms.xml
===================================================================
--- java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_jms.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_jms.xml	(revision 1211407)
@@ -0,0 +1,355 @@
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<axisconfig name="AxisJava2.0">
+    <!-- ================================================= -->
+    <!-- Parameters -->
+    <!-- ================================================= -->
+    <parameter name="hotdeployment">true</parameter>
+    <parameter name="hotupdate">false</parameter>
+    <parameter name="enableMTOM">false</parameter>
+    <parameter name="enableSwA">false</parameter>
+
+    <!--Uncomment if you want to enable file caching for attachments -->
+    <!--parameter name="cacheAttachments">true</parameter>
+    <parameter name="attachmentDIR"></parameter>
+    <parameter name="sizeThreshold">4000</parameter-->
+
+    <!--This will give out the timout of the configuration contexts, in milliseconds-->
+    <parameter name="ConfigContextTimeoutInterval">30000</parameter>
+
+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
+    <!--that behavior.-->
+    <parameter name="sendStacktraceDetailsWithFaults">false</parameter>
+
+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
+    <parameter name="DrillDownToRootCauseForFaultReason">false</parameter>
+
+    <parameter name="userName">admin</parameter>
+    <parameter name="password">axis2</parameter>
+
+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
+    <!--ServicesDirectory only works on the following cases-->
+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
+    <!---When creating URL Based configurator with URL "file://"  -->
+    <!--- War based configurator with expanded case , -->
+
+    <!--All the other scenarios it will be ignored.-->
+    <!--<parameter name="ServicesDirectory">service</parameter>-->
+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
+    <!--<parameter name="ModulesDirectory">modules</parameter>-->
+
+
+
+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
+    <!--root which can configured using the following contextRoot parameter-->
+    <!--<parameter name="contextRoot">axis2</parameter>-->
+
+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
+    <!--context path to proper Axis2 servlets-->
+    <parameter name="servicePath" locked="false">services</parameter>
+    <parameter name="restPath" locked="false">rest</parameter>
+
+    <!-- Following parameter will completely disable REST handling in Axis2-->
+    <parameter name="disableREST" locked="true">false</parameter>
+
+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->
+    <deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
+
+    <!-- Following parameter will set the host name for the epr-->
+    <!--<parameter name="hostname" locked="true">myhost.com</parameter>-->
+
+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
+    <!-- use this parameter to override autodetected url -->
+    <!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->
+
+
+    <!--    The way of adding listener to the system-->
+    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
+    <!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
+    <!--    </listener>-->
+
+    <!-- ================================================= -->
+    <!-- Message Receivers -->
+    <!-- ================================================= -->
+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
+    <!--any operation -->
+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
+    <messageReceivers>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
+                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
+        <messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
+                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
+    </messageReceivers>
+
+    <!-- ================================================= -->
+    <!-- Message Formatter -->
+    <!-- ================================================= -->
+    <!--Following content type to message formatter mapping can be used to implement support for different message -->
+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageFormatters>
+        <messageFormatter contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
+        <messageFormatter contentType="multipart/form-data"
+                         class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
+        <messageFormatter contentType="application/xml"
+                         class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
+    </messageFormatters>
+
+    <!-- ================================================= -->
+    <!-- Message Builders -->
+    <!-- ================================================= -->
+    <!--Following content type to builder mapping can be used to implement support for different message -->
+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
+    <messageBuilders>
+        <messageBuilder contentType="application/xml"
+                         class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
+        <messageBuilder contentType="application/x-www-form-urlencoded"
+                         class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
+        <messageBuilder contentType="multipart/form-data"
+                         class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
+    </messageBuilders>
+
+    <!-- ================================================= -->
+    <!-- Transport Ins -->
+    <!-- ================================================= -->
+	<transportReceiver name="http"
+                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
+        <parameter name="port">8200</parameter>
+        <!-- Here is the complete list of supported parameters (see example settings further below):
+            port: the port to listen on (default 6060)
+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)
+            originServer:  value of http Server header in outgoing messages                                         (default "Simple-Server/1.1")
+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
+                                false to minimize bandwidth consumption by combining segments
+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)
+                                       note that default queue never fills up:  see HttpFactory
+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
+                                  note that no such threads can exist with default unbounded request queue
+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
+        -->
+        <!-- <parameter name="hostname">http://www.myApp.com/ws</parameter> -->
+        <!-- <parameter name="originServer">My-Server/1.1</parameter>           -->
+        <!-- <parameter name="requestTimeout">10000</parameter>                   -->
+        <!-- <parameter name="requestTcpNoDelay">false</parameter>                   -->
+        <!-- <parameter name="requestCoreThreadPoolSize">50</parameter>                      -->
+        <!-- <parameter name="RequestMaxThreadPoolSize">100</parameter>                     -->
+        <!-- <parameter name="threadKeepAliveTime">240000</parameter>                  -->
+        <!-- <parameter name="threadKeepAliveTimeUnit">MILLISECONDS</parameter>            -->
+    </transportReceiver>
+
+    <!--transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
+        <parameter name="myTopicConnectionFactory">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">TopicConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">topic</parameter>
+        </parameter>
+
+        <parameter name="myQueueConnectionFactory">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
+        </parameter>
+
+        <parameter name="default">
+        	<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
+        	<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
+        	<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
+		<parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
+        </parameter>
+    </transportReceiver-->
+
+    <!--transportReceiver name="mailto" class="org.apache.axis2.transport.mail.MailTransportListener">
+    </transportReceiver-->
+
+    <!--transportReceiver name="tcp"
+                       class="org.apache.axis2.transport.tcp.TCPServer">
+        <parameter name="port">6060</parameter>
+    </transportReceiver-->
+
+    <!-- ================================================= -->
+    <!-- Transport Outs -->
+    <!-- ================================================= -->
+
+    <!--transportSender name="tcp"
+                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
+    <transportSender name="udp"
+                     class="org.apache.axis2.transport.udp.UDPSender"/-->
+    <!--transportSender name="local"
+                     class="org.apache.axis2.transport.local.LocalTransportSender"/ -->
+	<transportSender name="http"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+
+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->
+        <!--  <parameter name="OmitSOAP12Action">true</parameter>  -->
+    </transportSender>
+
+    <transportSender name="https"
+                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
+        <parameter name="PROTOCOL">HTTP/1.1</parameter>
+        <parameter name="Transfer-Encoding">chunked</parameter>
+    </transportSender>
+    <transportSender name="jms"
+                     class="org.apache.axis2.transport.jms.JMSSender"/>
+
+    <!-- configure the SMTP server information
+    check com.sun.mail.smtp package documentation for descriptions of properties-->
+    <!--transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
+        <parameter name="mail.smtp.host">smtp.gmail.com</parameter>
+        <parameter name="mail.smtp.port">587</parameter>
+        <parameter name="mail.smtp.starttls.enable">true</parameter>
+        <parameter name="mail.smtp.auth">true</parameter>
+        <parameter name="mail.smtp.user">synapse.demo.0</parameter>
+        <parameter name="mail.smtp.password">mailpassword</parameter>
+        <parameter name="mail.smtp.from">synapse.demo.0@gmail.com</parameter>
+    </transportSender-->
+
+    <!-- ================================================= -->
+    <!-- Global Modules  -->
+    <!-- ================================================= -->
+    <!-- Comment this to disable Addressing -->
+    <module ref="addressing"/>
+
+    <!--Configuring module , providing parameters for modules whether they refer or not-->
+    <!--<moduleConfig name="addressing">-->
+    <!--<parameter name="addressingPara">N/A</parameter>-->
+    <!--</moduleConfig>-->
+
+    <!-- ================================================= -->
+    <!-- Clustering  -->
+    <!-- ================================================= -->
+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->
+    <!--
+    <cluster class="org.apache.axis2.cluster.tribes.TribesClusterManager">
+        <parameter name="param1">value1</parameter>
+        <parameter name="domain">apache.axis2.domain</parameter>
+    	<configurationManager class="org.apache.axis2.cluster.configuration.TribesConfigurationManager">
+    	    <listener class="org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener"/>
+    	</configurationManager>
+    	<contextManager class="org.apache.axis2.cluster.context.TribesContextManager">
+    	    <listener class="org.apache.axis2.cluster.context.DefaultContextManagerListener"/>
+    	</contextManager>
+    </cluster>
+     -->
+
+    <!-- ================================================= -->
+    <!-- Phases  -->
+    <!-- ================================================= -->
+    <phaseOrder type="InFlow">
+        <!--  System pre defined phases       -->
+        <phase name="Transport">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
+                <order phase="Transport"/>
+            </handler>
+        </phase>
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--  System predefined phases       -->
+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->
+        <phase name="OperationInPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutPhase"/>
+        <!--system predefined phase-->
+        <!--these phase will run irrespective of the service-->
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+    <phaseOrder type="InFaultFlow">
+        <phase name="Addressing">
+             <handler name="AddressingBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
+                 <order phase="Addressing"/>
+            </handler>
+        </phase>
+        <phase name="Security"/>
+        <phase name="PreDispatch"/>
+        <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
+            <handler name="RequestURIBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
+            <handler name="SOAPActionBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
+            <handler name="RequestURIOperationDispatcher"
+                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
+            <handler name="SOAPMessageBodyBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>
+
+            <handler name="HTTPLocationBasedDispatcher"
+                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
+        </phase>
+        <phase name="RMPhase"/>
+        <!--      user can add his own phases to this area  -->
+        <phase name="OperationInFaultPhase"/>
+        <phase name="soapmonitorPhase"/>
+    </phaseOrder>
+    <phaseOrder type="OutFaultFlow">
+        <!--      user can add his own phases to this area  -->
+        <phase name="soapmonitorPhase"/>
+        <phase name="OperationOutFaultPhase"/>
+        <phase name="RMPhase"/>
+        <phase name="PolicyDetermination"/>
+        <phase name="MessageOut"/>
+        <phase name="Security"/>
+    </phaseOrder>
+</axisconfig>
Index: java/modules/integration/src/test/resources/sample7.xml
===================================================================
--- java/modules/integration/src/test/resources/sample7.xml	(nonexistent)
+++ java/modules/integration/src/test/resources/sample7.xml	(revision 1211407)
@@ -0,0 +1,18 @@
+<synapseSample>
+    <sampleID>7</sampleID>
+    <sampleName>Introduction to local Registry entries and using Schema validation</sampleName>
+    <synapseConfig>
+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>
+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>
+        <synapseXml>repository/conf/sample/synapse_sample_7.xml</synapseXml>
+    </synapseConfig>
+    <backEndServerConfig>
+        <axis2Server id='0'>
+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>
+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>
+        </axis2Server>
+    </backEndServerConfig>
+    <clientConfig>
+	<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>
+    </clientConfig>
+</synapseSample>
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java	(revision 1211407)
@@ -0,0 +1,173 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ *  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.synapse.samples.framework;
+
+import junit.framework.TestSuite;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.tests.message.*;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/*
+ * This is executed by maven and handles which samples to run
+ */
+public class TestSamplesHandlerSuite extends TestSuite {
+
+    private static final Log log = LogFactory.getLog(TestSamplesHandlerSuite.class);
+    private static HashMap<String, Object> sampleClassRepo
+            = new HashMap<String, Object>();
+
+    public static TestSuite suite() {
+
+        //Adding all samples available
+        populateSamplesMap();
+
+        ArrayList<Class> suiteClassesList = new ArrayList<Class>();
+        TestSuite suite = new TestSuite();
+
+        String inputSuiteName = System.getProperty("suite");
+        String tests = System.getProperty("tests");
+        String suiteName = "SamplesSuite";
+
+        //preparing suites, if specified
+        if (inputSuiteName != null) {
+            if (inputSuiteName.equalsIgnoreCase("message")) {
+                suiteName = "MessageMediationSamplesSuite";
+                for (int i = 0; i <= 15; i++) {
+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                    if (testClass != null) {
+                        suiteClassesList.add(testClass);
+                    }
+                }
+            }
+            if (inputSuiteName.equalsIgnoreCase("endpoint")) {
+                suiteName = "EndpointSamplesSuite";
+                for (int i = 50; i <= 60; i++) {
+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                    if (testClass != null) {
+                        suiteClassesList.add(testClass);
+                    }
+                }
+            }
+            if (inputSuiteName.equalsIgnoreCase("qos")) {
+                suiteName = "QoSSamplesSuite";
+                for (int i = 100; i <= 110; i++) {
+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                    if (testClass != null) {
+                        suiteClassesList.add(testClass);
+                    }
+                }
+            }
+            if (inputSuiteName.equalsIgnoreCase("proxy")) {
+                suiteName = "ProxySamplesSuite";
+                for (int i = 150; i <= 170; i++) {
+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                    if (testClass != null) {
+                        suiteClassesList.add(testClass);
+                    }
+                }
+            }
+            if (inputSuiteName.equalsIgnoreCase("transport")) {
+                suiteName = "TransportSamplesSuite";
+                for (int i = 250; i <= 280; i++) {
+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                    if (testClass != null) {
+                        suiteClassesList.add(testClass);
+                    }
+                }
+            }
+            if (inputSuiteName.equalsIgnoreCase("tasks")) {
+                suiteName = "TasksSamplesSuite";
+                for (int i = 300; i <= 310; i++) {
+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                    if (testClass != null) {
+                        suiteClassesList.add(testClass);
+                    }
+                }
+            }
+            if (inputSuiteName.equalsIgnoreCase("advanced")) {
+                suiteName = "AdvancedSamplesSuite";
+                for (int i = 350; i <= 490; i++) {
+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                    if (testClass != null) {
+                        suiteClassesList.add(testClass);
+                    }
+                }
+            }
+            if (inputSuiteName.equalsIgnoreCase("eventing")) {
+                suiteName = "EventingSamplesSuite";
+                for (int i = 500; i <= 510; i++) {
+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                    if (testClass != null) {
+                        suiteClassesList.add(testClass);
+                    }
+                }
+            }
+        } else if (tests != null) {
+            String[] testArray = tests.split(",");
+            suiteName = "SelectedSamplesSuite";
+            for (String testNum : testArray) {
+                Class testClass = (Class) sampleClassRepo.get(testNum);
+                if (testClass != null) {
+                    suiteClassesList.add(testClass);
+                }
+            }
+        } else {
+            suiteName = "AllSamplesSuite";
+            for (int i = 0; i <= 600; i++) {
+                Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));
+                if (testClass != null) {
+                    suiteClassesList.add(testClass);
+                }
+            }
+        }
+
+        for (Class testClass : suiteClassesList) {
+            suite.addTestSuite(testClass);
+            log.info("Adding Sample:" + testClass);
+        }
+        suite.setName(suiteName);
+
+        return suite;
+    }
+
+    private static void populateSamplesMap() {
+
+        //Message Mediation
+        sampleClassRepo.put("0", Sample0.class);
+        sampleClassRepo.put("1", Sample1.class);
+        sampleClassRepo.put("2", Sample2.class);
+        sampleClassRepo.put("3", Sample3.class);
+        sampleClassRepo.put("4", Sample4.class);
+        sampleClassRepo.put("5", Sample5.class);
+        sampleClassRepo.put("6", Sample6.class);
+        sampleClassRepo.put("7", Sample7.class);
+        sampleClassRepo.put("8", Sample8.class);
+        sampleClassRepo.put("9", Sample9.class);
+        sampleClassRepo.put("10", Sample10.class);
+        sampleClassRepo.put("11", Sample11.class);
+        sampleClassRepo.put("12", Sample12.class);
+        sampleClassRepo.put("13", Sample13.class);
+        sampleClassRepo.put("15", Sample15.class);
+        sampleClassRepo.put("16", Sample16.class);
+    }
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java	(revision 1211407)
@@ -0,0 +1,103 @@
+package org.apache.synapse.samples.framework;
+
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.derby.drda.NetworkServerControl;
+
+import java.io.File;
+import java.net.InetAddress;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+/**
+ * Responsible for starting up and shutting down
+ * a derby server instance in order to run a sample test.
+ */
+public class DerbyServerController implements BackEndServerController {
+
+    private static final Log log = LogFactory.getLog(DerbyServerController.class);
+
+    private String serverName;
+    private SampleConfiguration.DerbyServerSampleConfiguration configuration;
+    private NetworkServerControl server;
+
+    public DerbyServerController(String serverName,
+                                 SampleConfiguration.DerbyServerSampleConfiguration configuration) {
+        this.serverName = serverName;
+        this.configuration = configuration;
+    }
+
+    public String getServerName() {
+        return serverName;
+    }
+
+    public boolean start() {
+        log.info("Preparing to start Derby server: " + serverName);
+        try {
+            //server
+            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
+            server = new NetworkServerControl
+                    (InetAddress.getByName("localhost"), 1527);
+            server.start(null);
+            log.info("Derby is successfully started.");
+
+        } catch (Exception e) {
+            log.warn("There was an error starting Derby server: " + serverName, e);
+            return false;
+        }
+
+        //client
+        String dbName = "synapsedb";
+        String createTableQuery = "CREATE table company(name varchar(10), id varchar(10), price double)";
+        String connectionURL = "jdbc:derby://localhost:1527/" + dbName + ";create=true";
+
+        java.util.Properties props = new java.util.Properties();
+        props.put("user", "synapse");
+        props.put("password", "synapse");
+        props.put("create", "true");
+
+        try {
+            // on JDK 1.6 or higher, EmbeddedDriver get loaded automatically.
+            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
+
+            log.info("Creating the sample database and connecting to server");
+            Connection conn = DriverManager.getConnection(connectionURL, props);
+
+            Statement s = conn.createStatement();
+            log.info("Creating the sample table and inserting values");
+            s.execute(createTableQuery);
+            s.execute("INSERT into company values ('IBM','c1',0.0)");
+            s.execute(" INSERT into company values ('SUN','c2',0.0)");
+            s.execute(" INSERT into company values ('MSFT','c3',0.0)");
+            conn.commit();
+            return true;
+        } catch (Exception e) {
+            log.error("Error executing SQL queries", e);
+            return false;
+        }
+    }
+
+    public boolean stop() {
+        log.info("Shutting down Derby server...");
+        try {
+            try {
+                DriverManager.getConnection("jdbc:derby:;shutdown=true");
+            } catch (SQLException se) {
+                if (se.getErrorCode() == 50000 && "XJ015".equals(se.getSQLState())) {
+                    // we got the expected exception
+                    log.info("Derby shut down normally");
+                }
+            }
+            server.shutdown();
+            FileUtils.deleteDirectory(new File("./synapsedb"));
+            return true;
+
+        } catch (Exception e) {
+            log.warn("Error while trying to delete database directory", e);
+            return false;
+        }
+    }
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/EventSampleClient.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/EventSampleClient.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/EventSampleClient.java	(revision 1211407)
@@ -0,0 +1,363 @@
+/*
+*  Licensed to the Apache Software Foundation (ASF) under one
+*  or more contributor license agreements.  See the NOTICE file
+*  distributed with this work for additional information
+*  regarding copyright ownership.  The ASF licenses this file
+*  to you under the Apache License, Version 2.0 (the
+*  "License"); you may not use this file except in compliance
+*  with the License.  You may obtain a copy of the License at
+*
+*   http://www.apache.org/licenses/LICENSE-2.0
+*
+*  Unless required by applicable law or agreed to in writing,
+*  software distributed under the License is distributed on an
+*   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+*  KIND, either express or implied.  See the License for the
+*  specific language governing permissions and limitations
+*  under the License.
+*/
+
+package org.apache.synapse.samples.framework.clients;
+
+import org.apache.axiom.om.OMAbstractFactory;
+import org.apache.axiom.om.OMElement;
+import org.apache.axiom.om.OMFactory;
+import org.apache.axiom.om.OMNamespace;
+import org.apache.axiom.om.util.AXIOMUtil;
+import org.apache.axis2.addressing.EndpointReference;
+import org.apache.axis2.client.Options;
+import org.apache.axis2.client.ServiceClient;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.context.MessageContext;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SampleConfiguration;
+
+import javax.xml.namespace.QName;
+
+
+public class EventSampleClient {
+
+    private static final Log log = LogFactory.getLog(EventSampleClient.class);
+
+    private Options options;
+    private ServiceClient serviceClient;
+    private SampleClientResult clientResult;
+    private SampleConfiguration.ClientSampleConfiguration configuration;
+    private OMFactory factory;
+    private OMElement message;
+    private OMNamespace schemaNamespace;
+    private OMNamespace nss11;
+    private OMNamespace addressingNamespace;
+    private OMNamespace eventingNamespace;
+
+    public EventSampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {
+        this.configuration = configuration;
+        factory = OMAbstractFactory.getOMFactory();
+        schemaNamespace = factory.createOMNamespace("http://www.w3.org/2001/XMLSchema", "xmlns");
+        nss11 =
+                factory.createOMNamespace("http://schemas.xmlsoap.org/soap/envelope", "s11");
+        addressingNamespace = factory.createOMNamespace(
+                "http://schemas.xmlsoap.org/ws/2004/08/addressing", "wsa");
+        eventingNamespace =
+                factory.createOMNamespace("http://schemas.xmlsoap.org/ws/2004/08/eventing", "wse");
+    }
+
+    private void initializeClient(String addUrl) throws Exception {
+        options = new Options();
+        clientResult = new SampleClientResult();
+        clientResult.setGotResponse(false);
+
+        ConfigurationContext configContext;
+        configContext = ConfigurationContextFactory.
+                createConfigurationContextFromFileSystem(configuration.getClientRepo(),
+                        configuration.getAxis2Xml());
+        serviceClient = new ServiceClient(configContext, null);
+
+        if (addUrl != null && !"null".equals(addUrl)) {
+            serviceClient.engageModule("addressing");
+            options.setTo(new EndpointReference(addUrl));
+        }
+        serviceClient.setOptions(options);
+
+        message = factory.createOMElement("message", null);
+    }
+
+    private void deInitializeClient() {
+        try {
+            if (serviceClient != null) {
+                serviceClient.cleanup();
+            }
+        } catch (Exception ignore) {
+        }
+    }
+
+    public SampleClientResult subscribe(String addUrl, String address, String expires, String topic) {
+        OMElement subscribeOm = factory.createOMElement("Subscribe", eventingNamespace);
+        OMElement deliveryOm = factory.createOMElement("Delivery", eventingNamespace);
+        deliveryOm.addAttribute(factory.createOMAttribute("Mode", null,
+                "http://schemas.xmlsoap.org/ws/2004/08/eventing/DeliveryModes/Push"));
+        OMElement notifyToOm = factory.createOMElement("NotifyTo", eventingNamespace);
+        OMElement addressOm = factory.createOMElement("Address", addressingNamespace);
+        factory.createOMText(addressOm, address);
+        OMElement expiresOm = factory.createOMElement("Expires", eventingNamespace);
+        factory.createOMText(expiresOm, expires);
+        OMElement filterOm = factory.createOMElement("Filter", eventingNamespace);
+        filterOm.addAttribute(factory.createOMAttribute("Dialect", null,
+                "http://synapse.apache.org/eventing/dialect/topicFilter"));
+        factory.createOMText(filterOm, topic);
+
+
+        notifyToOm.addChild(addressOm);
+        deliveryOm.addChild(notifyToOm);
+        subscribeOm.addChild(deliveryOm);
+        if (!(expires.equals("*"))) {
+            subscribeOm.addChild(expiresOm); // Add only if the value provided
+        }
+        subscribeOm.addChild(filterOm);
+
+
+        log.info("Subscribing: " + subscribeOm.toString());
+        try {
+            initializeClient(addUrl);
+            options.setAction("http://schemas.xmlsoap.org/ws/2004/08/eventing/Subscribe");
+
+            OMElement response = serviceClient.sendReceive(subscribeOm);
+            log.info("Subscribed to topic " + topic);
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException e) {
+
+            }
+            log.info("Response Received: " + response.toString());
+            String subId =
+                    response.getFirstChildWithName(
+                            new QName(eventingNamespace.getNamespaceURI(), "SubscriptionManager"))
+                            .getFirstChildWithName(
+                                    new QName(addressingNamespace.getNamespaceURI(), "ReferenceParameters"))
+                            .getFirstChildWithName(
+                                    new QName(eventingNamespace.getNamespaceURI(), "Identifier")).getText();
+            log.info("Subscription identifier: " + subId);
+            clientResult.addProperty("subId", subId);
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Fault Received : " + e.toString(), e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+        return clientResult;
+
+    }
+
+
+    public SampleClientResult unsubscribe(String addUrl, String identifier) {
+        /** Send unsubscribe message
+         (01) <s12:Envelope
+         (02)     xmlns:s12="http://www.w3.org/2003/05/soap-envelope"
+         (03)     xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
+         (04)     xmlns:wse="http://schemas.xmlsoap.org/ws/2004/08/eventing"
+         (05)     xmlns:ow="http://www.example.org/oceanwatch" >
+         (06)   <s12:Header>
+         (07)     <wsa:Action>
+         (08)       http://schemas.xmlsoap.org/ws/2004/08/eventing/Unsubscribe
+         (09)     </wsa:Action>
+         (10)     <wsa:MessageID>
+         (11)       uuid:2653f89f-25bc-4c2a-a7c4-620504f6b216
+         (12)     </wsa:MessageID>
+         (13)     <wsa:ReplyTo>
+         (14)      <wsa:Address>http://www.example.com/MyEventSink</wsa:Address>
+         (15)     </wsa:ReplyTo>
+         (16)     <wsa:To>
+         (17)       http://www.example.org/oceanwatch/SubscriptionManager
+         (18)     </wsa:To>
+         (19)     <wse:Identifier>
+         (20)       uuid:22e8a584-0d18-4228-b2a8-3716fa2097fa
+         (21)     </wse:Identifier>
+         (22)   </s12:Header>
+         (23)   <s12:Body>
+         (24)     <wse:Unsubscribe />
+         (25)   </s12:Body>
+         (26) </s12:Envelope>*/
+        OMElement subscribeOm = factory.createOMElement("Unsubscribe", eventingNamespace);
+
+        log.info("UnSubscribing: " + subscribeOm.toString());
+        try {
+            initializeClient(addUrl);
+            options.setAction("http://schemas.xmlsoap.org/ws/2004/08/eventing/Unsubscribe");
+
+            OMElement identifierOm = factory.createOMElement("Identifier", eventingNamespace);
+            factory.createOMText(identifierOm, identifier);
+            serviceClient.addHeader(identifierOm);
+            OMElement response = serviceClient.sendReceive(subscribeOm);
+            log.info("UnSubscribed to ID " + identifier);
+            Thread.sleep(1000);
+            log.info("UnSubscribe Response Received: " + response.toString());
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Fault Received : " + e.toString(), e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+        return clientResult;
+    }
+
+    public SampleClientResult renew(String addUrl, String expires, String identifier) {
+        /**
+         * (01) <s12:Envelope
+         (02)     xmlns:s12="http://www.w3.org/2003/05/soap-envelope"
+         (03)     xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
+         (04)     xmlns:wse="http://schemas.xmlsoap.org/ws/2004/08/eventing"
+         (05)     xmlns:ow="http://www.example.org/oceanwatch" >
+         (06)   <s12:Header>
+         (07)     <wsa:Action>
+         (08)       http://schemas.xmlsoap.org/ws/2004/08/eventing/Renew
+         (09)     </wsa:Action>
+         (10)     <wsa:MessageID>
+         (11)       uuid:bd88b3df-5db4-4392-9621-aee9160721f6
+         (12)     </wsa:MessageID>
+         (13)     <wsa:ReplyTo>
+         (14)      <wsa:Address>http://www.example.com/MyEventSink</wsa:Address>
+         (15)     </wsa:ReplyTo>
+         (16)     <wsa:To>
+         (17)       http://www.example.org/oceanwatch/SubscriptionManager
+         (18)     </wsa:To>
+         (19)     <wse:Identifier>
+         (20)       uuid:22e8a584-0d18-4228-b2a8-3716fa2097fa
+         (21)     </wse:Identifier>
+         (22)   </s12:Header>
+         (23)   <s12:Body>
+         (24)     <wse:Renew>
+         (25)       <wse:Expires>2004-06-26T21:07:00.000-08:00</wse:Expires>
+         (26)     </wse:Renew>
+         (27)   </s12:Body>
+         (28) </s12:Envelope>
+         */
+
+        OMElement subscribeOm = factory.createOMElement("Renew", eventingNamespace);
+        OMElement expiresOm = factory.createOMElement("Expires", eventingNamespace);
+        factory.createOMText(expiresOm, expires);
+        subscribeOm.addChild(expiresOm);
+
+
+        log.info("SynapseSubscription Renew \n" + subscribeOm.toString());
+        try {
+            initializeClient(addUrl);
+            OMElement identifierOm = factory.createOMElement("Identifier", eventingNamespace);
+            factory.createOMText(identifierOm, identifier);
+            serviceClient.addHeader(identifierOm);
+            options.setAction("http://schemas.xmlsoap.org/ws/2004/08/eventing/Renew");
+            OMElement response = serviceClient.sendReceive(subscribeOm);
+            log.info("SynapseSubscription Renew to ID " + identifier);
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException e) {
+
+            }
+            log.info("SynapseSubscription Renew Response Received: " + response.toString());
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Fault Received : " + e.toString(), e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+        return clientResult;
+    }
+
+    public SampleClientResult getStatus(String addUrl, String identifier) {
+        /**
+         * (01) <s12:Envelope
+         (02)     xmlns:s12="http://www.w3.org/2003/05/soap-envelope"
+         (03)     xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
+         (04)     xmlns:wse="http://schemas.xmlsoap.org/ws/2004/08/eventing"
+         (05)     xmlns:ow="http://www.example.org/oceanwatch" >
+         (06)   <s12:Header>
+         (07)     <wsa:Action>
+         (08)       http://schemas.xmlsoap.org/ws/2004/08/eventing/GetStatus
+         (09)     </wsa:Action>
+         (10)     <wsa:MessageID>
+         (11)       uuid:bd88b3df-5db4-4392-9621-aee9160721f6
+         (12)     </wsa:MessageID>
+         (13)     <wsa:ReplyTo>
+         (14)       <wsa:Address>http://www.example.com/MyEventSink</wsa:Address>
+         (15)     </wsa:ReplyTo>
+         (16)     <wsa:To>
+         (17)       http://www.example.org/oceanwatch/SubscriptionManager
+         (18)     </wsa:To>
+         (19)     <wse:Identifier>
+         (20)       uuid:22e8a584-0d18-4228-b2a8-3716fa2097fa
+         (21)     </wse:Identifier>
+         (22)   </s12:Header>
+         (23)   <s12:Body>
+         (24)     <wse:GetStatus />
+         (25)   </s12:Body>
+         (26) </s12:Envelope>
+         */
+        OMElement subscribeOm = factory.createOMElement("GetStatus", eventingNamespace);
+
+        log.info("GetStatus using: " + subscribeOm.toString());
+        try {
+            initializeClient(addUrl);
+            options.setAction("http://schemas.xmlsoap.org/ws/2004/08/eventing/GetStatus");
+
+            OMElement identifierOm = factory.createOMElement("Identifier", eventingNamespace);
+            factory.createOMText(identifierOm, identifier);
+            serviceClient.addHeader(identifierOm);
+            OMElement response = serviceClient.sendReceive(subscribeOm);
+            log.info("GetStatus to ID " + identifier);
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException e) {
+
+            }
+            log.info("GetStatus Response Received: " + response.toString());
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Fault Received : " + e.toString(), e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+        return clientResult;
+    }
+
+    public SampleClientResult sendEvent(String addUrl, String symbol, String price, String qty,
+                                        String topic, String topicns) {
+        try {
+            initializeClient(addUrl);
+
+            OMNamespace aipNamespace = factory.createOMNamespace(topicns, "aip");
+            // set the target topic
+            OMElement topicOm = factory.createOMElement("Topic", aipNamespace);
+            factory.createOMText(topicOm, topic);
+            serviceClient.addHeader(topicOm);
+            // set for fire and forget
+            options.setProperty(MessageContext.CLIENT_API_NON_BLOCKING, Boolean.FALSE);
+
+            OMElement payload =
+                    AXIOMUtil.stringToOM("<m:placeOrder xmlns:m=\"http://services.samples\">\n" +
+                            "    <m:order>\n" +
+                            "        <m:price>" + price + "</m:price>\n" +
+                            "        <m:quantity>" + qty + "</m:quantity>\n" +
+                            "        <m:symbol>" + symbol + "</m:symbol>\n" +
+                            "    </m:order>\n" +
+                            "</m:placeOrder>");
+
+            log.info("Sending Event : \n" + payload.toString());
+            serviceClient.fireAndForget(payload);
+            log.info("Event sent to topic " + topic);
+            Thread.sleep(1000);
+            clientResult.setGotResponse(true);
+        } catch (Exception e) {
+            log.error("Fault Received : " + e.toString(), e);
+            clientResult.setGotResponse(false);
+            clientResult.setException(e);
+        }
+        deInitializeClient();
+        return clientResult;
+    }
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/JMSSampleClient.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/JMSSampleClient.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/JMSSampleClient.java	(revision 1211407)
@@ -0,0 +1,118 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework.clients;
+
+import javax.jms.*;
+import javax.naming.InitialContext;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+public class JMSSampleClient {
+
+    private QueueConnection connection;
+    private QueueSession session;
+    private QueueSender sender;
+
+    public void connect(String destName) throws Exception {
+
+        Properties env = new Properties();
+        //String factoryURL = System.getProperty("java.naming.factory.url.pkgs");
+        String connectionFactoryName = "ConnectionFactory";
+
+        if (System.getProperty("java.naming.provider.url") == null) {
+            env.put("java.naming.provider.url", "tcp://localhost:61616");
+        }
+        if (System.getProperty("java.naming.factory.initial") == null) {
+            env.put("java.naming.factory.initial",
+                "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
+        }
+        if (connectionFactoryName != null) {
+            env.put("transport.jms.ConnectionFactoryJNDIName", connectionFactoryName);
+        }
+        
+        InitialContext ic = new InitialContext(env);
+        QueueConnectionFactory confac = (QueueConnectionFactory) ic.lookup("ConnectionFactory");
+        connection = confac.createQueueConnection();
+        session = connection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);
+        sender = session.createSender((Queue)ic.lookup(destName));
+    }
+
+    public void shutdown() throws Exception {
+        sender.close();
+        session.close();
+        connection.close();
+    }
+
+    private void sendBytesMessage(byte[] payload) throws Exception {
+        BytesMessage bm = session.createBytesMessage();
+        bm.writeBytes(payload);
+        sender.send(bm);
+    }
+
+    public void sendTextMessage(String payload) throws Exception {
+        TextMessage tm = session.createTextMessage(payload);
+        sender.send(tm);
+    }
+
+    public static byte[] getBytesFromFile(String fileName) throws IOException {
+
+        File file = new File(fileName);
+        InputStream is = new FileInputStream(file);
+        long length = file.length();
+
+        byte[] bytes = new byte[(int) length];
+
+        int offset = 0;
+        int numRead = 0;
+        while (offset < bytes.length
+            && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
+            offset += numRead;
+        }
+
+        // Ensure all the bytes have been read in
+        if (offset < bytes.length) {
+            throw new IOException("Could not completely read file " + file.getName());
+        }
+
+        is.close();
+        return bytes;
+    }
+
+    public static double getRandom(double base, double variance, boolean positiveOnly) {
+        double rand = Math.random();
+        return (base + ((rand > 0.5 ? 1 : -1) * variance * base * rand))
+            * (positiveOnly ? 1 : (rand > 0.5 ? 1 : -1));
+    }
+
+    public void sendAsPox(String param) throws Exception{
+                 sendTextMessage(
+                    "<m:placeOrder xmlns:m=\"http://services.samples\">\n" +
+                    "    <m:order>\n" +
+                    "        <m:price>" + getRandom(100, 0.9, true) + "</m:price>\n" +
+                    "        <m:quantity>" + (int) getRandom(10000, 1.0, true) + "</m:quantity>\n" +
+                    "        <m:symbol>" + param + "</m:symbol>\n" +
+                    "    </m:order>\n" +
+                    "</m:placeOrder>");
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java	(revision 1211407)
@@ -0,0 +1,32 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.samples.framework;
+
+/**
+ * Specifies the operations associated with controlling
+ * the mediation engine - starting up and shutting down.
+ */
+public interface ProcessController {
+
+    public boolean startProcess();
+
+    public boolean stopProcess();
+
+}
\ No newline at end of file
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java	(revision 1211407)
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample3 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample3.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample3() {
+        super(3);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testLocalEntriesReusableEndPointsSequences() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280";
+
+        log.info("Running test: Local Registry entry definitions, reusable endpoints and sequences");
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM" ,null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java	(revision 1211407)
@@ -0,0 +1,56 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.axis2.AxisFault;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample7 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample7.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample7() {
+        super(7);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testLocalRegEntriesAndSchemaValidation() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280";
+        String expectedError = "Invalid custom quote request";
+
+        log.info("Running test: Creating SOAP fault messages and changing the direction of a message");
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM",null);
+        assertFalse("Should not get a response", result.gotResponse());
+        Exception resultEx = result.getException();
+        assertNotNull("Did not receive expected error", resultEx);
+        log.info("Got an error as expected: " + resultEx.getMessage());
+        assertTrue("Did not receive expected error", resultEx instanceof AxisFault);
+        assertTrue("Did not receive expected error", resultEx.getMessage().indexOf(expectedError)!=-1);
+
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java	(revision 1211407)
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample11 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample11.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample11() {
+        super(11);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testFullRegistryBasedConfig() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280";
+
+        log.info("Running test: Local Registry entry definitions, reusable endpoints and sequences");
+        result = client.requestStandardQuote(addUrl, trpUrl, null, "IBM",null);
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/pom.xml
===================================================================
--- java/modules/integration/pom.xml	(nonexistent)
+++ java/modules/integration/pom.xml	(revision 1211407)
@@ -0,0 +1,520 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~  Licensed to the Apache Software Foundation (ASF) under one
+  ~  or more contributor license agreements.  See the NOTICE file
+  ~  distributed with this work for additional information
+  ~  regarding copyright ownership.  The ASF licenses this file
+  ~  to you under the Apache License, Version 2.0 (the
+  ~  "License"); you may not use this file except in compliance
+  ~  with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing,
+  ~  software distributed under the License is distributed on an
+  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~  KIND, either express or implied.  See the License for the
+  ~  specific language governing permissions and limitations
+  ~  under the License.
+  -->
+
+<project
+        xmlns="http://maven.apache.org/POM/4.0.0"
+        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.apache.synapse</groupId>
+        <artifactId>Apache-Synapse</artifactId>
+        <version>2.1.0-SNAPSHOT</version>
+        <relativePath>../../pom.xml</relativePath>
+    </parent>
+
+    <groupId>org.apache.synapse</groupId>
+    <artifactId>synapse-integration</artifactId>
+
+    <name>Apache Synapse - Integration</name>
+    <description>Apache Synapse - Sample Automation Framework</description>
+    <!--<packaging>bundle</packaging>-->
+
+    <build>
+        <plugins>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <version>1.6</version>
+                <executions>
+                    <execution>
+                        <id>create_repo</id>
+                        <phase>generate-test-resources</phase>
+                        <configuration>
+                            <tasks>
+                                <echo message="*** Creating testing repositories for synapse samples"/>
+
+                                <mkdir dir="target/test_repos"/>
+                                <mkdir dir="target/test_repos/axis2Server"/>
+                                <mkdir dir="target/test_repos/axis2Client"/>
+                                <mkdir dir="target/test_repos/synapse"/>
+                                <mkdir dir="target/test_repos/synapse"/>
+                                <mkdir dir="target/test_repos/synapse/modules"/>
+                                <mkdir dir="target/test_repos/synapse/conf"/>
+                                <mkdir dir="target/test_repos/axis2Server/services"/>
+                                <mkdir dir="target/test_repos/axis2Server/modules"/>
+                                <mkdir dir="target/test_repos/axis2Server/conf"/>
+                                <mkdir dir="target/test_repos/axis2Client/modules"/>
+                                <mkdir dir="target/test_repos/axis2Client/conf"/>
+
+                                <copy todir="target/test_repos/axis2Server/conf/">
+                                    <fileset dir="src/test/resources/axis2Xml/axis2Server">
+                                        <include name="*.xml"/>
+                                    </fileset>
+                                </copy>
+                                <copy todir="target/test_repos/synapse/conf/">
+                                    <fileset dir="src/test/resources/axis2Xml/synapse">
+                                        <include name="*.xml"/>
+                                    </fileset>
+                                </copy>
+                                <copy todir="target/test_repos/axis2Client/conf/">
+                                    <fileset dir="src/test/resources/axis2Xml/axis2Client">
+                                        <include name="*.xml"/>
+                                    </fileset>
+                                </copy>
+
+                                <!--<copy file="src/test/resources/trust.jks"-->
+                                <!--tofile="target/test_repos/synapse/conf/trust.jks"/>-->
+                                <!--<copy file="src/test/resources/identity.jks"-->
+                                <!--tofile="target/test_repos/synapse/conf/identity.jks"/>-->
+                                <!--<copy file="../core/src/test/resources/keystore.jks"-->
+                                <!--tofile="target/test_repos/synapse/conf/keystore.jks"/>-->
+
+                                <property name="temp.dir" value="target/temp"/>
+                                <property name="classes" value="${temp.dir}/classes"/>
+                                <property name="services"
+                                value="target/test_repos/axis2Server/services"/>
+
+                                <property name="src"
+                                value="../samples/services/SimpleStockQuoteService/src"/>
+
+                                <mkdir dir="${temp.dir}"/>
+                                <mkdir dir="${classes}"/>
+
+                                <javac debug="on" destdir="${classes}" fork="true" includeantruntime="false">
+                                <src path="${src}"/>
+                                <classpath refid="maven.compile.classpath"/>
+                                </javac>
+
+                                <property name="SSQ.dir"
+                                value="${temp.dir}/SimpleStockQuote"/>
+                                <mkdir dir="${SSQ.dir}"/>
+
+                                <mkdir dir="${SSQ.dir}/META-INF"/>
+                                <copy file="${src}/../conf/services.xml"
+                                tofile="${SSQ.dir}/META-INF/services.xml"/>
+                                <!--<copy file="${src}/../wsdl/SimpleStockQuoteService.wsdl"-->
+                                <!--tofile="${SSQ.dir}/META-INF/service.wsdl"/>-->
+                                <copy toDir="${SSQ.dir}">
+                                <fileset dir="${classes}">
+                                <include name="**/*.class"/>
+                                </fileset>
+                                </copy>
+
+                                <jar destfile="${services}/SimpleStockQuoteService.aar">
+                                <fileset dir="${SSQ.dir}"/>
+                                </jar>
+
+                                <property name="src2"
+                                value="../samples/services/SecureStockQuoteService/src"/>
+                                <delete dir="${temp.dir}"/>
+                                <mkdir dir="${temp.dir}"/>
+                                <mkdir dir="${classes}"/>
+                                <javac debug="on" destdir="${classes}" fork="true" includeantruntime="false">
+                                <src path="${src2}"/>
+                                <classpath refid="maven.compile.classpath"/>
+                                </javac>
+                                <property name="SSQ2.dir"
+                                value="${temp.dir}/SecureStockQuoteService"/>
+                                <mkdir dir="${SSQ2.dir}"/>
+                                <mkdir dir="${SSQ2.dir}/META-INF"/>
+                                <copy file="${src2}/../conf/services.xml"
+                                tofile="${SSQ2.dir}/META-INF/services.xml"/>
+                                <!--<copy file="${src2}/../wsdl/SimpleStockQuoteService.wsdl"-->
+                                <!--tofile="${SSQ2.dir}/META-INF/service.wsdl"/>-->
+                                <copy file="${src2}/../store.jks"
+                                tofile="${SSQ2.dir}/store.jks"/>
+                                <copy toDir="${SSQ2.dir}">
+                                <fileset dir="${classes}">
+                                <include name="**/*.class"/>
+                                </fileset>
+                                </copy>
+                                <jar destfile="${services}/SecureStockQuoteService.aar">
+                                <fileset dir="${SSQ2.dir}"/>
+                                </jar>
+
+                                <property name="src3"
+                                value="../samples/services/MTOMSwASampleService/src"/>
+                                <delete dir="${temp.dir}"/>
+                                <mkdir dir="${temp.dir}"/>
+                                <mkdir dir="${classes}"/>
+                                <javac debug="on" destdir="${classes}" fork="true" includeantruntime="false">
+                                <src path="${src3}"/>
+                                <classpath refid="maven.compile.classpath"/>
+                                </javac>
+                                <property name="SSQ3.dir"
+                                value="${temp.dir}/MTOMSwASampleService"/>
+                                <mkdir dir="${SSQ3.dir}"/>
+                                <mkdir dir="${SSQ3.dir}/META-INF"/>
+                                <copy file="${src3}/../conf/services.xml"
+                                tofile="${SSQ3.dir}/META-INF/services.xml"/>
+                                <copy toDir="${SSQ3.dir}">
+                                <fileset dir="${classes}">
+                                <include name="**/*.class"/>
+                                </fileset>
+                                </copy>
+                                <jar destfile="${services}/MTOMSwASampleService.aar">
+                                <fileset dir="${SSQ3.dir}"/>
+                                </jar>
+
+                                <property name="src4"
+                                value="../samples/services/ReliableStockQuoteService/src"/>
+                                <delete dir="${temp.dir}"/>
+                                <mkdir dir="${temp.dir}"/>
+                                <mkdir dir="${classes}"/>
+                                <javac debug="on" destdir="${classes}" fork="true" includeantruntime="false">
+                                <src path="${src4}"/>
+                                <classpath refid="maven.compile.classpath"/>
+                                </javac>
+                                <property name="RSQ.dir"
+                                value="${temp.dir}/ReliableStockQuoteService"/>
+                                <mkdir dir="${RSQ.dir}"/>
+
+                                <mkdir dir="${RSQ.dir}/META-INF"/>
+                                <copy file="${src4}/../conf/services.xml"
+                                tofile="${RSQ.dir}/META-INF/services.xml"/>
+                                <!--<copy file="${src4}/../wsdl/ReliableStockQuoteService.wsdl"-->
+                                <!--tofile="${RSQ.dir}/META-INF/service.wsdl"/>-->
+                                <copy toDir="${RSQ.dir}">
+                                <fileset dir="${classes}">
+                                <include name="**/*.class"/>
+                                </fileset>
+                                </copy>
+
+                                <jar destfile="${services}/ReliableStockQuoteService.aar">
+                                <fileset dir="${RSQ.dir}"/>
+                                </jar>
+
+                                <property name="src5"
+                                value="../samples/services/LoadbalanceFailoverService/src"/>
+                                <delete dir="${temp.dir}"/>
+                                <mkdir dir="${temp.dir}"/>
+                                <mkdir dir="${classes}"/>
+                                <javac debug="on" destdir="${classes}" fork="true" includeantruntime="false">
+                                <src path="${src5}"/>
+                                <classpath refid="maven.compile.classpath"/>
+                                </javac>
+
+                                <property name="LBFA1.dir" value="${temp.dir}/LBService1"/>
+                                <mkdir dir="${LBFA1.dir}"/>
+
+                                <mkdir dir="${LBFA1.dir}/META-INF"/>
+                                <copy file="${src5}/../conf/service1/services.xml"
+                                tofile="${LBFA1.dir}/META-INF/services.xml"/>
+                                <copy toDir="${LBFA1.dir}">
+                                <fileset dir="${classes}">
+                                <include name="**/LBService1.class"/>
+                                </fileset>
+                                </copy>
+
+                                <jar destfile="${services}/LBService1.aar">
+                                <fileset dir="${LBFA1.dir}"/>
+                                </jar>
+
+                                <property name="LBFA2.dir" value="${temp.dir}/LBService2"/>
+                                <mkdir dir="${LBFA2.dir}"/>
+
+                                <mkdir dir="${LBFA2.dir}/META-INF"/>
+                                <copy file="${src5}/../conf/service2/services.xml"
+                                tofile="${LBFA2.dir}/META-INF/services.xml"/>
+                                <copy toDir="${LBFA2.dir}">
+                                <fileset dir="${classes}">
+                                <include name="**/LBService2.class"/>
+                                </fileset>
+                                </copy>
+
+                                <jar destfile="${services}/LBService2.aar">
+                                <fileset dir="${LBFA2.dir}"/>
+                                </jar>
+
+                            </tasks>
+                        </configuration>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-dependency-plugin</artifactId>
+                <version>2.3</version>
+                <executions>
+                    <execution>
+                        <id>copy</id>
+                        <phase>generate-test-resources</phase>
+                        <goals>
+                            <goal>copy</goal>
+                        </goals>
+                        <configuration>
+                            <artifactItems>
+                                <artifactItem>
+                                    <groupId>org.apache.axis2</groupId>
+                                    <artifactId>addressing</artifactId>
+                                    <version>${addressing.version}</version>
+                                    <type>mar</type>
+                                    <outputDirectory>target/test_repos/axis2Server/modules
+                                    </outputDirectory>
+                                </artifactItem>
+
+                                <artifactItem>
+                                    <groupId>org.apache.rampart</groupId>
+                                    <artifactId>rampart</artifactId>
+                                    <version>${rampart.version}</version>
+                                    <type>mar</type>
+                                    <outputDirectory>target/test_repos/axis2Server/modules
+                                    </outputDirectory>
+                                </artifactItem>
+                                <artifactItem>
+                                    <groupId>org.apache.sandesha2</groupId>
+                                    <artifactId>sandesha2</artifactId>
+                                    <version>${sandesha2.version}</version>
+                                    <type>mar</type>
+                                    <outputDirectory>target/test_repos/axis2Server/modules
+                                    </outputDirectory>
+                                </artifactItem>
+                                <artifactItem>
+                                    <groupId>org.apache.axis2</groupId>
+                                    <artifactId>addressing</artifactId>
+                                    <version>${addressing.version}</version>
+                                    <type>mar</type>
+                                    <outputDirectory>target/test_repos/axis2Client/modules
+                                    </outputDirectory>
+                                </artifactItem>
+                                <artifactItem>
+                                    <groupId>org.apache.rampart</groupId>
+                                    <artifactId>rampart</artifactId>
+                                    <version>${rampart.version}</version>
+                                    <type>mar</type>
+                                    <outputDirectory>target/test_repos/axis2Client/modules
+                                    </outputDirectory>
+                                </artifactItem>
+
+                                <artifactItem>
+                                    <groupId>org.apache.axis2</groupId>
+                                    <artifactId>addressing</artifactId>
+                                    <version>${addressing.version}</version>
+                                    <type>mar</type>
+                                    <outputDirectory>target/test_repos/synapse/modules
+                                    </outputDirectory>
+                                </artifactItem>
+                                <artifactItem>
+                                    <groupId>org.apache.rampart</groupId>
+                                    <artifactId>rampart</artifactId>
+                                    <version>${rampart.version}</version>
+                                    <type>mar</type>
+                                    <outputDirectory>target/test_repos/synapse/modules
+                                    </outputDirectory>
+                                </artifactItem>
+                                <artifactItem>
+                                    <groupId>org.apache.sandesha2</groupId>
+                                    <artifactId>sandesha2</artifactId>
+                                    <version>${sandesha2.version}</version>
+                                    <type>mar</type>
+                                    <outputDirectory>target/test_repos/synapse/modules
+                                    </outputDirectory>
+                                </artifactItem>
+
+                            </artifactItems>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>2.9</version>
+                <configuration>
+                    <systemPropertyVariables>
+                        <property>
+                            <name>suite</name>
+                            <value>${suite}</value>
+                            <name>tests</name>
+                            <value>${tests}</value>
+                        </property>
+                        <timeStamp>${maven.build.timestamp}</timeStamp>
+                        <log4j.configuration>test-log4j.properties</log4j.configuration>
+                    </systemPropertyVariables>
+                    <argLine>-Xms512m -Xmx1024m -XX:MaxPermSize=512m</argLine>
+                    <workingDirectory>../..</workingDirectory>
+                    <!--redirectTestOutputToFile>true</redirectTestOutputToFile-->
+                    <forkMode>pertest</forkMode>
+                </configuration>
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <reporting>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-report-plugin</artifactId>
+                <version>2.7.2</version>
+                <configuration>
+                    <outputName>sample_automation</outputName>
+                </configuration>
+            </plugin>
+        </plugins>
+    </reporting>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.synapse</groupId>
+            <artifactId>synapse-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.synapse</groupId>
+            <artifactId>synapse-commons</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.synapse</groupId>
+            <artifactId>synapse-extensions</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.synapse</groupId>
+            <artifactId>synapse-samples</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.synapse</groupId>
+            <artifactId>synapse-fix-transport</artifactId>
+            <version>${synapse.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.rampart</groupId>
+            <artifactId>rampart-core</artifactId>
+            <version>${rampart.version}</version>
+            <scope>test</scope>
+            <exclusions>
+                <exclusion>
+                    <groupId>org.apache.woden</groupId>
+                    <artifactId>woden-api</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.axis2</groupId>
+            <artifactId>axis2-transport-base</artifactId>
+            <version>${axis2.transport.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.axis2</groupId>
+            <artifactId>axis2-transport-jms</artifactId>
+            <version>${axis2.transport.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.axis2</groupId>
+            <artifactId>axis2-transport-udp</artifactId>
+            <version>${axis2.transport.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.axis2</groupId>
+            <artifactId>axis2-transport-tcp</artifactId>
+            <version>1.0.0</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.jruby</groupId>
+            <artifactId>jruby-complete</artifactId>
+            <version>${jruby.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.activemq</groupId>
+            <artifactId>activemq-core</artifactId>
+            <version>5.5.0</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.derby</groupId>
+            <artifactId>derbyclient</artifactId>
+            <version>10.8.1.2</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.derby</groupId>
+            <artifactId>derbynet</artifactId>
+            <version>10.8.1.2</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-log4j12</artifactId>
+            <version>1.6.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+            <version>1.6.1</version>
+            <scope>test</scope>
+        </dependency>
+        <!--<dependency>-->
+        <!--<groupId>org.slf4j</groupId>-->
+        <!--<artifactId>slf4j-jdk14</artifactId>-->
+        <!--<version>1.6.1</version>-->
+        <!--<scope>test</scope>-->
+        <!--</dependency>-->
+        <dependency>
+            <groupId>org.apache.derby</groupId>
+            <artifactId>derby</artifactId>
+            <version>10.8.1.2</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.neethi</groupId>
+            <artifactId>neethi</artifactId>
+            <version>3.0.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.mina</groupId>
+            <artifactId>mina-core</artifactId>
+            <version>1.1.7</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>quickfixj</groupId>
+            <artifactId>quickfixj-all</artifactId>
+            <version>1.4.0</version>
+            <scope>test</scope>
+        </dependency>
+        <!--dependency>
+            <groupId>quickfixj</groupId>
+            <artifactId>quickfixj-examples</artifactId>
+            <version>1.5.0</version>
+            <scope>test</scope>
+        </dependency-->
+    </dependencies>
+
+</project>
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java	(revision 1211407)
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+package org.apache.synapse.samples.framework.tests.message;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.synapse.samples.framework.SampleClientResult;
+import org.apache.synapse.samples.framework.SynapseTestCase;
+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;
+
+public class Sample16 extends SynapseTestCase {
+
+    private static final Log log = LogFactory.getLog(Sample16.class);
+    SampleClientResult result;
+    StockQuoteSampleClient client;
+
+    public Sample16() {
+        super(16);
+        client = getStockQuoteClient();
+    }
+
+
+    public void testDynamicStaticKeys() {
+        String addUrl = "http://localhost:9000/services/SimpleStockQuoteService";
+        String trpUrl = "http://localhost:8280/";
+
+        log.info("Running test: Introduction to dynamic and static keys ");
+        result = client.requestCustomQuote(addUrl, trpUrl, null, "IBM");
+        assertTrue("Client did not get run successfully ", result.gotResponse());
+    }
+
+}
Index: java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java
===================================================================
--- java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java	(nonexistent)
+++ java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java	(revision 1211407)
@@ -0,0 +1,157 @@
+package org.apache.synapse.samples.framework;
+
+import org.apache.axis2.clustering.ClusteringAgent;
+import org.apache.axis2.clustering.ClusteringConstants;
+import org.apache.axis2.context.ConfigurationContext;
+import org.apache.axis2.context.ConfigurationContextFactory;
+import org.apache.axis2.description.TransportInDescription;
+import org.apache.axis2.engine.ListenerManager;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.util.concurrent.CountDownLatch;
+
+/**
+ * Responsible for programatically starting up and shutting down
+ * an Axis2 server instance in order to run a sample test.
+ */
+public class Axis2BackEndServerController implements BackEndServerController {
+
+    private static final Log log = LogFactory.getLog(Axis2BackEndServerController.class);
+
+    private String serverName;
+    private BackEndServerThread serverThread;
+    private ConfigurationContext configContext;
+    private ListenerManager listenerManager;
+    private SampleConfiguration.Axis2SampleConfiguration configuration;
+    private CountDownLatch cdLatch;
+    private Exception processException;
+
+    public Axis2BackEndServerController(String serverName,
+                                        SampleConfiguration.Axis2SampleConfiguration configuration) {
+        this.serverName = serverName;
+        this.configuration = configuration;
+        serverThread = new BackEndServerThread();
+        serverThread.setName(configuration.getServerName()+ " thread");
+        cdLatch = new CountDownLatch(1);
+    }
+
+    public String getServerName() {
+        return serverName;
+    }
+
+    public boolean start() {
+        log.info("Preparing to start Axis2 Server: " + serverName);
+        serverThread.start();
+        try {
+            log.info("Waiting for Axis2 to start");
+            cdLatch.await();
+            if (processException == null) {
+                log.info("Axis2 is successfully started. continuing tests");
+                return true;
+            } else {
+                log.warn("There was an error starting Axis2 server: " + serverName, processException);
+                return false;
+            }
+        } catch (InterruptedException e) {
+            return false;
+        }
+    }
+
+    public boolean stop() {
+        if (serverThread.isRunning) {
+            serverThread.isRunning = false;
+            try {
+                cdLatch = new CountDownLatch(1);
+                cdLatch.await();
+            } catch (InterruptedException e) {
+                 return false;
+            }
+        }
+        return true;
+    }
+
+    class BackEndServerThread extends Thread {
+
+        public boolean isRunning = false;
+
+        public void run() {processException = null;
+            log.info("ServerThread: Initializing Axis2 Server: " + serverName);
+            processException = null;
+            try {
+                listenerManager = new ListenerManager();
+
+                configContext = ConfigurationContextFactory
+                        .createConfigurationContextFromFileSystem(configuration.getAxis2Repo(),
+                                configuration.getAxis2Xml());
+
+                // setting System.setProperty does not work since this all servers are run on same jvm
+                configContext.setProperty("server_name", serverName);
+
+
+                TransportInDescription httpTrsIn = configContext.getAxisConfiguration().
+                        getTransportsIn().get("http");
+                String httpPort = configuration.getHttpPort();
+                if (httpPort != null && !httpPort.isEmpty()) {
+                    try {
+                        new Integer(httpPort);
+                        httpTrsIn.getParameter("port").setValue(httpPort);
+                    } catch (NumberFormatException e) {
+                        log.error("Given port is not a valid integer. Using default value.");
+                    }
+                }
+
+                TransportInDescription httpsTrsIn = configContext.getAxisConfiguration().
+                        getTransportsIn().get("https");
+                String httpsPort = configuration.getHttpsPort();
+                if (httpsPort != null && !httpsPort.isEmpty()) {
+                    try {
+                        new Integer(httpsPort);
+                        httpsTrsIn.getParameter("port").setValue(httpsPort);
+                    } catch (NumberFormatException e) {
+                        log.error("Given port is not a valid integer. Using default value.");
+                    }
+                }
+
+                log.info("ServerThread: Starting Axis2 Server: " + serverName);
+
+
+                ClusteringAgent clusteringAgent =
+                        configContext.getAxisConfiguration().getClusteringAgent();
+                String avoidInit = ClusteringConstants.Parameters.AVOID_INITIATION;
+                if (clusteringAgent != null && clusteringAgent.getParameter(avoidInit) != null &&
+                        ((String) clusteringAgent.getParameter(avoidInit).getValue()).
+                                equalsIgnoreCase("true")) {
+                    clusteringAgent.setConfigurationContext(configContext);
+                    clusteringAgent.init();
+                }
+
+
+                listenerManager.startSystem(configContext);
+                isRunning = true;
+
+            } catch (Exception e) {
+                processException = e;
+            }
+            cdLatch.countDown();
+
+            log.info("ServerThread: Wait until test are finished");
+            while (isRunning) {
+                //wait
+                try {
+                    sleep(1000);
+                } catch (InterruptedException e) {
+                    log.info("Thread interrupted");
+                }
+            }
+            log.info("ServerThread: Shutting down Axis2 Server...");
+            try {
+                listenerManager.stop();
+                configContext.terminate();
+            } catch (Exception e) {
+                log.warn("Error while shutting down Axis2 server", e);
+            }
+            cdLatch.countDown();
+        }
+    }
+}
\ No newline at end of file
-*-*-*-
Message: Starting to add the Synapse sample automation framework SYNAPSE-746
-*-*-*-
When: 2011-12-07 07:17:10 -0500 