Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java	(revision 1745937)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java	(revision 1745938)
@@ -359,6 +359,20 @@
     }
 
 	private void sendRequestContent(final MessageContext msgContext) throws AxisFault {
+        // NOTE:this a special case where, when the backend service expects content-length but,
+        // we don't want the message to be built. If FORCE_HTTP_CONTENT_LENGTH and
+        // COPY_CONTENT_LENGTH_FROM_INCOMING, we assume that the content coming from the
+        // client side has not changed.
+        boolean forceContentLength = msgContext.isPropertyTrue(NhttpConstants.FORCE_HTTP_CONTENT_LENGTH);
+        boolean copyContentLength = msgContext.isPropertyTrue(PassThroughConstants.COPY_CONTENT_LENGTH_FROM_INCOMING);
+
+        if (forceContentLength && copyContentLength &&
+                msgContext.getProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH) != null) {
+            long contentLength = Long.parseLong((String) msgContext.getProperty(
+                    PassThroughConstants.ORIGINAL_CONTENT_LENGTH));
+            msgContext.setProperty(PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH, contentLength);
+        }
+
 		if (Boolean.TRUE.equals(msgContext.getProperty(PassThroughConstants.MESSAGE_BUILDER_INVOKED))) {
 			synchronized (msgContext) {
 				while (!Boolean.TRUE.equals(msgContext.getProperty("READY2ROCK")) &&
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java	(revision 1745937)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java	(revision 1745938)
@@ -141,6 +141,10 @@
             headerMap.put(headerEntry.getKey(), headerEntry.getValue());
         }
         responseMsgCtx.setProperty(MessageContext.TRANSPORT_HEADERS, headerMap);
+        if (headerMap.get(HTTP.CONTENT_LEN) != null){
+            responseMsgCtx.setProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH,
+                    headerMap.get(HTTP.CONTENT_LEN));
+        }
 
         if (response.getStatus() == 202) {
             responseMsgCtx.setProperty(AddressingConstants.
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/SourceResponseFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/SourceResponseFactory.java	(revision 1745937)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/SourceResponseFactory.java	(revision 1745938)
@@ -29,6 +29,7 @@
 import org.apache.synapse.transport.passthru.SourceRequest;
 import org.apache.synapse.transport.passthru.SourceResponse;
 import org.apache.synapse.transport.passthru.config.SourceConfiguration;
+import org.apache.synapse.transport.passthru.PassThroughConstants;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -46,6 +47,14 @@
 
         // set any transport headers
         Map transportHeaders = (Map) msgContext.getProperty(MessageContext.TRANSPORT_HEADERS);
+
+        if (msgContext.isPropertyTrue(NhttpConstants.FORCE_HTTP_CONTENT_LENGTH) &&
+                msgContext.isPropertyTrue(PassThroughConstants.COPY_CONTENT_LENGTH_FROM_INCOMING) &&
+                msgContext.getProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH) != null) {
+            sourceResponse.addHeader(HTTP.CONTENT_LEN,
+                    (String) msgContext.getProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH));
+        }
+
         if (transportHeaders != null) {
             addResponseHeader(sourceResponse, transportHeaders);
         } else {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java	(revision 1745937)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java	(revision 1745938)
@@ -163,11 +163,19 @@
 
             BasicHttpEntity entity = new BasicHttpEntity();
 
-            if (contentLength != -1) {
+            if (requestMsgCtx.isPropertyTrue(NhttpConstants.FORCE_HTTP_CONTENT_LENGTH)) {
                 entity.setChunked(false);
-                entity.setContentLength(contentLength);
+                if (requestMsgCtx.isPropertyTrue(PassThroughConstants.COPY_CONTENT_LENGTH_FROM_INCOMING)
+                        && contentLength > 0) {
+                    entity.setContentLength(contentLength);
+                }
             } else {
-                entity.setChunked(chunk);
+                if (contentLength != -1) {
+                    entity.setChunked(false);
+                    entity.setContentLength(contentLength);
+                } else {
+                    entity.setChunked(chunk);
+                }
             }
             ((BasicHttpEntityEnclosingRequest) request).setEntity(entity);
            
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java	(revision 1745937)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java	(revision 1745938)
@@ -477,6 +477,10 @@
             headers.put(entry.getKey(), entry.getValue());
         }
         msgContext.setProperty(MessageContext.TRANSPORT_HEADERS, headers);
+        if (headers.get(HTTP.CONTENT_LEN) != null){
+            msgContext.setProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH,
+                    headers.get(HTTP.CONTENT_LEN));
+        }
 
         // Following section is required for throttling to work
         
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java	(revision 1745937)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java	(revision 1745938)
@@ -126,4 +126,6 @@
 	
 	public static final String GET_REQUEST_HANDLED = "GET_REQUEST_HANDLED";
 
+    public static final String COPY_CONTENT_LENGTH_FROM_INCOMING="COPY_CONTENT_LENGTH_FROM_INCOMING";
+    public static final String ORIGINAL_CONTENT_LENGTH ="ORIGINAL_CONTENT_LENGTH";
 }
-*-*-*-
Message: Fixing the support for FORCE_HTTP_CONTENT_LENGTH and COPY_CONTENT_LENGTH_FROM_INCOMING; Applying the patch from SYNAPSE-923
-*-*-*-
When: 2016-05-28 16:52:04 -0400 
-*-*-*-
Who: hiranya