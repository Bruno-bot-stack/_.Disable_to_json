Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnectionFactory.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnectionFactory.java	(nonexistent)
@@ -1,172 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.http.Header;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.config.MessageConstraints;
-import org.apache.http.impl.ConnSupport;
-import org.apache.http.impl.entity.StrictContentLengthStrategy;
-import org.apache.http.impl.nio.DefaultNHttpClientConnection;
-import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;
-import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;
-import org.apache.http.nio.*;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.SessionInputBuffer;
-import org.apache.http.nio.reactor.SessionOutputBuffer;
-import org.apache.http.nio.util.HeapByteBufferAllocator;
-import org.apache.synapse.transport.nhttp.AccessHandler;
-
-import java.io.IOException;
-
-/**
- * A connection factory implementation for DefaultNHttpClientConnection instances.
- * Based on the current logging configuration, this factory decides whether to create
- * regular DefaultNHttpClientConnection objects or to create LoggingNHttpClientConnection
- * objects. Also, depending on the logging configuration, this factory may choose to
- * wrap IOSession instances in LoggingIOSession objects.
- */
-public class LoggingNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {
-
-    private static final Log targetConnLog = LogFactory.getLog(
-            LoggingConstants.TARGET_CONNECTION_LOG_ID);
-    private static final Log targetHeaderLog = LogFactory.getLog(
-            LoggingConstants.TARGET_HEADER_LOG_ID);
-    private static final Log targetSessionLog = LogFactory.getLog(
-            LoggingConstants.TARGET_SESSION_LOG_ID);
-    private static final Log targetWireLog = LogFactory.getLog(
-            LoggingConstants.TARGET_WIRE_LOG_ID);
-
-    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =
-            new LoggingNHttpRequestWriterFactory();
-    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =
-            new LoggingNHttpResponseParserFactory();
-
-    private final ConnectionConfig config;
-
-    public LoggingNHttpClientConnectionFactory(ConnectionConfig config) {
-        this.config = config;
-    }
-
-    public DefaultNHttpClientConnection createConnection(IOSession session) {
-        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {
-            session = new LoggingIOSession(targetSessionLog, targetWireLog,
-                    session, "http-sender");
-        }
-
-        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {
-            return new LoggingNHttpClientConnection(
-                    session,
-                    config.getBufferSize(),
-                    config.getFragmentSizeHint(),
-                    HeapByteBufferAllocator.INSTANCE,
-                    ConnSupport.createDecoder(config),
-                    ConnSupport.createEncoder(config),
-                    config.getMessageConstraints(),
-                    StrictContentLengthStrategy.INSTANCE,
-                    StrictContentLengthStrategy.INSTANCE,
-                    requestWriterFactory,
-                    responseParserFactory,
-                    targetConnLog);
-        } else {
-            return new DefaultNHttpClientConnection(
-                    session,
-                    config.getBufferSize(),
-                    config.getFragmentSizeHint(),
-                    HeapByteBufferAllocator.INSTANCE,
-                    ConnSupport.createDecoder(config),
-                    ConnSupport.createEncoder(config),
-                    config.getMessageConstraints(),
-                    StrictContentLengthStrategy.INSTANCE,
-                    StrictContentLengthStrategy.INSTANCE,
-                    requestWriterFactory,
-                    responseParserFactory);
-        }
-    }
-
-    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {
-        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {
-            return new LoggingNHttpRequestWriter(sessionBuffer);
-        }
-    }
-
-    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {
-        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,
-                                                      MessageConstraints messageConstraints) {
-            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);
-        }
-    }
-
-    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {
-
-        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {
-            super(buffer);
-        }
-
-        public void write(final HttpRequest request) throws IOException, HttpException {
-            if (request != null) {
-                if (targetHeaderLog.isDebugEnabled()) {
-                    targetHeaderLog.debug(">> " + request.getRequestLine().toString());
-                    Header[] headers = request.getAllHeaders();
-                    for (Header header : headers) {
-                        targetHeaderLog.debug(">> " + header.toString());
-                    }
-                }
-
-                if (AccessHandler.getAccessLog().isInfoEnabled()) {
-                    AccessHandler.getAccess().addAccessToQueue(request);
-                }
-            }
-            super.write(request);
-        }
-
-    }
-
-    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {
-
-        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {
-            super(buffer, constraints);
-        }
-
-        public HttpResponse parse() throws IOException, HttpException {
-            HttpResponse response = super.parse();
-            if (response != null) {
-                if (targetHeaderLog.isDebugEnabled()) {
-                    targetHeaderLog.debug("<< " + response.getStatusLine().toString());
-                    Header[] headers = response.getAllHeaders();
-                    for (Header header : headers) {
-                        targetHeaderLog.debug("<< " + header.toString());
-                    }
-                }
-
-                if (AccessHandler.getAccessLog().isInfoEnabled()) {
-                    AccessHandler.getAccess().addAccessToQueue(response);
-                }
-            }
-            return response;
-        }
-
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnection.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnection.java	(nonexistent)
@@ -1,98 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.config.MessageConstraints;
-import org.apache.http.entity.ContentLengthStrategy;
-import org.apache.http.impl.nio.DefaultNHttpServerConnection;
-import org.apache.http.nio.NHttpMessageParserFactory;
-import org.apache.http.nio.NHttpMessageWriterFactory;
-import org.apache.http.nio.NHttpServerEventHandler;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.util.ByteBufferAllocator;
-
-import java.io.IOException;
-import java.nio.charset.CharsetDecoder;
-import java.nio.charset.CharsetEncoder;
-
-/**
- * An extension of the DefaultNHttpServerConnection class, that provides some
- * additional logging features. This implementation enhances the default connection
- * class by logging all the major events that occur on the connection instance.
- */
-public class LoggingNHttpServerConnection extends DefaultNHttpServerConnection {
-
-    private final Log log;
-
-    public LoggingNHttpServerConnection(IOSession session,
-                                        int bufferSize,
-                                        int fragmentSizeHint,
-                                        ByteBufferAllocator allocator,
-                                        CharsetDecoder charDecoder,
-                                        CharsetEncoder charEncoder,
-                                        MessageConstraints constraints,
-                                        ContentLengthStrategy incomingContentStrategy,
-                                        ContentLengthStrategy outgoingContentStrategy,
-                                        NHttpMessageParserFactory<HttpRequest> requestParserFactory,
-                                        NHttpMessageWriterFactory<HttpResponse> responseWriterFactory,
-                                        Log log) {
-        super(session, bufferSize, fragmentSizeHint, allocator,
-                charDecoder, charEncoder, constraints, incomingContentStrategy,
-                outgoingContentStrategy, requestParserFactory, responseWriterFactory);
-        this.log = log;
-    }
-
-    @Override
-    public void close() throws IOException {
-        this.log.debug("Close connection");
-        super.close();
-    }
-
-    @Override
-    public void shutdown() throws IOException {
-        this.log.debug("Shutdown connection");
-        super.shutdown();
-    }
-
-    @Override
-    public void submitResponse(final HttpResponse response) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + this + ": "  + response.getStatusLine().toString());
-        }
-        super.submitResponse(response);
-    }
-
-    @Override
-    public void consumeInput(final NHttpServerEventHandler handler) {
-        this.log.debug("Consume input");
-        super.consumeInput(handler);
-    }
-
-    @Override
-    public void produceOutput(final NHttpServerEventHandler handler) {
-        this.log.debug("Produce output");
-        super.produceOutput(handler);
-    }
-
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLClientConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLClientConnectionFactory.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLClientConnectionFactory.java	(nonexistent)
@@ -1,80 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.impl.nio.DefaultNHttpClientConnection;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.ssl.SSLIOSession;
-import org.apache.http.nio.reactor.ssl.SSLMode;
-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
-
-import javax.net.ssl.SSLContext;
-import java.net.InetSocketAddress;
-import java.util.Map;
-
-/**
- * The SSL-enabled version of the LoggingNHttpClientConnectionFactory. Identical in behavior
- * to the parent class, but wraps IOSession instances with SSLIOSession instances. This
- * implementation also supports using different SSLContext instances for different target
- * I/O sessions.
- */
-public class LoggingNHttpSSLClientConnectionFactory extends LoggingNHttpClientConnectionFactory {
-
-    private SSLContext sslContext;
-    private SSLSetupHandler sslSetupHandler;
-    private Map<String,SSLContext> customContexts;
-
-    public LoggingNHttpSSLClientConnectionFactory(ConnectionConfig config,
-                                                  SSLContext sslContext,
-                                                  SSLSetupHandler sslSetupHandler,
-                                                  Map<String, SSLContext> customContexts) {
-        super(config);
-        this.sslContext = sslContext;
-        this.sslSetupHandler = sslSetupHandler;
-        this.customContexts = customContexts;
-    }
-
-    @Override
-    public DefaultNHttpClientConnection createConnection(IOSession session) {
-        final SSLIOSession ssliosession = new SSLIOSession(
-                session,
-                SSLMode.CLIENT,
-                getSSLContext(session),
-                sslSetupHandler);
-        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);
-        return super.createConnection(ssliosession);
-    }
-
-    private SSLContext getSSLContext(IOSession session) {
-        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();
-        String host = address.getHostName() + ":" + address.getPort();
-        SSLContext customContext = null;
-        if (customContexts != null) {
-            // See if there's a custom SSL profile configured for this server
-            customContext = customContexts.get(host);
-        }
-
-        if (customContext == null) {
-            customContext = sslContext;
-        }
-        return customContext;
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingServerEventHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingServerEventHandler.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingServerEventHandler.java	(nonexistent)
@@ -1,132 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.nio.ContentDecoder;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.NHttpServerConnection;
-import org.apache.http.nio.NHttpServerEventHandler;
-
-import java.io.IOException;
-
-/**
- * A decorator (wrapper) for NHttpServerEventHandler instances. This decorator
- * logs additional debug information regarding each of the events triggered on the
- * actual NHttpServerEventHandler instance. Most events are logged 'before' they are
- * dispatched to the wrapped NHttpServerEventHandler, but this implementation does
- * not modify the event arguments by any means. In that sense this decorator is
- * read-only and safe. This implementation does not log the exception event. It is
- * expected that the actual NHttpServerEventHandler will take the necessary steps to
- * log exceptions.
- */
-public class LoggingServerEventHandler implements NHttpServerEventHandler {
-
-    private final Log log;
-
-    private final NHttpServerEventHandler handler;
-
-    /**
-     * Create a new instance of the decorator.
-     *
-     * @param handler The instance of NHttpServerEventHandler to be decorated (wrapped)
-     */
-    public LoggingServerEventHandler(final NHttpServerEventHandler handler) {
-        super();
-        if (handler == null) {
-            throw new IllegalArgumentException("HTTP service handler must not be null");
-        }
-        this.handler = handler;
-        this.log = LogFactory.getLog(handler.getClass());
-    }
-
-    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Connected");
-        }
-        this.handler.connected(conn);
-    }
-
-    public void closed(final NHttpServerConnection conn) {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Closed");
-        }
-        this.handler.closed(conn);
-    }
-
-    public void endOfInput(NHttpServerConnection conn) throws IOException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Closed at the remote end");
-        }
-        this.handler.endOfInput(conn);
-    }
-
-    public void exception(NHttpServerConnection conn, Exception ex) {
-        // No need to log errors at this level - Actual handler implementation
-        // should take care of that
-        this.handler.exception(conn, ex);
-    }
-
-    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {
-        HttpRequest request = conn.getHttpRequest();
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP InRequest Received on connection " + conn + ": "
-                    + request.getRequestLine());
-        }
-        this.handler.requestReceived(conn);
-    }
-
-    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Output ready");
-        }
-        this.handler.outputReady(conn, encoder);
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Content encoder " + encoder);
-        }
-    }
-
-    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Response ready");
-        }
-        this.handler.responseReady(conn);
-    }
-
-    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Input ready");
-        }
-        this.handler.inputReady(conn, decoder);
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Content decoder " + decoder);
-        }
-    }
-
-    public void timeout(final NHttpServerConnection conn) throws IOException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Timeout");
-        }
-        this.handler.timeout(conn);
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingIOSession.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingIOSession.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingIOSession.java	(nonexistent)
@@ -1,248 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.SessionBufferStatus;
-import org.apache.http.nio.reactor.ssl.SSLIOSession;
-
-import java.io.IOException;
-import java.net.SocketAddress;
-import java.nio.ByteBuffer;
-import java.nio.channels.ByteChannel;
-import java.nio.channels.SelectionKey;
-import java.util.concurrent.atomic.AtomicLong;
-
-/**
- * A decorator (wrapper) for IOSession instances. This decorator logs additional
- * debug information regarding each of the events triggered on the actual IOSession
- * instance. Most events are logged 'before' they are dispatched to the wrapped
- * IOSession, but this implementation does not modify the event arguments by any means.
- * In that sense this decorator is read-only and safe. This implementation also facilitates
- * intercepting and logging HTTP messages at wire-level.
- */
-public class LoggingIOSession implements IOSession {
-
-    private static AtomicLong COUNT = new AtomicLong(0);
-
-    private final Log sessionLog;
-    private final Wire wireLog;
-    private final IOSession session;
-    private final ByteChannel channel;
-    private final String id;
-
-    /**
-     * Create a new instance of the decorator.
-     *
-     * @param sessionLog Log instance used to log IOSession events.
-     * @param wireLog Log instance used to log wire-level HTTP messages.
-     * @param session IOSession to be decorated.
-     * @param id An identifier (name) that will be attached to the IOSession for the logging
-     *           purposes.
-     */
-    public LoggingIOSession(
-            final Log sessionLog,
-            final Log wireLog,
-            final IOSession session,
-            final String id) {
-        if (session == null) {
-            throw new IllegalArgumentException("I/O session must not be null");
-        }
-        this.session = session;
-        this.channel = new LoggingByteChannel();
-        this.id = id + "-" + COUNT.incrementAndGet();
-        this.sessionLog = sessionLog;
-        this.wireLog = new Wire(wireLog);
-    }
-
-    public int getStatus() {
-        return this.session.getStatus();
-    }
-
-    public ByteChannel channel() {
-        return this.channel;
-    }
-
-    public SocketAddress getLocalAddress() {
-        return this.session.getLocalAddress();
-    }
-
-    public SocketAddress getRemoteAddress() {
-        return this.session.getRemoteAddress();
-    }
-
-    public int getEventMask() {
-        return this.session.getEventMask();
-    }
-
-    private static String formatOps(int ops) {
-        StringBuilder buffer = new StringBuilder(6);
-        buffer.append('[');
-        if ((ops & SelectionKey.OP_READ) > 0) {
-            buffer.append('r');
-        }
-        if ((ops & SelectionKey.OP_WRITE) > 0) {
-            buffer.append('w');
-        }
-        if ((ops & SelectionKey.OP_ACCEPT) > 0) {
-            buffer.append('a');
-        }
-        if ((ops & SelectionKey.OP_CONNECT) > 0) {
-            buffer.append('c');
-        }
-        buffer.append(']');
-        return buffer.toString();
-    }
-
-    private String getPreamble() {
-        String preamble = "I/O session " + this.id + " " + this.session;
-        if (this.session instanceof SSLIOSession) {
-            return "SSL " + preamble;
-        } else {
-            return preamble;
-        }
-    }
-
-    public void setEventMask(int ops) {
-        if (sessionLog.isDebugEnabled()) {
-            sessionLog.debug(getPreamble() + ": Set event mask " + formatOps(ops));
-        }
-        this.session.setEventMask(ops);
-    }
-
-    public void setEvent(int op) {
-        if (sessionLog.isDebugEnabled()) {
-            sessionLog.debug(getPreamble() + ": Set event " + formatOps(op));
-        }
-        this.session.setEvent(op);
-    }
-
-    public void clearEvent(int op) {
-        if (sessionLog.isDebugEnabled()) {
-            sessionLog.debug(getPreamble() + ": Clear event " + formatOps(op));
-        }
-        this.session.clearEvent(op);
-    }
-
-    public void close() {
-        if (sessionLog.isDebugEnabled()) {
-            sessionLog.debug(getPreamble() + ": Close");
-        }
-        this.session.close();
-    }
-
-    public boolean isClosed() {
-        return this.session.isClosed();
-    }
-
-    public void shutdown() {
-        if (sessionLog.isDebugEnabled()) {
-            sessionLog.debug(getPreamble() + ": Shutdown");
-        }
-        this.session.shutdown();
-    }
-
-    public int getSocketTimeout() {
-        return this.session.getSocketTimeout();
-    }
-
-    public void setSocketTimeout(int timeout) {
-        if (sessionLog.isDebugEnabled()) {
-            sessionLog.debug(getPreamble() + ": Set timeout " + timeout);
-        }
-        this.session.setSocketTimeout(timeout);
-    }
-
-    public void setBufferStatus(final SessionBufferStatus status) {
-        this.session.setBufferStatus(status);
-    }
-
-    public boolean hasBufferedInput() {
-        return this.session.hasBufferedInput();
-    }
-
-    public boolean hasBufferedOutput() {
-        return this.session.hasBufferedOutput();
-    }
-
-    public Object getAttribute(final String name) {
-        return this.session.getAttribute(name);
-    }
-
-    public void setAttribute(final String name, final Object obj) {
-        if (sessionLog.isDebugEnabled()) {
-            sessionLog.debug(getPreamble() + ": Set attribute " + name);
-        }
-        this.session.setAttribute(name, obj);
-    }
-
-    public Object removeAttribute(final String name) {
-        if (sessionLog.isDebugEnabled()) {
-            sessionLog.debug(getPreamble() + ": Remove attribute " + name);
-        }
-        return this.session.removeAttribute(name);
-    }
-
-    class LoggingByteChannel implements ByteChannel {
-
-        public int read(final ByteBuffer dst) throws IOException {
-            int bytesRead = session.channel().read(dst);
-            if (sessionLog.isDebugEnabled()) {
-                sessionLog.debug(getPreamble() + ": " + bytesRead + " bytes read");
-            }
-            if (bytesRead > 0 && wireLog.isEnabled()) {
-                ByteBuffer b = dst.duplicate();
-                int p = b.position();
-                b.limit(p);
-                b.position(p - bytesRead);
-                wireLog.input(b);
-            }
-            return bytesRead;
-        }
-
-        public int write(final ByteBuffer src) throws IOException {
-            int byteWritten = session.channel().write(src);
-            if (sessionLog.isDebugEnabled()) {
-                sessionLog.debug(getPreamble() + ": " + byteWritten + " bytes written");
-            }
-            if (byteWritten > 0 && wireLog.isEnabled()) {
-                ByteBuffer b = src.duplicate();
-                int p = b.position();
-                b.limit(p);
-                b.position(p - byteWritten);
-                wireLog.output(b);
-            }
-            return byteWritten;
-        }
-
-        public void close() throws IOException {
-            if (sessionLog.isDebugEnabled()) {
-                sessionLog.debug(getPreamble() + ": Channel close");
-            }
-            session.channel().close();
-        }
-
-        public boolean isOpen() {
-            return session.channel().isOpen();
-        }
-
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingConstants.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingConstants.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingConstants.java	(nonexistent)
@@ -1,43 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-public class LoggingConstants {
-
-    public static final String SOURCE_CONNECTION_LOG_ID =
-            "org.apache.synapse.transport.http.conn.SourceConnection";
-    public static final String TARGET_CONNECTION_LOG_ID =
-            "org.apache.synapse.transport.http.conn.TargetConnection";
-
-    public static final String SOURCE_HEADER_LOG_ID =
-            "org.apache.synapse.transport.http.headers.SourceHeaders";
-    public static final String TARGET_HEADER_LOG_ID =
-            "org.apache.synapse.transport.http.headers.TargetHeaders";
-
-    public static final String SOURCE_SESSION_LOG_ID =
-            "org.apache.synapse.transport.http.session.SourceSession";
-    public static final String TARGET_SESSION_LOG_ID =
-            "org.apache.synapse.transport.http.session.TargetSession";
-
-    public static final String SOURCE_WIRE_LOG_ID =
-            "org.apache.synapse.transport.http.wire.SourceWire";
-    public static final String TARGET_WIRE_LOG_ID =
-            "org.apache.synapse.transport.http.wire.TargetWire";
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnection.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnection.java	(nonexistent)
@@ -1,97 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.config.MessageConstraints;
-import org.apache.http.entity.ContentLengthStrategy;
-import org.apache.http.impl.nio.DefaultNHttpClientConnection;
-import org.apache.http.nio.NHttpClientEventHandler;
-import org.apache.http.nio.NHttpMessageParserFactory;
-import org.apache.http.nio.NHttpMessageWriterFactory;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.util.ByteBufferAllocator;
-
-import java.io.IOException;
-import java.nio.charset.CharsetDecoder;
-import java.nio.charset.CharsetEncoder;
-
-/**
- * An extension of the DefaultNHttpClientConnection class, that provides some
- * additional logging features. This implementation enhances the default connection
- * class by logging all the major events that occur on the connection instance.
- */
-public class LoggingNHttpClientConnection extends DefaultNHttpClientConnection {
-
-    private final Log log;
-
-    public LoggingNHttpClientConnection(IOSession session,
-                                        int bufferSize,
-                                        int fragmentSizeHint,
-                                        ByteBufferAllocator allocator,
-                                        CharsetDecoder charDecoder,
-                                        CharsetEncoder charEncoder,
-                                        MessageConstraints constraints,
-                                        ContentLengthStrategy incomingContentStrategy,
-                                        ContentLengthStrategy outgoingContentStrategy,
-                                        NHttpMessageWriterFactory<HttpRequest> requestWriterFactory,
-                                        NHttpMessageParserFactory<HttpResponse> responseParserFactory,
-                                        Log log) {
-        super(session, bufferSize, fragmentSizeHint, allocator,
-                charDecoder, charEncoder, constraints, incomingContentStrategy,
-                outgoingContentStrategy, requestWriterFactory, responseParserFactory);
-        this.log = log;
-    }
-
-    @Override
-    public void close() throws IOException {
-        this.log.debug("Close connection");
-        super.close();
-    }
-
-    @Override
-    public void shutdown() throws IOException {
-        this.log.debug("Shutdown connection");
-        super.shutdown();
-    }
-
-    @Override
-    public void submitRequest(final HttpRequest request) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + this + ": "  + request.getRequestLine().toString());
-        }
-        super.submitRequest(request);
-    }
-
-    @Override
-    public void consumeInput(final NHttpClientEventHandler handler) {
-        this.log.debug("Consume input");
-        super.consumeInput(handler);
-    }
-
-    @Override
-    public void produceOutput(final NHttpClientEventHandler handler) {
-        this.log.debug("Produce output");
-        super.produceOutput(handler);
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnectionFactory.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnectionFactory.java	(nonexistent)
@@ -1,170 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.http.Header;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.config.MessageConstraints;
-import org.apache.http.impl.ConnSupport;
-import org.apache.http.impl.entity.StrictContentLengthStrategy;
-import org.apache.http.impl.nio.DefaultNHttpServerConnection;
-import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;
-import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;
-import org.apache.http.nio.*;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.SessionInputBuffer;
-import org.apache.http.nio.reactor.SessionOutputBuffer;
-import org.apache.http.nio.util.HeapByteBufferAllocator;
-import org.apache.synapse.transport.nhttp.AccessHandler;
-
-import java.io.IOException;
-
-/**
- * A connection factory implementation for DefaultNHttpServerConnection instances.
- * Based on the current logging configuration, this factory decides whether to create
- * regular DefaultNHttpServerConnection objects or to create LoggingNHttpServerConnection
- * objects. Also, depending on the logging configuration, this factory may choose to
- * wrap IOSession instances in LoggingIOSession objects.
- */
-public class LoggingNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {
-
-    private static final Log sourceConnLog = LogFactory.getLog(
-            LoggingConstants.SOURCE_CONNECTION_LOG_ID);
-    private static final Log sourceHeaderLog = LogFactory.getLog(
-            LoggingConstants.SOURCE_HEADER_LOG_ID);
-    private static final Log sourceSessionLog = LogFactory.getLog(
-            LoggingConstants.SOURCE_SESSION_LOG_ID);
-    private static final Log sourceWireLog = LogFactory.getLog(
-            LoggingConstants.SOURCE_WIRE_LOG_ID);
-
-    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =
-            new LoggingNHttpRequestParserFactory();
-    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =
-            new LoggingNHttpResponseWriterFactory();
-
-    private final ConnectionConfig config;
-
-    public LoggingNHttpServerConnectionFactory(ConnectionConfig config) {
-        this.config = config;
-    }
-
-    public DefaultNHttpServerConnection createConnection(IOSession session) {
-        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {
-            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,
-                    session, "http-listener");
-        }
-
-        if (sourceConnLog.isDebugEnabled()) {
-            return new LoggingNHttpServerConnection(
-                    session,
-                    config.getBufferSize(),
-                    config.getFragmentSizeHint(),
-                    HeapByteBufferAllocator.INSTANCE,
-                    ConnSupport.createDecoder(config),
-                    ConnSupport.createEncoder(config),
-                    config.getMessageConstraints(),
-                    StrictContentLengthStrategy.INSTANCE,
-                    StrictContentLengthStrategy.INSTANCE,
-                    requestParserFactory,
-                    responseWriterFactory,
-                    sourceConnLog);
-        } else {
-            return new DefaultNHttpServerConnection(
-                    session,
-                    config.getBufferSize(),
-                    config.getFragmentSizeHint(),
-                    HeapByteBufferAllocator.INSTANCE,
-                    ConnSupport.createDecoder(config),
-                    ConnSupport.createEncoder(config),
-                    config.getMessageConstraints(),
-                    StrictContentLengthStrategy.INSTANCE,
-                    StrictContentLengthStrategy.INSTANCE,
-                    requestParserFactory,
-                    responseWriterFactory);
-        }
-    }
-
-    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {
-        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,
-                                                      MessageConstraints messageConstraints) {
-            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);
-        }
-    }
-
-    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {
-        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {
-            return new LoggingNHttpResponseWriter(sessionBuffer);
-        }
-    }
-
-    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {
-
-        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {
-            super(buffer, constraints);
-        }
-
-        public HttpRequest parse() throws IOException, HttpException {
-            HttpRequest request = super.parse();
-            if (request != null) {
-                if (sourceHeaderLog.isDebugEnabled()) {
-                    sourceHeaderLog.debug(">> " + request.getRequestLine().toString());
-                    Header[] headers = request.getAllHeaders();
-                    for (Header header : headers) {
-                        sourceHeaderLog.debug(">> " + header.toString());
-                    }
-                }
-
-                if (AccessHandler.getAccessLog().isInfoEnabled()) {
-                    AccessHandler.getAccess().addAccessToQueue(request);
-                }
-            }
-            return request;
-        }
-    }
-
-    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {
-
-        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {
-            super(buffer);
-        }
-
-        public void write(final HttpResponse response) throws IOException, HttpException {
-            if (response != null) {
-                if (response != null && sourceHeaderLog.isDebugEnabled()) {
-                    sourceHeaderLog.debug("<< " + response.getStatusLine().toString());
-                    Header[] headers = response.getAllHeaders();
-                    for (Header header : headers) {
-                        sourceHeaderLog.debug("<< " + header.toString());
-                    }
-                }
-
-                if (AccessHandler.getAccessLog().isInfoEnabled()) {
-                    AccessHandler.getAccess().addAccessToQueue(response);
-                }
-            }
-            super.write(response);
-        }
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingClientEventHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingClientEventHandler.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingClientEventHandler.java	(nonexistent)
@@ -1,129 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.http.HttpException;
-import org.apache.http.HttpResponse;
-import org.apache.http.nio.ContentDecoder;
-import org.apache.http.nio.ContentEncoder;
-import org.apache.http.nio.NHttpClientConnection;
-import org.apache.http.nio.NHttpClientEventHandler;
-
-import java.io.IOException;
-
-/**
- * A decorator (wrapper) for NHttpClientEventHandler instances. This decorator
- * logs additional debug information regarding each of the events triggered on the
- * actual NHttpClientEventHandler instance. Most events are logged 'before' they are
- * dispatched to the wrapped NHttpClientEventHandler, but this implementation does
- * not modify the event arguments by any means. In that sense this decorator is
- * read-only and safe. This implementation does not log the exception event. It is
- * expected that the actual NHttpClientEventHandler will take the necessary steps to
- * log exceptions.
- */
-public class LoggingClientEventHandler implements NHttpClientEventHandler {
-
-    private final Log log;
-
-    private final NHttpClientEventHandler handler;
-
-    /**
-     * Create a new instance of the decorator.
-     *
-     * @param handler The instance of NHttpClientEventHandler to be decorated (wrapped)
-     */
-    public LoggingClientEventHandler(final NHttpClientEventHandler handler) {
-        if (handler == null) {
-            throw new IllegalArgumentException("HTTP client handler must not be null");
-        }
-        this.handler = handler;
-        this.log = LogFactory.getLog(handler.getClass());
-    }
-
-    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Connected (" + attachment + ")");
-        }
-        this.handler.connected(conn, attachment);
-    }
-
-    public void closed(final NHttpClientConnection conn) {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Closed");
-        }
-        this.handler.closed(conn);
-    }
-
-    public void endOfInput(NHttpClientConnection conn) throws IOException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Closed at remote end");
-        }
-        this.handler.endOfInput(conn);
-    }
-
-    public void exception(NHttpClientConnection conn, Exception ex) {
-        // Do not log errors at this level - Actual handler implementation should do that
-        this.handler.exception(conn, ex);
-    }
-
-    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": InRequest ready");
-        }
-        this.handler.requestReady(conn);
-    }
-
-    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Output ready");
-        }
-        this.handler.outputReady(conn, encoder);
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Content encoder " + encoder);
-        }
-    }
-
-    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {
-        HttpResponse response = conn.getHttpResponse();
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + " : " + response.getStatusLine());
-        }
-        this.handler.responseReceived(conn);
-    }
-
-    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Input ready");
-        }
-        this.handler.inputReady(conn, decoder);
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Content decoder " + decoder);
-        }
-    }
-
-    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {
-        if (this.log.isDebugEnabled()) {
-            this.log.debug("HTTP connection " + conn + ": Timeout");
-        }
-        this.handler.timeout(conn);
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLServerConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLServerConnectionFactory.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLServerConnectionFactory.java	(nonexistent)
@@ -1,57 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.impl.nio.DefaultNHttpServerConnection;
-import org.apache.http.nio.reactor.IOSession;
-import org.apache.http.nio.reactor.ssl.SSLIOSession;
-import org.apache.http.nio.reactor.ssl.SSLMode;
-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
-
-import javax.net.ssl.SSLContext;
-
-/**
- * The SSL-enabled version of the LoggingNHttpServerConnectionFactory. Identical in behavior
- * to the parent class, but wraps IOSession instances with SSLIOSession instances.
- */
-public class LoggingNHttpSSLServerConnectionFactory extends LoggingNHttpServerConnectionFactory {
-
-    private SSLContext sslContext;
-    private SSLSetupHandler sslSetupHandler;
-
-    public LoggingNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,
-                                                  SSLSetupHandler sslSetupHandler) {
-        super(config);
-        this.sslContext = sslContext;
-        this.sslSetupHandler = sslSetupHandler;
-    }
-
-    @Override
-    public DefaultNHttpServerConnection createConnection(IOSession session) {
-        final SSLIOSession ssliosession = new SSLIOSession(
-                session,
-                SSLMode.SERVER,
-                sslContext,
-                sslSetupHandler);
-        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);
-        return super.createConnection(ssliosession);
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/Wire.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/Wire.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/Wire.java	(nonexistent)
@@ -1,113 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-
-import java.nio.ByteBuffer;
-
-/**
- * A utility for logging wire-level information of HTTP connections.
- */
-public class Wire {
-
-    private final Log log;
-
-    public Wire(final Log log) {
-        this.log = log;
-    }
-
-    private void wire(final String header, final byte[] b, int pos, int off) {
-        StringBuilder builder = new StringBuilder();
-        for (int i = 0; i < off; i++) {
-            int ch = b[pos + i];
-            if (ch == 13) {
-                builder.append("[\\r]");
-            } else if (ch == 10) {
-                builder.append("[\\n]\"");
-                builder.insert(0, "\"");
-                builder.insert(0, header);
-                this.log.debug(builder.toString());
-                builder.setLength(0);
-            } else if ((ch < 32) || (ch > 127)) {
-                builder.append("[0x");
-                builder.append(Integer.toHexString(ch));
-                builder.append("]");
-            } else {
-                builder.append((char) ch);
-            }
-        }
-        if (builder.length() > 0) {
-            builder.append('\"');
-            builder.insert(0, '\"');
-            builder.insert(0, header);
-            this.log.debug(builder.toString());
-        }
-    }
-
-
-    public boolean isEnabled() {
-        return this.log.isDebugEnabled();
-    }
-
-    public void output(final byte[] b, int pos, int off) {
-        wire("<< ", b, pos, off);
-    }
-
-    public void input(final byte[] b, int pos, int off) {
-        wire(">> ", b, pos, off);
-    }
-
-    public void output(byte[] b) {
-        output(b, 0, b.length);
-    }
-
-    public void input(byte[] b) {
-        input(b, 0, b.length);
-    }
-
-    public void output(int b) {
-        output(new byte[] {(byte) b});
-    }
-
-    public void input(int b) {
-        input(new byte[] {(byte) b});
-    }
-
-    public void output(final ByteBuffer b) {
-        if (b.hasArray()) {
-            output(b.array(), b.arrayOffset() + b.position(), b.remaining());
-        } else {
-            byte[] tmp = new byte[b.remaining()];
-            b.get(tmp);
-            output(tmp);
-        }
-    }
-
-    public void input(final ByteBuffer b) {
-        if (b.hasArray()) {
-            input(b.array(), b.arrayOffset() + b.position(), b.remaining());
-        } else {
-            byte[] tmp = new byte[b.remaining()];
-            b.get(tmp);
-            input(tmp);
-        }
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingUtils.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingUtils.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingUtils.java	(nonexistent)
@@ -1,121 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one
- *  or more contributor license agreements.  See the NOTICE file
- *  distributed with this work for additional information
- *  regarding copyright ownership.  The ASF licenses this file
- *  to you under the Apache License, Version 2.0 (the
- *  "License"); you may not use this file except in compliance
- *  with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing,
- *  software distributed under the License is distributed on an
- *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- *  KIND, either express or implied.  See the License for the
- *  specific language governing permissions and limitations
- *  under the License.
- */
-
-package org.apache.synapse.transport.utils.logging;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.http.config.ConnectionConfig;
-import org.apache.http.impl.nio.DefaultHttpClientIODispatch;
-import org.apache.http.impl.nio.DefaultHttpServerIODispatch;
-import org.apache.http.nio.NHttpClientEventHandler;
-import org.apache.http.nio.NHttpServerEventHandler;
-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
-
-import javax.net.ssl.SSLContext;
-import java.util.Map;
-
-public class LoggingUtils {
-
-    /**
-     * Create a new DefaultHttpServerIODispatch instance using the provided parameters.
-     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,
-     * depending on the current logging configuration.
-     *
-     * @param handler An NHttpServerEventHandler instance
-     * @param config A ConnectionConfig instance
-     * @return A DefaultHttpServerIODispatch instance
-     */
-    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,
-                                                                  final ConnectionConfig config) {
-        return new DefaultHttpServerIODispatch(decorate(handler),
-                new LoggingNHttpServerConnectionFactory(config));
-    }
-
-    /**
-     * Create a new DefaultHttpServerIODispatch instance using the provided parameters.
-     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,
-     * depending on the current logging configuration.
-     *
-     * @param handler An NHttpServerEventHandler instance
-     * @param config A ConnectionConfig instance
-     * @param sslContext An SSLContext instance to initialize SSL support
-     * @param sslSetupHandler An SSLSetupHandler instance
-     * @return A DefaultHttpServerIODispatch instance
-     */
-    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,
-                                                                  final ConnectionConfig config,
-                                                                  final SSLContext sslContext,
-                                                                  final SSLSetupHandler sslSetupHandler) {
-        return new DefaultHttpServerIODispatch(decorate(handler),
-                new LoggingNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));
-    }
-
-    /**
-     * Create a new DefaultHttpClientIODispatch instance using the provided parameters.
-     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,
-     * depending on the current logging configuration.
-     *
-     * @param handler An NHttpClientEventHandler instance
-     * @param config A ConnectionConfig instance
-     * @return A DefaultHttpClientIODispatch instance
-     */
-    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,
-                                                                  final ConnectionConfig config) {
-        return new DefaultHttpClientIODispatch(decorate(handler),
-                new LoggingNHttpClientConnectionFactory(config));
-    }
-
-    /**
-     * Create a new DefaultHttpClientIODispatch instance using the provided parameters.
-     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,
-     * depending on the current logging configuration.
-     *
-     * @param handler An NHttpServerEventHandler instance
-     * @param config A ConnectionConfig instance
-     * @param sslContext An SSLContext instance to initialize SSL support
-     * @param sslSetupHandler An SSLSetupHandler instance
-     * @param customContexts A Map of endpoints and SSLContext instances
-     * @return A DefaultHttpClientIODispatch instance
-     */
-    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,
-                                                                  final ConnectionConfig config,
-                                                                  final SSLContext sslContext,
-                                                                  final SSLSetupHandler sslSetupHandler,
-                                                                  Map<String, SSLContext> customContexts) {
-        return new DefaultHttpClientIODispatch(decorate(handler),
-                new LoggingNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));
-    }
-
-    private static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {
-        Log log = LogFactory.getLog(handler.getClass());
-        if (log.isDebugEnabled()) {
-            handler = new LoggingClientEventHandler(handler);
-        }
-        return handler;
-    }
-
-    private static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {
-        Log log = LogFactory.getLog(handler.getClass());
-        if (log.isDebugEnabled()) {
-            handler = new LoggingServerEventHandler(handler);
-        }
-        return handler;
-    }
-}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java	(revision 1776096)
@@ -43,7 +43,7 @@
 import org.apache.http.nio.reactor.ListenerEndpoint;
 import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
 import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;
-import org.apache.synapse.transport.utils.logging.LoggingUtils;
+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;
 
 import javax.net.ssl.SSLContext;
 import java.io.IOException;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java	(revision 1776096)
@@ -31,7 +31,7 @@
 import org.apache.axis2.description.TransportOutDescription;
 import org.apache.axis2.transport.base.ParamUtils;
 import org.apache.axiom.om.OMElement;
-import org.apache.synapse.transport.utils.logging.LoggingUtils;
+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;
 import org.apache.synapse.transport.utils.sslcert.CertificateVerificationConfig;
 import org.apache.synapse.transport.utils.sslcert.CertificateVerificationException;
 import org.apache.synapse.transport.utils.sslcert.adaptor.SynapseAdaptorForOcspCrl;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java	(revision 1776096)
@@ -46,7 +46,7 @@
 import org.apache.http.nio.reactor.IOEventDispatch;
 import org.apache.http.nio.reactor.IOSession;
 import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
-import org.apache.synapse.transport.utils.logging.LoggingUtils;
+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;
 
 public class HttpCoreNIOSSLListener extends HttpCoreNIOListener {
 
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java	(revision 1776096)
@@ -59,7 +59,7 @@
 import org.apache.synapse.transport.nhttp.util.MessageFormatterDecoratorFactory;
 import org.apache.synapse.transport.nhttp.util.NhttpUtil;
 import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;
-import org.apache.synapse.transport.utils.logging.LoggingUtils;
+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;
 
 import javax.net.ssl.SSLContext;
 import java.io.IOException;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingIOSession.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingIOSession.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingIOSession.java	(revision 1776096)
@@ -0,0 +1,248 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.SessionBufferStatus;
+import org.apache.http.nio.reactor.ssl.SSLIOSession;
+
+import java.io.IOException;
+import java.net.SocketAddress;
+import java.nio.ByteBuffer;
+import java.nio.channels.ByteChannel;
+import java.nio.channels.SelectionKey;
+import java.util.concurrent.atomic.AtomicLong;
+
+/**
+ * A decorator (wrapper) for IOSession instances. This decorator logs additional
+ * debug information regarding each of the events triggered on the actual IOSession
+ * instance. Most events are logged 'before' they are dispatched to the wrapped
+ * IOSession, but this implementation does not modify the event arguments by any means.
+ * In that sense this decorator is read-only and safe. This implementation also facilitates
+ * intercepting and logging HTTP messages at wire-level.
+ */
+public class LoggingIOSession implements IOSession {
+
+    private static AtomicLong COUNT = new AtomicLong(0);
+
+    private final Log sessionLog;
+    private final Wire wireLog;
+    private final IOSession session;
+    private final ByteChannel channel;
+    private final String id;
+
+    /**
+     * Create a new instance of the decorator.
+     *
+     * @param sessionLog Log instance used to log IOSession events.
+     * @param wireLog Log instance used to log wire-level HTTP messages.
+     * @param session IOSession to be decorated.
+     * @param id An identifier (name) that will be attached to the IOSession for the logging
+     *           purposes.
+     */
+    public LoggingIOSession(
+            final Log sessionLog,
+            final Log wireLog,
+            final IOSession session,
+            final String id) {
+        if (session == null) {
+            throw new IllegalArgumentException("I/O session must not be null");
+        }
+        this.session = session;
+        this.channel = new LoggingByteChannel();
+        this.id = id + "-" + COUNT.incrementAndGet();
+        this.sessionLog = sessionLog;
+        this.wireLog = new Wire(wireLog);
+    }
+
+    public int getStatus() {
+        return this.session.getStatus();
+    }
+
+    public ByteChannel channel() {
+        return this.channel;
+    }
+
+    public SocketAddress getLocalAddress() {
+        return this.session.getLocalAddress();
+    }
+
+    public SocketAddress getRemoteAddress() {
+        return this.session.getRemoteAddress();
+    }
+
+    public int getEventMask() {
+        return this.session.getEventMask();
+    }
+
+    private static String formatOps(int ops) {
+        StringBuilder buffer = new StringBuilder(6);
+        buffer.append('[');
+        if ((ops & SelectionKey.OP_READ) > 0) {
+            buffer.append('r');
+        }
+        if ((ops & SelectionKey.OP_WRITE) > 0) {
+            buffer.append('w');
+        }
+        if ((ops & SelectionKey.OP_ACCEPT) > 0) {
+            buffer.append('a');
+        }
+        if ((ops & SelectionKey.OP_CONNECT) > 0) {
+            buffer.append('c');
+        }
+        buffer.append(']');
+        return buffer.toString();
+    }
+
+    private String getPreamble() {
+        String preamble = "I/O session " + this.id + " " + this.session;
+        if (this.session instanceof SSLIOSession) {
+            return "SSL " + preamble;
+        } else {
+            return preamble;
+        }
+    }
+
+    public void setEventMask(int ops) {
+        if (sessionLog.isDebugEnabled()) {
+            sessionLog.debug(getPreamble() + ": Set event mask " + formatOps(ops));
+        }
+        this.session.setEventMask(ops);
+    }
+
+    public void setEvent(int op) {
+        if (sessionLog.isDebugEnabled()) {
+            sessionLog.debug(getPreamble() + ": Set event " + formatOps(op));
+        }
+        this.session.setEvent(op);
+    }
+
+    public void clearEvent(int op) {
+        if (sessionLog.isDebugEnabled()) {
+            sessionLog.debug(getPreamble() + ": Clear event " + formatOps(op));
+        }
+        this.session.clearEvent(op);
+    }
+
+    public void close() {
+        if (sessionLog.isDebugEnabled()) {
+            sessionLog.debug(getPreamble() + ": Close");
+        }
+        this.session.close();
+    }
+
+    public boolean isClosed() {
+        return this.session.isClosed();
+    }
+
+    public void shutdown() {
+        if (sessionLog.isDebugEnabled()) {
+            sessionLog.debug(getPreamble() + ": Shutdown");
+        }
+        this.session.shutdown();
+    }
+
+    public int getSocketTimeout() {
+        return this.session.getSocketTimeout();
+    }
+
+    public void setSocketTimeout(int timeout) {
+        if (sessionLog.isDebugEnabled()) {
+            sessionLog.debug(getPreamble() + ": Set timeout " + timeout);
+        }
+        this.session.setSocketTimeout(timeout);
+    }
+
+    public void setBufferStatus(final SessionBufferStatus status) {
+        this.session.setBufferStatus(status);
+    }
+
+    public boolean hasBufferedInput() {
+        return this.session.hasBufferedInput();
+    }
+
+    public boolean hasBufferedOutput() {
+        return this.session.hasBufferedOutput();
+    }
+
+    public Object getAttribute(final String name) {
+        return this.session.getAttribute(name);
+    }
+
+    public void setAttribute(final String name, final Object obj) {
+        if (sessionLog.isDebugEnabled()) {
+            sessionLog.debug(getPreamble() + ": Set attribute " + name);
+        }
+        this.session.setAttribute(name, obj);
+    }
+
+    public Object removeAttribute(final String name) {
+        if (sessionLog.isDebugEnabled()) {
+            sessionLog.debug(getPreamble() + ": Remove attribute " + name);
+        }
+        return this.session.removeAttribute(name);
+    }
+
+    class LoggingByteChannel implements ByteChannel {
+
+        public int read(final ByteBuffer dst) throws IOException {
+            int bytesRead = session.channel().read(dst);
+            if (sessionLog.isDebugEnabled()) {
+                sessionLog.debug(getPreamble() + ": " + bytesRead + " bytes read");
+            }
+            if (bytesRead > 0 && wireLog.isEnabled()) {
+                ByteBuffer b = dst.duplicate();
+                int p = b.position();
+                b.limit(p);
+                b.position(p - bytesRead);
+                wireLog.input(b);
+            }
+            return bytesRead;
+        }
+
+        public int write(final ByteBuffer src) throws IOException {
+            int byteWritten = session.channel().write(src);
+            if (sessionLog.isDebugEnabled()) {
+                sessionLog.debug(getPreamble() + ": " + byteWritten + " bytes written");
+            }
+            if (byteWritten > 0 && wireLog.isEnabled()) {
+                ByteBuffer b = src.duplicate();
+                int p = b.position();
+                b.limit(p);
+                b.position(p - byteWritten);
+                wireLog.output(b);
+            }
+            return byteWritten;
+        }
+
+        public void close() throws IOException {
+            if (sessionLog.isDebugEnabled()) {
+                sessionLog.debug(getPreamble() + ": Channel close");
+            }
+            session.channel().close();
+        }
+
+        public boolean isOpen() {
+            return session.channel().isOpen();
+        }
+
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingConstants.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingConstants.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingConstants.java	(revision 1776096)
@@ -0,0 +1,43 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+public class LoggingConstants {
+
+    public static final String SOURCE_CONNECTION_LOG_ID =
+            "org.apache.synapse.transport.http.conn.SourceConnection";
+    public static final String TARGET_CONNECTION_LOG_ID =
+            "org.apache.synapse.transport.http.conn.TargetConnection";
+
+    public static final String SOURCE_HEADER_LOG_ID =
+            "org.apache.synapse.transport.http.headers.SourceHeaders";
+    public static final String TARGET_HEADER_LOG_ID =
+            "org.apache.synapse.transport.http.headers.TargetHeaders";
+
+    public static final String SOURCE_SESSION_LOG_ID =
+            "org.apache.synapse.transport.http.session.SourceSession";
+    public static final String TARGET_SESSION_LOG_ID =
+            "org.apache.synapse.transport.http.session.TargetSession";
+
+    public static final String SOURCE_WIRE_LOG_ID =
+            "org.apache.synapse.transport.http.wire.SourceWire";
+    public static final String TARGET_WIRE_LOG_ID =
+            "org.apache.synapse.transport.http.wire.TargetWire";
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java	(revision 1776096)
@@ -0,0 +1,97 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+import org.apache.http.HttpException;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.config.MessageConstraints;
+import org.apache.http.entity.ContentLengthStrategy;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.nio.NHttpClientEventHandler;
+import org.apache.http.nio.NHttpMessageParserFactory;
+import org.apache.http.nio.NHttpMessageWriterFactory;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.util.ByteBufferAllocator;
+
+import java.io.IOException;
+import java.nio.charset.CharsetDecoder;
+import java.nio.charset.CharsetEncoder;
+
+/**
+ * An extension of the DefaultNHttpClientConnection class, that provides some
+ * additional logging features. This implementation enhances the default connection
+ * class by logging all the major events that occur on the connection instance.
+ */
+public class LoggingNHttpClientConnection extends DefaultNHttpClientConnection {
+
+    private final Log log;
+
+    public LoggingNHttpClientConnection(IOSession session,
+                                        int bufferSize,
+                                        int fragmentSizeHint,
+                                        ByteBufferAllocator allocator,
+                                        CharsetDecoder charDecoder,
+                                        CharsetEncoder charEncoder,
+                                        MessageConstraints constraints,
+                                        ContentLengthStrategy incomingContentStrategy,
+                                        ContentLengthStrategy outgoingContentStrategy,
+                                        NHttpMessageWriterFactory<HttpRequest> requestWriterFactory,
+                                        NHttpMessageParserFactory<HttpResponse> responseParserFactory,
+                                        Log log) {
+        super(session, bufferSize, fragmentSizeHint, allocator,
+                charDecoder, charEncoder, constraints, incomingContentStrategy,
+                outgoingContentStrategy, requestWriterFactory, responseParserFactory);
+        this.log = log;
+    }
+
+    @Override
+    public void close() throws IOException {
+        this.log.debug("Close connection");
+        super.close();
+    }
+
+    @Override
+    public void shutdown() throws IOException {
+        this.log.debug("Shutdown connection");
+        super.shutdown();
+    }
+
+    @Override
+    public void submitRequest(final HttpRequest request) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + this + ": "  + request.getRequestLine().toString());
+        }
+        super.submitRequest(request);
+    }
+
+    @Override
+    public void consumeInput(final NHttpClientEventHandler handler) {
+        this.log.debug("Consume input");
+        super.consumeInput(handler);
+    }
+
+    @Override
+    public void produceOutput(final NHttpClientEventHandler handler) {
+        this.log.debug("Produce output");
+        super.produceOutput(handler);
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java	(revision 1776096)
@@ -0,0 +1,170 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.Header;
+import org.apache.http.HttpException;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.config.MessageConstraints;
+import org.apache.http.impl.ConnSupport;
+import org.apache.http.impl.entity.StrictContentLengthStrategy;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;
+import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;
+import org.apache.http.nio.*;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.SessionInputBuffer;
+import org.apache.http.nio.reactor.SessionOutputBuffer;
+import org.apache.http.nio.util.HeapByteBufferAllocator;
+import org.apache.synapse.transport.nhttp.AccessHandler;
+
+import java.io.IOException;
+
+/**
+ * A connection factory implementation for DefaultNHttpServerConnection instances.
+ * Based on the current logging configuration, this factory decides whether to create
+ * regular DefaultNHttpServerConnection objects or to create LoggingNHttpServerConnection
+ * objects. Also, depending on the logging configuration, this factory may choose to
+ * wrap IOSession instances in LoggingIOSession objects.
+ */
+public class LoggingNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {
+
+    private static final Log sourceConnLog = LogFactory.getLog(
+            LoggingConstants.SOURCE_CONNECTION_LOG_ID);
+    private static final Log sourceHeaderLog = LogFactory.getLog(
+            LoggingConstants.SOURCE_HEADER_LOG_ID);
+    private static final Log sourceSessionLog = LogFactory.getLog(
+            LoggingConstants.SOURCE_SESSION_LOG_ID);
+    private static final Log sourceWireLog = LogFactory.getLog(
+            LoggingConstants.SOURCE_WIRE_LOG_ID);
+
+    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =
+            new LoggingNHttpRequestParserFactory();
+    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =
+            new LoggingNHttpResponseWriterFactory();
+
+    private final ConnectionConfig config;
+
+    public LoggingNHttpServerConnectionFactory(ConnectionConfig config) {
+        this.config = config;
+    }
+
+    public DefaultNHttpServerConnection createConnection(IOSession session) {
+        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {
+            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,
+                    session, "http-listener");
+        }
+
+        if (sourceConnLog.isDebugEnabled()) {
+            return new LoggingNHttpServerConnection(
+                    session,
+                    config.getBufferSize(),
+                    config.getFragmentSizeHint(),
+                    HeapByteBufferAllocator.INSTANCE,
+                    ConnSupport.createDecoder(config),
+                    ConnSupport.createEncoder(config),
+                    config.getMessageConstraints(),
+                    StrictContentLengthStrategy.INSTANCE,
+                    StrictContentLengthStrategy.INSTANCE,
+                    requestParserFactory,
+                    responseWriterFactory,
+                    sourceConnLog);
+        } else {
+            return new DefaultNHttpServerConnection(
+                    session,
+                    config.getBufferSize(),
+                    config.getFragmentSizeHint(),
+                    HeapByteBufferAllocator.INSTANCE,
+                    ConnSupport.createDecoder(config),
+                    ConnSupport.createEncoder(config),
+                    config.getMessageConstraints(),
+                    StrictContentLengthStrategy.INSTANCE,
+                    StrictContentLengthStrategy.INSTANCE,
+                    requestParserFactory,
+                    responseWriterFactory);
+        }
+    }
+
+    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {
+        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,
+                                                      MessageConstraints messageConstraints) {
+            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);
+        }
+    }
+
+    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {
+        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {
+            return new LoggingNHttpResponseWriter(sessionBuffer);
+        }
+    }
+
+    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {
+
+        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {
+            super(buffer, constraints);
+        }
+
+        public HttpRequest parse() throws IOException, HttpException {
+            HttpRequest request = super.parse();
+            if (request != null) {
+                if (sourceHeaderLog.isDebugEnabled()) {
+                    sourceHeaderLog.debug(">> " + request.getRequestLine().toString());
+                    Header[] headers = request.getAllHeaders();
+                    for (Header header : headers) {
+                        sourceHeaderLog.debug(">> " + header.toString());
+                    }
+                }
+
+                if (AccessHandler.getAccessLog().isInfoEnabled()) {
+                    AccessHandler.getAccess().addAccessToQueue(request);
+                }
+            }
+            return request;
+        }
+    }
+
+    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {
+
+        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {
+            super(buffer);
+        }
+
+        public void write(final HttpResponse response) throws IOException, HttpException {
+            if (response != null) {
+                if (response != null && sourceHeaderLog.isDebugEnabled()) {
+                    sourceHeaderLog.debug("<< " + response.getStatusLine().toString());
+                    Header[] headers = response.getAllHeaders();
+                    for (Header header : headers) {
+                        sourceHeaderLog.debug("<< " + header.toString());
+                    }
+                }
+
+                if (AccessHandler.getAccessLog().isInfoEnabled()) {
+                    AccessHandler.getAccess().addAccessToQueue(response);
+                }
+            }
+            super.write(response);
+        }
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingClientEventHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingClientEventHandler.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingClientEventHandler.java	(revision 1776096)
@@ -0,0 +1,129 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.HttpException;
+import org.apache.http.HttpResponse;
+import org.apache.http.nio.ContentDecoder;
+import org.apache.http.nio.ContentEncoder;
+import org.apache.http.nio.NHttpClientConnection;
+import org.apache.http.nio.NHttpClientEventHandler;
+
+import java.io.IOException;
+
+/**
+ * A decorator (wrapper) for NHttpClientEventHandler instances. This decorator
+ * logs additional debug information regarding each of the events triggered on the
+ * actual NHttpClientEventHandler instance. Most events are logged 'before' they are
+ * dispatched to the wrapped NHttpClientEventHandler, but this implementation does
+ * not modify the event arguments by any means. In that sense this decorator is
+ * read-only and safe. This implementation does not log the exception event. It is
+ * expected that the actual NHttpClientEventHandler will take the necessary steps to
+ * log exceptions.
+ */
+public class LoggingClientEventHandler implements NHttpClientEventHandler {
+
+    private final Log log;
+
+    private final NHttpClientEventHandler handler;
+
+    /**
+     * Create a new instance of the decorator.
+     *
+     * @param handler The instance of NHttpClientEventHandler to be decorated (wrapped)
+     */
+    public LoggingClientEventHandler(final NHttpClientEventHandler handler) {
+        if (handler == null) {
+            throw new IllegalArgumentException("HTTP client handler must not be null");
+        }
+        this.handler = handler;
+        this.log = LogFactory.getLog(handler.getClass());
+    }
+
+    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Connected (" + attachment + ")");
+        }
+        this.handler.connected(conn, attachment);
+    }
+
+    public void closed(final NHttpClientConnection conn) {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Closed");
+        }
+        this.handler.closed(conn);
+    }
+
+    public void endOfInput(NHttpClientConnection conn) throws IOException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Closed at remote end");
+        }
+        this.handler.endOfInput(conn);
+    }
+
+    public void exception(NHttpClientConnection conn, Exception ex) {
+        // Do not log errors at this level - Actual handler implementation should do that
+        this.handler.exception(conn, ex);
+    }
+
+    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": InRequest ready");
+        }
+        this.handler.requestReady(conn);
+    }
+
+    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Output ready");
+        }
+        this.handler.outputReady(conn, encoder);
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Content encoder " + encoder);
+        }
+    }
+
+    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {
+        HttpResponse response = conn.getHttpResponse();
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + " : " + response.getStatusLine());
+        }
+        this.handler.responseReceived(conn);
+    }
+
+    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Input ready");
+        }
+        this.handler.inputReady(conn, decoder);
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Content decoder " + decoder);
+        }
+    }
+
+    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Timeout");
+        }
+        this.handler.timeout(conn);
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java	(revision 1776096)
@@ -0,0 +1,57 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLIOSession;
+import org.apache.http.nio.reactor.ssl.SSLMode;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+
+import javax.net.ssl.SSLContext;
+
+/**
+ * The SSL-enabled version of the LoggingNHttpServerConnectionFactory. Identical in behavior
+ * to the parent class, but wraps IOSession instances with SSLIOSession instances.
+ */
+public class LoggingNHttpSSLServerConnectionFactory extends LoggingNHttpServerConnectionFactory {
+
+    private SSLContext sslContext;
+    private SSLSetupHandler sslSetupHandler;
+
+    public LoggingNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,
+                                                  SSLSetupHandler sslSetupHandler) {
+        super(config);
+        this.sslContext = sslContext;
+        this.sslSetupHandler = sslSetupHandler;
+    }
+
+    @Override
+    public DefaultNHttpServerConnection createConnection(IOSession session) {
+        final SSLIOSession ssliosession = new SSLIOSession(
+                session,
+                SSLMode.SERVER,
+                sslContext,
+                sslSetupHandler);
+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);
+        return super.createConnection(ssliosession);
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/Wire.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/Wire.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/Wire.java	(revision 1776096)
@@ -0,0 +1,113 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+
+import java.nio.ByteBuffer;
+
+/**
+ * A utility for logging wire-level information of HTTP connections.
+ */
+public class Wire {
+
+    private final Log log;
+
+    public Wire(final Log log) {
+        this.log = log;
+    }
+
+    private void wire(final String header, final byte[] b, int pos, int off) {
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0; i < off; i++) {
+            int ch = b[pos + i];
+            if (ch == 13) {
+                builder.append("[\\r]");
+            } else if (ch == 10) {
+                builder.append("[\\n]\"");
+                builder.insert(0, "\"");
+                builder.insert(0, header);
+                this.log.debug(builder.toString());
+                builder.setLength(0);
+            } else if ((ch < 32) || (ch > 127)) {
+                builder.append("[0x");
+                builder.append(Integer.toHexString(ch));
+                builder.append("]");
+            } else {
+                builder.append((char) ch);
+            }
+        }
+        if (builder.length() > 0) {
+            builder.append('\"');
+            builder.insert(0, '\"');
+            builder.insert(0, header);
+            this.log.debug(builder.toString());
+        }
+    }
+
+
+    public boolean isEnabled() {
+        return this.log.isDebugEnabled();
+    }
+
+    public void output(final byte[] b, int pos, int off) {
+        wire("<< ", b, pos, off);
+    }
+
+    public void input(final byte[] b, int pos, int off) {
+        wire(">> ", b, pos, off);
+    }
+
+    public void output(byte[] b) {
+        output(b, 0, b.length);
+    }
+
+    public void input(byte[] b) {
+        input(b, 0, b.length);
+    }
+
+    public void output(int b) {
+        output(new byte[] {(byte) b});
+    }
+
+    public void input(int b) {
+        input(new byte[] {(byte) b});
+    }
+
+    public void output(final ByteBuffer b) {
+        if (b.hasArray()) {
+            output(b.array(), b.arrayOffset() + b.position(), b.remaining());
+        } else {
+            byte[] tmp = new byte[b.remaining()];
+            b.get(tmp);
+            output(tmp);
+        }
+    }
+
+    public void input(final ByteBuffer b) {
+        if (b.hasArray()) {
+            input(b.array(), b.arrayOffset() + b.position(), b.remaining());
+        } else {
+            byte[] tmp = new byte[b.remaining()];
+            b.get(tmp);
+            input(tmp);
+        }
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java	(revision 1776096)
@@ -0,0 +1,121 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;
+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;
+import org.apache.http.nio.NHttpClientEventHandler;
+import org.apache.http.nio.NHttpServerEventHandler;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+
+import javax.net.ssl.SSLContext;
+import java.util.Map;
+
+public class LoggingUtils {
+
+    /**
+     * Create a new DefaultHttpServerIODispatch instance using the provided parameters.
+     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,
+     * depending on the current logging configuration.
+     *
+     * @param handler An NHttpServerEventHandler instance
+     * @param config A ConnectionConfig instance
+     * @return A DefaultHttpServerIODispatch instance
+     */
+    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,
+                                                                  final ConnectionConfig config) {
+        return new DefaultHttpServerIODispatch(decorate(handler),
+                new LoggingNHttpServerConnectionFactory(config));
+    }
+
+    /**
+     * Create a new DefaultHttpServerIODispatch instance using the provided parameters.
+     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,
+     * depending on the current logging configuration.
+     *
+     * @param handler An NHttpServerEventHandler instance
+     * @param config A ConnectionConfig instance
+     * @param sslContext An SSLContext instance to initialize SSL support
+     * @param sslSetupHandler An SSLSetupHandler instance
+     * @return A DefaultHttpServerIODispatch instance
+     */
+    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,
+                                                                  final ConnectionConfig config,
+                                                                  final SSLContext sslContext,
+                                                                  final SSLSetupHandler sslSetupHandler) {
+        return new DefaultHttpServerIODispatch(decorate(handler),
+                new LoggingNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));
+    }
+
+    /**
+     * Create a new DefaultHttpClientIODispatch instance using the provided parameters.
+     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,
+     * depending on the current logging configuration.
+     *
+     * @param handler An NHttpClientEventHandler instance
+     * @param config A ConnectionConfig instance
+     * @return A DefaultHttpClientIODispatch instance
+     */
+    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,
+                                                                  final ConnectionConfig config) {
+        return new DefaultHttpClientIODispatch(decorate(handler),
+                new LoggingNHttpClientConnectionFactory(config));
+    }
+
+    /**
+     * Create a new DefaultHttpClientIODispatch instance using the provided parameters.
+     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,
+     * depending on the current logging configuration.
+     *
+     * @param handler An NHttpServerEventHandler instance
+     * @param config A ConnectionConfig instance
+     * @param sslContext An SSLContext instance to initialize SSL support
+     * @param sslSetupHandler An SSLSetupHandler instance
+     * @param customContexts A Map of endpoints and SSLContext instances
+     * @return A DefaultHttpClientIODispatch instance
+     */
+    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,
+                                                                  final ConnectionConfig config,
+                                                                  final SSLContext sslContext,
+                                                                  final SSLSetupHandler sslSetupHandler,
+                                                                  Map<String, SSLContext> customContexts) {
+        return new DefaultHttpClientIODispatch(decorate(handler),
+                new LoggingNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));
+    }
+
+    private static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {
+        Log log = LogFactory.getLog(handler.getClass());
+        if (log.isDebugEnabled()) {
+            handler = new LoggingClientEventHandler(handler);
+        }
+        return handler;
+    }
+
+    private static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {
+        Log log = LogFactory.getLog(handler.getClass());
+        if (log.isDebugEnabled()) {
+            handler = new LoggingServerEventHandler(handler);
+        }
+        return handler;
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java	(revision 1776096)
@@ -0,0 +1,172 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.Header;
+import org.apache.http.HttpException;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.config.MessageConstraints;
+import org.apache.http.impl.ConnSupport;
+import org.apache.http.impl.entity.StrictContentLengthStrategy;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;
+import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;
+import org.apache.http.nio.*;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.SessionInputBuffer;
+import org.apache.http.nio.reactor.SessionOutputBuffer;
+import org.apache.http.nio.util.HeapByteBufferAllocator;
+import org.apache.synapse.transport.nhttp.AccessHandler;
+
+import java.io.IOException;
+
+/**
+ * A connection factory implementation for DefaultNHttpClientConnection instances.
+ * Based on the current logging configuration, this factory decides whether to create
+ * regular DefaultNHttpClientConnection objects or to create LoggingNHttpClientConnection
+ * objects. Also, depending on the logging configuration, this factory may choose to
+ * wrap IOSession instances in LoggingIOSession objects.
+ */
+public class LoggingNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {
+
+    private static final Log targetConnLog = LogFactory.getLog(
+            LoggingConstants.TARGET_CONNECTION_LOG_ID);
+    private static final Log targetHeaderLog = LogFactory.getLog(
+            LoggingConstants.TARGET_HEADER_LOG_ID);
+    private static final Log targetSessionLog = LogFactory.getLog(
+            LoggingConstants.TARGET_SESSION_LOG_ID);
+    private static final Log targetWireLog = LogFactory.getLog(
+            LoggingConstants.TARGET_WIRE_LOG_ID);
+
+    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =
+            new LoggingNHttpRequestWriterFactory();
+    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =
+            new LoggingNHttpResponseParserFactory();
+
+    private final ConnectionConfig config;
+
+    public LoggingNHttpClientConnectionFactory(ConnectionConfig config) {
+        this.config = config;
+    }
+
+    public DefaultNHttpClientConnection createConnection(IOSession session) {
+        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {
+            session = new LoggingIOSession(targetSessionLog, targetWireLog,
+                    session, "http-sender");
+        }
+
+        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {
+            return new LoggingNHttpClientConnection(
+                    session,
+                    config.getBufferSize(),
+                    config.getFragmentSizeHint(),
+                    HeapByteBufferAllocator.INSTANCE,
+                    ConnSupport.createDecoder(config),
+                    ConnSupport.createEncoder(config),
+                    config.getMessageConstraints(),
+                    StrictContentLengthStrategy.INSTANCE,
+                    StrictContentLengthStrategy.INSTANCE,
+                    requestWriterFactory,
+                    responseParserFactory,
+                    targetConnLog);
+        } else {
+            return new DefaultNHttpClientConnection(
+                    session,
+                    config.getBufferSize(),
+                    config.getFragmentSizeHint(),
+                    HeapByteBufferAllocator.INSTANCE,
+                    ConnSupport.createDecoder(config),
+                    ConnSupport.createEncoder(config),
+                    config.getMessageConstraints(),
+                    StrictContentLengthStrategy.INSTANCE,
+                    StrictContentLengthStrategy.INSTANCE,
+                    requestWriterFactory,
+                    responseParserFactory);
+        }
+    }
+
+    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {
+        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {
+            return new LoggingNHttpRequestWriter(sessionBuffer);
+        }
+    }
+
+    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {
+        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,
+                                                      MessageConstraints messageConstraints) {
+            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);
+        }
+    }
+
+    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {
+
+        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {
+            super(buffer);
+        }
+
+        public void write(final HttpRequest request) throws IOException, HttpException {
+            if (request != null) {
+                if (targetHeaderLog.isDebugEnabled()) {
+                    targetHeaderLog.debug(">> " + request.getRequestLine().toString());
+                    Header[] headers = request.getAllHeaders();
+                    for (Header header : headers) {
+                        targetHeaderLog.debug(">> " + header.toString());
+                    }
+                }
+
+                if (AccessHandler.getAccessLog().isInfoEnabled()) {
+                    AccessHandler.getAccess().addAccessToQueue(request);
+                }
+            }
+            super.write(request);
+        }
+
+    }
+
+    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {
+
+        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {
+            super(buffer, constraints);
+        }
+
+        public HttpResponse parse() throws IOException, HttpException {
+            HttpResponse response = super.parse();
+            if (response != null) {
+                if (targetHeaderLog.isDebugEnabled()) {
+                    targetHeaderLog.debug("<< " + response.getStatusLine().toString());
+                    Header[] headers = response.getAllHeaders();
+                    for (Header header : headers) {
+                        targetHeaderLog.debug("<< " + header.toString());
+                    }
+                }
+
+                if (AccessHandler.getAccessLog().isInfoEnabled()) {
+                    AccessHandler.getAccess().addAccessToQueue(response);
+                }
+            }
+            return response;
+        }
+
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnection.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnection.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnection.java	(revision 1776096)
@@ -0,0 +1,98 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+import org.apache.http.HttpException;
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpResponse;
+import org.apache.http.config.MessageConstraints;
+import org.apache.http.entity.ContentLengthStrategy;
+import org.apache.http.impl.nio.DefaultNHttpServerConnection;
+import org.apache.http.nio.NHttpMessageParserFactory;
+import org.apache.http.nio.NHttpMessageWriterFactory;
+import org.apache.http.nio.NHttpServerEventHandler;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.util.ByteBufferAllocator;
+
+import java.io.IOException;
+import java.nio.charset.CharsetDecoder;
+import java.nio.charset.CharsetEncoder;
+
+/**
+ * An extension of the DefaultNHttpServerConnection class, that provides some
+ * additional logging features. This implementation enhances the default connection
+ * class by logging all the major events that occur on the connection instance.
+ */
+public class LoggingNHttpServerConnection extends DefaultNHttpServerConnection {
+
+    private final Log log;
+
+    public LoggingNHttpServerConnection(IOSession session,
+                                        int bufferSize,
+                                        int fragmentSizeHint,
+                                        ByteBufferAllocator allocator,
+                                        CharsetDecoder charDecoder,
+                                        CharsetEncoder charEncoder,
+                                        MessageConstraints constraints,
+                                        ContentLengthStrategy incomingContentStrategy,
+                                        ContentLengthStrategy outgoingContentStrategy,
+                                        NHttpMessageParserFactory<HttpRequest> requestParserFactory,
+                                        NHttpMessageWriterFactory<HttpResponse> responseWriterFactory,
+                                        Log log) {
+        super(session, bufferSize, fragmentSizeHint, allocator,
+                charDecoder, charEncoder, constraints, incomingContentStrategy,
+                outgoingContentStrategy, requestParserFactory, responseWriterFactory);
+        this.log = log;
+    }
+
+    @Override
+    public void close() throws IOException {
+        this.log.debug("Close connection");
+        super.close();
+    }
+
+    @Override
+    public void shutdown() throws IOException {
+        this.log.debug("Shutdown connection");
+        super.shutdown();
+    }
+
+    @Override
+    public void submitResponse(final HttpResponse response) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + this + ": "  + response.getStatusLine().toString());
+        }
+        super.submitResponse(response);
+    }
+
+    @Override
+    public void consumeInput(final NHttpServerEventHandler handler) {
+        this.log.debug("Consume input");
+        super.consumeInput(handler);
+    }
+
+    @Override
+    public void produceOutput(final NHttpServerEventHandler handler) {
+        this.log.debug("Produce output");
+        super.produceOutput(handler);
+    }
+
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java	(revision 1776096)
@@ -0,0 +1,80 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.http.config.ConnectionConfig;
+import org.apache.http.impl.nio.DefaultNHttpClientConnection;
+import org.apache.http.nio.reactor.IOSession;
+import org.apache.http.nio.reactor.ssl.SSLIOSession;
+import org.apache.http.nio.reactor.ssl.SSLMode;
+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
+
+import javax.net.ssl.SSLContext;
+import java.net.InetSocketAddress;
+import java.util.Map;
+
+/**
+ * The SSL-enabled version of the LoggingNHttpClientConnectionFactory. Identical in behavior
+ * to the parent class, but wraps IOSession instances with SSLIOSession instances. This
+ * implementation also supports using different SSLContext instances for different target
+ * I/O sessions.
+ */
+public class LoggingNHttpSSLClientConnectionFactory extends LoggingNHttpClientConnectionFactory {
+
+    private SSLContext sslContext;
+    private SSLSetupHandler sslSetupHandler;
+    private Map<String,SSLContext> customContexts;
+
+    public LoggingNHttpSSLClientConnectionFactory(ConnectionConfig config,
+                                                  SSLContext sslContext,
+                                                  SSLSetupHandler sslSetupHandler,
+                                                  Map<String, SSLContext> customContexts) {
+        super(config);
+        this.sslContext = sslContext;
+        this.sslSetupHandler = sslSetupHandler;
+        this.customContexts = customContexts;
+    }
+
+    @Override
+    public DefaultNHttpClientConnection createConnection(IOSession session) {
+        final SSLIOSession ssliosession = new SSLIOSession(
+                session,
+                SSLMode.CLIENT,
+                getSSLContext(session),
+                sslSetupHandler);
+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);
+        return super.createConnection(ssliosession);
+    }
+
+    private SSLContext getSSLContext(IOSession session) {
+        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();
+        String host = address.getHostName() + ":" + address.getPort();
+        SSLContext customContext = null;
+        if (customContexts != null) {
+            // See if there's a custom SSL profile configured for this server
+            customContext = customContexts.get(host);
+        }
+
+        if (customContext == null) {
+            customContext = sslContext;
+        }
+        return customContext;
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingServerEventHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingServerEventHandler.java	(nonexistent)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingServerEventHandler.java	(revision 1776096)
@@ -0,0 +1,132 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one
+ *  or more contributor license agreements.  See the NOTICE file
+ *  distributed with this work for additional information
+ *  regarding copyright ownership.  The ASF licenses this file
+ *  to you under the Apache License, Version 2.0 (the
+ *  "License"); you may not use this file except in compliance
+ *  with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing,
+ *  software distributed under the License is distributed on an
+ *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *  KIND, either express or implied.  See the License for the
+ *  specific language governing permissions and limitations
+ *  under the License.
+ */
+
+package org.apache.synapse.transport.utils.conn.logging;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.HttpException;
+import org.apache.http.HttpRequest;
+import org.apache.http.nio.ContentDecoder;
+import org.apache.http.nio.ContentEncoder;
+import org.apache.http.nio.NHttpServerConnection;
+import org.apache.http.nio.NHttpServerEventHandler;
+
+import java.io.IOException;
+
+/**
+ * A decorator (wrapper) for NHttpServerEventHandler instances. This decorator
+ * logs additional debug information regarding each of the events triggered on the
+ * actual NHttpServerEventHandler instance. Most events are logged 'before' they are
+ * dispatched to the wrapped NHttpServerEventHandler, but this implementation does
+ * not modify the event arguments by any means. In that sense this decorator is
+ * read-only and safe. This implementation does not log the exception event. It is
+ * expected that the actual NHttpServerEventHandler will take the necessary steps to
+ * log exceptions.
+ */
+public class LoggingServerEventHandler implements NHttpServerEventHandler {
+
+    private final Log log;
+
+    private final NHttpServerEventHandler handler;
+
+    /**
+     * Create a new instance of the decorator.
+     *
+     * @param handler The instance of NHttpServerEventHandler to be decorated (wrapped)
+     */
+    public LoggingServerEventHandler(final NHttpServerEventHandler handler) {
+        super();
+        if (handler == null) {
+            throw new IllegalArgumentException("HTTP service handler must not be null");
+        }
+        this.handler = handler;
+        this.log = LogFactory.getLog(handler.getClass());
+    }
+
+    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Connected");
+        }
+        this.handler.connected(conn);
+    }
+
+    public void closed(final NHttpServerConnection conn) {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Closed");
+        }
+        this.handler.closed(conn);
+    }
+
+    public void endOfInput(NHttpServerConnection conn) throws IOException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Closed at the remote end");
+        }
+        this.handler.endOfInput(conn);
+    }
+
+    public void exception(NHttpServerConnection conn, Exception ex) {
+        // No need to log errors at this level - Actual handler implementation
+        // should take care of that
+        this.handler.exception(conn, ex);
+    }
+
+    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {
+        HttpRequest request = conn.getHttpRequest();
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP InRequest Received on connection " + conn + ": "
+                    + request.getRequestLine());
+        }
+        this.handler.requestReceived(conn);
+    }
+
+    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Output ready");
+        }
+        this.handler.outputReady(conn, encoder);
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Content encoder " + encoder);
+        }
+    }
+
+    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Response ready");
+        }
+        this.handler.responseReady(conn);
+    }
+
+    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Input ready");
+        }
+        this.handler.inputReady(conn, decoder);
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Content decoder " + decoder);
+        }
+    }
+
+    public void timeout(final NHttpServerConnection conn) throws IOException {
+        if (this.log.isDebugEnabled()) {
+            this.log.debug("HTTP connection " + conn + ": Timeout");
+        }
+        this.handler.timeout(conn);
+    }
+}
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java	(revision 1776096)
@@ -63,10 +63,9 @@
 import org.apache.synapse.transport.passthru.jmx.TransportView;
 import org.apache.synapse.transport.passthru.util.PassThroughTransportUtils;
 import org.apache.synapse.transport.passthru.util.SourceResponseFactory;
-import org.apache.synapse.transport.utils.logging.LoggingUtils;
+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;
 
 import javax.net.ssl.SSLContext;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.MalformedURLException;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java	(revision 1776096)
@@ -49,7 +49,7 @@
 import org.apache.synapse.transport.passthru.config.SourceConfiguration;
 import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;
 import org.apache.synapse.transport.passthru.jmx.TransportView;
-import org.apache.synapse.transport.utils.logging.LoggingUtils;
+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;
 
 import javax.net.ssl.SSLContext;
 import java.io.IOException;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java	(revision 1776096)
@@ -29,7 +29,7 @@
 import org.apache.http.nio.reactor.IOEventDispatch;
 import org.apache.http.nio.reactor.IOSession;
 import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
-import org.apache.synapse.transport.utils.logging.LoggingUtils;
+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;
 import org.apache.synapse.transport.utils.sslcert.CertificateVerificationConfig;
 import org.apache.synapse.transport.utils.sslcert.CertificateVerificationException;
 import org.apache.synapse.transport.utils.sslcert.adaptor.SynapseAdaptorForOcspCrl;
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java	(revision 1776095)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java	(revision 1776096)
@@ -28,7 +28,7 @@
 import org.apache.http.nio.reactor.IOEventDispatch;
 import org.apache.http.nio.reactor.IOSession;
 import org.apache.http.nio.reactor.ssl.SSLSetupHandler;
-import org.apache.synapse.transport.utils.logging.LoggingUtils;
+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;
 
 import javax.net.ssl.*;
 import javax.xml.namespace.QName;
-*-*-*-
Message: Move logging package to conn package - no logic changes
-*-*-*-
When: 2016-12-27 04:06:54 -0500 
-*-*-*-
Who: isudana