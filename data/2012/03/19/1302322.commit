Index: java/modules/documentation/src/site/xdoc/1_0/samples.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_0/samples.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_0/samples.xml	(nonexistent)
@@ -1,3485 +0,0 @@
-<?xml version="1.0"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta http-equiv="content-type" content=""/>
-    <title>
-      Synapse Samples
-    </title>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Running the Synapse Samples
-    </h1>
-    <h2>
-      <a name="TOC" id="TOC">Contents</a>
-    </h2>
-    <div class="section-content">
-      <ul>
-        <li>
-          <a href="samples_setup.html#Overview">Overview</a>
-        </li>
-        <li>
-          <a href="#MediationSamples">Message mediation samples</a>
-          <ul>
-            <li>
-              <a href="#Sample0">Sample 0: Introduction to Synapse</a>
-            </li>
-            <li>
-              <a href="#Sample1">Sample 1: Content based routing (CBR)</a>
-            </li>
-            <li>
-              <a href="#Sample2">Sample 2: CBR with the Switch-case mediator,
-              using message properties</a>
-            </li>
-            <li>
-              <a href="#Sample3">Sample 3: Local Registry entry definitions,
-              reusable endpoints and sequences</a>
-            </li>
-            <li>
-              <a href="#Sample4">Sample 4: Introduction to error handling</a>
-            </li>
-            <li>
-              <a href="#Sample5">Sample 5: Creating SOAP fault messages and
-              changing the direction of a message</a>
-            </li>
-            <li>
-              <a href="#Sample6">Sample 6: Manipulating SOAP headers, and
-              filtering incoming and outgoing messages</a>
-            </li>
-            <li>
-              <a href="#Sample7">Sample 7: Introduction to local Registry
-              entries and using Schema validation</a>
-            </li>
-            <li>
-              <a href="#Sample8">Sample 8: Introduction to static and dynamic
-              registry resources, and using XSLT transformations</a>
-            </li>
-            <li>
-              <a href="#Sample9">Sample 9: Introduction to dynamic sequences
-              with the Registry</a>
-            </li>
-            <li>
-              <a href="#Sample10">Sample 10: Introduction to dynamic
-              endpoints with the Registry</a>
-            </li>
-            <li>
-              <a href="#Sample11">Sample 11: A full registry based
-              configuration, and sharing a configuration between multiple
-              instances</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#Endpoints">Endpoints</a>
-          <ul>
-            <li>
-              <a href="#Sample50">Sample 50: Using WS-Security for outgoing
-              messages</a>
-            </li>
-            <li>
-              <a href="#Sample51">Sample 51: MTOM and SwA optimizations and
-              request/response correlation</a>
-            </li>
-            <li>
-              <a href="#Sample52">Sample 52: POX to SOAP conversion</a>
-            </li>
-            <li>
-              <a href="#Sample53">Sample 53: Reliable message exchange
-              between Synapse and the back-end server using WS-ReliableMessaging</a>
-            </li>
-            <li>
-              <a href="#Sample54">Sample 54: Load balancing</a>
-            </li>
-            <li>
-              <a href="#Sample55">Sample 55: Failover</a>
-            </li>
-            <li>
-              <a href="#Sample56">Sample 56: Load balancing with session
-              affinity</a>
-            </li>
-            <li>
-              <a href="#Sample57">Sample 57: Load balancing with session
-              affinity among failover groups</a>
-            </li>
-            <li>
-              <a href="#Sample60">Sample 60: WSDL endpoint</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#ProxyServices">Synapse Proxy service samples</a>
-          <ul>
-            <li>
-              <a href="#Sample100">Sample 100: Introduction to proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample101">Sample 101: Custom sequences and endpoints
-              with proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample102">Sample 102: Switching transports and
-              message format from SOAP to REST/POX</a>
-            </li>
-            <li>
-              <a href="#Sample103">Sample 103: Using WS-Security with policy
-              attachments for proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample104">Sample 104: Reliable message exchange
-              between the client and proxy services using WS-ReliableMessaging</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#Transport">Transport samples</a>
-          <ul>
-            <li>
-              <a href="#Sample110">Sample 110: Introduction to switching
-              transports - JMS to http/s</a>
-            </li>
-            <li>
-              <a href="#Sample111">Sample 111: Demonstrate switching from
-              http/s to JMS</a>
-            </li>
-            <li>
-              <a href="#Sample112">Sample 112: Demonstrate one way messaging
-              / fireAndForget()</a>
-            </li>
-            <li>
-              <a href="#Sample113">Sample 113: Pure text/binary and POX
-              message support with JMS</a>
-            </li>
-            <li>
-              <a href="#Sample114">Sample 114: One way bridging from JMS to
-              http and replying with a 202 Accepted response</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#ExtensionMediators">Extension Mediators</a>
-          <ul>
-            <li>
-              <a href="Synapse_Samples_Setup.html#ScriptSetup">Setting up
-              Script Mediators</a>
-            </li>
-            <li>
-              <a href="#Sample500">Sample 500: Introduction to script
-              mediators</a>
-            </li>
-            <li>
-              <a href="#Sample501">Sample 501: In-line script mediation</a>
-            </li>
-            <li>
-              <a href="#Sample502">Sample 502: Accessing Synapse message
-              context API methods</a>
-            </li>
-            <li>
-              <a href="#Sample503">Sample 503: Using Ruby scripts for
-              mediation</a>
-            </li>
-            <li>
-              <a href="#Sample510">Sample 510: Class mediator - Writting your
-              own mediation in Java</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#AdvancedMediations">Advanced Mediations</a>
-          <ul>
-            <li>
-              <a href="#Sample600">Sample 600: Throttle mediator -
-              Restricting requests based on policies</a>
-            </li>
-          </ul>
-        </li>
-      </ul>
-    </div>
-    <h1>
-      <a name="MediationSamples" id="MediationSamples">Message Mediation
-      Samples</a>
-    </h1>
-    <h2>
-      <a name="Sample0" id="Sample0">Sample 0:</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- log all attributes of messages passing through --&gt;
-    &lt;log level="full"/&gt;
-
-    &lt;!-- Send the messageto implicit destination --&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;
- </pre>
-    <p>
-      <strong>Objective: Introduction to Synapse. Shows how a message could
-      be made to pass through Synapse </strong><strong>and logged
-      before it is delivered to its ultimate receiver.</strong>
-    </p>
-    <p>
-      The Stock quote client can operate in the following modes for this
-      example.
-    </p>
-    <ol>
-      <li>
-        Smart Client mode
-      </li>
-      <li>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ </pre>
-      </li>
-      <li>
-        Using Synapse as a HTTP Proxy
-      </li>
-      <li>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dprxurl=http://localhost:8080/</pre>
-      </li>
-      <li>
-        Gateway mode / Dumb Client
-      </li>
-      <li>
-        <p>
-          See sample # 1
-        </p>
-      </li>
-    </ol>
-    <p>
-      <strong>Pre-Requisites:<br/> </strong>Start the Synapse
-      configuration numbered 0: e.g. synapse -sample 0<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already deployed
-    </p>
-    <p>
-      <strong>Execute the Smart Client </strong>
-    </p>
-    <p>
-      By following through the execution of Synapse through the DEBUG level log
-      output to the system output stream (i.e. console), you will notice that
-      the client request arrived at Synapse with a WS-Addressing 'To' EPR of
-      http://localhost:9000/soap/SimpleStockQuoteService. The Synapse engine now
-      logs the message at the "full" log level (i.e. all message headers and the
-      body) and sends the message to its implicit 'To' address - which is
-      http://localhost:9000/soap/SimpleStockQuoteService. Then you will see on
-      the Axis2 server console, a message confirming that the message got routed
-      to the sample server and the sample service that was invoked generated a
-      stock quote for the requested symbol.
-    </p>
-<pre xml:space="preserve">Sat Nov 18 21:01:23 IST 2006 SimpleStockQuoteService :: Generating quote for : IBM</pre>
-    <p>
-      The response message generated by the service is again received by
-      Synapse, and flows through the same mediation rules, which logs the
-      response message and then sends it back - this time to the client. On the
-      client console you should see an output similar to the following based on
-      the message received by the client.
-    </p>
-<pre xml:space="preserve">Standard :: Stock price = $95.26454380258552</pre>
-    <p>
-      <strong>Execute the Proxy client </strong>
-    </p>
-    <p>
-      You will see the exact same behaviour as per the previous example when you
-      run this scenario. However this time the difference is at the client, as
-      it sends the message to the WS-Addressing 'To' address
-      http://localhost:9000/soap/SimpleStockQuoteService, but the transport
-      specifies Synapse as the http proxy.
-    </p>
-    <h2>
-      <a name="Sample1" id="Sample1">Sample 1:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- simple content based routing of messages --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- filtering of messages with XPath and regex matches --&gt;
-    &lt;filter source="get-property('To')" regex=".*/StockQuote.*"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-        &lt;drop/&gt;
-    &lt;/filter&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to simple content based routing. Shows
-      how a message could be made to pass through Synapse using the Dumb Client
-      mode, where Synapse acts as a gateway to accept all messages and then
-      perform mediation and routing based on message properties or content.</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 1: i.e. synapse -sample 1<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already deployed<br/>
-    </p>
-    <p>
-      Execute the Dumb Client as:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuote<br/></pre>
-    <p>
-      This time you will notice that Synapse received a message for which
-      Synapse was set as the ultimate receiver of the message. Based on the 'To'
-      EPR of http://localhost:8080/soap/StockQuote, Synapse performes a match to
-      the path '/StockQuote' and as the request matched the XPath expression of
-      the filter mediator, the filter mediators' child mediators executes, and
-      thereby sending the message to a different endpoint as specified by the
-      endpoint definition. The 'drop' mediator terminates further processing of
-      the current message in a configuration. During response processing, the
-      filter condition fails, and thus the implicit 'send' mediator forwards the
-      reply back to the client.
-    </p>
-    <h2>
-      <a name="Sample2" id="Sample2">Sample 2:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- switch-case mediator and setting and reading of local properties on a message --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;switch source="//m0:getQuote/m0:request/m0:symbol" xmlns:m0="http://services.samples/xsd"&gt;
-        &lt;case regex="IBM"&gt;
-            &lt;!-- the property mediator sets a local property on the *current* message --&gt;
-            &lt;property name="symbol" value="Great stock - IBM"/&gt;
-        &lt;/case&gt;
-        &lt;case regex="MSFT"&gt;
-            &lt;property name="symbol" value="Are you sure? - MSFT"/&gt;
-        &lt;/case&gt;
-        &lt;default&gt;
-            &lt;!-- it is possible to assign the result of an XPath expression as well --&gt;
-            &lt;property name="symbol"
-                  expression="fn:concat('Normal Stock - ', //m0:getQuote/m0:request/m0:symbol)"
-                  xmlns:m0="http://services.samples/xsd"/&gt;
-        &lt;/default&gt;
-    &lt;/switch&gt;
-
-    &lt;log level="custom"&gt;
-        &lt;!-- the get-property() XPath extension function allows the lookup of local message properties
-            as well as properties from the Axis2 or Transport contexts (i.e. transport headers) --&gt;
-        &lt;property name="symbol" expression="get-property('symbol')"/&gt;
-        &lt;!-- the get-property() function supports the implicit message headers To/From/Action/FaultTo/ReplyTo --&gt;
-        &lt;property name="epr" expression="get-property('To')"/&gt;
-    &lt;/log&gt;
-
-    &lt;!-- Send the messages where they are destined to (i.e. the 'To' EPR of the message) --&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduce switch-case mediator and writing and
-      reading of local properties set on a message instance</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 2: i.e. synapse -sample 2<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done.
-    </p>
-    <p>
-      Execute the 'ant stockquote ..' request again in the smart client mode,
-      specifying 'IBM', 'MSFT' and 'SUN' as the stock symbols. When the symbol
-      IBM is request, following through the mediation logs you will see that the
-      case statements' first case for 'IBM' executed and a local property named
-      'symbol' was set to 'Great stock - IBM'. Subsequently this local property
-      value is looked up by the log mediator and logged using the
-      'get-property()' XPath extension function.
-    </p>
-    <p>
-      ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService
-      -Dtrpurl=http://localhost:8080/ -Dsymbol=IBM
-    </p>
-<pre xml:space="preserve">INFO LogMediator - symbol = Great stock - IBM, epr = http://localhost:9000/axis2/services/SimpleStockQuoteService </pre>
-    <p>
-      ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService
-      -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT
-    </p>
-<pre xml:space="preserve">INFO LogMediator - symbol = Are you sure? - MSFT, epr = http://localhost:9000/axis2/services/SimpleStockQuoteService</pre>
-    <h2>
-      <a name="Sample3" id="Sample3">Sample 3:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- illustration of local registry entry definitions, and reusable endpoints and sequences --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- define a string resource entry to the local registry --&gt;
-    &lt;localEntry key="version"&gt;0.1&lt;/localEntry&gt;
-    &lt;!-- define a reuseable endpoint definition --&gt;
-    &lt;endpoint name="simple"&gt;
-        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/endpoint&gt;
-
-    &lt;!-- define a reusable sequence --&gt;
-    &lt;sequence name="stockquote"&gt;
-        &lt;!-- log the message using the custom log level. illustrates custom properties for log --&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="Text" value="Sending quote request"/&gt;
-            &lt;property name="version" expression="get-property('version')"/&gt;
-            &lt;property name="direction" expression="get-property('direction')"/&gt;
-        &lt;/log&gt;
-        &lt;!-- send message to real endpoint referenced by key "simple" endpoint definition --&gt;
-        &lt;send&gt;
-            &lt;endpoint key="simple"/&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;property name="direction" value="incoming"/&gt;
-            &lt;sequence key="stockquote"/&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Illustrates local registry entry definitions,
-      reusable endpoints and sequences</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 3: i.e. synapse -sample 3<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example uses a sequence named as "main" that specifies the main
-      mediation rules to be executed. This is equivalent to directly specifying
-      the mediators of the main sequence within the &lt;definitions&gt; tags.
-      This is the recommended and also a neater approach for non trivial
-      configurations. Execute the 'ant stockquote ..' request again, and
-      following through the mediation logs you will now notice that the sequence
-      named "main" executed. Then for the incoming message flow the &lt;in&gt;
-      mediator executes, and it calls into the sequence named "stockquote"
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre xml:space="preserve">DEBUG SequenceMediator - Sequence mediator &lt;main&gt; :: mediate()<br/>DEBUG InMediator - In mediator mediate()<br/>DEBUG SequenceMediator - Sequence mediator &lt;stockquote&gt; :: mediate()</pre>
-    <p>
-      As the "stockquote" sequence executes, the log mediator dumps a simple
-      text/string property, an XPath evaluation result - that picks up the key
-      named "version", and a second XPath evaluation result that picks up a
-      local message property set previously by the &lt;property&gt; mediator.
-      The get-property() XPath extension function is able to read message
-      properties local to the current message, local or remote registry entries,
-      Axis2 message context properties as well as transport headers. The local
-      entry definition for "version" defines a simple text/string registry entry
-      for that is visible to all messages that passes through Synapse.
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  LogMediator - Text = Sending quote request, version = 0.1, direction = incoming
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] DEBUG AddressEndpoint - Sending To: http://localhost:9000/soap/SimpleStockQuoteService </pre>
-    <h2>
-      <a name="Sample4" id="Sample4">Sample 4:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- introduction to error handling --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the default fault handling sequence used by Synapse - named 'fault' --&gt;
-    &lt;sequence name="fault"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="An unexpected error occured"/&gt;
-            &lt;property name="message" expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/log&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="sunErrorHandler"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="An unexpected error occured for stock SUN"/&gt;
-            &lt;property name="message" expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/log&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;!-- default message handling sequence used by Synapse - named 'main' --&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;switch source="//m0:getQuote/m0:request/m0:symbol" xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;case regex="IBM"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="MSFT"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint key="bogus"/&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="SUN"&gt;
-                    &lt;sequence key="sunSequence"/&gt;
-                &lt;/case&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;sequence name="sunSequence" onError="sunErrorHandler"&gt;
-        &lt;send&gt;
-            &lt;endpoint key="sunPort"/&gt;
-        &lt;/send&gt;
-&lt;/sequence&gt;
-
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to error handling with the 'fault'
-      sequence</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 4: i.e. synapse -sample 4<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      When the IBM stock quote is requested, the configuration routes it to the
-      endpoint defined as the 'simple' endpoint, which routes the message to the
-      SimpleStockQuoteService on the local Axis2 instance. Hence a valid
-      response message is shown at the client.
-    </p>
-    <p>
-      If you lookup a stock quote for 'MSFT', Synapse is instructed to route the
-      message to the endpoint defined as the 'bogus' endpoint, which does not
-      exist. Synapse executes the specified error handler sequence closest to
-      the point where the error was encountered. In this case, the currently
-      executing sequence is 'main' and it does not specify an 'onError'
-      attribute. Whenever Synapse cannot find an error handler, it looks up for
-      a sequence named 'fault'. Thus the 'fault' sequence can be seen executing,
-      and writing the generic error message into the logs.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] ERROR IndirectEndpoint - Reference to non-existent endpoint for key : bogus
-[HttpServerWorker-1] DEBUG MediatorFaultHandler - MediatorFaultHandler :: handleFault
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;fault&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - text = An unexpected error occured, message = Reference to non-existent endpoint for key : bogus</pre>
-    <p>
-      When the 'SUN' quote is requested, a custom sequence 'sunSequence' is
-      invoked, and it specifies 'sunErrorHandler' as its error handler. Hence
-      when the send fails, now you could see the proper error handler invocation
-      and the custom error message as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=SUN</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;sunSequence&gt; :: mediate()
-[HttpServerWorker-1] DEBUG SequenceMediator - Setting the onError handler for the sequence
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] ERROR IndirectEndpoint - Reference to non-existent endpoint for key : sunPort
-[HttpServerWorker-1] DEBUG MediatorFaultHandler - MediatorFaultHandler :: handleFault
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;sunErrorHandler&gt; :: mediate()
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - text = An unexpected error occured for stock SUN, message = Reference to non-existent endpoint for key : sunPort</pre>
-    <h2>
-      <a name="Sample5" id="Sample5">Sample 5:</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="myFaultHandler"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/makefault&gt;
-
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="myFaultHandler"&gt;
-        &lt;in&gt;
-            &lt;switch source="//m0:getQuote/m0:request/m0:symbol"
-                    xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;case regex="MSFT"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://bogus:9000/soap/NonExistentStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="SUN"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://localhost:9009/soap/NonExistentStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Makefault mediator and sending back error responses
-      </strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 5: i.e. synapse -sample 5<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      When the MSFT stock quote is requested, an unknown host exception would be
-      caused, and a connection refused exception would be caused for the SUN
-      stock. This information is captured and returned back to the original
-      client as a SOAP fault in this example.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</pre>
-    <p>
-      Returns:
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Fault xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;faultcode&gt;soapenv:Client&lt;/faultcode&gt;
-    &lt;faultstring&gt;java.net.UnknownHostException: bogus&lt;/faultstring&gt;&lt;detail /&gt;&lt;/soapenv:Fault&gt;</pre>
-    <p>
-      And
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=SUN</pre>
-    <p>
-      Returns:
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Fault xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;faultcode&gt;soapenv:Client&lt;/faultcode&gt;
-    &lt;faultstring&gt;java.net.ConnectException: Connection refused&lt;/faultstring&gt;&lt;detail /&gt;&lt;/soapenv:Fault&gt;</pre>
-    <h2>
-      <a name="Sample6" id="Sample6">Sample 6:</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;header name="To" value="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to header, in (out) mediators</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 6: i.e. synapse -sample 6<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      In this example we use the stockquote client in the dumb client mode,
-      setting the 'To' EPR of the message to Synapse. Then the 'in' mediator
-      processes the incoming messages, and manipulates the 'To' header to refer
-      to the stock quote service on the sample Axis2 server. Thus it is now
-      possible to request for a stock quote as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/SimpleStockQuoteService</pre>
-    <h2>
-      <a name="Sample7" id="Sample7">Sample 7:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- introduction of static inline XML properties and the validation mediator --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;localEntry key="validate_schema"&gt;
-        &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
-                    xmlns="http://www.apache-synapse.org/test" elementFormDefault="qualified"
-                    attributeFormDefault="unqualified"
-                    targetNamespace="http://services.samples/xsd"&gt;
-            &lt;xs:element name="getQuote"&gt;
-                &lt;xs:complexType&gt;
-                    &lt;xs:sequence&gt;
-                        &lt;xs:element name="request"&gt;
-                            &lt;xs:complexType&gt;
-                                &lt;xs:sequence&gt;
-                                    &lt;xs:element name="stocksymbol" type="xs:string"/&gt;
-                                &lt;/xs:sequence&gt;
-                            &lt;/xs:complexType&gt;
-                        &lt;/xs:element&gt;
-                    &lt;/xs:sequence&gt;
-                &lt;/xs:complexType&gt;
-            &lt;/xs:element&gt;
-        &lt;/xs:schema&gt;
-    &lt;/localEntry&gt;
-
-    &lt;in&gt;
-        &lt;validate&gt;
-            &lt;schema key="validate_schema"/&gt;
-            &lt;on-fail&gt;
-                &lt;!-- if the request does not validate againt schema throw a fault --&gt;
-                &lt;makefault&gt;
-                    &lt;code value="tns:Receiver"
-                            xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                    &lt;reason value="Invalid custom quote request"/&gt;
-                &lt;/makefault&gt;
-                &lt;property name="RESPONSE" value="true"/&gt;
-                &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-            &lt;/on-fail&gt;
-        &lt;/validate&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to local (static) registry entries and
-      the validate mediator</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 7: i.e. synapse -sample 7<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example shows how a static XML fragment could be made available to
-      the Synapse local registry. Resources defined to the local registry are
-      static (i.e. never changes over the lifetime of the configuration) and may
-      be specified as a source URL, inline-text or inline-xml. In this example
-      the schema is made available under the key 'validate_schema'.
-    </p>
-    <p>
-      The validate mediator by default operates on the first child element of
-      the SOAP body. You may specify an XPath expression using the 'source'
-      attribute to override this behaviour. The validate mediator now uses the
-      'validate_schema' resource to validate the incoming message, and if the
-      message is in error invokes on the 'on-fail' sequence of mediators.
-    </p>
-    <p>
-      If you send a stockquote request using 'ant stockquote ..' you will now
-      get a fault back with a message 'Invalid custom quote request' as the
-      schema validation failed. This is because the schema used in the example
-      expects a slightly different message than what is created by the stock
-      quote client. (i.e. expects a 'stocksymbol' element instead of 'symbol' to
-      specify thestock symbol)
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-    <h2>
-      <a name="Sample8" id="Sample8">Sample 8:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- introduction to static and dynamic registry resources and the XSLT mediator --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to a URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;!-- define the request processing XSLT resource as a static URL source --&gt;
-    &lt;localEntry key="xslt-key-req" src="file:repository/conf/sample/resources/transform/transform.xslt"/&gt;
-
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote requst expected by the service --&gt;
-        &lt;xslt key="xslt-key-req"/&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;!-- the key is looked up in the remote registry and loaded as a 'dynamic' registry resource --&gt;
-        &lt;xslt key="transform/transform_back.xslt"/&gt;
-    &lt;/out&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to static and dynamic registry
-      resources and the XSLT mediator</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 8: i.e. synapse -sample 8<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example uses the XSLT mediator to perform transformations, and the
-      xslt tranformations are specified as registry resources. The first
-      resource 'xslt-key-req' is specified as a 'local' registry entry. Local
-      entries do not place the resource on the registry, but simply makes it
-      available to the local configuration. If a local entry is defined with a
-      key that already exists in the remote registry, the local entry will have
-      preference and hide the existence of the remote resource.
-    </p>
-    <p>
-      In this example you will notice the new 'registry' definition. Synapse
-      comes with a simple URL based registry implementation SimpleURLRegistry.
-      During initialization of the registry, the SimpleURLRegistry expects to
-      find a property named 'root', which specifies a prefix for the registry
-      keys used later. When the SimpleURLRegistry is used, this root is prefixed
-      to the entry keys to form the complete URL for the resource being looked
-      up. The registry caches a resource once requested, and caches it
-      internally for a specified duration. Once this period expires, it will
-      reload the meta information about the resource and reload its cached copy
-      if necessary, the next time the resource is requested.
-    </p>
-    <p>
-      Hence the second XSLT resource key 'transform/transform_back.xslt'
-      concatenated with the 'root' of the SimpleURLRegistry
-      'file:repository/conf/sample/resources/' forms the complete URL of the
-      resource as
-      'file:repository/conf/sample/resources/transform/transform_back.xslt' and
-      caches its value for a period of 15000 ms.
-    </p>
-    <p>
-      Execute the custom quote client as 'ant stockquote -Dmode=customquote ..'
-      and analyze the the Synapse debug log output as shown below
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=customquote</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG XSLTMediator - Performing XSLT transformation against property with key : xslt-key-req
-[HttpServerWorker-1] DEBUG XSLTMediator - Transformation source :
-    &lt;m0:CheckPriceRequest xmlns:m0="http://www.apache-synapse.org/test"&gt;&lt;m0:Code&gt;IBM&lt;/m0:Code&gt;&lt;/m0:CheckPriceRequest&gt;
-[HttpServerWorker-1] DEBUG XSLTMediator - Transformation result : &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;</pre>
-    <p>
-      The incoming message is now transformed into a standard stock quote
-      request as expected by the SimpleStockQuoteService deployed on the local
-      Axis2 instance, by the XSLT mediator. The XSLT mediator uses Xalan-J to
-      perform the transformations. It is possible to configure the underlying
-      transformation engine using properties where necessary. The response from
-      the SimpleStockQuoteService is converted back into the custom format as
-      expected by the client during the out message processing.
-    </p>
-    <p>
-      During the response processing you could notice the SimpleURLRegistry
-      fetching the resource as shown by the log message below
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : transform/transform_back.xslt</pre>
-    <p>
-      If you re-run the client again immidiately (i.e within 15 seconds of the
-      first request) you will not see the resource being re-loaded by the
-      registry as the cached value would be still valid.
-    </p>
-    <p>
-      However if you leave the system idle for 15 seconds or more and then retry
-      the same request, you will now notice that the registry noticed the cache
-      expiry and checked the meta information about the resource to check if the
-      resource itself has changes and requires a fresh fetch from the source
-      URL. If the meta data / version number indicates that a reload of the
-      cached resource is not necessary (i.e. unless the resource itself actually
-      changed) the updated meta information is used and the cache lease extended
-      as appropriate.
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] DEBUG AbstractRegistry - Cached object has expired for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG SimpleURLRegistry - Perform RegistryEntry lookup for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG AbstractRegistry - Expired version number is same as current version in registry
-[HttpClientWorker-1] DEBUG AbstractRegistry - Renew cache lease for another 15s </pre>
-    <p>
-      Now edit the
-      repository/conf/sample/resources/transform/transform_back.xslt file and
-      add a blank line at the end. Now when you run the client again, and if the
-      cache is expired, the resource would be re-fetched from its URL by the
-      registry and this can be seen by the following debug log messages
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] DEBUG AbstractRegistry - Cached object has expired for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG SimpleURLRegistry - Perform RegistryEntry lookup for key : transform/transform_back.xslt
-[HttpClientWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : transform/transform_back.xslt </pre>
-    <p>
-      Thus the SimpleURLRegistry allows resource to be cached, and updates
-      detected so that changes could be reloaded without restarting the Synapse
-      instance.
-    </p>
-    <h2>
-      <a name="Sample9" id="Sample9">Sample 9:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- introduction dynamic sequences --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;sequence key="sequence/dynamic_seq_1.xml"/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to dynamic sequences with a Registry</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 9: i.e. synapse -sample 9<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example introduces the dynamic behaviour of Synapse through the use
-      of a Registry. Synapse supports dynamic definitions for sequences &amp;
-      endpoints, and as seen before, for resources. In this example we define a
-      Synapse configuration which references a sequence definition specified as
-      a registry key. The registry key resolves to the actual content of the
-      sequence which would be loaded dynamically by Synapse at runtime, and
-      cached appropriately as per its definition in the registry. Once the cache
-      expires, Synapse would recheck the meta information for the definition and
-      re-load the sequence definition if necessary and re-cache it again.
-    </p>
-    <p>
-      Once Synapse is started, execute the stock quote client as 'ant
-      stockquote..'. You will notice that that Synapse fetches the definition of
-      the sequence from the registry and executes its rules as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : sequence/dynamic_seq_1.xml
-...
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;dynamic_sequence&gt; :: mediate()
-...
-[HttpServerWorker-1] INFO  LogMediator - message = *** Test Message 1 ***</pre>
-    <p>
-      Now if you execute the client immidiately (i.e. within 15 seconds of the
-      last execution) you will notice that the sequence was not reloaded. If you
-      edit the sequence definition in
-      repository/conf/sample/resources/sequence/dynamic_seq_1.xml and edit the
-      log message to read as "*** Test Message 2 ***" and execute the client
-      again, you will notice that the new message is not yet visible (i.e. if
-      you execute this within 15 seconds of loading the resource for the first
-      time) However, after 15 seconds have elapsed since the original caching of
-      the sequence, you will notice that the new sequence is loaded and executed
-      by Synapse from the following log messages:
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : sequence/dynamic_seq_1.xml
-...
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;dynamic_sequence&gt; :: mediate()
-...
-[HttpServerWorker-1] INFO  LogMediator - message = *** Test Message 2 ***</pre>
-    <p>
-      The cache timeout could be tuned appropriately by configuring the URL
-      registry to suite the environment and the needs.
-    </p>
-    <h2>
-      <a name="Sample10" id="Sample10">Sample 10:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- introduction dynamic endpoints --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;in&gt;
-        &lt;send&gt;
-            &lt;endpoint key="endpoint/dynamic_endpt_1.xml"/&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to dynamic endpoints with the Registry</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 10: i.e. synapse -sample 10<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done<br/>
-      Start a second Axis2 server on http port 9001 and https port 9003 as
-      follows:
-    </p>
-<pre xml:space="preserve">./axis2server.sh -http 9001 -https 9003</pre>
-    <p>
-      This example introduces dynamic endpoints, where the definition of an
-      endpoint is stored in the Registry. To follow this example execute the
-      stock quote client as 'ant stockquote..' and see that the message is
-      routed to the SimpleStockQuoteService on the default Axis2 instance on
-      http port 9000. Repeat the above example immidiately again, and notice
-      that the endpoint is cached and reused by Synapse - similarly to example #
-      8.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-    <p>
-      Now edit the repository/conf/sample/resources/endpoint/dynamic_endpt_1.xml
-      definition and update the address to
-      "http://localhost:9001/soap/SimpleStockQuoteService". After the cached
-      expires, the Registry loads the new definition of the endpoint, and then
-      the messages can be seen being routed to the second sample Axis2 server on
-      http port 9001.
-    </p>
-    <h2>
-      <a name="Sample11" id="Sample11">Sample 11:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- a full registry based configuration --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: A full registry based configuration</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 11: i.e. synapse -sample 11<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example shows a full registry based Synapse configuration. Thus it is
-      possible to start a remote configuration from multiple instances of
-      Synapse in a clustered environment easily, and allow the configuration to
-      be reloaded as well. The Synapse configuration held on a node hosting
-      Synapse simply points to the registry and looks up the actual
-      configuration by requesting the key ''synapse.xml'.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO LogMediator - message = This is a dynamic Synapse configuration</pre>
-    <p>
-      The actual synapse.xml loaded is:
-    </p>
-<pre xml:space="preserve">&lt;!-- a registry based Synapse configuration --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;log level="custom"&gt;
-        &lt;property name="message" value="This is a dynamic Synapse configuration $$$"/&gt;
-    &lt;/log&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p/>
-    <h1>
-      <a name="Endpoints" id="Endpoints">Endpoints</a>
-    </h1>
-    <h2>
-      <a name="Sample50" id="Sample50">Sample 50:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Connecting to endpoints with WS-Security for outgoing messages --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="sec_policy" src="file:repository/conf/sample/resources/policy/policy_3.xml"/&gt;
-
-    &lt;in&gt;
-        &lt;send&gt;
-            &lt;endpoint name="secure"&gt;
-                &lt;address uri="http://localhost:9000/soap/SecureStockQuoteService"&gt;
-                    &lt;enableSec policy="sec_policy"/&gt;
-                    &lt;enableAddressing/&gt;
-                &lt;/address&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;header name="wsse:Security" action="remove"
-                xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Connecting to endpoints with WS-Security for
-      outgoing messages</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/>
-    </p>
-    <p>
-      You may also need to download and install the unlimited strength policy
-      files for your JDK before using Apache Rampart (e.g. see
-      http://java.sun.com/javase/downloads/index_jdk5.jsp)
-    </p>
-    <p>
-      Start the Synapse configuration numbered 50: i.e. synapse -sample 50<br/>
-      Start the Axis2 server and deploy the SecureStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      Use the stock quote client to send a request without WS-Security. Synapse
-      is configured to enable WS-Security as per the policy specified by
-      'policy_3.xml' for the outgoing messages to the SecureStockQuoteService
-      endpoint hosted on the Axis2 instance. The debug log messages on Synapse
-      shows the encrypted message flowing to the service and the encrypted
-      response being received by Synapse. The wsse:Security header is then
-      removed from the decrypted message and the response is delivered back to
-      the client, as expected. You may execute the client as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-    <p>
-      The message sent by Synapse to the secure service can be seen as follows,
-      when TCPMon is used.
-    </p>
-<pre xml:space="preserve">POST http://localhost:9001/soap/SecureStockQuoteService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:getQuote
-Content-Type: text/xml; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
-800
-&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-   &lt;soapenv:Envelope xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:wsa="http://www.w3.org/2005/08/addressing" ..&gt;
-      &lt;soapenv:Header&gt;
-         &lt;wsse:Security ..&gt;
-            &lt;wsu:Timestamp ..&gt;
-               ...
-            &lt;/wsu:Timestamp&gt;
-            &lt;xenc:EncryptedKey..&gt;
-               ...
-            &lt;/xenc:EncryptedKey&gt;
-            &lt;wsse:BinarySecurityToken ...&gt;
-               &lt;ds:SignedInfo&gt;
-               ...
-               &lt;/ds:SignedInfo&gt;
-               &lt;ds:SignatureValue&gt;
-               ...
-               &lt;/ds:SignatureValue&gt;
-               &lt;ds:KeyInfo Id="KeyId-29551621"&gt;
-                  ...
-               &lt;/ds:KeyInfo&gt;
-            &lt;/ds:Signature&gt;
-         &lt;/wsse:Security&gt;
-         &lt;wsa:To&gt;http://localhost:9001/soap/SecureStockQuoteService&lt;/wsa:To&gt;
-         &lt;wsa:MessageID&gt;urn:uuid:1C4CE88B8A1A9C09D91177500753443&lt;/wsa:MessageID&gt;
-         &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-      &lt;/soapenv:Header&gt;
-      &lt;soapenv:Body xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="Id-3789605"&gt;
-         &lt;xenc:EncryptedData Id="EncDataId-3789605" Type="http://www.w3.org/2001/04/xmlenc#Content"&gt;
-            &lt;xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc" /&gt;
-            &lt;xenc:CipherData&gt;
-                &lt;xenc:CipherValue&gt;Layg0xQcnH....6UKm5nKU6Qqr&lt;/xenc:CipherValue&gt;
-            &lt;/xenc:CipherData&gt;
-         &lt;/xenc:EncryptedData&gt;
-      &lt;/soapenv:Body&gt;
-   &lt;/soapenv:Envelope&gt;0</pre>
-    <h2>
-      <a name="Sample51" id="Sample51">Sample 51:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- MTOM and SwA and message properties to correlate requests and responses --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;filter source="get-property('Action')" regex="urn:uploadFileUsingMTOM"&gt;
-            &lt;property name="example" value="mtom"/&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="mtom"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/filter&gt;
-        &lt;filter source="get-property('Action')" regex="urn:uploadFileUsingSwA"&gt;
-            &lt;property name="example" value="swa"/&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="swa"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/filter&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;filter source="get-property('example')" regex="mtom"&gt;
-            &lt;property name="enableMTOM" value="true" scope="axis2"/&gt;
-        &lt;/filter&gt;
-        &lt;filter source="get-property('example')" regex="swa"&gt;
-            &lt;property name="enableSwA" value="true" scope="axis2"/&gt;
-        &lt;/filter&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: MTOM and SwA optimizations and request/response
-      correlation</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 51: i.e. synapse -sample 51<br/> Start the Axis2
-      server and deploy the MTOMSwASampleService if not already done
-    </p>
-    <p>
-      Execute the 'ant optimizeclient' specifying MTOM optimization as follows:
-    </p>
-<pre xml:space="preserve">ant optimizeclient -Dopt_mode=mtom</pre>
-    <p>
-      The configuration now sets a local message context property, and forwards
-      the message to 'http://localhost:9000/soap/MTOMSwASampleService'
-      optimizing bindary content as MTOM. By sending this message through TCPMon
-      you would be able to see the actual message sent over the http transport
-      if required. Thus during response processing, by checking the local
-      message property Synapse could identify the past information about the
-      current message context, and uses this knowledge to transform the response
-      back to the client in the same format as the original request.
-    </p>
-    <p>
-      When the client executes successfully, it will upload a file containing
-      the ASF logo and receive its response back again and save it into a
-      temporary file.
-    </p>
-<pre xml:space="preserve">[java] Sending file : ./../../repository/conf/sample/resources/mtom/asf-logo.gif as MTOM</pre>
-<pre xml:space="preserve">[java] Saved response to file : /tmp/mtom-36877.gif</pre>
-    <p>
-      Next try SwA as:
-    </p>
-<pre xml:space="preserve">ant optimizeclient -Dopt_mode=swa</pre>
-<pre xml:space="preserve">[java] Sending file : ./../../repository/conf/sample/resources/mtom/asf-logo.gif as SwA
-[java] Saved response to file : /tmp/swa-47549.gif</pre>
-    <p>
-      By using TCPMon and sending the message through it, one can inspect that
-      the requests and responses sent are indeed MTOM optimized or sent as http
-      attachments as follows:
-    </p>
-<pre xml:space="preserve">POST http://localhost:9000/soap/MTOMSwASampleService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:uploadFileUsingMTOM
-Content-Type: multipart/related; boundary=MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353; type="application/xop+xml";
-start="&lt;0.urn:uuid:B94996494E1DD5F9B51177413845354@apache.org&gt;"; start-info="text/xml"; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353241
-Content-Type: application/xop+xml; charset=UTF-8; type="text/xml"
-Content-Transfer-Encoding: binary
-Content-ID:
-   &lt;0.urn:uuid:B94996494E1DD5F9B51177413845354@apache.org&gt;221b1
-      &lt;?xml version='1.0' encoding='UTF-8'?&gt;
-         &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-            &lt;soapenv:Body&gt;
-               &lt;m0:uploadFileUsingMTOM xmlns:m0="http://www.apache-synapse.org/test"&gt;
-                  &lt;m0:request&gt;
-                     &lt;m0:image&gt;
-                        &lt;xop:Include href="cid:1.urn:uuid:78F94BC50B68D76FB41177413845003@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include" /&gt;
-                     &lt;/m0:image&gt;
-                  &lt;/m0:request&gt;
-               &lt;/m0:uploadFileUsingMTOM&gt;
-            &lt;/soapenv:Body&gt;
-         &lt;/soapenv:Envelope&gt;
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353217
-Content-Type: image/gif
-Content-Transfer-Encoding: binary
-Content-ID:
-         &lt;1.urn:uuid:78F94BC50B68D76FB41177413845003@apache.org&gt;22800GIF89a... &lt;&lt; binary content &gt;&gt;</pre>
-<pre xml:space="preserve">POST http://localhost:9000/soap/MTOMSwASampleService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:uploadFileUsingSwA
-Content-Type: multipart/related; boundary=MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177414170491; type="text/xml";
-start="&lt;0.urn:uuid:B94996494E1DD5F9B51177414170492@apache.org&gt;"; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177414170491225
-Content-Type: text/xml; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-Content-ID:
-   &lt;0.urn:uuid:B94996494E1DD5F9B51177414170492@apache.org&gt;22159
-      &lt;?xml version='1.0' encoding='UTF-8'?&gt;
-         &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-            &lt;soapenv:Body&gt;
-               &lt;m0:uploadFileUsingSwA xmlns:m0="http://www.apache-synapse.org/test"&gt;
-                  &lt;m0:request&gt;
-                     &lt;m0:imageId&gt;urn:uuid:15FD2DA2584A32BF7C1177414169826&lt;/m0:imageId&gt;
-                  &lt;/m0:request&gt;
-               &lt;/m0:uploadFileUsingSwA&gt;
-            &lt;/soapenv:Body&gt;
-         &lt;/soapenv:Envelope&gt;22--34MIMEBoundaryurn_uuid_B94996494E1DD5F9B511774141704912
-17
-Content-Type: image/gif
-Content-Transfer-Encoding: binary
-Content-ID:
-         &lt;urn:uuid:15FD2DA2584A32BF7C1177414169826&gt;22800GIF89a... &lt;&lt; binary content &gt;&gt;</pre>
-    <h2>
-      <a name="Sample52" id="Sample52">Sample 52:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- POX to SOAP conversion --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- filtering of messages with XPath and regex matches --&gt;
-    &lt;filter source="get-property('To')" regex=".*/StockQuote.*"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="soap"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-        &lt;drop/&gt;
-    &lt;/filter&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: POX to SOAP conversion</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 52: i.e. synapse -sample 52\
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p>
-      Execute the 'ant stockquote' specifying that the request should be a REST
-      request as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8081/soap/StockQuote -Drest=true</pre>
-    <p>
-      This example shows a http REST request (as shown below) being transformed
-      into a SOAP request and forwarded to the stock quote service.
-    </p>
-<pre xml:space="preserve">POST /soap/StockQuote HTTP/1.1
-Content-Type: application/xml; charset=UTF-8;action="urn:getQuote";
-SOAPAction: urn:getQuote
-User-Agent: Axis2
-Host: 127.0.0.1
-Transfer-Encoding: chunked
-
-75
-&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-   &lt;m0:request&gt;
-      &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-   &lt;/m0:request&gt;
-&lt;/m0:getQuote&gt;0</pre>
-    <h2>
-      <a name="Sample53" id="Sample53">Sample 53:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- RMSequence example --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;in&gt;
-        &lt;RMSequence single="true" version="1.0"/&gt;
-        &lt;send&gt;
-           &lt;endpoint name="reliable"&gt;
-              &lt;address uri="http://localhost:9000/soap/ReliableStockQuoteService"&gt;
-                 &lt;enableRM/&gt;
-                 &lt;enableAddressing/&gt;
-              &lt;/address&gt;
-           &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;header name="wsrm:SequenceAcknowledgement" action="remove"
-                xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-        &lt;header name="wsrm:Sequence" action="remove"
-                xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-
-&lt;/definitions&gt;</pre>
-    <strong>Objective: Demonstrate the message exchange between Synapse and
-    the server using WS-ReliableMessaging (WS-RM)</strong>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Deploy the ReliableStockQuoteService in the sample Axis2 server by
-      switching to the samples/axis2Server/src/ReliableStockQuoteService
-      directory and running ant.
-    </p>
-    <p>
-      Start the sample Axis2 server on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 53 (i.e. synapse -sample 53).
-    </p>
-    <p/>
-    <p>
-      In the above configuration, WS-RM is engaged to the endpoint using the
-      &lt;enableRM/&gt; tag. It is possible to engage WS-RM to both Address and
-      WSDL endpoints using this tag. In addition to the RM enabled endpoint,
-      RMSequence mediator is specified before the send mediator. This mediator
-      is used to specify the set of messages to be sent using a single RM
-      sequence. In this sample it is specified as single message per sequence.
-      It also specifies the version of the WS-RM to be used. Refer to the
-      Synapse configuration language documentation for more information about
-      the RMSequence mediator. RM related SOAP headers are removed form the
-      message in the out mediator as WS-RM message exchange happens only between
-      the Synapse and the server. Now run the sample client using the following
-      command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-    <p>
-      You can observer the client output displaying the quote price for IBM as
-      follows:
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $189.2521262517493</pre>
-    <p>
-      There is no difference to be observed between the normal message exchange
-      and WS-RM enabled message exchange as far as client and server outputs are
-      considered. But if you look at the wire level messages, you would observe
-      additional WS-RM messages and WS-RM elements. Synapse, the initiator of
-      the RM sequence, first try to create a sequence by sending a message with
-      CreateSequence element.
-    </p>
-<pre xml:space="preserve">...
-&lt;soapenv:Body&gt;
-   &lt;wsrm:CreateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-      &lt;wsrm:AcksTo&gt;
-         &lt;wsa:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/wsa:Address&gt;
-      &lt;/wsrm:AcksTo&gt;
-      &lt;wsrm:Offer&gt;
-         &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-      &lt;/wsrm:Offer&gt;
-   &lt;/wsrm:CreateSequence&gt;
-&lt;/soapenv:Body&gt;
-...</pre>
-    <p>
-      Sample Axis2 server responds to CreateSequence request with the following
-      message:
-    </p>
-<pre xml:space="preserve">...
-&lt;soapenv:Body&gt;
-   &lt;wsrm:CreateSequenceResponse xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-      &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-      &lt;wsrm:Accept&gt;
-         &lt;wsrm:AcksTo&gt;
-            &lt;wsa:Address&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:Address&gt;
-         &lt;/wsrm:AcksTo&gt;
-      &lt;/wsrm:Accept&gt;
-   &lt;/wsrm:CreateSequenceResponse&gt;
-&lt;/soapenv:Body&gt;
-...</pre>
-    <p>
-      Once the sequence is established, Synapse sends the request to the server
-      with the pre-negotiated sequence ID.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:To&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:To&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:DB9A5257B637DDA38B1179807372560712002-1515891720&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-        &lt;wsrm:Sequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                       soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
-            &lt;wsrm:LastMessage/&gt;
-        &lt;/wsrm:Sequence&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-            &lt;m0:request&gt;
-                &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-            &lt;/m0:request&gt;
-        &lt;/m0:getQuote&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Synapse keeps on sending above message till the server responds with a
-      valid response message with 200 OK HTTP header. If the server is not ready
-      with a response, it will respond with 202 Accepted HTTP header for all
-      requests. Once the server is ready with a response it will send the
-      response message with sequence ID as follows.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:879853A6871A66641C1179807373804&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://services.samples/ReliableStockQuoteServicePortType/getQuoteResponse
-        &lt;/wsa:Action&gt;
-        &lt;wsa:RelatesTo&gt;urn:uuid:DB9A5257B637DDA38B1179807372560712002-1515891720&lt;/wsa:RelatesTo&gt;
-        &lt;wsrm:Sequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                       soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
-            &lt;wsrm:LastMessage/&gt;
-        &lt;/wsrm:Sequence&gt;
-        &lt;wsrm:SequenceAcknowledgement xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                                      soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:AcknowledgementRange Lower="1" Upper="1"/&gt;
-        &lt;/wsrm:SequenceAcknowledgement&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-...</pre>
-    <p>
-      Now both Synapse and the server are done with the actual message exchange.
-      Then Synapse sends a request to terminate the sequence as follows:
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:To&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:To&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:546F6F33FB7D8BBE351179807379591&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence&lt;/wsa:Action&gt;
-        &lt;wsrm:SequenceAcknowledgement xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                                      soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:AcknowledgementRange Lower="1" Upper="1"/&gt;
-        &lt;/wsrm:SequenceAcknowledgement&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;wsrm:TerminateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-        &lt;/wsrm:TerminateSequence&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Server responds to the sequence termination message, accepting to
-      terminate the sequence as follows.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:ReplyTo&gt;
-            &lt;wsa:Address&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:Address&gt;
-        &lt;/wsa:ReplyTo&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:879853A6871A66641C1179807380190&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence&lt;/wsa:Action&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;wsrm:TerminateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-        &lt;/wsrm:TerminateSequence&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Note that although each of above messages are separate SOAP messages, in
-      most cases they will be exchanged in a single socket connection as HTTP
-      Keep-Alive header is used.
-    </p>
-    <h2>
-      <a name="Sample54" id="Sample54">Sample 54:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- demonstrates simple session less load balancing between 3 endpoints --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the simple load balancing among set of
-      endpoints</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 54. (i.e. synapse -sample 54)
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService by switching to &lt;synapse
-      installation directory&gt;/samples/axis2Server/src/LoadbalanceFailoverService
-      directory and running ant.
-    </p>
-    <p>
-      Start three instances of sample Axis2 server on HTTP ports 9001, 9002 and
-      9003 and give some unique names to each server.
-    </p>
-    <p>
-      Example commands to run sample Axis2 servers in Linux is listed below:
-    </p>
-<pre xml:space="preserve">axis2Server.sh -http 9001 -https 9005 -name MyServer1
-axis2Server.sh -http 9002 -https 9006 -name MyServer2
-axis2Server.sh -http 9003 -https 9007 -name MyServer3</pre>
-    <p>
-      Now we are done with setting up the environment for load balance sample.
-      Start the load balance and failover client using the following command:
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Di=100</pre>
-    <p>
-      This client sends 100 requests to the LoadbalanceFailoverService through
-      Synapse. Synapse will distribute the load among the three endpoints
-      mentioned in the configuration in round robin manner.
-      LoadbalanceFailoverService appends the name of the server to the response,
-      so that client can determine which server has processed the message. If
-      you examine the console output of the client, you can see that requests
-      are processed by three servers as follows:
-    </p>
-<pre xml:space="preserve">[java] Request: 1 ==&gt; Response from server: MyServer1
-[java] Request: 2 ==&gt; Response from server: MyServer2
-[java] Request: 3 ==&gt; Response from server: MyServer3
-[java] Request: 4 ==&gt; Response from server: MyServer1
-[java] Request: 5 ==&gt; Response from server: MyServer2
-[java] Request: 6 ==&gt; Response from server: MyServer3
-[java] Request: 7 ==&gt; Response from server: MyServer1
-...</pre>
-    <p>
-      Now run the client without the -Di=100 parameter to send infinite
-      requests. While running the client shutdown the server named MyServer1.
-      You can observe that requests are only distributed among MyServer2 and
-      MyServer3 after shutting down MyServer1. Console output before and after
-      shutting down MyServer1 is listed below (MyServer1 was shutdown after
-      request 63):
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 61 ==&gt; Response from server: MyServer1
-[java] Request: 62 ==&gt; Response from server: MyServer2
-[java] Request: 63 ==&gt; Response from server: MyServer3
-[java] Request: 64 ==&gt; Response from server: MyServer2
-[java] Request: 65 ==&gt; Response from server: MyServer3
-[java] Request: 66 ==&gt; Response from server: MyServer2
-[java] Request: 67 ==&gt; Response from server: MyServer3
-...</pre>
-    <p>
-      Now restart MyServer1. You can observe that requets will be again sent to
-      all three servers roughly after 60 seconds. This is because we have
-      specified &lt;suspendDurationOnFailure&gt; as 60 seconds in the
-      configuration. Therefore, load balance endpoint will suspend any failed
-      child endpoint only for 60 seconds after detecting the failure.
-    </p>
-    <h2>
-      <a name="Sample55" id="Sample55">Sample 55:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Demontrates failover sending among 3 endpoints. --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;failover&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/failover&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the failover sending</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 55 (i.e. synapse -sample 55)
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start three instances of sample
-      Axis2 server as mentioned in sample 54.
-    </p>
-    <p/>
-    <p>
-      Above configuration sends messages with the failover behavior. Initially
-      the server at port 9001 is treated as primary and other two are treated as
-      back ups. Messages are always directed only to the primary server. If the
-      primary server has failed, next listed server is selected as the primary.
-      Thus, messages are sent successfully as long as there is at least one
-      active server. To test this, run the loadbalancefailover client to send
-      infinite requests as follows:
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover</pre>
-    <p>
-      You can see that all requests are processed by MyServer1. Now shutdown
-      MyServer1 and inspect the console output of the client. You will observe
-      that all subsequent requests are processed by MyServer2.
-    </p>
-    <p>
-      The console output with MyServer1 shutdown after request 127 is listed
-      below:
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 125 ==&gt; Response from server: MyServer1
-[java] Request: 126 ==&gt; Response from server: MyServer1
-[java] Request: 127 ==&gt; Response from server: MyServer1
-[java] Request: 128 ==&gt; Response from server: MyServer2
-[java] Request: 129 ==&gt; Response from server: MyServer2
-[java] Request: 130 ==&gt; Response from server: MyServer2
-...</pre>
-    <p>
-      You can keep on shutting down servers like this. Client will get a
-      response till you shutdown all listed servers. Once all servers are
-      shutdown, the error sequence is activated and a fault message is sent to
-      the client as follows:
-    </p>
-<pre xml:space="preserve">[java] COULDN'T SEND THE MESSAGE TO THE SERVER.</pre>
-    <p>
-      Once a server is detected as failed, it will be added to the active
-      servers list again after 60 seconds (specified in &lt;suspendDurationOnFailure&gt;
-      in the configuration). Therefore, if you have restarted any of the stopped
-      servers and shutdown all other servers, messages will be directed to the
-      newly started server.
-    </p>
-    <h2>
-      <a name="Sample56" id="Sample56">Sample 56:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Demontrates session affinity load balancing between 3 endpoints. We are using client
- initiated session for this sample. --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;!-- specify the session as the simple client session provided by Synapse for
-                    testing purpose --&gt;
-                    <strong>&lt;session type="simpleClientSession"/&gt;</strong>
-
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the load balancing with session affinity
-      using client initiated sessions</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 56 (i.e. synapse -sample 56).
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start three instances of the
-      sample Axis2 server as in sample 54.
-    </p>
-    <p/>
-    <p>
-      Above configuration is same as the load balancing configuration in sample
-      54, except that the session type is specified as "simpleClientSession".
-      This is a client initiated session, which means that the client generates
-      the session identifier and send it to with each request. In this sample
-      session type, client adds a SOAP header named ClientID containing the
-      identifier of the client. Synapse binds this ID with a server on the first
-      request and sends all seccessive requests containing that ID to the same
-      server. Now switch to samples/axis2Client directory and run the client
-      using the following command to check this in action.
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Dmode=session</pre>
-    <p>
-      In the session mode, client continuesly sends requests with three diferent
-      client (session) IDs. One ID is selected among these three IDs for each
-      request randomly. Then client prints the session ID with the responded
-      server for each request. Client output for the first 10 requests are shown
-      below.
-    </p>
-<pre xml:space="preserve">[java] Request: 1 Session number: 1 Response from server: MyServer3
-[java] Request: 2 Session number: 2 Response from server: MyServer2
-[java] Request: 3 Session number: 0 Response from server: MyServer1
-[java] Request: 4 Session number: 2 Response from server: MyServer2
-[java] Request: 5 Session number: 1 Response from server: MyServer3
-[java] Request: 6 Session number: 2 Response from server: MyServer2
-[java] Request: 7 Session number: 2 Response from server: MyServer2
-[java] Request: 8 Session number: 1 Response from server: MyServer3
-[java] Request: 9 Session number: 0 Response from server: MyServer1
-[java] Request: 10 Session number: 0 Response from server: MyServer1
-... </pre>
-    <p>
-      You can see that session number 0 is always directed to the server named
-      MyServer1. That means session number 1 is bound to MyServer3. Similarly
-      session 1 and 2 are bound to MyServer3 and MyServer2 respectively.
-    </p>
-    <h2>
-      <a name="Sample57" id="Sample57">Sample 57:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Demontrates the session affinity load balancing between fail over endpoints. If endpoint servers
-maintain session specific data, such data have to replicated among the failover endpoints. --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;!-- specify the session as the simple client session provided by Synapse for
-                    testing purpose --&gt;
-                    <strong>&lt;session type="simpleClientSession"/&gt;</strong>
-
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;failover&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/failover&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;failover&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9004/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/failover&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the session affinity based load
-      balancing with failover capability</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 57 (i.e. synapse -sample 57).
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start four sample Axis2 servers
-      on http ports 9001, 9002, 9003 and 9004 respectively (make sure to specify
-      unconflicting https ports).
-    </p>
-    <p/>
-    <p>
-      This configuration also uses "simpleClientSession" to bind sessions as in
-      the previous sample. But failover endpoints are specified as the child
-      endpoints of the load balance endpoint. Therefore sessions are bound to
-      the failover endpoints. Session information has to be replicated among the
-      servers listed under each failover endpoint using some clustering
-      mechanism. Therefore, if one endpoint bound to a session failed,
-      successive requets for that session will be directed to the next endpoint
-      in that failover group. Run the client using the following command to
-      observe this behavoir.
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Dmode=session</pre>
-    <p>
-      You can see a client output as shown below.
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 222 Session number: 0 Response from server: MyServer1
-[java] Request: 223 Session number: 0 Response from server: MyServer1
-[java] Request: 224 Session number: 1 Response from server: MyServer1
-[java] Request: 225 Session number: 2 Response from server: MyServer3
-[java] Request: 226 Session number: 0 Response from server: MyServer1
-[java] Request: 227 Session number: 1 Response from server: MyServer1
-[java] Request: 228 Session number: 2 Response from server: MyServer3
-[java] Request: 229 Session number: 1 Response from server: MyServer1
-[java] Request: 230 Session number: 1 Response from server: MyServer1
-[java] Request: 231 Session number: 2 Response from server: MyServer3
-...</pre>
-    <p>
-      Note that session 0 is always directed to MyServer1 and session 1 is
-      directed to MyServer3. No requests are directed to MyServer2 and MyServer4
-      as they are kept as backups by failover endpoints. Now shutdown the server
-      named MyServer1 while running the sample. You will observer that all
-      successive requests for session 0 is now directed to MyServer2, which is
-      the backup server for MyServer1's group. This is shown below, where
-      MyServer1 was shutdown after the request 534.
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 529 Session number: 2 Response from server: MyServer3
-[java] Request: 530 Session number: 1 Response from server: MyServer1
-[java] Request: 531 Session number: 0 Response from server: MyServer1
-[java] Request: 532 Session number: 1 Response from server: MyServer1
-[java] Request: 533 Session number: 1 Response from server: MyServer1
-[java] Request: 534 Session number: 1 Response from server: MyServer1
-[java] Request: 535 Session number: 0 Response from server: MyServer2
-[java] Request: 536 Session number: 0 Response from server: MyServer2
-[java] Request: 537 Session number: 0 Response from server: MyServer2
-[java] Request: 538 Session number: 2 Response from server: MyServer3
-[java] Request: 539 Session number: 0 Response from server: MyServer2
-...</pre>
-    <h2>
-      <a name="Sample60" id="Sample60">Sample 60:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- demonstrates wsdl endpoint --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;!-- get epr from the given wsdl --&gt;
-                &lt;endpoint&gt;
-                    &lt;wsdl uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl" service="SimpleStockQuoteService" port="SimpleStockQuoteServiceSOAP11port_http"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of WSDL endpoints</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 60 (i.e. synapse -sample 60).
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService and start the sample Axis2 server.
-    </p>
-    <p>
-      This sample uses a WSDL endpoint inside the send mediator. WSDL endpoints
-      can extract endpoint's address from the given WSDL. As WSDL documents can
-      have many services and many ports inside each service, the service and
-      port of the required endpoint has to be specified. As with address
-      endpoints, QoS parameters for the endpoint can be specified inline in the
-      configuration. An excerpt taken from the sample_proxy_1.wsdl containing
-      the specified service and port is listed below.
-    </p>
-<pre xml:space="preserve">&lt;wsdl:service name="SimpleStockQuoteService"&gt;
-    &lt;wsdl:port name="SimpleStockQuoteServiceSOAP11port_http"
-               binding="axis2:SimpleStockQuoteServiceSOAP11Binding"&gt;
-        &lt;soap:address location="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/wsdl:port&gt;
-    &lt;wsdl:port name="SimpleStockQuoteServiceSOAP12port_http"
-               binding="axis2:SimpleStockQuoteServiceSOAP12Binding"&gt;
-        &lt;soap12:address location="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/wsdl:port&gt;
-&lt;/wsdl:service&gt;</pre>
-    <p>
-      Specified service and port refers to the endpoint address
-      "http://localhost:9000/soap/SimpleStockQuoteService" according to the
-      above WSDL. Now run the client using the below command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-    <p>
-      Client will print the quote price for IBM received from the server running
-      on port 9000. Observe the Axis2 console and the Synapse console to verify
-      this behavoir.
-    </p>
-    <h1>
-      <a name="ProxyServices" id="ProxyServices">Proxy services</a>
-    </h1>
-    <h2>
-      <a name="Sample100" id="Sample100">Sample 100:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- introduction to Synapse proxy services --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to Synapse proxy services</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 100: i.e. synapse -sample 100<br/> Start the
-      Axis2 server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p/>
-    <p>
-      Once Synapse starts, you could go to
-      http://localhost:8080/soap/StockQuoteProxy?wsdl and view the WSDL
-      generated for the proxy service defined in the configuration. This WSDL is
-      based on the source WSDL supplied in the proxy service definition, and is
-      updated to reflect the proxy service EPR.
-    </p>
-    <p>
-      Execute the stock quote client by requesting for a stock quote on the
-      proxy service as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy</pre>
-    <p>
-      An 'inSequence' or 'endpoint' or both of these would decide how the
-      message would be handled after the proxy service receives the message. In
-      the above example, the request received is forwarded to the sample service
-      hosted on Axis2. The 'outSequence' defines how the response is handled
-      before it is sent back to the client. By default, a proxy service is
-      exposed over all transports configured for Synapse, unless these are
-      specifically mentioned through the 'transports' attribute.
-    </p>
-    <h2>
-      <a name="Sample101" id="Sample101">Sample 101:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- using custom sequences for incoming and outgoing message mediation with proxy services --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="proxy_1"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;&lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;&lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-    &lt;sequence name="out"&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-    &lt;endpoint name="proxy_2_endpoint"&gt;
-        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/endpoint&gt;
-    &lt;localEntry key="proxy_wsdl" src="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-
-    &lt;proxy name="StockQuoteProxy1"&gt;
-        &lt;publishWSDL key="proxy_wsdl"/&gt;
-        &lt;target inSequence="proxy_1" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-
-    &lt;proxy name="StockQuoteProxy2"&gt;
-        &lt;publishWSDL key="proxy_wsdl"/&gt;
-        &lt;target endpoint="proxy_2_endpoint" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Using custom sequences and endpoints for message
-      mediation with proxy services</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 101: i.e. synapse -sample 101<br/> Start the
-      Axis2 server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p/>
-    <p>
-      This configuration creates two proxy services.. The first proxy service
-      'StockQuoteProxy1' uses the sequence named 'proxy_1' to process incoming
-      messages and the sequence named "out" to process outgoing responses. The
-      second proxy service 'StockQuoteProxy2' is set to directly forward
-      messages that are received to the endpoint named 'proxy_2_endpoint'
-      without any mediation.
-    </p>
-    <p>
-      You could send a stock quote request to each of these proxy services and
-      receive the reply generated by the actual service hosted on the Axis2
-      instance.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy1<br/>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy2</pre>
-    <h2>
-      <a name="Sample102" id="Sample102">Sample 102:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- switching from https to REST/POX --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy" transports="https"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="pox"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Switching transports and from SOAP to REST/POX</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Synapse
-      configuration numbered 102: i.e. synapse -sample 102
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This configuration demonstrates how a proxy service could be exposed on a
-      subset of available transports, and how it could switch from one transport
-      to another. This example exposes the created proxy service only on https,
-      and thus if the user tries to access it over http, would result in a
-      fault.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy
-...
-     [java] org.apache.axis2.AxisFault: The service cannot be found for the endpoint reference (EPR) /soap/StockQuoteProxy</pre>
-    <p/>
-    <p>
-      Accessing this over https (ant stockquote
-      -Dtrpurl=https://localhost:8443/soap/StockQuoteProxy) causes the proxy
-      service to access the SimpleStockQuoteService on the sample Axis2 server
-      using REST/POX. This could be seen if the message exchange was captured
-      using TCPMon as follows. The REST/POX response is now transformed back
-      into a SOAP message and returned to the client.
-    </p>
-<pre xml:space="preserve">POST http://localhost:9000/soap/SimpleStockQuoteService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:getQuote
-Content-Type: application/xml; charset=UTF-8;action="urn:getQuote";
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
-75
-&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-   &lt;m0:request&gt;
-      &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-   &lt;/m0:request&gt;
-&lt;/m0:getQuote&gt;</pre>
-<pre xml:space="preserve">HTTP/1.1 200 OK
-Content-Type: application/xml; charset=UTF-8;action="http://services.samples/SimpleStockQuoteServicePortType/getQuoteResponse";
-Date: Tue, 24 Apr 2007 14:42:11 GMT
-Server: Synapse-HttpComponents-NIO
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-
-2b3
-&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-   &lt;ns:return&gt;
-      &lt;ns:change&gt;3.7730036841862384&lt;/ns:change&gt;
-      &lt;ns:earnings&gt;-9.950236235550818&lt;/ns:earnings&gt;
-      &lt;ns:high&gt;-80.23868444613285&lt;/ns:high&gt;
-      &lt;ns:last&gt;80.50750970812187&lt;/ns:last&gt;
-      &lt;ns:lastTradeTimestamp&gt;Tue Apr 24 20:42:11 LKT 2007&lt;/ns:lastTradeTimestamp&gt;
-      &lt;ns:low&gt;-79.67368355714606&lt;/ns:low&gt;
-      &lt;ns:marketCap&gt;4.502043663670823E7&lt;/ns:marketCap&gt;
-      &lt;ns:name&gt;IBM Company&lt;/ns:name&gt;
-      &lt;ns:open&gt;-80.02229531286982&lt;/ns:open&gt;
-      &lt;ns:peRatio&gt;25.089295161182022&lt;/ns:peRatio&gt;
-      &lt;ns:percentageChange&gt;4.28842665653824&lt;/ns:percentageChange&gt;
-      &lt;ns:prevClose&gt;87.98107059692451&lt;/ns:prevClose&gt;
-      &lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;
-      &lt;ns:volume&gt;19941&lt;/ns:volume&gt;
-   &lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;</pre>
-    <p/>
-    <h2>
-      <a name="Sample103" id="Sample103">Sample 103:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- attaching service level WS-Security policies to proxy services --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="sec_policy" src="file:repository/conf/sample/resources/policy/policy_3.xml"/&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;header name="wsse:Security" action="remove"
-                        xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;policy key="sec_policy"/&gt;
-        &lt;enableSec/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Using WS-Security signing and encryption with proxy
-      services through WS-Policy</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> You may also need to
-      download and install the unlimited strength policy files for your JDK
-      before using Apache Rampart (e.g. see
-      http://java.sun.com/javase/downloads/index_jdk5.jsp)
-    </p>
-    <p>
-      Start the Synapse configuration numbered 103: i.e. synapse -sample 103<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      The proxy service expects to receive a signed and encrypted message as
-      specified by the security policy. Please see Apache Rampart and Axis2
-      documentation on the format of the policy file. The element 'engageSec'
-      specifies that Apache Rampart should be engaged on this proxy service.
-      Hence if Rampart rejects any request messages that does not conform to the
-      specified policy, those messages will never reach the 'inSequence' to be
-      processed. Since the proxy service is forwarding the received request to
-      the simple stock quote service that does not use WS-Security, we are
-      instructing Synapse to remove the wsse:Security header from the outgoing
-      message. To execute the client, send a stock quote request to the proxy
-      service, and sign and encrypt the request by specifying the client side
-      security policy as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy -Dpolicy=./../../repository/conf/sample/resources/policy/client_policy_3.xml</pre>
-    <p>
-      By following through the debug logs or TCPMon output, you could see that
-      the request received by the proxy service was signed and encrypted. Also,
-      looking up the WSDL of the proxy service by requesting the
-      URLhttp://localhost:8080/soap/StockQuoteProxy?wsdl reveals the security
-      policy attachment to the supplied base WSDL. When sending the message to
-      the backend service, you could verify that the security headers were
-      removed, and that the response received does not use WS-Security, but that
-      the response being forwarded back to the client is signed and encrypted as
-      expected by the client.
-    </p>
-    <h2>
-      <a name="Sample104" id="Sample104">Sample 104:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- attaching service level WS-RM policies to proxy services --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;header name="wsrm:SequenceAcknowledgement" action="remove"
-                        xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-                &lt;header name="wsrm:Sequence" action="remove"
-                        xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;enableRM/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <strong>Objective: Demonstrate the reliable message exchange between the
-    client and Synapse using WS-ReliableMessaging (WS-RM)</strong>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService in the sample Axis2 server and start it
-      on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration number 104 (i.e. synapse
-      -sample 104).
-    </p>
-    <p/>
-    <p>
-      In the above configuration, a proxy service is created with WS-RM enabled
-      using the &lt;enableRM/&gt; tag. Therefore, this proxy service is capable
-      of communicating with a WS-RM client. It also removes the WS-RM headers in
-      the In Sequence before the message is sent to the back end server. This is
-      required as the reliable messaging is applicable only between the client
-      and Synapse. Now start the client with WS-RM as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8081/soap/StockQuoteProxy -Dwsrm=true</pre>
-    <p>
-      In this case, client sends WS-RM enabled request to Synapse where Synapse
-      sends normal request to the server. This can be observed by examining the
-      wire level messages between the client and Synapse. These messages would
-      be similar to the wire level messages shown in sample 53. Each message
-      would perform a similar function to the messages discussed in sample 53.
-    </p>
-    <p/>
-    <h1>
-      <a name="Transport" id="Transport">Transports</a>
-    </h1>
-    <h2>
-      <a name="Sample110" id="Sample110">Sample 110:</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="StockQuoteProxy" transports="jms"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to switching transports with proxy
-      services</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService (Refer steps above)<br/>
-      Download, install and start a JMS server, and configure Synapse to listen
-      on JMS (refer notes below)<br/> Start the Synapse configuration
-      numbered 110: i.e. synapse -sample 110<br/> For this example we would
-      use ActiveMQ as the JMS provider. Once ActiveMQ is installed and started
-      you should get a message as follows:
-    </p>
-<pre xml:space="preserve">INFO BrokerService - ActiveMQ JMS Message Broker (localhost) started</pre>
-    <p>
-      You will now need to configure the Axis2 instance used by Synapse (not the
-      sample Axis2 server) to enable JMS support using the above provider. Refer
-      to the Axis2 documentation on setting up JMS for more details
-      (http://ws.apache.org/axis2/1_1/jms-transport.html). You will also need to
-      copy the ActiveMQ client jar files activeio-core-3.0-beta1.jar,
-      activemq-core-4.0-RC2.jar, geronimo-jms_1.1_spec-1.0.jar and
-      geronimo-j2ee-management_1.0_spec-1.0.jar into the lib directory to allow
-      Synapse to connect to the JMS provider.
-    </p>
-    <p>
-      For a default ActiveMQ v4.0 installation, you may uncomment the Axis2
-      transport listener configuration found at repository/conf/axis2.xml as
-    </p>
-<pre xml:space="preserve">&lt;transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener"&gt; ...</pre>
-    <p>
-      Once you start the Synapse configuration and request for the WSDL of the
-      proxy service (http://localhost:8080/soap/StockQuoteProxy?wsdl) you will
-      notice that its exposed only on the JMS transport. This is because the
-      configuration specified this requirement in the proxy service definition.
-    </p>
-    <p>
-      Now lets send a stock quote request on JMS, using the dumb stock quote
-      client as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/StockQuoteProxy -Djms_payload=MSFT</pre>
-    <p>
-      On the Synapse debug log you will notice that the JMS listener received
-      the request message as:
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver -Proxy Service StockQuoteProxy received a new message...</pre>
-    <p>
-      Now if you examine the console running the sample Axis2 server, you will
-      see a message indicating that the server has accepted an order as follows:
-    </p>
-<pre xml:space="preserve">Accepted order for : 16517 stocks of MSFT at $ 169.14622538721846</pre>
-    <p>
-      In this sample, client sends the request message to the proxy service
-      exposed in JMS in Synsape. Synapse forwards this message to the HTTP EPR
-      of the simple stock quote service hosted on the sample Axis2 server, and
-      returns the reply back to the client through a JMS temporary queue.
-    </p>
-    <p>
-      Note: It is possible to instruct a JMS proxy service to listen to an
-      already existing destination without creating a new one. To do this, use
-      the property elements on the proxy service definition to specify the
-      destination and connection factory etc.
-    </p>
-    <p>
-      e.g.
-    </p>
-<pre xml:space="preserve">&lt;property name="transport.jms.Destination" value="dynamicTopics/something.TestTopic"/&gt;</pre>
-    <h2>
-      <a name="Sample111" id="Sample111">Sample 111:</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="StockQuoteProxy" transports="http"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;amp;
-                   java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;amp;java.naming.provider.url=tcp://localhost:61616"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate switching from HTTP to JMS</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Download, install and
-      start a JMS server
-    </p>
-    <p>
-      Configure sample Axis2 server for JMS (refer notes above)<br/> Start
-      the Axis2 server and deploy the SimpleStockQuoteService (see below)<br/>
-      Configure the Synase JMS transport (refer notes above - sample 110)<br/>
-      Start the Synapse configuration numbered 111: i.e. synapse -sample 111
-    </p>
-    <p>
-      To switch from HTTP to JMS, edit the
-      samples/axis2Server/repository/conf/axis2.xml for the sample Axis2 server
-      and enable JMS (refer notes above), and restart the server. Now you can
-      see that the simple stock quote service is available in both JMS and HTTP
-      in the sample Axis2 server. To see this, point your browser to the WSDL of
-      the service at http://localhost:9000/soap/SimpleStockQuoteService?wsdl.
-      JMS URL for the service is mentioned as below:
-    </p>
-<pre xml:space="preserve">jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=
-QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;
-java.naming.provider.url=tcp://localhost:61616</pre>
-    <p>
-      You may also notice that the simple stock quote proxy service exposed in
-      Synapse is now available only in HTTP as we have specified transport for
-      that service as HTTP. To observe this, access the WSDL of stock quote
-      proxy service at http://localhost:8080/soap/StockQuoteProxy?wsdl.
-    </p>
-    <p>
-      This Synapse configuration creates a proxy service over HTTP and forwards
-      received messages to the above EPR using JMS, and sends back the response
-      to the client over HTTP once the simple stock quote service responds with
-      the stock quote reply over JMS to the Synapse server. To test this, send a
-      place order request to Synapse using HTTP as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy -Dmode=placeorder -Dsymbol=MSFT</pre>
-    <p>
-      The sample Axis2 server console will print a message indicating that it
-      has accepted the order as follows:
-    </p>
-<pre xml:space="preserve">Accepted order for : 18406 stocks of MSFT at $ 83.58806051152119</pre>
-    <h2>
-      <a name="Sample112" id="Sample112">Sample 112:</a>
-    </h2>
-    <p>
-      <strong>Objective: Demonstrate one way messaging / fireAndForget()</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService (Refer steps above)<br/> Start
-      the Synapse configuration numbered 1: i.e. synapse -sample 1
-    </p>
-    <p>
-      This example invokes the one-way 'placeOrder' operation on the
-      SimpleStockQuoteService using the custom client which uses the Axis2
-      ServiceClient.fireAndForget() API. To test this, use 'ant
-      -Dmode=placeorder...' and you will notice the one way message flowing
-      through Synapse into the sample Axis2 server instance, which reports the
-      acceptance of the order as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dmode=placeorder</pre>
-<pre xml:space="preserve">SimpleStockQuoteService :: Accepted order for : 7482 stocks of IBM at $ 169.27205579038733</pre>
-    <p>
-      If you send your client request through TCPmon, you will notice that the
-      SimpleStockQuoteService replies to Synapse with a HTTP 202 reply, and that
-      Synapse in-turn replies to the client with a HTTP 202 acknowledgement
-    </p>
-    <h2>
-      <a name="Sample113" id="Sample113">Sample 113:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- demonstrate JMS pure text, binary and POX message support --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="text_proxy"&gt;
-        &lt;header name="Action" value="urn:placeOrder"/&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-            var args = mc.getPayloadXML().toString().split(" ");
-            mc.setPayloadXML(
-            &lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-                &lt;m:order&gt;
-                    &lt;m:price&gt;{args[0]}&lt;/m:price&gt;
-                    &lt;m:quantity&gt;{args[1]}&lt;/m:quantity&gt;
-                    &lt;m:symbol&gt;{args[2]}&lt;/m:symbol&gt;
-                &lt;/m:order&gt;
-            &lt;/m:placeOrder&gt;);
-        ]]&gt;&lt;/script&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="mtom_proxy"&gt;
-        &lt;header name="Action" value="urn:oneWayUploadUsingMTOM"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="mtom"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="pox_proxy"&gt;
-        &lt;header name="Action" value="urn:placeOrder"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="soap"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="out"&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;proxy name="JMSFileUploadProxy" transports="jms"&gt;
-        &lt;target inSequence="mtom_proxy" outSequence="out"/&gt;
-        &lt;parameter name="transport.jms.Wrapper"&gt;{http://services.samples/xsd}element&lt;/parameter&gt;
-    &lt;/proxy&gt;
-    &lt;proxy name="JMSTextProxy" transports="jms"&gt;
-        &lt;target inSequence="text_proxy" outSequence="out"/&gt;
-        &lt;parameter name="transport.jms.Wrapper"&gt;{http://services.samples/xsd}text&lt;/parameter&gt;
-    &lt;/proxy&gt;
-    &lt;proxy name="JMSPoxProxy" transports="jms"&gt;
-        &lt;target inSequence="pox_proxy" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Pure POX/Text and Binary JMS Proxy services -
-      including MTOM</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Configure JMS for
-      Synapse (Refer notes)<br/> Start the Synapse configuration numbered
-      113: i.e. synapse -sample 113<br/> Start the Axis2 server and deploy
-      the SimpleStockQuoteService and the MTOMSwASampleService if not already
-      done
-    </p>
-    <p/>
-    <p>
-      This configuration creates three JMS proxy services named
-      JMSFileUploadProxy, JMSTextProxy and JMSPoxProxy exposed over JMS queues
-      with the same names as the services. The first part of this example
-      demonstrates the pure text message support with JMS, where a user sends a
-      space separated text JMS message of the form "&lt;price&gt; &lt;qty&gt;
-      &lt;symbol&gt;". Synapse converts this message into a SOAP message and
-      sends this to the SimpleStockQuoteServices' placeOrder operation. Synapse
-      uses the script mediator to transform the text message into a XML payload
-      using the Javascript support available to tokenize the string. The proxy
-      service property named "transport.jms.Wrapper" defines a custom wrapper
-      element QName, to be used when wrapping text/binary content into a SOAP
-      envelope.
-    </p>
-    <p/>
-    <p>
-      Execute JMS client as follows. This will post a pure text JMS message with
-      the content defined (e.g. "12.33 1000 ACP") to the specified JMS
-      destination - dynamicQueues/JMSTextProxy
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=text -Djms_payload="12.33 1000 ACP" -Djms_dest=dynamicQueues/JMSTextProxy</pre>
-    <p>
-      Following the debug logs, you could notice that Synapse received the JMS
-      text message and transformed it into a SOAP payload as follows. Notice
-      that the wrapper element "{http://services.samples/xsd}text" has been used
-      to hold the text message content.
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-  &lt;soapenv:Body&gt;&lt;axis2ns1:text xmlns:axis2ns1="http://services.samples/xsd"&gt;12.33 1000 ACP&lt;/axis2ns1:text&gt;&lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Now, you could see how the script mediator created a stock quote request
-      by tokenizing the text as follows, and sent the message to the placeOrder
-      operation of the SimpleStockQuoteService.
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG AddressEndpoint - Sending message to endpoint :: name = AnonymousEndpoints resolved address = http://localhost:9000/soap/SimpleStockQuoteService
-[JMSWorker-1] DEBUG AddressEndpoint - SOAPAction: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - WSA-Action: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;
-  &lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;&lt;m:order&gt;&lt;m:price&gt;12.33&lt;/m:price&gt;&lt;m:quantity&gt;1000&lt;/m:quantity&gt;&lt;m:symbol&gt;ACP&lt;/m:symbol&gt;&lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      The sample Axis2 server would now accept the one way message and issue the
-      following message:
-    </p>
-<pre xml:space="preserve">Wed Apr 25 19:50:56 LKT 2007 samples.services.SimpleStockQuoteService :: Accepted order for : 1000 stocks of ACP at $ 12.33</pre>
-    <p/>
-    <p>
-      The next section of this example demonstrates how a pure binary JMS
-      message could be received and processed through Synapse. The configuration
-      creates a proxy service named 'JMSFileUploadProxy' that accepts binary
-      messages and wraps them into a custom element
-      '{http://services.samples/xsd}element'. The received message is then
-      forwarded to the MTOMSwASampleService using the SOAP action
-      'urn:oneWayUploadUsingMTOM' and optimizing binary conent using MTOM. To
-      execute this sample, use the JMS client to publish a pure binary JMS
-      message containing the file
-      './../../repository/conf/sample/resources/mtom/asf-logo.gif' to the JMS
-      destination 'dynamicQueues/JMSFileUploadProxy' as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=binary -Djms_dest=dynamicQueues/JMSFileUploadProxy -Djms_payload=./../../repository/conf/sample/resources/mtom/asf-logo.gif</pre>
-    <p>
-      Examining the Synapse debug logs reveals that the binary content was
-      received over JMS and wrapped with the specified element into a SOAP
-      infoset as follows:
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Proxy Service JMSFileUploadProxy received a new message...
-...
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-&lt;soapenv:Body&gt;&lt;axis2ns1:element xmlns:axis2ns1="http://services.samples/xsd"&gt;R0lGODlhgw...AAOw==&lt;/axis2ns1:element&gt;&lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Thereafter the message was sent as a MTOM optimized message as specified
-      by the 'format=mtom' attribute of the endpoint, to the
-      MTOMSwASampleService using the SOAP action 'urn:oneWayUploadUsingMTOM'.
-      Once received by the sample service, it is saved into a temporary file and
-      could be verified for correctness.
-    </p>
-<pre xml:space="preserve">Wrote to file : /tmp/mtom-60319.gif</pre>
-    <p/>
-    <p>
-      The final section of this example shows how a POX JMS message received by
-      Synapse is sent to the SimpleStockQuoteService as a SOAP message. Use the
-      JMS client as follows to create a POX (Plain Old XML) message with a stock
-      quote request payload (without a SOAP envelope), and send it to the JMS
-      destination 'dynamicQueues/JMSPoxProxy' as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/JMSPoxProxy -Djms_payload=MSFT</pre>
-    <p>
-      You can see that Synapse received the POX message and displays it as
-      follows in the debug logs, and then converts it into a SOAP payload and
-      sends to the SimpleStockQuoteService after setting the SOAP action as
-      'urn:placeOrder'.
-    </p>
-    <p/>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Proxy Service JMSPoxProxy received a new message...
-...
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-    &lt;m:order&gt;
-        &lt;m:price&gt;172.39703010684752&lt;/m:price&gt;
-        &lt;m:quantity&gt;19211&lt;/m:quantity&gt;
-        &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-    &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Using the sequence named pox_proxy for message mediation
-...
-[JMSWorker-1] DEBUG HeaderMediator - Setting header : Action to : urn:placeOrder
-...
-[JMSWorker-1] DEBUG AddressEndpoint - Sending message to endpoint :: name = AnonymousEndpoints resolved address = http://localhost:9000/soap/SimpleStockQuoteService
-[JMSWorker-1] DEBUG AddressEndpoint - SOAPAction: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-    &lt;m:order&gt;
-        &lt;m:price&gt;172.39703010684752&lt;/m:price&gt;
-        &lt;m:quantity&gt;19211&lt;/m:quantity&gt;
-        &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-    &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[JMSWorker-1] DEBUG Axis2FlexibleMEPClient - sending [add = false] [sec = false] [rm = false] [ mtom = false] [ swa = false] [ force soap=true; pox=false] [ to null] </pre>
-    <p>
-      The sample Axis2 server displays a successful message on the receipt of
-      the message as:
-    </p>
-<pre xml:space="preserve">Wed Apr 25 20:24:50 LKT 2007 samples.services.SimpleStockQuoteService :: Accepted order for : 19211 stocks of MSFT at $ 172.39703010684752</pre>
-    <h2>
-      <a name="Sample114" id="Sample114">Sample 114:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- one-way message bridging between JMS to HTTP and sending a 202 Accepted --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="JMStoHTTPStockQuoteProxy" transports="jms"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9001/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-    &lt;proxy name="OneWayProxy" transports="http"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;log level="full"/&gt;
-                &lt;property name="RESPONSE" value="true"/&gt;
-                &lt;header name="To" value="http://www.w3.org/2005/08/addressing/anonymous"/&gt;
-                &lt;property name="SC_ACCEPTED" value="true" scope="axis2"/&gt;
-                &lt;send/&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate one way message bridging from JMS to
-      http and replying with a http 202 Accepted response</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      Start the Synapse configuration numbered 114: i.e. synapse -sample 114
-    </p>
-    <p/>
-    <p>
-      This example invokes the one-way 'placeOrder' operation on the
-      SimpleStockQuoteService using the Axis2 ServiceClient.fireAndForget() API
-      at the client. To test this, use 'ant -Dmode=placeorder...' and you will
-      notice the one way JMS message flowing through Synapse into the sample
-      Axis2 server instance over http, and Axis2 acknowledging it with a http
-      202 Accepted response.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dmode=placeorder -Dtrpurl="jms:/JMStoHTTPStockQuoteProxy?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61616"</pre>
-<pre xml:space="preserve">SimpleStockQuoteService :: Accepted order for : 7482 stocks of IBM at $ 169.27205579038733</pre>
-    <p>
-      The second example shows how Synapse could be made to respond with a http
-      202 Accepted response to a request received. The proxy service simply logs
-      the message received and acknowledges it. On the Synapse console you could
-      see the logged message, and if TCPMon was used at the client, you would
-      see the 202 Accepted response sent back to the client from Synapse
-    </p>
-<pre xml:space="preserve">ant stockquote -Dmode=placeorder -Dtrpurl=http://localhost:8080/soap/OneWayProxy</pre>
-<pre xml:space="preserve">HTTP/1.1 202 Accepted
-Content-Type: text/xml; charset=UTF-8
-Host: 127.0.0.1
-SOAPAction: "urn:placeOrder"
-Date: Sun, 06 May 2007 17:20:19 GMT
-Server: Synapse-HttpComponents-NIO
-Transfer-Encoding: chunked
-
-0</pre>
-    <h1>
-      <a name="ExtensionMediators" id="ExtensionMediators">Extension
-      mediators</a>
-    </h1>
-    <p>
-      Synapse supports Mediators implemented in a variety of scripting languages
-      such as JavaScript, Python or Ruby. Implementing a Mediator with a script
-      language can have advantages over using the built in Synapse Mediator
-      types or implementing a custom Java class Mediator. Script Mediators have
-      all the flexibility of a class Mediator with access to the Synapse
-      MessageContext and SynapseEnvironment APIs, and the ease of use and
-      dynamic nature of scripting languages allows rapid development and
-      prototyping of custom mediators. An additional benefit of some scripting
-      languages is that they have very simple and elegant XML manipulation
-      capabilities, for example JavaScript E4X or Ruby REXML, so this makes them
-      well suited for use in the Synapse mediation environment.
-    </p>
-    <h2>
-      <a name="ScriptSetup" id="ScriptSetup">Configuring Synapse for Script
-      Mediator support</a>
-    </h2>
-    <p>
-      The Synapse Script Mediator is a Synapse extension, and thus all
-      pre-requisites are not bundled by default with the Synapse distribution.
-      Before you use some script mediators you may need to manually add the
-      required jar files to the Synapse lib directory, and optionally perform
-      other installation tasks as may be required by the individual scripting
-      language. This is detailed in the <a
-      href="Synapse_Samples_Setup.html#script">Samples Setup guide</a>.
-    </p>
-    <h2>
-      <a name="Sample500" id="Sample500">Sample 500:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Introduction to the script mediator --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="stockquoteScript" src="file:repository/conf/sample/resources/script/stockquoteTransformRequest.js"/&gt;
-
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote request expected by the service --&gt;
-        &lt;script language="js" key="stockquoteScript" function="transformRequest"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="js" key="stockquoteScript" function="transformResponse"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p/>
-<pre xml:space="preserve">&lt;x&gt;&lt;![CDATA[
-  function transformRequest(mc) {
-     var symbol = mc.getPayloadXML()..*::Code.toString();
-     mc.setPayloadXML(
-        &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-           &lt;m:request&gt;
-              &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
-           &lt;/m:request&gt;
-        &lt;/m:getQuote&gt;);
-  }
-
-  function transformResponse(mc) {
-     var symbol = mc.getPayloadXML()..*::symbol.toString();
-     var price = mc.getPayloadXML()..*::last.toString();
-     mc.setPayloadXML(
-        &lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;
-   &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
-   &lt;m:Price&gt;{price}&lt;/m:Price&gt;
-        &lt;/m:CheckPriceResponse&gt;);
-  }
-]]&gt;&lt;/x&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to script mediators</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 500: i.e. synapse -sample 500<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This sample is similar to sample 8 but instead of using XSLT the
-      transformation is done with JavaScript and E4X. Note that the script
-      source loaded from a resource must be specified within a CDATA tag within
-      an XML element. The script used in this example has two functions,
-      'transformRequest' and 'transformResponse', and the Synapse configuration
-      uses the function attribute to specify which function should be invoked.
-      Use the stock quote client as follows to issue a custom quote client:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=customquote</pre>
-    <p>
-      Synapse uses the script mediator and the specified Javascript function to
-      convert the custom request to a standard quote request. Subsequently the
-      response received is transformed back and sent back to the client.
-    </p>
-    <h2>
-      <a name="Sample501" id="Sample501">Sample 501:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- introduction to inline script mediation --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote requst expected by the service --&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-               var symbol = mc.getPayloadXML()..*::Code.toString();
-               mc.setPayloadXML(
-                  &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-                     &lt;m:request&gt;
-                        &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
-                     &lt;/m:request&gt;
-                  &lt;/m:getQuote&gt;);
-        ]]&gt;&lt;/script&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-               var symbol = mc.getPayloadXML()..*::symbol.toString();
-               var price = mc.getPayloadXML()..*::last.toString();
-               mc.setPayloadXML(
-                  &lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;
-               &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
-               &lt;m:Price&gt;{price}&lt;/m:Price&gt;
-                  &lt;/m:CheckPriceResponse&gt;);
-            ]]&gt;&lt;/script&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to in-line script mediation</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 501: i.e. synapse -sample 501<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This example is functionally equivalent to sample # 500 and sample # 8,
-      and demonstrates in-line script mediation in Synapse. Use the stock quote
-      client to send a custom quote as in example # 500 to test this example.
-    </p>
-    <p/>
-    <h2>
-      <a name="Sample502" id="Sample502">Sample 502</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- accessing the Synapse APIs from scripting languages --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-       &lt;!-- change the MessageContext into a response and set a response payload --&gt;
-       &lt;script language="js"&gt;&lt;![CDATA[
-          mc.setTo(mc.getReplyTo());
-          mc.setProperty("RESPONSE", "true");
-          mc.setPayloadXML(
-             &lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-                &lt;ns:return&gt;
-                   &lt;ns:last&gt;99.9&lt;/ns:last&gt;
-                &lt;/ns:return&gt;
-             &lt;/ns:getQuoteResponse&gt;);
-       ]]&gt;&lt;/script&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Accessing the Synapse APIs from scripting languages</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 502: i.e. bin/synapse -sample 502<br/>
-    </p>
-    <p/>
-    <p>
-      This example shows how an inline Javascript mediator script could access
-      the Synapse message context API to set its 'To' EPR and to set a custom
-      property to mark it as a response. Execute the stock quote client, and you
-      will receive the response "99.9" as the last sale price as per the above
-      script.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/
-...
-stockquote:
-     [java] Standard :: Stock price = $99.9</pre>
-    <h2>
-      <a name="Sample503" id="Sample503">Sample 503:</a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Introduction to the script mediator with Ruby scripts--&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;localEntry key="stockquoteScript" src="file:repository/conf/sample/resources/script/stockquoteTransform.rb"/&gt;
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote request expected by the service --&gt;
-        &lt;script language="rb" key="stockquoteScript" function="transformRequest"/&gt;
-
-        &lt;!-- send message to real endpoint referenced by name "stockquote" and stop --&gt;
-        &lt;send&gt;
-            &lt;endpoint name="stockquote"&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="rb" key="stockquoteScript" function="transformResponse"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-<pre xml:space="preserve">&lt;x&gt;&lt;![CDATA[
-require 'rexml/document'
-include REXML
-
-def transformRequest(mc)
-   newRequest= Document.new '&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;'&lt;&lt;
-      '&lt;m:request&gt;&lt;m:symbol&gt;&lt;/m:symbol&gt;&lt;/m:request&gt;&lt;/m:getQuote&gt;'
-   newRequest.root.elements[1].elements[1].text = mc.getPayloadXML().root.elements[1].get_text
-   mc.setPayloadXML(newRequest)
-end
-
-def transformResponse(mc)
-   newResponse = Document.new '&lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;&lt;m:Code&gt;' &lt;&lt;
-      '&lt;/m:Code&gt;&lt;m:Price&gt;&lt;/m:Price&gt;&lt;/m:CheckPriceResponse&gt;'
-   newResponse.root.elements[1].text = mc.getPayloadXML().root.elements[1].elements[1].get_text
-   newResponse.root.elements[2].text = mc.getPayloadXML().root.elements[1].elements[2].get_text
-   mc.setPayloadXML(newResponse)
-end
-]]&gt;&lt;/x&gt;</pre>
-    <p>
-      <strong>Objective: Script mediators using Ruby</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      This sample uses Ruby so first setup support for this in Synapse as
-      described at <a href="#ScriptSetupRuby">Configuring JRuby</a>.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 503: i.e. bin/synapse -sample 503<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This sample is functionally equivalent to sample # 500 (#501 and #8) but
-      instead uses a Ruby script using the JRuby interpreter. The script has two
-      functions, 'transformRequest' and 'transformResponse', and the Synapse
-      configuration specifies which function is to be invoked when used. Execute
-      the stock quote client to send a custom stock quote as per example #500
-      and check the received stock quote response.
-    </p>
-    <p/>
-    <h2>
-      <a name="Sample510" id="Sample510">Sample 510</a>
-    </h2>
-    <p/>
-<pre xml:space="preserve">&lt;!-- Demonstrate the use of class mediator --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="fault"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="Mediation failed."/&gt;
-        &lt;/makefault&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="fault"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint name="stockquote"&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;class name="samples.mediators.DiscountQuoteMediator"&gt;
-                &lt;property name="discountFactor" value="10"/&gt;
-                &lt;property name="bonusFor" value="5"/&gt;
-            &lt;/class&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p/>
-    <p>
-      <strong>Objective: Demonstrate the use of Class mediator to extend the
-      mediation functionality</strong>
-    </p>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Make sure the synapse-samples-1.0.jar is in your class path (by default
-      this jar is placed in the lib directory when installing Synapse).
-    </p>
-    <p>
-      Start Synapse with the sample configuration 600 (i.e. synapse -sample 600)
-    </p>
-    <p>
-      Start the sample Axis2 server and deploy the SimpleStockQuoteService.
-    </p>
-    <p/>
-    <p>
-      In this configuration, Synapse hands over the request message to the
-      specified endpoint, which sends it to the Axis2 server running on port
-      9000.
-    </p>
-    <p>
-      But the response message is passed through the class mediator before
-      sending it back to the client. Two parameters named "discountFactor"
-    </p>
-    <p>
-      and "bonusFor" are passed to the instance mediator implementation class
-      (i.e. samples.mediators.DiscountQuoteMediator) before each
-    </p>
-    <p>
-      invocation. Code of the mediator implementation class is shown below.
-    </p>
-<pre xml:space="preserve">package samples.mediators;
-
-import org.apache.synapse.MessageContext;
-import org.apache.synapse.Mediator;
-import org.apache.axiom.om.OMElement;
-import org.apache.axiom.om.OMAbstractFactory;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.soap.SOAPFactory;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import javax.xml.namespace.QName;
-
-public class DiscountQuoteMediator implements Mediator {
-
-    private static final Log log = LogFactory.getLog(DiscountQuoteMediator.class);
-
-    private String discountFactor="10";
-
-    private String bonusFor="10";
-
-    private int bonusCount=0;
-
-    public DiscountQuoteMediator(){}
-
-    public boolean mediate(MessageContext mc) {
-
-        String price= mc.getEnvelope().getBody().getFirstElement().getFirstElement().
-                getFirstChildWithName(new QName("http://services.samples/xsd","last")).getText();
-
-        //converting String properties into integers
-        int discount=Integer.parseInt(discountFactor);
-        int bonusNo=Integer.parseInt(bonusFor);
-        double currentPrice=Double.parseDouble(price);
-
-        //discounting factor is deducted from current price form every response
-        Double lastPrice = new Double(currentPrice - currentPrice * discount / 100);
-
-        //Special discount of 5% offers for the first responses as set in the bonusFor property
-        if (bonusCount &lt;= bonusNo) {
-            lastPrice = new Double(lastPrice.doubleValue() - lastPrice.doubleValue() * 0.05);
-            bonusCount++;
-        }
-
-        String discountedPrice = lastPrice.toString();
-
-        mc.getEnvelope().getBody().getFirstElement().getFirstElement().getFirstChildWithName
-                (new QName("http://services.samples/xsd","last")).setText(discountedPrice);
-
-        System.out.println("Quote value discounted.");
-        System.out.println("Original price: " + price);
-        System.out.println("Discounted price: " + discountedPrice);
-
-        return true;
-    }
-
-    public String getType() {
-        return null;
-    }
-
-    public void setTraceState(int traceState) {
-        traceState = 0;
-    }
-
-    public int getTraceState() {
-        return 0;
-    }
-
-    public void setDiscountFactor(String discount) {
-        discountFactor=discount;
-    }
-
-    public String getDiscountFactor() {
-        return discountFactor;
-    }
-
-    public void setBonusFor(String bonus){
-        bonusFor=bonus;
-    }
-
-    public String getBonusFor(){
-        return bonusFor;
-    }
-}</pre>
-    <p>
-      All classes specified for the Class mediatoe should implement the Mediator
-      interface, which contains the mediate(...) method. mediate(...) method of
-      the above class is invoked for each response message mediated through the
-      main sequence, with the message context of the current message as the
-      parameter. All the details of the message including the SOAP headers, SOAP
-      body and properties of the context hierachy can be accessed from the
-      message context. In this sample, the body of the message is retrieved and
-      discount percentage is substracted from the quote price. If the
-    </p>
-    <p>
-      quote request number is lesser than the number specified in the "bonusFor"
-      property in the configuration, a special discount is given.
-    </p>
-    <p/>
-    <p>
-      Now run the client using the following command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-    <p>
-      You will see the below output in the client console with the discounted
-      quote value.
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $138.77458254967408</pre>
-    <p>
-      Now check the console running Synapse. You will see the original value and
-      the discounted value for the requested quote as follows.
-    </p>
-<pre xml:space="preserve">Quote value discounted.
-Original price: 162.30945327447262
-Discounted price: 138.77458254967408</pre>
-    <h1>
-      <a name="AdvancedMediations" id="AdvancedMediations">Advanced
-      mediations</a>
-    </h1>
-    <h2>
-      <a name="Sample600" id="Sample600">Sample 600</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"
-             xmlns:throttle="http://ws.apache.org/ns/synapse/throttle"&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;throttle:throttle&gt;
-                &lt;policy&gt;
-                    &lt;!-- define throttle policy --&gt;
-                    &lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
-                                xmlns:throttle="http://www.wso2.org/products/wso2commons/throttle"&gt;
-                        &lt;throttle:ThrottleAssertion&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;Other&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;4&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;800000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;10000&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.200-192.168.8.222&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;8&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;800000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;10&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.201&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;200&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;600000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.198&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;50&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;500000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                        &lt;/throttle:ThrottleAssertion&gt;
-                    &lt;/wsp:Policy&gt;
-                &lt;/policy&gt;
-                &lt;onAccept&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Accept**"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/onAccept&gt;
-                &lt;onReject&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Denied**"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="**Access Denied**"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/onReject&gt;
-            &lt;/throttle:throttle&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-    <strong>Objective: Demonstrate the use of throttle mediator for
-    restricting request counts</strong>
-    <p>
-      <strong>Pre-Requisites:</strong>
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService in sample Axis2 server and start it on
-      port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 600 (i.e. synapse -sample
-      600).
-    </p>
-    <p/>
-    <p>
-      Above configuration specifies a throttle mediator inside the in mediator.
-      Therefore, all request messages directed to the main sequence will be
-      subjected to throttling. Throttle mediator has policy, onAccept and
-      onReject tags at top level. Policy tag specifies the throttling policy to
-      be applied for messages. It contains some IP address ranges and maximum
-      number of messages to be allowed for those ranges within the time range
-      given in "UnitTime" tag. "ProhibitTimePeriod" tag specifies the time
-      period to prohibit further requests after the received request count
-      exceeds the specified time. Now run the client 5 times repetitively using
-      the below command to see how throttling works.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-    <p>
-      For the first four requests you will get the quote prices for IBM as
-      follows:
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $177.20143371883802</pre>
-    <p>
-      You will receive the following response for the fifth request:
-    </p>
-<pre xml:space="preserve">[java] org.apache.axis2.AxisFault: **Access Denied**</pre>
-    <p>
-      Maximum number of requests within 800000 milliseconds is specified as 4
-      for any server (including localhost) other than the explicitly specified
-      ones. Therefore, our fifth request is denied by the throttle mediator. You
-      can verify this by looking at the Synapse console.
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-2] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-3] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-4] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-5] INFO  LogMediator - text = **Access Denied**</pre>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_0/samples.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_0/samples_setup.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_0/samples_setup.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_0/samples_setup.xml	(nonexistent)
@@ -1,518 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
-    <title>
-      Apache Synapse Samples
-    </title>
-    <meta name="generator" content="Amaya 9.54, see http://www.w3.org/Amaya/"/>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Overview
-    </h1>
-    <p/>
-    <p>
-      Synapse ships with a set of working examples that demonstrates some of the
-      basic features and capabilities of Synapse. A set of sample clients and
-      services are provided in addition to the sample configurations, and
-      scripts are provided to execute the sample scenarions as explained below.
-    </p>
-    <h4>
-      Pre-requisites
-    </h4>
-    <p>
-      You will need a Java development kit / JRE version 1.4 or later and Apache
-      Ant 1.5 or later at a minimum to try out the samples. Ant can be
-      downloaded from http://ant.apache.org. The JMS examples could be executed
-      against an ActiveMQ installation by default (or another JMS provider with
-      configuration) and any https examples would require a JDK version 1.5 or
-      later.
-    </p>
-    <p/>
-    <p>
-      Note*: The samples and the documentation assumes that you are running
-      Synapse in DEBUG mode. You could switch from the default INFO log messages
-      to DEBUG log messages by changing the line
-      "log4j.category.org.apache.synapse=INFO" as
-      "log4j.category.org.apache.synapse=DEBUG" in the lib/log4j.properties
-      file.
-    </p>
-    <h2>
-      Understanding the samples
-    </h2>
-    <p/>
-    <p>
-      The above diagram depicts the interactions between the clients, Synapse
-      and services at a high level. The Clients are able to send SOAP/REST or
-      POX messages over transports such as http/s or JMS with WS-Addressing,
-      WS-Security or WS-Reliable messaging. They could send binary optimized
-      content using MTOM or SwA or binary or plain text JMS messages. After
-      mediation through Synapse, the requests are passed over to the sample
-      services. The sample clients and services are explained below.
-    </p>
-    <p/>
-    <h2>
-      Using the sample clients
-    </h2>
-    <p/>
-    <p>
-      The sample clients could be executed from the samples/axis2Client
-      directory through the provided ant script. Simply executing 'ant' displays
-      the available clients and some of the sample options used to configure
-      them. The sample clients available are listed below:
-    </p>
-    <h3>
-      1. Stock quote client
-    </h3>
-    <p/>
-    <p>
-      This is a simple SOAP client that could send stock quote requests, and
-      receive and display the last sale price for a stock symbol.
-    </p>
-<pre xml:space="preserve">ant stockquote [-Dsymbol=IBM|MSFT|SUN|..]
-  [-Dmode=quote | customquote | fullquote | placeorder | marketactivity]
-  [-Daddurl=http://localhost:9000/soap/SimpleStockQuoteService]
-  [-Dtrpurl=http://localhost:8080] [-Dprxurl=http://localhost:8080]
-  [-Dpolicy=../../repository/conf/sample/resources/policy/policy_1.xml]</pre>
-
-    <p>
-      The client is able to operate in the following modes, and send the
-      payloads listed below as SOAP messages:
-    </p>
-    <ul>
-      <li>
-      </li>
-      <li>
-        quote - send a quote request for a single stock as follows. The response
-        contains the last sales price for the stock which would be displayed
-<pre xml:space="preserve">&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getQuote&gt;</pre>
-      </li>
-      <li>
-      </li>
-      <li>
-        customquote - send a quote request in a custom format. Synapse would
-        transform this custom request into the standard stock quote request
-        format and send it to the service. Upon receipt of the response, it
-        would be transformed again to a custom response format and returned to
-        the client, which will then display the last sales price.
-<pre xml:space="preserve">&lt;m0:checkPriceRequest xmlns:m0="http://www.apache-synapse.org/test"&gt;
-  &lt;m0:Code&gt;symbol&lt;/m0:Code&gt;
-&lt;/m0:checkPriceRequest&gt;</pre>
-      </li>
-      <li>
-      </li>
-      <li>
-        fullquote - get quote reports for the stock over a number of days (i.e.
-        last 100 days of the year).
-<pre xml:space="preserve">&lt;m:getFullQuote xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getFullQuote&gt;</pre>
-      </li>
-      <li>
-      </li>
-      <li>
-        placeorder - place an order for stocks using a one way request
-<pre xml:space="preserve">&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:order&gt;
-    &lt;m:price&gt;3.141593E0&lt;/m:price&gt;
-    &lt;m:quantity&gt;4&lt;/m:quantity&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;</pre>
-      </li>
-      <li>
-      </li>
-      <li>
-        marketactivity - get a market activity report for the day (i.e. quotes
-        for multiple symbols)
-<pre xml:space="preserve">&lt;m:getMarketActivity xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-    ...
-    &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getMarketActivity&gt;</pre>
-      </li>
-      <li>
-      </li>
-    </ul>
-    <p>
-      Note : See samples/axis2Client/src/samples/common/StockQuoteHandler.java
-      for sample responses expected by the clients.
-    </p>
-    <h4>
-      Smart client mode:
-    </h4>
-    <p>
-      The 'addurl' property sets the WS-Addressing EPR, and the 'trpurl' sets a
-      transport URL for a message. Thus by specifying both of these properties,
-      the client could operate in the 'smart client' mode, where the addressing
-      EPR could specify the ultimate receiver, while the transport URL set to
-      Synapse would ensure that any necessary mediation takes place before the
-      message is delivered to the ultimate reciver.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Daddurl=&lt;addressingEPR&gt; -Dtrpurl=&lt;synapse&gt;</pre>
-    <h4>
-      Gateway / Dumb client mode:
-    </h4>
-    <p>
-      By specifying only a transport URL, the client operates in the 'dumb
-      client' mode, where it sends the message to Synapse and depends on the
-      Synapse rules for proper mediation and routing of the message to the
-      ultimate destination.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Dtrpurl=&lt;synapse&gt;</pre>
-    <h4>
-      Proxy client mode:
-    </h4>
-    <p>
-      In this mode, the client uses the 'prxurl' as a http proxy to send the
-      request. Thus by setting the 'prxurl' to Synapse, the client could ensure
-      that the message would reach Synapse for mediation. The client could
-      optionally set a WS-Addressing EPR if required.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Dprxurl=&lt;synapse&gt; [-Daddurl=&lt;addressingEPR&gt;]</pre>
-
-    <p/>
-    <p>
-      Specifying a policy
-    </p>
-    <p>
-      By specifying a WS-Policy using the 'policy' property, QoS aspects such as
-      WS-Security could be enforced on the request. The policy could specify
-      details such as timestamps, signatures and encryption. See Apache Axis2
-      and Apache Rampart documentation for more information.
-    </p>
-    <p/>
-    <h3>
-      2. Generic JMS client
-    </h3>
-    <p/>
-    <p>
-      The JMS client is able to send plain text, plain binary content or POX
-      content by directly publishing a JMS message to the specified destination.
-      The JMS destination name should be specified with the 'jms_dest' property.
-      The 'jms_type' property could specify 'text', 'binary' or 'pox' to specify
-      the type of message payload.
-    </p>
-    <p/>
-    <p>
-      The plain text payload for a 'text' message could be specified through the
-      'payload' property. For binary messages, the 'payload' property would
-      contain the path to the binary file. For POX messages, the 'payload'
-      property would hold a stock symbol name to be used within the POX request
-      for stock order placement request.
-    </p>
-    <p>
-      e.g:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=text -Djms_dest=dynamicQueues/JMSTextProxy -Djms_payload="24.34 100 IBM"
-ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/JMSPoxProxy -Djms_payload=MSFT
-ant jmsclient -Djms_type=binary -Djms_dest=dynamicQueues/JMSFileUploadProxy
-                     -Djms_payload=./../../repository/conf/sample/resources/mtom/asf-logo.gif</pre>
-    <p>
-      Note: The JMS client assumes the existence of a default ActiveMQ (4.1.0 or
-      above) installation on the local machine.
-    </p>
-    <p/>
-    <h3>
-      3. MTOM / SwA client
-    </h3>
-    <p/>
-    <p>
-      The MTOM / SwA client is able to send a binary image file as a MTOM or SwA
-      optimized message, and receive the same file again through the response
-      and save it as a temporary file. The 'opt_mode' could specify 'mtom' or
-      'swa' respectively for the above mentioned optimizations. Optionally the
-      path to a custom file could be specified through the 'opt_file' property,
-      and the destination address could be changed through the 'opt_url'
-      property if required.
-    </p>
-<pre xml:space="preserve">e.g. ant optimizeclient -Dopt_mode=[mtom | swa]</pre>
-
-    <p/>
-    <h2>
-      Starting the sample services
-    </h2>
-    <p/>
-    <p>
-      The sample services ship with a pre-configured Axis2 server and
-      demonstrates in-only and in-out SOAP/REST or POX messaging over http/s and
-      JMS transports, using WS-Addressing, WS-Security and WS-Reliable Messaging
-      and handling of binary content using MTOM and SwA.
-    </p>
-    <p>
-      The sample services can be found in the samples/axis2Server/src directory
-      and could be built and deployed using ant from within each service
-      directory
-    </p>
-<pre xml:space="preserve">user@host:/tmp/synapse-1.0/samples/axis2Server/src/SimpleStockQuoteService$ ant
-Buildfile: build.xml
-...
-build-service:
-   ....
-      [jar] Building jar: /tmp/synapse-1.0/samples/axis2Server/repository/services/SimpleStockQuoteService.aar
-
-BUILD SUCCESSFUL
-Total time: 3 seconds</pre>
-    <p/>
-    <p>
-      To start the Axis2 server, go to the samples/axis2Server directory and
-      execute the axis2server.sh or axis2server.bat script. This starts the
-      Axis2 server with the http transport listener on port 9000 and https on
-      9002 respectively. To enable JMS transport, you will need to setup and
-      start a JMS provider. An ActiveMQ 4.0.1 or later JMS server on the local
-      machine is supported by default, and could be easily enabled by
-      uncommenting the JMS transport from the repository/conf/axis2.xml
-    </p>
-    <p/>
-    <p>
-      Sample services
-    </p>
-    <h3>
-      1. SimpleStockQuoteService
-    </h3>
-    <p>
-      This service has four operations, getQuote (in-out), getFullQuote(in-out),
-      getMarketActivity(in-out) and placeOrder (in-only). The getQuote operation
-      will generate a sample stock quote for a given symbol. The getFullQuote
-      operation will generate a history of stock quotes for the symbol for a
-      number of days, and the getMarketActivity operation returns stock quotes
-      for a list of given symbols. The placeOrder operation will accept a one
-      way message for an order.
-    </p>
-    <h3>
-      2. SecureStockQuoteService
-    </h3>
-    <p>
-      This service is a clone of the SimpleStockQuoteService, but has
-      WS-Security enabled and an attached security policy for signing and
-      encryption of messages.
-    </p>
-    <h3>
-      3. MTOMSwASampleService
-    </h3>
-    <p>
-      This service has three operations uploadFileUsingMTOM(in-out),
-      uploadFileUsingSwA(in-out) and oneWayUploadUsingMTOM(in-only) and
-      demonstrates the use of MTOM and SwA. The uploadFileUsingMTOM and
-      uploadFileUsingSwA operations accept a binary image from the SOAP request
-      as MTOM and SwA, and returns this image back again as the response; while
-      the oneWayUploadUsingMTOM saves the request message to disk.
-    </p>
-    <p/>
-    <p>
-      Starting sample Synapse configurations
-    </p>
-    <p>
-      To start Synapse with the sample default configuration, execute the
-      synapse.bat or synapse.sh script found in the /bin directory. This starts
-      up an instance of Synapse using the Synapse and Axis2 configuration files
-      located in the repository/conf directory. The repository/conf/samples
-      directory contains the sample configurations available as synapse_sample_&lt;n&gt;.xml
-      files. To start a specific sample configuration of Synapse, use the
-      '-sample &lt;n&gt;' switch as follows:
-    </p>
-<pre xml:space="preserve">synapse.bat -sample &lt;n&gt;
-synapse.sh -sample &lt;n&gt;</pre>
-    <p/>
-    <h2>
-      Setting up JMS
-    </h2>
-    <p/>
-    <p>
-      The samples used in this guide assumes the existence of a local ActiveMQ
-      (4.1.0 or higher) installation properly installed and started up. You also
-      need to copy the following client JAR files into the Synapse 'lib' folder
-      to support ActiveMQ. These files are found in the 'lib' directory of the
-      ActiveMQ installation.
-    </p>
-    <p/>
-    <ul>
-      <li>
-      </li>
-      <li>
-        activeio-core-3.0.0-incubator.jar
-      </li>
-      <li>
-      </li>
-      <li>
-        activemq-core-4.1.0-incubator.jar
-      </li>
-      <li>
-      </li>
-      <li>
-        geronimo-j2ee-management_1.0_spec-1.0.jar
-      </li>
-      <li>
-      </li>
-    </ul>
-    <p/>
-    <p>
-      To enable the JMS transport, you need to uncomment the JMS transport
-      listener configuration. If you are using a JMS provider other than
-      ActiveMQ this configuration should be updated to reflect your environment.
-      Once uncommented, the default configuration should be as follows. To
-      enable JMS for synapse, the repository/conf/axis2.xml must be updated,
-      while to enable JMS support for the sample Axis2 server the
-      samples/axis2Server/repository/conf/axis2.xml file must be updated.
-    </p>
-<pre xml:space="preserve">    &lt;!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)--&gt;
-    &lt;transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener"&gt;
-        &lt;parameter name="myTopicConnectionFactory" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;TopicConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-
-        &lt;parameter name="myQueueConnectionFactory" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-
-        &lt;parameter name="default" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-    &lt;/transportReceiver&gt;</pre>
-    <p/>
-    <h2 id="script">
-      Configuring Synapse for Script Mediator support
-    </h2>
-    <p/>
-    <p>
-      The Synapse Script Mediator is a Synapse extension, and thus all
-      pre-requisites are not bundled by default with the Synapse distribution.
-      Before you use some script mediators you may need to manually add the
-      required jar files to the Synapse lib directory, and optionally perform
-      other installation tasks as may be required by the individual scripting
-      language. This is detailed in the following sections.
-    </p>
-    <h4>
-      JavaScript support
-    </h4>
-    <p>
-      The JavaScript/E4X support is enabled by default and comes ready-to-use
-      with the Synapse distribution.
-    </p>
-    <h4>
-      Ruby support
-    </h4>
-    <p>
-      For Ruby support you need to download the 'jruby-complete.jar' from the
-      Maven repository for JRuby, and copy it into the 'lib' folder of Synapse .
-      The JRuby JAR can be downloaded from <a
-      href="http://repo1.maven.org/maven2/org/jruby/jruby-complete/">here</a>.
-    </p>
-    <p/>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_0/samples_setup.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_0/extending.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_0/extending.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_0/extending.xml	(nonexistent)
@@ -1,482 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta content="text/html; charset=iso-8859-1" http-equiv="content-type"/>
-    <title>
-      Extending Synapse
-    </title>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Extending Synapse<br/>
-    </h1>
-    <h2>
-      Writing custom Mediator implementations
-    </h2>
-    <p>
-      The primary interface of the Synapse API is the MessageContext interface
-      defined below. This essentially defines the per-message context passed
-      through the chain of mediators, for each and every message received and
-      processed by Synapse. Each message instance is wrapped within a
-      MessageContext instance, and the message context is set with the
-      references to the SynapseConfiguration and SynapseEnvironments. The
-      SynapseConfiguration holds the global configuration model that defines
-      mediation rules, local registry entries and other and configuration, while
-      the environment gives access to the underlying SOAP implementation used -
-      Axis2. A typical mediator would need to manipulate the MessageContext by
-      referring to the SynapseConfiguration. However it is strongly recommended
-      that the SynapseConfiguration is not updated by mediator instances as it
-      is shared by all messages, and may be updated by Synapse administration or
-      configuration modules. Mediator instances may store local message
-      properties into the MessageContext for later retrieval by successive
-      mediators.<br/>
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/MessageContext.java?view=markup">MessageContext
-      Interface</a>
-    </h4>
-    <p/>
-<pre xml:space="preserve">package org.apache.synapse;
-
-import ...
-
-public interface MessageContext {
-
-    /**
-     * Get a reference to the current SynapseConfiguration
-     *
-     * @return the current synapse configuration
-     */
-    public SynapseConfiguration getConfiguration();
-
-    /**
-     * Set or replace the Synapse Configuration instance to be used. May be used to
-     * programatically change the configuration at runtime etc.
-     *
-     * @param cfg The new synapse configuration instance
-     */
-    public void setConfiguration(SynapseConfiguration cfg);
-
-    /**
-     * Returns a reference to the host Synapse Environment
-     * @return the Synapse Environment
-     */
-    public SynapseEnvironment getEnvironment();
-
-    /**
-     * Sets the SynapseEnvironment reference to this context
-     * @param se the reference to the Synapse Environment
-     */
-    public void setEnvironment(SynapseEnvironment se);
-
-    /**
-     * Get the value of a custom (local) property set on the message instance
-     * @param key key to look up property
-     * @return value for the given key
-     */
-    public Object getProperty(String key);
-
-    /**
-     * Set a custom (local) property with the given name on the message instance
-     * @param key key to be used
-     * @param value value to be saved
-     */
-    public void setProperty(String key, Object value);
-
-    /**
-     * Returns the Set of keys over the properties on this message context
-     * @return a Set of keys over message properties
-     */
-    public Set getPropertyKeySet();
-
-    /**
-     * Get the SOAP envelope of this message
-     * @return the SOAP envelope of the message
-     */
-    public SOAPEnvelope getEnvelope();
-
-    /**
-     * Sets the given envelope as the current SOAPEnvelope for this message
-     * @param envelope the envelope to be set
-     * @throws org.apache.axis2.AxisFault on exception
-     */
-    public void setEnvelope(SOAPEnvelope envelope) throws AxisFault;
-
-    /**
-     * SOAP message related getters and setters
-     */
-    public ....get/set()...
-
-}</pre>
-    <p>
-      The MessageContext interface is based on the Axis2 <a>MessageContext</a>
-      interface, and uses the Axis2 <a>EndpointReference</a> and
-      SOAPEnvelope classes/interfaces. The purpose of this interface is to
-      capture a message as it flows through the system. As you will see the
-      message payload is represented using the SOAP infoset. Binary messages can
-      be embedded in the Envelope using MTOM or SwA attachments using the AXIOM
-      object model.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/Mediator.java?view=markup">Mediator
-      interface</a>
-    </h4>
-    <p>
-      The second key interface for mediator writers is the Mediator interface:
-    </p>
-<pre xml:space="preserve">package org.apache.synapse;
-
-import org.apache.synapse.MessageContext;
-
-/**
- * All Synapse mediators must implement this Mediator interface. As a message passes
- * through the synapse system, each mediator's mediate() method is invoked in the
- * sequence/order defined in the SynapseConfiguration.
- */
-public interface <span style="font-weight: bold;">Mediator </span>{
-
-    /**
-     * Invokes the mediator passing the current message for mediation. Each
-     * mediator performs its mediation action, and returns true if mediation
-     * should continue, or false if further mediation should be aborted.
-     *
-     * @param synCtx the current message for mediation
-     * @return true if further mediation should continue
-     */
-    public boolean mediate(MessageContext synCtx);
-
-    /**
-     * This is used for debugging purposes and exposes the type of the current
-     * mediator for logging and debugging purposes
-     * @return a String representation of the mediator type
-     */
-    public String getType();
-}</pre>
-    <p>
-      A mediator can read and/or modify the <a>SynapseMessage</a> in
-      any suitable manner - adjusting the routing headers or changing the
-      message body. If the mediate() method returns false, it signals to the
-      Synapse processing model to stop further processing of the message. For
-      example, if the mediator is a security agent it may decide that this
-      message is dangerous and should not be processed further. This is
-      generally the exception as mediators are usually designed to co-operate to
-      process the message onwards.
-    </p>
-    <h3>
-      Leaf and Node Mediators, List mediators and Filter mediators
-    </h3>
-    <p>
-      Mediators may be Node mediators (i.e. these that can contain child
-      mediators) or Leaf mediators (mediators that does not hold any other child
-      mediators). A Node mediator  must implement the
-      org.apache.synapse.api.ListMediator interface listed below, or extend from
-      the org.apache.synapse.mediators.AbstractListMediator.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/ListMediator.java?view=markup">The
-      ListMediator interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.mediators;
-
-import java.util.List;
-
-/**
-* The List mediator executes a given sequence/list of child mediators
-*/
-public interface ListMediator extends Mediator {
-    /**
-    * Appends the specified mediator to the end of this mediator's (children) list
-    * @param m the mediator to be added
-    * @return true (as per the general contract of the Collection.add method)
-    */
-    public boolean addChild(Mediator m);
-
-    /**
-    * Appends all of the mediators in the specified collection to the end of this mediator's (children)
-    * list, in the order that they are returned by the specified collection's iterator
-    * @param c the list of mediators to be added
-    * @return true if this list changed as a result of the call
-    */
-    public boolean addAll(List c);
-
-    /**
-    * Returns the mediator at the specified position
-    * @param pos index of mediator to return
-    * @return the mediator at the specified position in this list
-    */
-    public Mediator getChild(int pos);
-
-    /**
-    * Removes the first occurrence in this list of the specified mediator
-    * @param m mediator to be removed from this list, if present
-    * @return true if this list contained the specified mediator
-    */
-    public boolean removeChild(Mediator m);
-
-    /**
-    * Removes the mediator at the specified position in this list
-    * @param pos the index of the mediator to remove
-    * @return the mediator previously at the specified position
-    */
-    public Mediator removeChild(int pos);
-
-    /**
-    * Return the list of mediators of this List mediator instance
-    * @return the child/sub mediator list
-    */
-    public List getList();
-}</pre>
-    <p>
-      A ListMediator implementation should call super.mediate(synCtx) to process
-      its sub mediator sequence. A FilterMediator is a ListMediator which
-      executes its sequence of sub mediators on successful outcome of a test
-      condition. The Mediator instance which performs filtering should implement
-      the FilterMediator interface.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/FilterMediator.java?view=markup">FilterMediator
-      interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.mediators;
-
-import org.apache.synapse.MessageContext;
-
-/**
- * The filter mediator is a list mediator, which executes the given (sub) list of mediators
- * if the specified condition is satisfied
- *
- * @see FilterMediator#test(org.apache.synapse.MessageContext)
- */
-public interface <span style="font-weight: bold;">FilterMediator </span>extends ListMediator {
-
-    /**
-     * Should return true if the sub/child mediators should execute. i.e. if the filter
-     * condition is satisfied
-     * @param synCtx
-     * @return true if the configured filter condition evaluates to true
-     */
-    public boolean test(MessageContext synCtx);
-}</pre>
-    <h2>
-      Writing custom Configuration implementations for mediators
-    </h2>
-    <p>
-      You may write your own custom configurator for the Mediator implementation
-      you write without relying on the Class mediator or Spring extension for
-      its initialization. You could thus write a MediatorFactory implementation
-      which defines how to digest a custom XML configuration element to be used
-      to create and configure the custom mediator instance. A MediatorSerializer
-      implementation defines how a configuration should be serialized back into
-      an XML configuration. The custom MediatorFactory &amp; MediatorSerializer
-      implementations and the mediator class/es must be bundled in a JAR file
-      conforming to the J2SE Service Provider model (See the description for
-      Extensions below for more details and examples) and placed into the
-      SYNAPSE_HOME/lib folder, so that the Synapse runtime could find and load
-      the definition. Essentially this means that a custom JAR file must bundle
-      your class implementing the Mediator interface, and the MediatorFactory
-      implementation class and contain two text files named
-      "org.apache.synapse.config.xml.MediatorFactory" and
-      "org.apache.synapse.config.xml.MediatorSerializer" which will contain the
-      fully qualified name(s) of your MediatorFactory and MediatorSerializer
-      implementation classes. You should also place any dependency JARs into the
-      same lib folder so that the correct classpath references could be made.
-      The MediatorFactory interface listing is given below, which you should
-      implement, and its getTagQName() method must define the fully qualified
-      element of interest for custom configuration. The Synapse initialization
-      will call back to this MediatorFactory instance through the
-      createMediator(OMElement elem) method passing in this XML element, so that
-      an instance of the mediator could be created utilizing the custom XML
-      specification and returned. See the ValidateMediator and the
-      ValidateMediatorFactory classes under modules/extensions in the Synapse
-      source distribution for examples.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorFactory.java?view=markup">The
-      MediatorFactory interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.config.xml;
-
-import ...
-
-/**
- * A mediator factory capable of creating an instance of a mediator through a given
- * XML should implement this interface
- */
-public interface MediatorFactory {
-    /**
-     * Creates an instance of the mediator using the OMElement
-     * @param elem
-     * @return the created mediator
-     */
-    public Mediator createMediator(OMElement elem);
-
-    /**
-     * The QName of this mediator element in the XML config
-     * @return QName of the mediator element
-     */
-    public QName getTagQName();
-}</pre>
-    <p/>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorSerializer.java?view=markup">The
-      MediatorSerializer interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.config.xml;
-
-import ...
-
-/**
- * Interface which should be implemented by mediator serializers. Does the
- * reverse of the MediatorFactory
- */
-public interface MediatorSerializer {
-
-    /**
-     * Return the XML representation of this mediator
-     * @param m mediator to be serialized
-     * @param parent the OMElement to which the serialization should be attached
-     * @return the serialized mediator XML
-     */
-    public OMElement serializeMediator(OMElement parent, Mediator m);
-
-    /**
-     * Return the class name of the mediator which can be serialized
-     * @return the class name
-     */
-    public String getMediatorClassName();
-}</pre>
-    <h2>
-      Configuring mediators
-    </h2>
-    <p>
-      Mediators could access the Synapse registry to load resources and
-      configure the local behaviour. Refer to the Spring mediator and Script
-      mediator implementations for examples on how this could be achieved.
-    </p>
-    <h4>
-      Loading of Extensions by the Synapse runtime
-    </h4>
-    <p>
-      Synapse loads available extensions from the runtime classpath using the <a
-      href="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service%20Provider">J2SE
-      Service Provider model</a>. This essentially iterates over the
-      available JAR files, for  a META-INF/services directory within each file,
-      and looks for a text file with the name
-      org.apache.synapse.config.xml.MediatorFactory which contains a list of
-      fully qualified classname that implement the above interface, listing each
-      class in a separate line. e.g. The built-in synapse-extensions.jar
-      contains the following structure
-    </p>
-<pre xml:space="preserve">synapse-extensions.jar
-    /META-INF/services
-        org.apache.synapse.config.xml.MediatorFactory
-        org.apache.synapse.config.xml.MediatorSerializer
-    /... the implementation classes as usual...</pre>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_0/extending.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_0/configuration.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_0/configuration.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_0/configuration.xml	(nonexistent)
@@ -1,801 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta content="text/html; charset=iso-8859-1" http-equiv="content-type"/>
-    <title>
-      Synapse Configuration Language
-    </title>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Synapse Configuration Language
-    </h1>
-    <p>
-      The Synapse configuration language is designed to support a processing
-      model where messages come into Synapse, are processed via some number of
-      mediators and then delivered to an endpoint somewhere. It is currently
-      direction agnostic, but directionality can easily be added as a selection
-      mechanism for mediators (see below for details).
-    </p>
-    <h3>
-      Overall Structure
-    </h3>
-    <p>
-      A Synapse configuration looks like the following at the top level:
-    </p>
-<pre xml:space="preserve"> &lt;definitions&gt;
-   &lt;<a href="#registry">registry</a> provider="string"&gt;...&lt;/registry&gt;?
-   &lt;<a href="#localEntry">localEntry</a> key="string"&gt;...&lt;/localEntry&gt;?
-   &lt;<a href="#sequence">sequence</a> name="string"&gt;...&lt;/sequence&gt;?
-   &lt;<a href="#endpoint">endpoint</a> name="string"&gt;...&lt;/endpoint&gt;?
-   &lt;<a href="#proxy">proxy</a> name="string" ...&gt;...&lt;/proxy&gt;?
-   <a href="#mediator">mediator</a>*
- &lt;/definitions&gt;</pre>
-    <h2>
-      <a name="registry" id="registry">Registry</a>
-    </h2>
-    <p>
-      The &lt;registry&gt; element is used to define the remote registry which
-      are referenced from within the configuration. The registry provider
-      specifies the implementation class for the registry used, and optionally a
-      number of configuration parameters may be specified to configure the
-      registry.
-    </p>
-<pre xml:space="preserve"> &lt;registry provider="string"/&gt;
-   &lt;parameter name="string"&gt;text | xml&lt;/parameter&gt;*
- &lt;/registry&gt;</pre>
-    <p>
-      Registry entries loaded from a remote registry are cached within Synapase
-      as dictated by the registry, and reloaded after the cache periods expires.
-      Hence it is possible to define configuration elements such as (dynamic)
-      sequences and endpoints, as well as resources such as XSLT's or XSDs off
-      the registry, and update the configuration as these change dynamically
-      over time.
-    </p>
-    <p/>
-    <h3>
-      <a name="localEntry" id="localEntry">Local Entry</a>
-    </h3>
-    <p>
-      The &lt;localEntry&gt; element is used to declare registry entries that
-      are local to the Synapse instance, as shown below
-    </p>
-<pre xml:space="preserve">  &lt;localEntry key="string" [src="url"]&gt;text | xml&lt;/localEntry&gt;</pre>
-    <p>
-      These entries are top level entries which are set globally for the entire
-      system. Values of these entries can be retrieved via the extension XPath
-      function "synapse:get-property(prop-name)".
-    </p>
-    <p>
-      An entry can be static text specified as inline text or static XML
-      specified as an inline XML fragment or specified as a URL (using the src
-      attribute). These local entries can overide any existing entries with the
-      same keys of the remote registry.
-    </p>
-    <p/>
-    <h2>
-      <a name="sequence" id="sequence">Sequences</a>
-    </h2>
-    <p>
-      A &lt;sequence&gt; element is used to define a sequence of mediators that
-      can be invoked later by name as a sequence of mediators.
-    </p>
-<pre xml:space="preserve"> &lt;sequence name="string" [onError="string"] [key="string"]&gt;
-   mediator*
- &lt;/sequence&gt;</pre>
-    <p>
-      If the configuration defines a sequence named "main" then it is considered
-      as the main mediation sequence of Synapse. If such a sequence is not
-      defined locally, and a registry has been specified, the registry is looked
-      up for a key named "main" to find the main mediator sequence. Synapse also
-      supports the specification of mediators directly within the &lt;definitions&gt;
-      tag, and if any mediators are present, will constitute the main sequence.
-      In the absence of a main sequence, the Synapse runtime will create a
-      default main sequence that consists of an implicit send mediator.
-    </p>
-    <p>
-      Synapse considers a sequence named "fault", or in its absence a registry
-      entry with a key "fault" as its general fault handler sequence. If Synapse
-      encounters an erroneous situation, it executes the defined error handling
-      sequence for the current context - which may be specified as the 'onError'
-      sequence for a sequence mediator. If a fault sequence is not specified or
-      cannot be found through the registry, Synapse will create a defualt fault
-      sequence that will perform a log of the message at the log level 'full'.
-    </p>
-    <p>
-      If an optional error handler sequence name is specified on any sequence
-      through the attribute 'onError', an exception on this sequence will invoke
-      the sequence specified by this key.
-    </p>
-    <p>
-      A Dynamic Sequence may be defined by specifying a key reference to a
-      registry entry. As the remote registry entry changes, the sequence will
-      dynamically be updated accordingly.
-    </p>
-    <p/>
-    <h2>
-      <a name="endpoint" id="endpoint">Endpoints</a>
-    </h2>
-    <p>
-      An &lt;endpoint&gt; element defines a destination for an outgoing message.
-      An endpoint may be specified as an address endpoint, WSDL based endpoint,
-      a load balanced endpoint or a fail-over endpoint as follows:
-    </p>
-<pre xml:space="preserve">&lt;endpoint [name="string"] [key="string"]&gt;
-<a href="#address-endpoint">address-endpoint</a> | <a href="#wsdl-endpoint">wsdl-endpoint</a> | <a href="#load-balanced-endpoint">load-balanced-endpoint</a> | <a href="#fail-over-endpoint">fail-over-endpoint</a> &lt;/endpoint&gt; </pre>
-    <p>
-      All above endpoint types can have a name attribute. Such named endpoints
-      can be reffered by other endpoints, which only contain the key attribute.
-      For example if there is an endpoint named as "foo", following endpoint can
-      be used in any place, where "foo" has to be used.
-    </p>
-<pre xml:space="preserve">&lt;endpoint key="foo"/&gt;</pre>
-    <h4>
-      <a name="address-endpoint" id="address-endpoint">Address Endpoint</a>
-    </h4>
-    <p>
-      Address endpoint is an endpoint defined by specifying the EPR and other
-      attributes of the endpoint directly in the configuration. uri attribute of
-      the address element contains the EPR of the target endpoint. Message
-      format for the endpoint and the method to optimize attachments can be
-      specified in the format and optimize attributes respectively. Reliable
-      messaging and security policies for the endpoint can be specified in the
-      policy attribute of the enableRM and enableSec elements respectively.
-      WS-Addressing can be engaged for the messaging going to the endpoint by
-      the enableAddressing element. suspendDurationOnFailure attribute specifies
-      the time duration in seconds to suspend this endpoint, if it is detected
-      as failed. If this attribute is not specified, endpoint will never be
-      recovered after a failure.
-    </p>
-    <p/>
-    <p>
-      Address endpoints can timeout the responses if they failed to arrive
-      Synapse in predefined time duration. This is done by the timeout elements.
-      duration element inside the timeout element contains duration for the
-      timeout in seconds. action element specifies the action to be performed
-      once a timeout occurs. Allowed actions are discard and fault. If discard
-      is specified, responses arriving after the timeout will be discarded
-      without further processing. If fault is specified as the action, fault
-      sequence applicable for the endpoint will be activated as soon as the
-      timeout occurs and responses will not be processed after that.
-    </p>
-<pre xml:space="preserve">&lt;address uri="endpoint-address" format="soap|soap11|soap12|pox" [optimize="mtom|swa"]&gt;
-  &lt;enableRM [policy="key"]/&gt;?
-  &lt;enableSec [policy="key"]/&gt;?
-  &lt;enableAddressing/&gt;?
-  &lt;suspendDurationOnFailure&gt;suspend-duration&lt;/suspendDurationOnFailure&gt;?
-  &lt;timeout&gt;
-    &lt;duration&gt;timeout-duration&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-&lt;/address&gt;</pre>
-    <h4>
-      <a name="wsdl-endpoint" id="wsdl-endpoint">WSDL Endpoint</a>
-    </h4>
-    <p>
-      WSDL endpoint is an endpoint based on a WSDL document. It can extract the
-      target EPR from a given WSDL. Currently it only supports WSDL 1.1. WSDL
-      document can be specifed either as an uri or as inline with the
-      configuration. uri attribute can be set to specify the WSDL as an uri.
-      WSDL can be specified inline as a child element of the wsdl element.
-      Service and port name containing the target EPR has to be specified in
-      service and port attributes respectively. enableRM, enableSec,
-      enableAddressing, suspendDurationOnFailure and timeout elements are same
-      as in the Address endpoint.
-    </p>
-<pre xml:space="preserve">&lt;wsdl [uri="wsdl-uri"] service="qname" port/endpoint="qname"&gt;
-  &lt;wsdl:definition&gt;...&lt;/wsdl:definition&gt;?
-  &lt;wsdl20:description&gt;...&lt;/wsdl20:description&gt;?
-  &lt;enableRM [policy="key"]/&gt;?
-  &lt;enableSec [policy="key"]/&gt;?
-  &lt;enableAddressing/&gt;?
-  &lt;suspendDurationOnFailure&gt;suspend-duration&lt;/suspendDurationOnFailure&gt;?
-  &lt;timeout&gt;
-    &lt;duration&gt;timeout-duration&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-&lt;/wsdl&gt;</pre>
-    <h4>
-      <a name="load-balanced-endpoint" id="load-balanced-endpoint">Load
-      balanced Endpoint</a>
-    </h4>
-    <p>
-      Load balance endpoint distributes the messages (load) arriving at it among
-      the set of listed endpoints by evaluating the load balancing policy and
-      other parameters. policy attribute of the load balance element specifies
-      the load balance policy (algorithm) to be used for selecting the target
-      endpoint. Currently only the roundRobin policy is supported. failover
-      attribute determines if the next endpoint should be selected once the
-      currently selected endpoint has failed. Default is true. The set of
-      endpoints among which the load is distributed can be listed under the
-      loadBalance element. Those endpoints can belong to any endpoint type
-      mentioned in this document. For example, failover endpoints can be listed
-      inside the load balance endpoint to load balance between failover groups.
-    </p>
-    <p/>
-    <p>
-      The optional session element makes the endpoint a session affinity based
-      load balancing endpoint. If it is specified, sessions are bound to
-      endpoints in the first message and all successive messages for those
-      sessions are directed to their associated endpoints. http sessions are
-      supported currently, which identifies sessions based on http cookies.
-      failover attribute mentioned above is not applicable for session affinity
-      based endpoints and it is always set to false. If it is required to have
-      failover behavior in session affinity based load balance endpoints, list
-      failover endpoints as the target endpoints.
-    </p>
-<pre xml:space="preserve">&lt;session type="http"/&gt;?
-&lt;loadBalance [policy="roundRobin"] [failover="true|false"]&gt;
-  &lt;endpoint .../&gt;+
-&lt;/loadBalance&gt;</pre>
-    <h4>
-      <a name="fail-over-endpoint" id="fail-over-endpoint">Failover Endpoint</a>
-    </h4>
-    <p>
-      Failover endpoints send messages to the listed endpoints with the
-      following failover behavior. At the start, first listed endpoint is
-      selected as the primary and all other endpoints are treated as backups.
-      Incoming messages are always sent only to the primary endpoint. If the
-      primary endpoint fails, next active endpoint is selected as the primary
-      and failed endpoint is marked as incative. Thus it sends messages
-      successfully as long as there is at least one active endpoint among the
-      listed endpoints.
-    </p>
-<pre xml:space="preserve">&lt;failover&gt;
-  &lt;endpoint .../&gt;+
-&lt;/failover&gt;</pre>
-    <h2>
-      <a name="proxy" id="proxy">Proxy service</a>
-    </h2>
-    <p>
-      A &lt;proxy&gt; element is used to define a Synapse Proxy service.
-    </p>
-<pre xml:space="preserve"> &lt;proxy name="string" [transports="(http |https |jms )+|all"]&gt;
-   &lt;description&gt;...&lt;/description&gt;?
-   &lt;target [inSequence="name"] [outSequence="name"] [faultSequence="name"] [endpoint="name"]&gt;
-      &lt;inSequence&gt;...&lt;/inSequence&gt;?
-      &lt;outSequence&gt;...&lt;/outSequence&gt;?
-      &lt;faultSequence&gt;...&lt;/faultSequence&gt;?
-      &lt;endpoint&gt;...&lt;/endpoint&gt;?
-   &lt;/target&gt;?
-   &lt;publishWSDL key="string" uri="string"&gt;
-      &lt;description&gt;...&lt;/description&gt; | &lt;definitions&gt;...&lt;/definitions&gt;
-   &lt;publishWSDL&gt;?
-   &lt;enableSec/&gt;?                                   // These two tags will removed after the recognition of the Security and RM can be done by looking at policy
-   &lt;enableRM/&gt;?
-   &lt;policy key="string"&gt;...&lt;/policy&gt;?       // optional service level policies
-                                                            // (e.g. WS-Security and/or WS-RM policies)
-   &lt;parameter name="string"&gt;                // optional service parameters
-      string | xml                                      // (e.g. transport.jms.ConnectionFactory)
-   &lt;/parameter&gt;
- &lt;/proxy&gt;</pre>
-    <p>
-      A proxy service is created and exposed on the specified transports through
-      the underlying Axis2 instance, exposing service EPR's as per the standard
-      Axis2 conventions - based on the service name. (Note: that currently Axis2
-      does not allow custom URI's to be set for services on some transports.)
-      The Proxy service could be exposed over all enabled Axis2 transports such
-      as http, https, JMS etc. or on a subset of these. Each service could
-      define the target for received messages as a named sequence or a direct
-      endpoint. Target inSequence or endpoint is required for the proxy
-      configuration. Any supplied policies would apply as service level
-      policies, and any properties could be passed into the proxy services'
-      AxisService instance (e.g. the JMS destination etc). If the proxy service
-      should enable WS-Reliable Messaging or Security, the appropriate modules
-      could be engaged.
-    </p>
-    <p>
-      A Dynamic Proxy may be defined by specifying a proxy with the key as its
-      definition. As the remote registry entry changes, the proxy will
-      dynamically be updated accordingly.
-    </p>
-    <p/>
-    <h2>
-      <a name="mediator" id="mediator">Mediators</a>
-    </h2>
-    <p>
-      A mediator token refers to any of the following tokens:
-    </p>
-<pre xml:space="preserve"><a href="#send">send</a> | <a href="#drop">drop</a> | <a href="#log">log</a> | <a href="#makefault">makefault</a> | <a href="#xslt">transform</a> | <a href="#header">header</a> | <a href="#filter">filter</a> | <a href="#switch">switch</a> | <a href="#class">class</a> | <a href="#validate">validate</a> | <a href="#property">property</a> | <a href="#sequence">sequence ref</a> | <a href="#in">in</a> | <a href="#out">out</a> | <a href="#rmsequence">RMSequence</a></pre>
-    <p>
-      In addition to the above, Synapse will be able to load mediators via the
-      J2SE Service Provider model. Mediator extensions must implement the
-      MediatorFactory interface, similarly to the configuration extensions
-      mentioned previously.
-    </p>
-    <h3>
-      Core Mediators
-    </h3>
-    <h4>
-      <a name="send" id="send">Send</a>
-    </h4>
-    <p>
-      The send token represents a &lt;send&gt; element. The &lt;send&gt; element
-      is used to send messages out of Synapse to some endpoint, and stop further
-      mediation of the message. The send mediator also copies any message
-      context properties from the current message context to the reply message
-      received on the execution of the send operation. This allows the reply
-      messages to be correlated to the original messages in a flexible manner.
-      Messages may be correlated by WS-A MessageID, or even simple custom text
-      labels. Also see the property mediator.
-    </p>
-    <p>
-      In the simplest case, the place to send the message to is implicit in the
-      message (via a property of the message itself)- that is indicated by the
-      following:
-    </p>
-<pre xml:space="preserve"> &lt;send/&gt;</pre>
-    <p>
-      If the message is to be sent to one or more endpoints, then the following
-      is used:
-    </p>
-<pre xml:space="preserve"> &lt;send&gt;
-   (endpointref | endpoint)+
- &lt;/send&gt;</pre>
-    <p>
-      where the endpointref token refers to the following:
-    </p>
-<pre xml:space="preserve"> &lt;endpoint key="name"/&gt;</pre>
-    <p>
-      and the endpoint token refers to an anonymous endpoint defined.
-    </p>
-    <p/>
-    <h4>
-      <a name="drop" id="drop">Drop</a>
-    </h4>
-    <p>
-      The drop token refers to a &lt;drop&gt; element which is used to drop a
-      message:
-    </p>
-<pre xml:space="preserve"> &lt;drop/&gt;</pre>
-    <p>
-      Once the &lt;drop&gt; mediator executes, further processing of the current
-      message stops.
-    </p>
-    <p/>
-    <h4>
-      <a name="log" id="log">Log</a>
-    </h4>
-    <p>
-      The log token refers to a &lt;log&gt; element which may be used to log
-      messages being mediated:
-    </p>
-<pre xml:space="preserve"> &lt;log [level="string"] [separator="string"]&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
- &lt;/log&gt;</pre>
-    <p>
-      The optional level attribute selects a pre-defined subset of properties to
-      be logged.
-    </p>
-    <p>
-      e.g.
-    </p>
-    <ul>
-      <li>
-        simple = To, From, WSAction, SOAPAction, ReplyTo, MessageID and any
-        properties
-      </li>
-      <li>
-        headers = All SOAP header blocks and any properties
-      </li>
-      <li>
-        full = all attributes included in log level 'simple' and the SOAP
-        envelope and any properties
-      </li>
-      <li>
-        custom = Only properties specified to the Log mediator
-      </li>
-    </ul>
-    <p>
-      A separator if defined will be used to seperate the attributes being
-      logged. The default separator is the ',' comma.
-    </p>
-    <p/>
-    <h4>
-      <a name="property" id="property">Property</a>
-    </h4>
-<pre xml:space="preserve"> &lt;property name="string" [action=set|remove] (value="literal" | expression="xpath") [scope=transport|axis2]/&gt;</pre>
-    <p>
-      The property token refers to a &lt;property&gt; element which is a
-      mediator that has no direct impact on the message but rather on the
-      message context flowing through Synapse. The properties which does not
-      specify the action thus set on the message context applies only to the
-      current message and can be later retrieved through the
-      synapse:get-property(prop-name) extension function. If a scope is
-      specified for a property, the property could be set as a transport header
-      property or an (underlying) Axis2 message context property. Using the
-      property element with action specified as "remove" you can remove the
-      message context properties if available.
-    </p>
-    <p>
-      There are some well-defined properties that you can get/set:
-    </p>
-    <ul>
-      <li>
-        RESPONSE - 'true' means the message is a response message
-      </li>
-      <li>
-        ERROR_MESSAGE - this is set to any error message
-      </li>
-    </ul>
-    <p>
-      There are also some Axis2 and module properties that are useful to set
-      (with scope="axis2"):
-    </p>
-    <ul>
-      <li>
-        Sandesha2RMSpecVersion - can be '1.0' or '1.1'
-      </li>
-      <li>
-        Sandesha2SequenceKey - can be an identifier specifying an Sandesha
-        internal sequence key, and
-      </li>
-      <li>
-        Sandesha2LastMessage - 'true' will make this the last message and
-        terminate the sequence
-      </li>
-    </ul>
-    <p/>
-    <h4>
-      <a name="sequence" id="sequence_">Sequence</a>
-    </h4>
-<pre xml:space="preserve"> &lt;sequence key="name"/&gt;</pre>
-    <p>
-      A sequence ref token refers to a &lt;sequence&gt; element which is used to
-      invoke a named sequence of mediators.
-    </p>
-    <p/>
-    <h4>
-      <a name="validate" id="validate">Validate</a>
-    </h4>
-<pre xml:space="preserve"> &lt;validate [source="xpath"]&gt;
-   &lt;property name="validation-feature-id" value="true|false"/&gt;*
-   &lt;schema key="string"/&gt;+
-   &lt;on-fail&gt;
-     mediator+
-   &lt;/on-fail&gt;
- &lt;/validate&gt;</pre>
-    <p>
-      The &lt;validate&gt; mediator validates the result of the evaluation of
-      the source xpath expression, against the schema specified. If the source
-      attribute is not specified, the validation is performed against the first
-      child of the SOAP body of the current message. If the validation fails,
-      the on-fail sequence of mediators is executed. Properties could be used to
-      turn on/off some of the underlying features of the validator (See
-      http://xerces.apache.org/xerces2-j/features.html)
-    </p>
-    <p/>
-    <h3>
-      Message Transformations
-    </h3>
-    <h4>
-      <a name="makefault" id="makefault">Makefault</a>
-    </h4>
-<pre xml:space="preserve"> &lt;makefault [version="soap11|soap12"]&gt;
-   &lt;code (value="literal" | expression="xpath")/&gt;
-   &lt;reason (value="literal" | expression="xpath")&gt;
-   &lt;node&gt;?
-   &lt;role&gt;?
-   &lt;detail&gt;?
- &lt;/makefault&gt;</pre>
-    <p>
-      The &lt;makefault&gt; mediator transforms the current message into a fault
-      message, but does NOT send it. The &lt;send&gt; mediator needs to be
-      invoked to send a fault message created this way. The fault message "to"
-      header is set to the "faultTo" of the original message if such a header
-      existed on the original message.
-    </p>
-    <p/>
-    <h4>
-      <a name="xslt" id="xslt">XSLT</a>
-    </h4>
-<pre xml:space="preserve"> &lt;xslt key="string" [source="xpath"]&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
- &lt;/xslt&gt;</pre>
-    <p>
-      The &lt;xslt&gt; mediator applies the specified XSLT transformation to the
-      given element. If the source element is not specified, it defaults to the
-      first child of the soap body. Optionally parameters (XSLT) could be passed
-      into the transformations through the &lt;property&gt; elements.
-    </p>
-    <p/>
-    <h4>
-      <a name="header" id="header">Header</a>
-    </h4>
-<pre xml:space="preserve"> &lt;header name="qname" (value="literal" | expression="xpath") [action="set"]/&gt;
- &lt;header name="qname" action="remove"/&gt;</pre>
-    <p>
-      The &lt;header&gt; mediator sets or removes a specified header from the
-      current soap message. Currently the set header only supports simple valued
-      headers. In the future we may extend this to have XML structured headers
-      by embedding the XML content within the element itself. The optional
-      action attribute specifies whether the mediator should set or remove the
-      header. If omitted, it defaults to a set-header.
-    </p>
-    <p/>
-    <h3>
-      Selection
-    </h3>
-    <h4>
-      <a name="filter" id="filter">Filter</a>
-    </h4>
-<pre xml:space="preserve"> &lt;filter (source="xpath" regex="string") | xpath="xpath"&gt;
-   mediator+
- &lt;/filter&gt;</pre>
-    <p>
-      The &lt;filter&gt; mediator either test the given xpath expression as a
-      boolean expression, or match the evaluation result of a source xpath
-      expression against the given regular expression. If the test succeeds, the
-      filter mediator will execute the enclosed mediators in sequence.
-    </p>
-    <p/>
-    <h4>
-      <a name="switch" id="switch">Switch</a>
-    </h4>
-<pre xml:space="preserve"> &lt;switch source="xpath"&gt;
-   &lt;case regex="string"&gt;
-     mediator+
-   &lt;/case&gt;+
-   &lt;default&gt;
-     mediator+
-   &lt;/default&gt;?
- &lt;/switch&gt;</pre>
-    <p>
-      The &lt;switch&gt; mediator will evaluate the given source xpath
-      expression into its string value, and match it against the given regular
-      expressions. If the specified cases does not match and a default case
-      exists, it will be executed.
-    </p>
-    <a name="in" id="in"/>
-    <h4>
-      <a name="out" id="out">In / Out</a>
-    </h4>
-<pre xml:space="preserve">&lt;in&gt;<br/>  mediator+
-&lt;/in&gt;<br/></pre>
-<pre xml:space="preserve">&lt;out&gt;
-  mediator+
-&lt;/out&gt;</pre>
-    <p>
-      <br/>
-    </p>
-    <p>
-      The In and Out mediators will execute the child mediators over the current
-      message if the message matches the direction of the mediator. Hence all
-      incoming messages would pass through the "&lt;in&gt;" mediators and vice
-      versa.
-    </p>
-    <p/>
-    <h3>
-      WS-Reliable Messaging
-    </h3>
-    <h4>
-      <a name="rmsequence" id="rmsequence">RMSequence</a>
-    </h4>
-<pre xml:space="preserve"> &lt;RMSequence (correlation="xpath" [last-message="xpath"]) | single="true" [version="1.0|1.1"]/&gt;</pre>
-    <p>
-      The &lt;RMSequence&gt; mediator can be used to create a sequence of
-      messages to communicate via WS-Reliable Messaging with an WS-RM enabled
-      endpoint (&lt;enableRM&gt;). The simple use case of this mediator is to
-      specify a single="true" property, because this means that only one message
-      is involved in the same sequence. However if multiple messages should be
-      sent in the same sequence, the correlation property should be used with a
-      XPath expression that selects an unique element value from the incoming
-      message. With the result of the XPath expression, Synapse can group
-      messages together that belong to the same sequence. To close the sequence
-      neatly, for the last message of the sequence also an XPath expression
-      should be specified. With the version attribute the WS-RM specification
-      version to be used can be specified, 1.0 or 1.1.
-    </p>
-    <h3>
-      Extension mediator
-    </h3>
-    <h4>
-      <a name="class" id="class">Class Mediator</a>
-    </h4>
-<pre xml:space="preserve"> &lt;class name="class-name"&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
- &lt;/class&gt; </pre>
-    <p>
-      The class mediator creates an instance of the specified class and sets it
-      as a mediator. The class must implement the
-      org.apache.synapse.api.Mediator interface. If any properties are
-      specified, the corresponding setter methods are invoked on the class.
-      However, Synapse currently supports only String properties.
-    </p>
-    <p/>
-    <h3>
-      Extensibility of Synapse
-    </h3>
-    <p>
-      The Synapse configuration language could be easily extended, with
-      configuration extensions as well as mediation extensions. The Spring
-      mediator is such an example.
-    </p>
-    <h4>
-      Spring Configuration
-    </h4>
-    <p>
-      A Spring configuration could be created as a localEntry or remote registry
-      entry providing a URL or a key reference to a Registry. The configuration
-      is then created on first use or as necessary (as per registry lookup
-      semantics) by the mediators which reference this configuration.
-    </p>
-<pre xml:space="preserve"> &lt;localEntry key="string"/&gt;
- &lt;localEntry key="string" src="url"/&gt;</pre>
-    <p>
-      The name attribute specifies a unique name for the configuration, and the
-      src, key or inlined XML references to the Spring configuration
-    </p>
-    <p/>
-    <h4>
-      Spring mediator
-    </h4>
-<pre xml:space="preserve"> &lt;spring:spring bean="exampleBean1" key="string"/&gt;</pre>
-    <p>
-      The &lt;spring&gt; element creates an instance of a mediator, which is
-      managed by Spring. This Spring bean must implement the Mediator interface
-      for it to act as a Mediator. The key will reference the Spring
-      ApplicationContext/Configuration used for the bean
-    </p>
-    <p/>
-    <h3>
-      Scripting language mediators
-    </h3>
-    <p/>
-    <p>
-      Synapse supports Mediators implemented in a variety of scripting languages
-      such as JavaScript, Python or Ruby. There are two ways of defining script
-      mediators, either with the script program statements stored in a separate
-      file which is referenced via the local or remote registry entry, or with
-      the script program statements embedded in-line within the Synapse
-      configuration. A script mediator using a script off the registry (local or
-      remote) is defined as follows:
-    </p>
-<pre xml:space="preserve"> &lt;script key="string" language="string" [function="script-function-name"]/&gt;</pre>
-    <p>
-      The property key is the registry key to load the script. The language
-      attribute specifies the scripting language of the script code (e.g. "js"
-      for Javascript, "rb" for ruby, "groovy" for Groovy, "py" for Python..).
-      The function is an optional attribute defining the name of the script
-      function to invoke, if not specified it defaults to a function named
-      'mediate'. The function is passed a single parameter - which is the
-      Synapse MessageContext. The function may return a boolean, if it does not,
-      then true is assumed, and the script mediator returns this value. An
-      inline script mediator has the script source embedded in the configuration
-      as follows:
-    </p>
-<pre xml:space="preserve"> &lt;script language="string"&gt;...script source code...&lt;script/&gt;</pre>
-    <p>
-      The execution context environment of the script has access to the Synapse
-      MessageContext predefined in a script variable named 'mc' . An example of
-      an inline mediator using JavaScript/E4X which returns false if the SOAP
-      message body contains an element named 'symbol' which has a value of 'IBM'
-      would be:
-    </p>
-<pre xml:space="preserve"> &lt;script language="js"&gt;mc.getPayloadXML()..symbol != "IBM";&lt;script/&gt;</pre>
-    <p>
-      Synapse uses the Apache <a href="http://jakarta.apache.org/bsf/">Bean
-      Scripting Framework</a> for the scripting language support, any
-      script language supported by BSF may be used to implement a Synapse
-      Mediator.
-    </p>
-    <p>
-      Implementing a Mediator with a script language can have advantages over
-      using the built in Synapse Mediator types or implementing a custom Java
-      class Mediator. Script Mediators have all the flexibility of a class
-      Mediator with access to the Synapse MessageContext and SynapseEnvironment
-      APIs, and the ease of use and dynamic nature of scripting languages allows
-      rapid development and prototyping of custom mediators. An additional
-      benefit of some scripting languages is that they have very simple and
-      elegant XML manipulation capabilities, for example JavaScript E4X or Ruby
-      REXML, so this makes them well suited for use in the Synapse mediation
-      environment. For both types of script mediator definition the
-      MessageContext passed into the script has additional methods over the
-      standard Synapse MessageContext to enable working with the XML in a way
-      natural to the scripting language. For example when using JavaScript
-      getPayloadXML and setPayloadXML, E4X XML objects, and when using Ruby,
-      REXML documents.
-    </p>
-    <p/>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_0/configuration.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_0/content.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_0/content.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_0/content.xml	(nonexistent)
@@ -1,66 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1" ?>
-<!--
-  ~  Licensed to the Apache Software Foundation (ASF) under one
-  ~  or more contributor license agreements.  See the NOTICE file
-  ~  distributed with this work for additional information
-  ~  regarding copyright ownership.  The ASF licenses this file
-  ~  to you under the Apache License, Version 2.0 (the
-  ~  "License"); you may not use this file except in compliance
-  ~  with the License.  You may obtain a copy of the License at
-  ~
-  ~   http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~  Unless required by applicable law or agreed to in writing,
-  ~  software distributed under the License is distributed on an
-  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  ~  KIND, either express or implied.  See the License for the
-  ~  specific language governing permissions and limitations
-  ~  under the License.
-  -->
-
-<document>
-
-  <properties>
-    <title>The lightweight ESB - Version 1.0</title>
-  </properties>
-
-<body>
-
-<section name="Apache Synapse - the lightweight ESB">
-  <p>
- Apache Synapse is a simple, lightweight and high performance Enterprise Service Bus (ESB) from Apache. Based on a small asynchronous core, Apache Synapse has excellent support for XML and Web services - as well as binary and text formats. The Synapse engine is configured with a simple XML format and comes with a set of useful transports and mediators. We recommend you start by reading the QuickStart and then trying out the samples.
-  </p>
-  <p>For more information, see:</p>
-
-  <ul>
-  <li><a href="./quickstart.html">Quick Start Guide</a></li>
-  <li><a href="./configuration.html">The Synapse Configuration Language</a></li>
-  <li><a href="./samples.html">A Quick start with Synapse Samples</a></li>
-  <li><a href="./extending.html">Extending Synapse</a></li>
-  <li>The WS Wiki <a href="http://wiki.apache.org/ws/Synapse">http://wiki.apache.org/ws/Synapse</a></li>
-  </ul>
-</section>
-
-<section name="Status">
-	<p>Synapse graduated from the Apache Incubator on the 2nd of January 2007, and has been
-    officially accepted as a sub-project of the Apache Web Services project</p>
-
-	<p>This release of Synapse is <a href="http://synapse.apache.org/download/1.0/download.cgi">1.0</a>. Its key features are </p>
-
-	<ul>
-        <li><p>Proxy services - facilitating transport, interface (WSDL/Schema/Policy), message format (SOAP/POX), QoS (WS-Security/RM) and optimization switching (MTOM/SwA)</p></li>
-        <li><p>Non-blocking http/s transports based on Apache <a target="_blank" href="http://hc.apache.org/httpcomponents-core/index.html">HttpCore</a> for ultrafast execution and support for thousands of connections</p></li>
-        <li><p>Built in Registry/Repository, facilitating dynamic updating and reloading of the configuration and associated resources (e.g. XSLTs, XSD, JS, ..)</p></li>
-        <li><p>Easily extended via custom Java class/Spring mediators, or BSF Scripting languages (Javascript, Ruby etc)</p></li>
-        <li><p>Load-balancing/Fail-over and Throttling support</p></li>
-        <li><p>WS-Security, WS-Reliable Messaging &amp; Throttling configurable via WS-Policies</p></li>
-        <li><p>JMS message support for binary, plain text and XML and SOAP payloads</p></li>
-        <li><p>Lightweight, XML and Web services centric messaging model</p></li>
-        <li><p>Configurations serialized into a file system for versioning/backup and restoration</p></li>
-        <li><p>Support for Error handling and timeouts, and recovery</p></li>
-    	<li><p> Many samples and a built-in Axis2 server to try out and experiment with samples (Samples includes WS-Security, JMS POX/Text messages, Script mediation and many more samples which can be run out of the box) </p></li>
-	    <li><p> Enhanced documentation</p></li>
-	</ul>
-</section>
-</body>
-</document>

Property changes on: java/modules/documentation/src/site/xdoc/1_0/content.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_0/quickstart.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_0/quickstart.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_0/quickstart.xml	(nonexistent)
@@ -1,553 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
-    <title>
-      Apache Synapse - Quick Start Guide
-    </title>
-    <meta name="generator" content="Amaya 9.54, see http://www.w3.org/Amaya/"/>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Quick start guide
-    </h1>
-    <p>
-      This guide will demonstrate two sample applications covering the basic and
-      the most common usage scenarios of Synapse; which is Message mediation and
-      Service mediation (i.e. using Proxy services). You will be guided through
-      a step by step approach to get a feeling about Synapse from the absolute
-      beginning.
-    </p>
-    <h3>
-      Pre-requisites
-    </h3>
-    <p>
-      You should have following pre-requisites installed on your system to
-      follow through this guide
-    </p>
-    <ul>
-      <li>
-        A Java 2 SE - JDK or JRE of version 1.4.2 or higher
-      </li>
-      <li>
-        Apache Ant http://ant.apache.org
-      </li>
-    </ul>
-    <p>
-      Note: To use the bundled https transport, you will need a Java 2 SE
-      runtime of version 1.5 or later. If you are using a J2SE below 1.5 and
-      does not require the https transport, you may comment out the following
-      section from your repository/conf/axis2.xml and
-      samples/axis2Server/repository/conf/axis2.xml configuration files.
-    </p>
-<pre xml:space="preserve">...
-   &lt;transportReceiver name="https"...<br/>      ...<br/>   &lt;/transportReceiver&gt;
-   ...
-   &lt;transportSender name="https"...<br/>      ...<br/>   &lt;/transportSender&gt;
-....</pre>
-    <p/>
-    <h2>
-      Message Mediation
-    </h2>
-    <p>
-      In this example Synapse will be used to simply log all the messages
-      passing through it. Although this simple scenario only performs logging,
-      it demonstrates the basics of message mediation, where the logging
-      functionality could be replaced with any combination of advanced
-      mediations such as transformations, content based routing as well as
-      bridging between different communication protocols etc. So, let's start
-      with the basics.
-    </p>
-    <h3>
-      Download
-    </h3>
-    <p>
-      Our first task is to download Synapse. Open a web browser and access the
-      following URL: http://ws.apache.org/synapse/download.cgi. You will then
-      see the list of available releases. Click on the 1.0 version, and you will
-      be directed to the Synapse 1.0 release download page. Now download the
-      'Standard binary distribution' ZIP or tar.gz archive compatible with your
-      operating system.
-    </p>
-    <h3>
-      Installation
-    </h3>
-    <p>
-      Synapse can be installed just by extracting the downloaded binary
-      archive.. A directory named synapse-1.0 will be created in the selected
-      parent directory, containing all the files required for Synapse. We will
-      refer to this directory as &lt;synapse-home&gt; from now on.
-    </p>
-    <h3>
-      Running the sample
-    </h3>
-    <p>
-      Synapse ships with a set of sample clients and services to demonstrate
-      some of its core capabilities. Hence, you will need to run three programs
-      to get an idea of message mediation. The destination server that hosts the
-      ultimate service to be invoked to service the client, the client itself,
-      and Synapse, which acts as the intermediary to bridge between the client
-      and the server.
-    </p>
-    <p/>
-    <h4>
-      Starting the sample Axis2 server
-    </h4>
-    <p>
-      In this case we are using a standalone Axis2 web services engine as the
-      server. You don't have to get it now, it is already bundled with your
-      Synapse distribution. But we have to deploy a sample service for which
-      client can send requests. Go to &lt;synapse-home&gt;/samples/axis2Server/src/SimpleStockQuoteService
-      directory. Run "ant" to build and deploy this service to the sample Axis2
-      server.
-    </p>
-    <p/>
-<pre xml:space="preserve">user@host:/opt/synapse/samples/axis2Server$ cd src/SimpleStockQuoteService/
-user@host:/opt/synapse/samples/axis2Server/src/SimpleStockQuoteService$ ant
-Buildfile: build.xml
-
-clean:
-   [delete] Deleting directory /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp
-
-init:
-    [mkdir] Created dir: /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp
-    [mkdir] Created dir: /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/classes
-
-compile-all:
-    [javac] Compiling 9 source files to /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/classes
-
-build-service:
-    [mkdir] Created dir: /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote
-    [mkdir] Created dir: /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 1 file to /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 1 file to /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 9 files to /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote
-      [jar] Building jar: /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/repository/services/SimpleStockQuoteService.aar
-
-BUILD SUCCESSFUL
-Total time: 1 second</pre>
-    <p>
-      Now go to &lt;synapse-home&gt;/samples/axis2Server directory and start the
-      server using the following command. This will start Axis2 server on port
-      9000 (http).
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . axis2server.sh
-      </p>
-      <p>
-        Windows: axis2server.bat
-      </p>
-    </div>
-    <p>
-      You will see the following messages on the console.
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse/samples/axis2Server$ ./axis2server.sh
- Using JAVA_HOME:   /opt/jdk1.5_06
- Using AXIS2 Repository :   /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/repository
- Using AXIS2 Configuration :   /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/repository/conf/axis2.xml
-[SimpleAxisServer] Using the Axis2 Repository : /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/repository
-[SimpleAxisServer] Using the Axis2 Configuration File : /home/asankha/java/synapse-1.0-RC1-SNAPSHOT/samples/axis2Server/repository/conf/axis2.xml
-[main] INFO  HttpCoreNIOSender - HTTPS Sender starting
-[main] INFO  HttpCoreNIOSender - HTTP Sender starting
-[main] INFO  HttpCoreNIOListener - HTTPS Listener starting on port : 9002
-[main] INFO  HttpCoreNIOListener - HTTP Listener starting on port : 9000 </pre>
-    <p/>
-    <h4>
-      Starting Synapse
-    </h4>
-    <p>
-      Now it's time to start Synapse. In this scenario we are starting Synapse
-      using the sample configuration found in synapse_sample_0.xml (i.e. in
-      repository/conf/sample) and listed below. It is configured to log and pass
-      through, all the messages.
-    </p>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;<br/>    &lt;log level="full"/&gt; <br/>    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p/>
-    <p>
-      Go to &lt;synapse-home&gt;/bin directory and type the command given below.
-      Synapse will be started on port 8080 (http) and 8443 (https - under JDK
-      1.5)
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . synapse.sh -sample 0
-      </p>
-      <p>
-        Windows: synapse.bat -sample 0
-      </p>
-    </div>
-    <p/>
-    <p>
-      Following messages will be displayed on the console to indicate the
-      successfull startup of Synapse.
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse/bin$ ./synapse.sh -sample 0
-Starting Synapse/Java ...
-Using SYNAPSE_HOME:    /opt/synapse
-Using JAVA_HOME:       /opt/jdk1.5_06
-Using SYNAPSE_XML:     -Dsynapse.xml=/opt/synapse/repository/conf/sample/synapse_sample_0.xml
-[SynapseServer] Using the Axis2 Repository /opt/synapse/repository
-[main] INFO  SynapseModule - Initializing the Synapse configuration ...
-...
-[main] INFO  SynapseConfigurationBuilder - Loaded Synapse configuration from : /opt/synapse/repository/conf/sample/synapse_sample_0.xml
-[main] INFO  SynapseModule - Deploying the Synapse service..
-[main] INFO  SynapseModule - Deploying Proxy services...
-[main] INFO  SynapseModule - Synapse initialized successfully...!
-[main] ERROR SandeshaModule - Could not load module policies. Using default values.
-[main] INFO  HttpCoreNIOSender - HTTPS Sender starting
-[main] INFO  HttpCoreNIOSender - HTTP Sender starting
-[main] INFO  HttpCoreNIOListener - HTTPS Listener starting on port : 8443
-[SynapseServer] Starting transport https on port 8443
-[main] INFO  HttpCoreNIOListener - HTTP Listener starting on port : 8080
-[SynapseServer] Starting transport http on port 8080
-[SynapseServer] Ready</pre>
-    <p/>
-    <h4>
-      Run the client
-    </h4>
-    <p>
-      Now the final step, running the client. Go to &lt;synapse-home&gt;/samples/axis2Client
-      directory and type the following command
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse/samples/axis2Client$ ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080 -Dmode=quote -Dsymbol=IBM
-Buildfile: build.xml
-
-init:
-
-compile:
-
-stockquote:
-     [java] Standard :: Stock price = $175.56196739870038
-
-BUILD SUCCESSFUL</pre>
-    <p/>
-    <p>
-      This sends a request for a stock quote for the symbol IBM and sets the
-      transport URL to Synapse (http://localhost:8080) and the WS-Addressing EPR
-      set that of the actual server
-      (http://localhost:9000/soap/SimpleStockQuoteService). The actual wire
-      level http message sent by the client is as follows, and is sent over port
-      8080 to the Synapse instance on localhost.
-    </p>
-<pre xml:space="preserve">POST / HTTP/1.1
-Content-Type: text/xml; charset=UTF-8
-SOAPAction: "urn:getQuote"
-User-Agent: Axis2
-Host: 127.0.0.1
-Transfer-Encoding: chunked
-
-218
-&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-   &lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-      &lt;soapenv:Header&gt;
-         &lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;
-         &lt;wsa:MessageID&gt;urn:uuid:D538B21E30B32BB8291177589283717&lt;/wsa:MessageID&gt;
-         &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-      &lt;/soapenv:Header&gt;
-      &lt;soapenv:Body&gt;
-         &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-            &lt;m0:request&gt;
-               &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-            &lt;/m0:request&gt;
-         &lt;/m0:getQuote&gt;
-      &lt;/soapenv:Body&gt;
-   &lt;/soapenv:Envelope&gt;0</pre>
-    <p/>
-    <p>
-      Now take a look at the console running Synapse. You will see that all the
-      details of the mediation are logged along with all the SOAP messages
-      passed through Synapse - as Synapse is running on debug mode by default.
-    </p>
-<pre xml:space="preserve">[I/O reactor worker thread 5] INFO  PipeImpl - Using native OS Pipes for event-driven to stream IO bridging
-[HttpServerWorker-1] DEBUG SynapseMessageReceiver - Synapse received a new message for message mediation...
-[HttpServerWorker-1] DEBUG SynapseMessageReceiver - Received To: http://localhost:9000/soap/SimpleStockQuoteService
-[HttpServerWorker-1] DEBUG SynapseMessageReceiver - SOAPAction: urn:getQuote
-[HttpServerWorker-1] DEBUG SynapseMessageReceiver - WSA-Action: urn:getQuote
-[HttpServerWorker-1] DEBUG SynapseMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;<br/>&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br/>&lt;soapenv:Header&gt;<br/>&lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;<br/>&lt;wsa:MessageID&gt;urn:uuid:32748ED82860C9DBDE1177504004875&lt;/wsa:MessageID&gt;<br/>&lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;&lt;/soapenv:Header&gt;<br/>&lt;soapenv:Body&gt;&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;&lt;m0:request&gt;&lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;&lt;/m0:request&gt;<br/>&lt;/m0:getQuote&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;main&gt; :: mediate()
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - To : http://localhost:9000/soap/SimpleStockQuoteService, <br/>MessageID : urn:uuid:32748ED82860C9DBDE1177504004875, Action : urn:getQuote, Envelope: <br/>&lt;?xml version='1.0' encoding='utf-8'?&gt;<br/>&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br/>&lt;soapenv:Header&gt;<br/>&lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;<br/>&lt;wsa:MessageID&gt;urn:uuid:32748ED82860C9DBDE1177504004875&lt;/wsa:MessageID&gt;&lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;<br/>&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;&lt;m0:request&gt;&lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;<br/>&lt;/m0:request&gt;&lt;/m0:getQuote&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] DEBUG SendMediator - Sending message using implicit message properties..
-[HttpServerWorker-1] DEBUG SendMediator - Sending To: http://localhost:9000/soap/SimpleStockQuoteService
-[HttpServerWorker-1] DEBUG SendMediator - SOAPAction: urn:getQuote
-[HttpServerWorker-1] DEBUG SendMediator - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing" <br/>xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Header&gt;<br/>&lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;<br/>&lt;wsa:MessageID&gt;urn:uuid:32748ED82860C9DBDE1177504004875&lt;/wsa:MessageID&gt;&lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;&lt;/soapenv:Header&gt;<br/>&lt;soapenv:Body&gt;&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;&lt;m0:request&gt;&lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;&lt;/m0:request&gt;<br/>&lt;/m0:getQuote&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[HttpServerWorker-1] DEBUG Axis2FlexibleMEPClient - sending [add = false] [sec = false] [rm = false] <br/>[ to Address: http://localhost:9000/soap/SimpleStockQuoteService]
-[HttpClientWorker-1] DEBUG SynapseCallbackReceiver - Synapse received an asynchronous response message
-[HttpClientWorker-1] DEBUG SynapseCallbackReceiver - Received To: null
-[HttpClientWorker-1] DEBUG SynapseCallbackReceiver - SOAPAction: null
-[HttpClientWorker-1] DEBUG SynapseCallbackReceiver - WSA-Action: null
-[HttpClientWorker-1] DEBUG SynapseCallbackReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br/>&lt;soapenv:Body&gt;&lt;soapenv:Envelope&gt;&lt;soapenv:Body&gt;&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;<br/>&lt;ns:return&gt;&lt;ns:change&gt;3.9759712191629117&lt;/ns:change&gt;&lt;ns:earnings&gt;-9.463240695957264&lt;/ns:earnings&gt;<br/>&lt;ns:high&gt;97.0893936590198&lt;/ns:high&gt;&lt;ns:last&gt;93.87052890651084&lt;/ns:last&gt;<br/>&lt;ns:lastTradeTimestamp&gt;Wed Apr 25 18:26:46 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;96.4856592398509&lt;/ns:low&gt;<br/>&lt;ns:marketCap&gt;5.572519121414568E7&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-92.43795414108462&lt;/ns:open&gt;<br/>&lt;ns:peRatio&gt;-18.381880013551893&lt;/ns:peRatio&gt;<br/>&lt;ns:percentageChange&gt;-4.5174961332793435&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;-88.01271991962221&lt;/ns:prevClose&gt;<br/>&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;15381&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;<br/>&lt;/soapenv:Envelope&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[HttpClientWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;main&gt; :: mediate()
-[HttpClientWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpClientWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpClientWorker-1] INFO  LogMediator - Envelope: &lt;?xml version='1.0' encoding='utf-8'?&gt;<br/>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;soapenv:Envelope&gt;&lt;soapenv:Body&gt;<br/>&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;&lt;ns:return&gt;&lt;ns:change&gt;3.9759712191629117&lt;/ns:change&gt;<br/>&lt;ns:earnings&gt;-9.463240695957264&lt;/ns:earnings&gt;&lt;ns:high&gt;97.0893936590198&lt;/ns:high&gt;&lt;ns:last&gt;93.87052890651084&lt;/ns:last&gt;<br/>&lt;ns:lastTradeTimestamp&gt;Wed Apr 25 18:26:46 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;96.4856592398509&lt;/ns:low&gt;<br/>&lt;ns:marketCap&gt;5.572519121414568E7&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-92.43795414108462&lt;/ns:open&gt;<br/>&lt;ns:peRatio&gt;-18.381880013551893&lt;/ns:peRatio&gt;<br/>&lt;ns:percentageChange&gt;-4.5174961332793435&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;-88.01271991962221&lt;/ns:prevClose&gt;<br/>&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;15381&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;<br/>&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[HttpClientWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpClientWorker-1] DEBUG SendMediator - Sending message using implicit message properties..
-[HttpClientWorker-1] DEBUG SendMediator - Sending To: null
-[HttpClientWorker-1] DEBUG SendMediator - SOAPAction: null
-[HttpClientWorker-1] DEBUG SendMediator - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br/>&lt;soapenv:Body&gt;&lt;soapenv:Envelope&gt;&lt;soapenv:Body&gt;&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;<br/>&lt;ns:return&gt;&lt;ns:change&gt;3.9759712191629117&lt;/ns:change&gt;&lt;ns:earnings&gt;-9.463240695957264&lt;/ns:earnings&gt;<br/>&lt;ns:high&gt;97.0893936590198&lt;/ns:high&gt;&lt;ns:last&gt;93.87052890651084&lt;/ns:last&gt;<br/>&lt;ns:lastTradeTimestamp&gt;Wed Apr 25 18:26:46 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;96.4856592398509&lt;/ns:low&gt;<br/>&lt;ns:marketCap&gt;5.572519121414568E7&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-92.43795414108462&lt;/ns:open&gt;<br/>&lt;ns:peRatio&gt;-18.381880013551893&lt;/ns:peRatio&gt;<br/>&lt;ns:percentageChange&gt;-4.5174961332793435&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;-88.01271991962221&lt;/ns:prevClose&gt;<br/>&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;15381&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;<br/>&lt;/soapenv:Envelope&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</pre>
-    <p/>
-    <p>
-      You have successfully completed the first part of this guide. Now let's
-      look at the next scenario, proxy services.
-    </p>
-    <p/>
-    <h2>
-      Proxy Services
-    </h2>
-    <p>
-      As the name implies, a proxy service acts as a service hosted in Synapse,
-      and typically fronts an existing service endpoint. A proxy service can be
-      created and exposed on a different transport, schema, WSDL, or QoS (such
-      as WS-Security, WS-Reliable Messaging) aspect than the real service and
-      could mediate the messages before being delivered to the actual endpoint,
-      and the responses before they reach the client.
-    </p>
-    <p>
-      Clients can send requests for proxy services directly to Synapse, as the
-      client sees as if they are hosted on it, and for example can perform ?wsdl
-      and view the WSDL of the virtual proxy service. But in the Synapse
-      configuration, such requests can be handled in anyway you like. Most
-      obvious thing would be to do some processing to the message and send it to
-      the actual service, probably running on a different computer. But it is
-      not neccessary to always send the message to the actual service. You may
-      list any combination of tasks to be performed on the messages received for
-      the proxy service and terminate the flow or send some messge back to the
-      client even without sending it to an actual service. Let's explore a
-      simple proxy services scenario step by step to get a better feeling. As
-      you have downloaded and installed Synapse in the previous section, now you
-      can start directly on the sample.
-    </p>
-    <p/>
-    <h3>
-      Running the sample
-    </h3>
-    <p>
-      As in the previous section, there should be three entities running to
-      demonstrate proxy services, the server, client and Synapse. Let's start
-      with the server.
-    </p>
-    <p/>
-    <h4>
-      Starting the sample Axis2 server
-    </h4>
-    <p>
-      As you have built and deployed the SimpleStockQuote service in the
-      previous section, you can simply start the server by switching to the &lt;synapse-home&gt;/samples/axis2Server
-      directory and running the following command.
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . axis2server.sh
-      </p>
-      <p>
-        Windows: axis2server.bat
-      </p>
-    </div>
-    <p>
-      You can see the console messages as in the previous section.
-    </p>
-    <h4>
-      Starting Synapse
-    </h4>
-    <p>
-      We have to start Synapse with a configuration containing a proxy service
-      definition. In this case we are using the synapse_sample_100.xml, so that
-      you don't have to write the configuration your self.
-    </p>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p/>
-    <p>
-      The above configuration will expose a proxy service named StockQuoteProxy
-      and specifies an endpoint
-      (http://localhost:9000/soap/SimpleStockQuoteService) as the target for the
-      proxy service. Therefore, messages coming to the proxy service will be
-      directed to the address http://localhost:9000/soap/SimpleStockQuoteService
-      specified in the endpoint. There is also an out sequence for the proxy
-      service, which is applicable for response messages. In the out sequence,
-      we just send the messages back to the client. The publishWSDL tag
-      specifies an WSDL to be published for this proxy service. Let's start
-      Synapse with this sample configuration by running the below command from
-      the &lt;synapse-home&gt;/bin directory. It is possible to specify a
-      sequence of mediation for incoming messages instead of a target endpoint,
-      and many other possibilities and options are available to configure proxy
-      services. These are explained in the samples and configuration guides.
-    </p>
-    <p/>
-    <div class="command">
-      <p>
-        Linux / Unix: . synapse.sh -sample 100
-      </p>
-      <p>
-        Windows: synapse.bat -sample 100
-      </p>
-    </div>
-    <p/>
-    <p>
-      Synapse will display a set of messages as in the previous section
-      describing the steps of starting procedure. Before running the client, it
-      is time to observe another feature of proxy services. That is diplaying
-      the published WSDL. Just open a web browser and point it to the address
-      http://localhost:8080/soap/StockQuoteProxy?wsdl. You will see the
-      sample_proxy_1.wsdl specified in the configuration but containing the
-      correct EPR for the service over http/s.
-    </p>
-    <p/>
-    <h4>
-      Run the client
-    </h4>
-    <p>
-      Now it is time to see it in action. Go to the &lt;synapse-home&gt;/samples/axis2Clients
-      directory and type the following command:
-    </p>
-    <div class="command">
-      ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy
-      -Dmode=quote -Dsymbol=IBM
-    </div>
-    <p>
-      The above command sends a stockquote request directly to the provided
-      transport endpoint at: http://localhost:8080/soap/StockQuoteProxy. You
-      will see the response from the server displayed on the console as follows:
-    </p>
-    <div class="consoleOutput">
-      Standard :: Stock price = $165.32687331383468
-    </div>
-    <p/>
-    <p>
-      This quick guide illustrates the simple use case of proxy services. Please
-      refer to samples #100 and above in the Samples guide, for indepth coverage
-      of more advanced use cases.
-    </p>
-    <p/>
-    <p>
-      Yes, you are done with a quick look at Synapse. Now it is time to go
-      deeper and reveal the advanced features of Synapse. You can browse through
-      the samples for your interested areas. If you have any issue regarding
-      Synapse as a user, feel free ask it in the Synapse user mailing list
-      (http://ws.apache.org/synapse/mail-lists.html).
-    </p>
-    <p/>
-    <p/>
-    <p/>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_0/quickstart.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1/samples.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1/samples.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1/samples.xml	(nonexistent)
@@ -1,4676 +0,0 @@
-<?xml version="1.0"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta http-equiv="content-type" content=""/>
-    <title>
-      Synapse Samples
-    </title>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Running the Synapse Samples
-    </h1>
-    <h2>
-      <a name="TOC" id="TOC">Contents</a>
-    </h2>
-    <div class="section-content">
-      <ul>
-        <li>
-          <a href="samples_setup.html#Overview">Overview</a>
-        </li>
-        <li>
-          <a href="#MediationSamples">Message mediation samples</a>
-          <ul>
-            <li>
-              <a href="#Sample0">Sample 0: Introduction to Synapse</a>
-            </li>
-            <li>
-              <a href="#Sample1">Sample 1: Simple content based routing (CBR)
-              of messages</a>
-            </li>
-            <li>
-              <a href="#Sample2">Sample 2: CBR with the Switch-case mediator,
-              using message properties</a>
-            </li>
-            <li>
-              <a href="#Sample3">Sample 3: Local Registry entry definitions,
-              reusable endpoints and sequences</a>
-            </li>
-            <li>
-              <a href="#Sample4">Sample 4: Introduction to error handling</a>
-            </li>
-            <li>
-              <a href="#Sample5">Sample 5: Creating SOAP fault messages and
-              changing the direction of a message</a>
-            </li>
-            <li>
-              <a href="#Sample6">Sample 6: Manipulating SOAP headers, and
-              filtering incoming and outgoing messages</a>
-            </li>
-            <li>
-              <a href="#Sample7">Sample 7: Introduction to local Registry
-              entries and using Schema validation</a>
-            </li>
-            <li>
-              <a href="#Sample8">Sample 8: Introduction to static and dynamic
-              registry resources, and using XSLT transformations</a>
-            </li>
-            <li>
-              <a href="#Sample9">Sample 9: Introduction to dynamic sequences
-              with the Registry</a>
-            </li>
-            <li>
-              <a href="#Sample10">Sample 10: Introduction to dynamic
-              endpoints with the Registry</a>
-            </li>
-            <li>
-              <a href="#Sample11">Sample 11: A full registry based
-              configuration, and sharing a configuration between multiple
-              instances</a>
-            </li>
-            <li>
-              <a href="#Sample12">Sample 12: One way messaging /
-              fireAndForget through synapse</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#Endpoints">Advanced mediations with endpoints</a>
-          <ul>
-            <li>
-              <a href="#Sample50">Sample 50: POX to SOAP conversion</a>
-            </li>
-            <li>
-              <a href="#Sample51">Sample 51: MTOM and SwA optimizations and
-              request/response correlation</a>
-            </li>
-            <li>
-              <a href="#Sample52">Sample 52: Session less load balancing
-              between 3 endpoints</a>
-            </li>
-            <li>
-              <a href="#Sample53">Sample 53: Failover sending among 3
-              endpoints</a>
-            </li>
-            <li>
-              <a href="#Sample54">Sample 54: Session affinity load balancing
-              between 3 endpoints</a>
-            </li>
-            <li>
-              <a href="#Sample55">Sample 55: Session affinity load balancing
-              between fail over endpoints</a>
-            </li>
-            <li>
-              <a href="#Sample56">Sample 56: WSDL endpoint</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#MessageMediationQoS">Quality of Service addition or
-          deduction samples in message mediation</a>
-          <ul>
-            <li>
-              <a href="#Sample100">Sample 100: Using WS-Security for outgoing
-              messages</a>
-            </li>
-            <li>
-              <a href="#Sample101">Sample 101: Reliable message exchange
-              between Synapse and the back-end server using WS-ReliableMessaging</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#ProxyServices">Synapse Proxy service samples</a>
-          <ul>
-            <li>
-              <a href="#Sample150">Sample 150: Introduction to proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample151">Sample 151: Custom sequences and endpoints
-              with proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample152">Sample 152: Switching transports and
-              message format from SOAP to REST/POX</a>
-            </li>
-            <li>
-              <a href="#Sample153">Sample 153: Routing the messages arrived
-              to a proxy service without processing the security headers</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#ProxyServiceQoS">QoS addition and deduction for service
-          mediation (proxy) samples</a>
-          <ul>
-            <li>
-              <a href="#Sample200">Sample 200: Using WS-Security with policy
-              attachments for proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample201">Sample 201: Reliable message exchange
-              between the client and proxy services using WS-ReliableMessaging</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#Transport">Transport samples and switching transports</a>
-          <ul>
-            <li>
-              <a href="#Sample250">Sample 250: Introduction to switching
-              transports - JMS to http/s</a>
-            </li>
-            <li>
-              <a href="#Sample251">Sample 251: Switching from http/s to JMS</a>
-            </li>
-            <li>
-              <a href="#Sample252">Sample 252: Pure text/binary and POX
-              message support with JMS</a>
-            </li>
-            <li>
-              <a href="#Sample253">Sample 253: One way bridging from JMS to
-              http and replying with a 202 Accepted response</a>
-            </li>
-            <li>
-              <a href="#Sample254">Sample 254: Using the file system as
-              transport medium using VFS transport listener and sender</a>
-            </li>
-            <li>
-              <a href="#Sample255">Sample 255: Switching from ftp transport
-              listener to mail transport sender</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#Task">Introduction to synapse tasks</a>
-          <ul>
-            <li>
-              <a href="#Sample300">Sample 300: Introduction to tasks with
-              simple trigger</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#AdvancedMediation">Advanced mediations with advanced
-          mediators</a>
-          <ul>
-            <li>
-              <a href="#ScriptMediator">Using scripts in mediation (Script
-              Mediator)</a>
-              <ul>
-                <li>
-                  <a href="#Sample350">Sample 350: Introduction to the script
-                  mediator using js scripts</a>
-                </li>
-                <li>
-                  <a href="#Sample351">Sample 351: In-line script mediation
-                  with JavaScript</a>
-                </li>
-                <li>
-                  <a href="#Sample352">Sample 352: Accessing Synapse message
-                  context API methods using scripting language</a>
-                </li>
-                <li>
-                  <a href="#Sample353">Sample 353: Using Ruby scripts for
-                  mediation</a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#DBMediators">Database interactions in mediation
-              (DBLookup / DBReport)</a>
-              <ul>
-                <li>
-                  <a href="#Sample360">Sample 360: Introduction to dblookp
-                  mediator</a>
-                </li>
-                <li>
-                  <a href="#Sample361">Sample 361: Introduction to dbreport
-                  mediator</a>
-                </li>
-                <li>
-                  <a href="#Sample362">Sample 362: Action of dbreport and
-                  dblookup mediators together</a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#Throttle">Throtteling messages (Throttle Mediator)</a>
-              <ul>
-                <li>
-                  <a href="#Sample370">Sample 370: Introduction to throttle
-                  mediator and concurrency throttling</a>
-                </li>
-                <li>
-                  <a href="#Sample371">Sample 371: Restricting requests based
-                  on policies</a>
-                </li>
-                <li>
-                  <a href="#Sample372">Sample 372: Use of both concurrency
-                  throttling and request rate based throttling </a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#Class">Extending the mediation in java (Class
-              Mediator)</a>
-              <ul>
-                <li>
-                  <a href="#Sample380">Sample 380: Writing your own custom
-                  mediation in Java</a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#XQuery">Evaluating XQuery for mediation (XQuery
-              Mediator)</a>
-              <ul>
-                <li>
-                  <a href="#Sample390">Sample 390: Introduction to the XQuery
-                  mediator</a>
-                </li>
-                <li>
-                  <a href="#Sample391">Sample 391: How to use the data from
-                  an external XML document with in XQuery </a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#Splitter">Splitting messages in to parts and process
-              in parallel (Iterate / Clone)</a>
-              <ul>
-                <li>
-                  <a href="#Sample400">Sample 400: Message splitting and
-                  aggregating the responses</a>
-                </li>
-              </ul>
-            </li>
-
-
-
-
-
-
-            <li>
-              <a href="#Cache">Caching the responses over the requests</a>
-              <ul>
-                <li>
-                  <a href="#Sample420">Sample 420: Simple cache implemented
-                  on synapse for the actual service</a>
-                </li>
-              </ul>
-            </li>
-          </ul>
-        </li>
-      </ul>
-    </div>
-    <h1>
-      <a name="MediationSamples" id="MediationSamples">Message Mediation
-      Samples</a>
-    </h1>
-    <h2>
-      <a name="Sample0" id="Sample0">Sample 0: Introduction to Synapse</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- log all attributes of messages passing through --&gt;
-    &lt;log level="full"/&gt;
-
-    &lt;!-- Send the messageto implicit destination --&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to Synapse. Shows how a message could
-      be made to pass through Synapse </strong><strong>and logged
-      before it is delivered to its ultimate receiver.</strong>
-    </p>
-    <p>
-      The Stock quote client can operate in the following modes for this
-      example.
-    </p>
-    <ol>
-      <li>
-        Smart Client mode
-      </li>
-      <li>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ </pre>
-      </li>
-      <li>
-        Using Synapse as a HTTP Proxy
-      </li>
-      <li>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dprxurl=http://localhost:8080/</pre>
-      </li>
-      <li>
-        Gateway Mode / Dumb Client
-      </li>
-      <li>
-        <p>
-          See sample # 1
-        </p>
-      </li>
-    </ol>
-    <p>
-      <strong>Prerequisites:<br/> </strong>Start the Synapse
-      configuration numbered 0: e.g. synapse -sample 0<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already deployed
-    </p>
-    <p>
-      <strong>Execute the Smart Client </strong>
-    </p>
-    <p>
-      By tracing the execution of Synapse with the log output level set to
-      DEBUG, you will see the client request arriving at Synapse with a
-      WS-Addressing 'To' set to EPR
-      http://localhost:9000/soap/SimpleStockQuoteService. The Synapse engine
-      logs the message at the "full" log level (i.e. all the message headers and
-      the body) then sends the message to its implicit 'To' address which is
-      http://localhost:9000/soap/SimpleStockQuoteService. You will see a message
-      in the Axis2 server console confirming that the message got routed to the
-      sample server and the sample service hosted at the sample server
-      generating a stock quote for the requested symbol.
-    </p>
-<pre xml:space="preserve">Sat Nov 18 21:01:23 IST 2006 SimpleStockQuoteService :: Generating quote for : IBM</pre>
-    <p>
-      The response message generated by the service is again received by
-      Synapse, and flows through the same mediation rules, which logs the
-      response message and then sends it back. This time to the client. On the
-      client console you should see an output similar to the following based on
-      the message received by the client.
-    </p>
-<pre xml:space="preserve">Standard :: Stock price = $95.26454380258552</pre>
-    <p>
-      <strong>Execute the Proxy Client </strong>
-    </p>
-    <p>
-      You will see the exact same behaviour as per the previous example when you
-      run this scenario. However this time the difference is at the client, as
-      it sends the message to the WS-Addressing 'To' address
-      http://localhost:9000/soap/SimpleStockQuoteService, but the transport
-      specifies Synapse as the http proxy.
-    </p>
-    <h2>
-      <a name="Sample1" id="Sample1">Sample 1: Simple content based routing
-      (CBR) of messages</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- filtering of messages with XPath and regex matches --&gt;
-    &lt;filter source="get-property('To')" regex=".*/StockQuote.*"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-        &lt;drop/&gt;
-    &lt;/filter&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to simple content based routing. Shows
-      how a message could be made to pass through Synapse using the Dumb Client
-      mode, where Synapse acts as a gateway to accept all messages and then
-      perform mediation and routing based on message properties or content.</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 1: i.e. synapse -sample 1<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already deployed<br/>
-    </p>
-    <p>
-      Execute the Dumb Client as:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuote<br/></pre>
-    <p>
-      This time you will see Synapse receiving a message for which Synapse was
-      set as the ultimate receiver of the message. Based on the 'To' EPR of
-      http://localhost:8080/soap/StockQuote, Synapse performs a match to the
-      path '/StockQuote' and as the request matches the XPath expression of the
-      filter mediator, the filter mediator's child mediators execute. This sends
-      the message to a different endpoint as specified by the endpoint
-      definition. The 'drop' mediator terminates further processing of the
-      current message in a configuration. During response processing, the filter
-      condition fails, and thus the implicit 'send' mediator forwards the
-      response back to the client.
-    </p>
-    <h2>
-      <a name="Sample2" id="Sample2">Sample 2: CBR with the Switch-case
-      mediator, using message properties</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;switch source="//m0:getQuote/m0:request/m0:symbol" xmlns:m0="http://services.samples/xsd"&gt;
-        &lt;case regex="IBM"&gt;
-            &lt;!-- the property mediator sets a local property on the *current* message --&gt;
-            &lt;property name="symbol" value="Great stock - IBM"/&gt;
-        &lt;/case&gt;
-        &lt;case regex="MSFT"&gt;
-            &lt;property name="symbol" value="Are you sure? - MSFT"/&gt;
-        &lt;/case&gt;
-        &lt;default&gt;
-            &lt;!-- it is possible to assign the result of an XPath expression as well --&gt;
-            &lt;property name="symbol"
-                  expression="fn:concat('Normal Stock - ', //m0:getQuote/m0:request/m0:symbol)"
-                  xmlns:m0="http://services.samples/xsd"/&gt;
-        &lt;/default&gt;
-    &lt;/switch&gt;
-
-    &lt;log level="custom"&gt;
-        &lt;!-- the get-property() XPath extension function allows the lookup of local message properties
-            as well as properties from the Axis2 or Transport contexts (i.e. transport headers) --&gt;
-        &lt;property name="symbol" expression="get-property('symbol')"/&gt;
-        &lt;!-- the get-property() function supports the implicit message headers To/From/Action/FaultTo/ReplyTo --&gt;
-        &lt;property name="epr" expression="get-property('To')"/&gt;
-    &lt;/log&gt;
-
-    &lt;!-- Send the messages where they are destined to (i.e. the 'To' EPR of the message) --&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduce switch-case mediator and writing and
-      reading of local properties set on a message instance</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 2: i.e. synapse -sample 2<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done.
-    </p>
-    <p>
-      Execute the 'ant stockquote ..' request again in the smart client mode,
-      specifying 'IBM', 'MSFT' and 'SUN' as the stock symbols. When the symbol
-      IBM is requested, viewing the mediation logs you will see that the case
-      statements' first case for 'IBM' is executed and a local property named
-      'symbol' was set to 'Great stock - IBM'. Subsequently this local property
-      value is looked up by the log mediator and logged using the
-      'get-property()' XPath extension function.
-    </p>
-    <p>
-      ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService
-      -Dtrpurl=http://localhost:8080/ -Dsymbol=IBM
-    </p>
-<pre xml:space="preserve">INFO LogMediator - symbol = Great stock - IBM, epr = http://localhost:9000/axis2/services/SimpleStockQuoteService </pre>
-    <p>
-      ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService
-      -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT
-    </p>
-<pre xml:space="preserve">INFO LogMediator - symbol = Are you sure? - MSFT, epr = http://localhost:9000/axis2/services/SimpleStockQuoteService</pre>
-    <h2>
-      <a name="Sample3" id="Sample3">Sample 3: Local Registry entry
-      definitions, reusable endpoints and sequences</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- define a string resource entry to the local registry --&gt;
-    &lt;localEntry key="version"&gt;0.1&lt;/localEntry&gt;
-    &lt;!-- define a reuseable endpoint definition --&gt;
-    &lt;endpoint name="simple"&gt;
-        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/endpoint&gt;
-
-    &lt;!-- define a reusable sequence --&gt;
-    &lt;sequence name="stockquote"&gt;
-        &lt;!-- log the message using the custom log level. illustrates custom properties for log --&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="Text" value="Sending quote request"/&gt;
-            &lt;property name="version" expression="get-property('version')"/&gt;
-            &lt;property name="direction" expression="get-property('direction')"/&gt;
-        &lt;/log&gt;
-        &lt;!-- send message to real endpoint referenced by key "simple" endpoint definition --&gt;
-        &lt;send&gt;
-            &lt;endpoint key="simple"/&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;property name="direction" value="incoming"/&gt;
-            &lt;sequence key="stockquote"/&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Illustrates local registry entry definitions,
-      reusable endpoints and sequences</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 3: i.e. synapse -sample 3<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example uses a sequence named as "main" that specifies the main
-      mediation rules to be executed. This is equivalent to directly specifying
-      the mediators of the main sequence within the &lt;definitions&gt; tags.
-      This is the recommended and also a better approach for non-trivial
-      configurations. Execute the 'ant stockquote ..' request again, and
-      following through the mediation logs you will now notice that the sequence
-      named "main" is executed. Then for the incoming message flow the &lt;in&gt;
-      mediator executes, and it calls into the sequence named "stockquote".
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre xml:space="preserve">DEBUG SequenceMediator - Sequence mediator &lt;main&gt; :: mediate()<br/>DEBUG InMediator - In mediator mediate()<br/>DEBUG SequenceMediator - Sequence mediator &lt;stockquote&gt; :: mediate()</pre>
-    <p>
-      As the "stockquote" sequence executes, the log mediator dumps a simple
-      text/string property, result of an XPath evaluation, that picks up the key
-      named "version", and a second result of an XPath evaluation that picks up
-      a local message property set previously by the &lt;property&gt; mediator.
-      The get-property() XPath extension function is able to read message
-      properties local to the current message, local or remote registry entries,
-      Axis2 message context properties as well as transport headers. The local
-      entry definition for "version" defines a simple text/string registry entry
-      for that which is visible to all messages that pass through Synapse.
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  LogMediator - Text = Sending quote request, version = 0.1, direction = incoming
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] DEBUG AddressEndpoint - Sending To: http://localhost:9000/soap/SimpleStockQuoteService </pre>
-    <h2>
-      <a name="Sample4" id="Sample4">Sample 4: Introduction to error handling</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the default fault handling sequence used by Synapse - named 'fault' --&gt;
-    &lt;sequence name="fault"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="An unexpected error occured"/&gt;
-            &lt;property name="message" expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/log&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="sunErrorHandler"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="An unexpected error occured for stock SUN"/&gt;
-            &lt;property name="message" expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/log&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;!-- default message handling sequence used by Synapse - named 'main' --&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;switch source="//m0:getQuote/m0:request/m0:symbol" xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;case regex="IBM"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="MSFT"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint key="bogus"/&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="SUN"&gt;
-                    &lt;sequence key="sunSequence"/&gt;
-                &lt;/case&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;sequence name="sunSequence" onError="sunErrorHandler"&gt;
-        &lt;send&gt;
-            &lt;endpoint key="sunPort"/&gt;
-        &lt;/send&gt;
-&lt;/sequence&gt;
-
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to error handling with the 'fault'
-      sequence</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 4: i.e. synapse -sample 4<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      When the IBM stock quote is requested, the configuration routes it to the
-      defined inline endpoint, which routes the message to the
-      SimpleStockQuoteService on the local Axis2 instance. Hence a valid
-      response message is shown at the client.
-    </p>
-    <p>
-      If you lookup a stock quote for 'MSFT', Synapse is instructed to route the
-      message to the endpoint defined as the 'bogus' endpoint, which does not
-      exist. Synapse executes the specified error handler sequence closest to
-      the point where the error was encountered. In this case, the currently
-      executing sequence is 'main' and it does not specify an 'onError'
-      attribute. Whenever Synapse cannot find an error handler, it looks for a
-      sequence named 'fault'. Thus the 'fault' sequence can be seen executing,
-      and writing the generic error message to the logs.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] ERROR IndirectEndpoint - Reference to non-existent endpoint for key : bogus
-[HttpServerWorker-1] DEBUG MediatorFaultHandler - MediatorFaultHandler :: handleFault
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;fault&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - text = An unexpected error occured, message = Reference to non-existent endpoint for key : bogus</pre>
-    <p>
-      When the 'SUN' quote is requested, a custom sequence 'sunSequence' is
-      invoked, and it specifies 'sunErrorHandler' as its error handler. Hence
-      when the send fails, you could see the proper error handler invocation and
-      the custom error message printed as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=SUN</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;sunSequence&gt; :: mediate()
-[HttpServerWorker-1] DEBUG SequenceMediator - Setting the onError handler for the sequence
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] ERROR IndirectEndpoint - Reference to non-existent endpoint for key : sunPort
-[HttpServerWorker-1] DEBUG MediatorFaultHandler - MediatorFaultHandler :: handleFault
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;sunErrorHandler&gt; :: mediate()
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - text = An unexpected error occured for stock SUN, message = Reference to non-existent endpoint for key : sunPort</pre>
-    <h2>
-      <a name="Sample5" id="Sample5">Sample 5: Creating SOAP fault messages
-      and changing the direction of a message</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="myFaultHandler"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/makefault&gt;
-
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="myFaultHandler"&gt;
-        &lt;in&gt;
-            &lt;switch source="//m0:getQuote/m0:request/m0:symbol"
-                    xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;case regex="MSFT"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://bogus:9000/soap/NonExistentStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="SUN"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://localhost:9009/soap/NonExistentStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Makefault mediator and sending back error responses
-      </strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 5: i.e. synapse -sample 5<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      When the MSFT stock quote is requested, an unknown host exception would be
-      generated. A connection refused exception would be generated for the SUN
-      stock request. This error message is captured and returned to the original
-      client as a SOAP fault in this example.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</pre>
-    <p>
-      returns,
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Fault xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;faultcode&gt;soapenv:Client&lt;/faultcode&gt;
-    &lt;faultstring&gt;java.net.UnknownHostException: bogus&lt;/faultstring&gt;&lt;detail /&gt;&lt;/soapenv:Fault&gt;</pre>
-    <p>
-      And
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=SUN</pre>
-    <p>
-      returns,
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Fault xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;faultcode&gt;soapenv:Client&lt;/faultcode&gt;
-    &lt;faultstring&gt;java.net.ConnectException: Connection refused&lt;/faultstring&gt;&lt;detail /&gt;&lt;/soapenv:Fault&gt;</pre>
-    <h2>
-      <a name="Sample6" id="Sample6">Sample 6: Manipulating SOAP headers, and
-      filtering incoming and outgoing messages</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;header name="To" value="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to header, in (out) mediators</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 6: i.e. synapse -sample 6<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      In this example we use the stockquote client in the dumb client mode,
-      setting the 'To' EPR of the message to Synapse. Then the 'in' mediator
-      processes the incoming messages, and manipulates the 'To' header to refer
-      to the stock quote service on the sample Axis2 server. Thus it is now
-      possible to request for a stock quote as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-    <h2>
-      <a name="Sample7" id="Sample7">Sample 7: Introduction to local Registry
-      entries and using Schema validation</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;localEntry key="validate_schema"&gt;
-        &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
-                    xmlns="http://www.apache-synapse.org/test" elementFormDefault="qualified"
-                    attributeFormDefault="unqualified"
-                    targetNamespace="http://services.samples/xsd"&gt;
-            &lt;xs:element name="getQuote"&gt;
-                &lt;xs:complexType&gt;
-                    &lt;xs:sequence&gt;
-                        &lt;xs:element name="request"&gt;
-                            &lt;xs:complexType&gt;
-                                &lt;xs:sequence&gt;
-                                    &lt;xs:element name="stocksymbol" type="xs:string"/&gt;
-                                &lt;/xs:sequence&gt;
-                            &lt;/xs:complexType&gt;
-                        &lt;/xs:element&gt;
-                    &lt;/xs:sequence&gt;
-                &lt;/xs:complexType&gt;
-            &lt;/xs:element&gt;
-        &lt;/xs:schema&gt;
-    &lt;/localEntry&gt;
-
-    &lt;in&gt;
-        &lt;validate&gt;
-            &lt;schema key="validate_schema"/&gt;
-            &lt;on-fail&gt;
-                &lt;!-- if the request does not validate againt schema throw a fault --&gt;
-                &lt;makefault&gt;
-                    &lt;code value="tns:Receiver"
-                            xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                    &lt;reason value="Invalid custom quote request"/&gt;
-                &lt;/makefault&gt;
-                &lt;property name="RESPONSE" value="true"/&gt;
-                &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-            &lt;/on-fail&gt;
-        &lt;/validate&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to local (static) registry entries and
-      the validate mediator</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 7: i.e. synapse -sample 7<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example shows how a static XML fragment could be made available to
-      the Synapse local registry. Resources defined in the local registry are
-      static (i.e. never changes over the lifetime of the configuration) and may
-      be specified as a source URL, inline text or inline xml. In this example
-      the schema is made available under the key 'validate_schema'.
-    </p>
-    <p>
-      The validate mediator by default operates on the first child element of
-      the SOAP body. You may specify an XPath expression using the 'source'
-      attribute to override this behaviour. The validate mediator now uses the
-      'validate_schema' resource to validate the incoming message, and if the
-      message validatation fails it invokes the 'on-fail' sequence of mediators.
-    </p>
-    <p>
-      If you send a stockquote request using 'ant stockquote ...' you will get a
-      fault back with the message 'Invalid custom quote request' as the schema
-      validation failed. This is because the schema used in the example expects
-      a slightly different message than what is created by the stock quote
-      client. (i.e. expects a 'stocksymbol' element instead of 'symbol' to
-      specify thestock symbol)
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-    <h2>
-      <a name="Sample8" id="Sample8">Sample 8: Introduction to static and
-      dynamic registry resources, and using XSLT transformations</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to a URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;!-- define the request processing XSLT resource as a static URL source --&gt;
-    &lt;localEntry key="xslt-key-req" src="file:repository/conf/sample/resources/transform/transform.xslt"/&gt;
-
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote requst expected by the service --&gt;
-        &lt;xslt key="xslt-key-req"/&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;!-- the key is looked up in the remote registry and loaded as a 'dynamic' registry resource --&gt;
-        &lt;xslt key="transform/transform_back.xslt"/&gt;
-    &lt;/out&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to static and dynamic registry
-      resources and the XSLT mediator</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 8: i.e. synapse -sample 8<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example uses the XSLT mediator to perform transformations, and the
-      xslt tranformations are specified as registry resources. The first
-      resource 'xslt-key-req' is specified as a 'local' registry entry. Local
-      entries do not place the resource on the registry, but simply make it
-      available to the local configuration. If a local entry is defined with a
-      key that already exists in the remote registry, the local entry will have
-      higher preference and override the remote resource.
-    </p>
-    <p>
-      In this example you will notice the new 'registry' definition. Synapse
-      comes with a simple URL based registry implementation SimpleURLRegistry.
-      During initialization of the registry, the SimpleURLRegistry expects to
-      find a property named 'root', which specifies a prefix for the registry
-      keys used later. When the SimpleURLRegistry is used, this root is prefixed
-      to the entry keys to form the complete URL for the resource being looked
-      up. The registry caches a resource once requested, and caches it
-      internally for a specified duration. Once this period expires, it will
-      reload the meta information about the resource and reload its cached copy
-      if necessary, the next time the resource is requested.
-    </p>
-    <p>
-      Hence the second XSLT resource key 'transform/transform_back.xslt'
-      concatenated with the 'root' of the SimpleURLRegistry
-      'file:repository/conf/sample/resources/' forms the complete URL of the
-      resource as
-      'file:repository/conf/sample/resources/transform/transform_back.xslt' and
-      caches its value for a period of 15000 ms.
-    </p>
-    <p>
-      Execute the custom quote client as 'ant stockquote -Dmode=customquote ...'
-      and analyze the the Synapse debug log output
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=customquote</pre>
-    <p>
-      The incoming message is now transformed into a standard stock quote
-      request as expected by the SimpleStockQuoteService deployed on the local
-      Axis2 instance, by the XSLT mediator. The XSLT mediator uses Xalan-J to
-      perform the transformations. It is possible to configure the underlying
-      transformation engine using properties where necessary. The response from
-      the SimpleStockQuoteService is converted back into the custom format as
-      expected by the client during the out message processing.
-    </p>
-    <p>
-      During the response processing you could see the SimpleURLRegistry
-      fetching the resource as shown by the log message below
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : transform/transform_back.xslt</pre>
-    <p>
-      If you run the client again immediately (i.e within 15 seconds of the
-      first request) you will not see the resource being reloaded by the
-      registry as the cached value would be still valid.
-    </p>
-    <p>
-      However if you leave the system idle for 15 seconds or more and then retry
-      the same request, you will now notice that the registry noticed the cached
-      resource has expired and will check the meta information about the
-      resource to check if the resource itself has changed and will require a
-      fresh fetch from the source URL. If the meta data / version number
-      indicates that a reload of the cached resource is not necessary (i.e.
-      unless the resource itself actually changed) the updated meta information
-      is used and the cache lease extended as appropriate.
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] DEBUG AbstractRegistry - Cached object has expired for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG SimpleURLRegistry - Perform RegistryEntry lookup for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG AbstractRegistry - Expired version number is same as current version in registry
-[HttpClientWorker-1] DEBUG AbstractRegistry - Renew cache lease for another 15s </pre>
-    <p>
-      Now edit the
-      repository/conf/sample/resources/transform/transform_back.xslt file and
-      add a blank line at the end. Now when you run the client again, and if the
-      cache is expired, the resource would be re-fetched from its URL by the
-      registry and this can be seen by the following debug log messages
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] DEBUG AbstractRegistry - Cached object has expired for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG SimpleURLRegistry - Perform RegistryEntry lookup for key : transform/transform_back.xslt
-[HttpClientWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : transform/transform_back.xslt </pre>
-    <p>
-      Thus the SimpleURLRegistry allows resource to be cached, and updates
-      detected so that the changes could be reloaded without restarting the
-      Synapse instance.
-    </p>
-    <h2>
-      <a name="Sample9" id="Sample9">Sample 9: Introduction to dynamic
-      sequences with the Registry</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;sequence key="sequence/dynamic_seq_1.xml"/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to dynamic sequences with a Registry</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 9: i.e. synapse -sample 9<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example introduces the dynamic behaviour of Synapse through the use
-      of a Registry. Synapse supports dynamic definitions for sequences and
-      endpoints, and as seen before, for resources. In this example we define a
-      Synapse configuration which references a sequence definition specified as
-      a registry key. The registry key resolves to the actual content of the
-      sequence which would be loaded dynamically by Synapse at runtime, and
-      cached appropriately as per its definition in the registry. Once the cache
-      expires, Synapse would recheck the meta information for the definition and
-      re-load the sequence definition if necessary and re-cache it again.
-    </p>
-    <p>
-      Once Synapse is started, execute the stock quote client as 'ant
-      stockquote..'. You will notice that that Synapse fetches the definition of
-      the sequence from the registry and executes its rules as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : sequence/dynamic_seq_1.xml
-...
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;dynamic_sequence&gt; :: mediate()
-...
-[HttpServerWorker-1] INFO  LogMediator - message = *** Test Message 1 ***</pre>
-    <p>
-      Now if you execute the client immediately (i.e. within 15 seconds of the
-      last execution) you will notice that the sequence was not reloaded. If you
-      edit the sequence definition in
-      repository/conf/sample/resources/sequence/dynamic_seq_1.xml (i.e. edit the
-      log message to read as "*** Test Message 2 ***") and execute the client
-      again, you will notice that the new message is not yet visible (i.e. if
-      you execute this within 15 seconds of loading the resource for the first
-      time) However, after 15 seconds elapsed since the original caching of the
-      sequence, you will notice that the new sequence is loaded and executed by
-      Synapse from the following log messages.
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : sequence/dynamic_seq_1.xml
-...
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;dynamic_sequence&gt; :: mediate()
-...
-[HttpServerWorker-1] INFO  LogMediator - message = *** Test Message 2 ***</pre>
-    <p>
-      The cache timeout could be tuned appropriately by configuring the URL
-      registry to suite the environment and the needs.
-    </p>
-    <h2>
-      <a name="Sample10" id="Sample10">Sample 10: Introduction to dynamic
-      endpoints with the Registry</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;in&gt;
-        &lt;send&gt;
-            &lt;endpoint key="endpoint/dynamic_endpt_1.xml"/&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to dynamic endpoints with the Registry</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 10: i.e. synapse -sample 10<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done<br/>
-      Start a second Axis2 server on http port 9001 and https port 9003 as
-      follows:
-    </p>
-<pre xml:space="preserve">./axis2server.sh -http 9001 -https 9003</pre>
-    <p>
-      This example introduces dynamic endpoints, where the definition of an
-      endpoint is stored in the Registry. To follow this example execute the
-      stock quote client as 'ant stockquote..' and see that the message is
-      routed to the SimpleStockQuoteService on the default Axis2 instance on
-      http port 9000. Repeat the above example immediately again, and notice
-      that the endpoint is cached and reused by Synapse - similarly to example #
-      8.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-    <p>
-      Now edit the repository/conf/sample/resources/endpoint/dynamic_endpt_1.xml
-      definition and update the address to
-      "http://localhost:9001/soap/SimpleStockQuoteService". After the cached
-      expires, the Registry loads the new definition of the endpoint, and then
-      the messages can be seen being routed to the second sample Axis2 server on
-      http port 9001.
-    </p>
-    <h2>
-      <a name="Sample11" id="Sample11">Sample 11: A full registry based
-      configuration, and sharing a configuration between multiple instances</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: A full registry based configuration</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 11: i.e. synapse -sample 11<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example shows a full registry based Synapse configuration. Thus it is
-      possible to start a remote configuration from multiple instances of
-      Synapse in a clustered environment easily. The Synapse configuration held
-      on a node hosting Synapse simply points to the registry and looks up the
-      actual configuration by requesting the key 'synapse.xml'.
-    </p>
-    <p>
-      (Note: Full registry based configuration is not dynamic atleast for the
-      moment. i.e. it is not reloading itself)
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO LogMediator - message = This is a dynamic Synapse configuration</pre>
-    <p>
-      The actual synapse.xml loaded is:
-    </p>
-<pre xml:space="preserve">&lt;!-- a registry based Synapse configuration --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;log level="custom"&gt;
-        &lt;property name="message" value="This is a dynamic Synapse configuration $$$"/&gt;
-    &lt;/log&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <h2>
-      <a name="Sample12" id="Sample12">Sample 12: One way messaging /
-      fireAndForget through synapse</a>
-    </h2>
-    <p>
-      <strong>Objective: Demonstrate one way messaging / fireAndForget
-      through synapse</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService (Refer steps above)<br/> Start
-      the Synapse configuration numbered 1: i.e. synapse -sample 1
-    </p>
-    <p>
-      This example invokes the one-way 'placeOrder' operation on the
-      SimpleStockQuoteService using the custom client which uses the Axis2
-      ServiceClient.fireAndForget() API. To test this, use 'ant
-      -Dmode=placeorder...' and you will notice the one way message flowing
-      through Synapse into the sample Axis2 server instance, which reports the
-      acceptance of the order as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=placeorder</pre>
-<pre xml:space="preserve">SimpleStockQuoteService :: Accepted order for : 7482 stocks of IBM at $ 169.27205579038733</pre>
-    <p>
-      If you send your client request through TCPmon, you will notice that the
-      SimpleStockQuoteService replies to Synapse with a HTTP 202 reply, and that
-      Synapse in-turn replies to the client with a HTTP 202 acknowledgement
-    </p>
-    <h1>
-      <a name="Endpoints" id="Endpoints">Advanced mediations with endpoints</a>
-    </h1>
-    <h2>
-      <a name="Sample50" id="Sample50">Sample 50: POX to SOAP conversion</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- filtering of messages with XPath and regex matches --&gt;
-    &lt;filter source="get-property('To')" regex=".*/StockQuote.*"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="soap11"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-        &lt;drop/&gt;
-    &lt;/filter&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: POX to SOAP conversion</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 50: i.e. synapse -sample 50
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p>
-      Execute the 'ant stockquote' specifying that the request should be a REST
-      request as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuote -Drest=true</pre>
-    <p>
-      This example shows a http REST request (as shown below) being transformed
-      into a SOAP request and forwarded to the stock quote service.
-    </p>
-<pre xml:space="preserve">POST /soap/StockQuote HTTP/1.1
-Content-Type: application/xml; charset=UTF-8;action="urn:getQuote";
-SOAPAction: urn:getQuote
-User-Agent: Axis2
-Host: 127.0.0.1
-Transfer-Encoding: chunked
-
-75
-&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-   &lt;m0:request&gt;
-      &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-   &lt;/m0:request&gt;
-&lt;/m0:getQuote&gt;0</pre>
-    <h2>
-      <a name="Sample51" id="Sample51">Sample 51: MTOM and SwA optimizations
-      and request/response correlation</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;filter source="get-property('Action')" regex="urn:uploadFileUsingMTOM"&gt;
-            &lt;property name="example" value="mtom"/&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="mtom"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/filter&gt;
-        &lt;filter source="get-property('Action')" regex="urn:uploadFileUsingSwA"&gt;
-            &lt;property name="example" value="swa"/&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="swa"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/filter&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;filter source="get-property('example')" regex="mtom"&gt;
-            &lt;property name="enableMTOM" value="true" scope="axis2"/&gt;
-        &lt;/filter&gt;
-        &lt;filter source="get-property('example')" regex="swa"&gt;
-            &lt;property name="enableSwA" value="true" scope="axis2"/&gt;
-        &lt;/filter&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: MTOM and SwA optimizations and request/response
-      correlation</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 51: i.e. synapse -sample 51<br/> Start the Axis2
-      server and deploy the MTOMSwASampleService if not already done
-    </p>
-    <p>
-      Execute the 'ant optimizeclient' specifying MTOM optimization as follows:
-    </p>
-<pre xml:space="preserve">ant optimizeclient -Dopt_mode=mtom</pre>
-    <p>
-      The configuration now sets a local message context property, and forwards
-      the message to 'http://localhost:9000/soap/MTOMSwASampleService'
-      optimizing binary content as MTOM. By sending this message through TCPMon
-      you would be able to see the actual message sent over the http transport
-      if required. Thus during response processing, by checking the local
-      message property Synapse could identify the past information about the
-      current message context, and uses this knowledge to transform the response
-      back to the client in the same format as the original request.
-    </p>
-    <p>
-      When the client executes successfully, it will upload a file containing
-      the ASF logo and receive its response back again and save it into a
-      temporary file.
-    </p>
-<pre xml:space="preserve">[java] Sending file : ./../../repository/conf/sample/resources/mtom/asf-logo.gif as MTOM</pre>
-<pre xml:space="preserve">[java] Saved response to file : /tmp/mtom-36877.gif</pre>
-    <p>
-      Next try SwA as:
-    </p>
-<pre xml:space="preserve">ant optimizeclient -Dopt_mode=swa</pre>
-<pre xml:space="preserve">[java] Sending file : ./../../repository/conf/sample/resources/mtom/asf-logo.gif as SwA
-[java] Saved response to file : /tmp/swa-47549.gif</pre>
-    <p>
-      By using TCPMon and sending the message through it, one can inspect that
-      the requests and responses sent are indeed MTOM optimized or sent as http
-      attachments as follows:
-    </p>
-<pre xml:space="preserve">POST http://localhost:9000/soap/MTOMSwASampleService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:uploadFileUsingMTOM
-Content-Type: multipart/related; boundary=MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353; type="application/xop+xml";
-start="&lt;0.urn:uuid:B94996494E1DD5F9B51177413845354@apache.org&gt;"; start-info="text/xml"; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353241
-Content-Type: application/xop+xml; charset=UTF-8; type="text/xml"
-Content-Transfer-Encoding: binary
-Content-ID:
-   &lt;0.urn:uuid:B94996494E1DD5F9B51177413845354@apache.org&gt;221b1
-      &lt;?xml version='1.0' encoding='UTF-8'?&gt;
-         &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-            &lt;soapenv:Body&gt;
-               &lt;m0:uploadFileUsingMTOM xmlns:m0="http://www.apache-synapse.org/test"&gt;
-                  &lt;m0:request&gt;
-                     &lt;m0:image&gt;
-                        &lt;xop:Include href="cid:1.urn:uuid:78F94BC50B68D76FB41177413845003@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include" /&gt;
-                     &lt;/m0:image&gt;
-                  &lt;/m0:request&gt;
-               &lt;/m0:uploadFileUsingMTOM&gt;
-            &lt;/soapenv:Body&gt;
-         &lt;/soapenv:Envelope&gt;
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353217
-Content-Type: image/gif
-Content-Transfer-Encoding: binary
-Content-ID:
-         &lt;1.urn:uuid:78F94BC50B68D76FB41177413845003@apache.org&gt;22800GIF89a... &lt;&lt; binary content &gt;&gt;</pre>
-<pre xml:space="preserve">POST http://localhost:9000/soap/MTOMSwASampleService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:uploadFileUsingSwA
-Content-Type: multipart/related; boundary=MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177414170491; type="text/xml";
-start="&lt;0.urn:uuid:B94996494E1DD5F9B51177414170492@apache.org&gt;"; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177414170491225
-Content-Type: text/xml; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-Content-ID:
-   &lt;0.urn:uuid:B94996494E1DD5F9B51177414170492@apache.org&gt;22159
-      &lt;?xml version='1.0' encoding='UTF-8'?&gt;
-         &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-            &lt;soapenv:Body&gt;
-               &lt;m0:uploadFileUsingSwA xmlns:m0="http://www.apache-synapse.org/test"&gt;
-                  &lt;m0:request&gt;
-                     &lt;m0:imageId&gt;urn:uuid:15FD2DA2584A32BF7C1177414169826&lt;/m0:imageId&gt;
-                  &lt;/m0:request&gt;
-               &lt;/m0:uploadFileUsingSwA&gt;
-            &lt;/soapenv:Body&gt;
-         &lt;/soapenv:Envelope&gt;22--34MIMEBoundaryurn_uuid_B94996494E1DD5F9B511774141704912
-17
-Content-Type: image/gif
-Content-Transfer-Encoding: binary
-Content-ID:
-         &lt;urn:uuid:15FD2DA2584A32BF7C1177414169826&gt;22800GIF89a... &lt;&lt; binary content &gt;&gt;</pre>
-    <h2>
-      <a name="Sample52" id="Sample52">Sample 52: Session less load balancing
-      between 3 endpoints</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the simple load balancing among set of
-      endpoints</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 52. (i.e. synapse -sample 52)
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService by switching to &lt;synapse
-      installation directory&gt;/samples/axis2Server/src/LoadbalanceFailoverService
-      directory and running ant.
-    </p>
-    <p>
-      Start three instances of sample Axis2 server on HTTP ports 9001, 9002 and
-      9003 and give some unique names to each server.
-    </p>
-    <p>
-      Example commands to run sample Axis2 servers from the &lt;synapse
-      installation directory&gt;/samples/axis2Server directory in Linux are
-      listed below:
-    </p>
-<pre xml:space="preserve">./axis2server.sh -http 9001 -https 9005 -name MyServer1
-./axis2server.sh -http 9002 -https 9006 -name MyServer2
-./axis2server.sh -http 9003 -https 9007 -name MyServer3</pre>
-    <p>
-      Now we are done with setting up the environment for load balance sample.
-      Start the load balance and failover client using the following command:
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Di=100</pre>
-    <p>
-      This client sends 100 requests to the LoadbalanceFailoverService through
-      Synapse. Synapse will distribute the load among the three endpoints
-      mentioned in the configuration in round-robin manner.
-      LoadbalanceFailoverService appends the name of the server to the response,
-      so that client can determine which server has processed the message. If
-      you examine the console output of the client, you can see that requests
-      are processed by three servers as follows:
-    </p>
-<pre xml:space="preserve">[java] Request: 1 ==&gt; Response from server: MyServer1
-[java] Request: 2 ==&gt; Response from server: MyServer2
-[java] Request: 3 ==&gt; Response from server: MyServer3
-[java] Request: 4 ==&gt; Response from server: MyServer1
-[java] Request: 5 ==&gt; Response from server: MyServer2
-[java] Request: 6 ==&gt; Response from server: MyServer3
-[java] Request: 7 ==&gt; Response from server: MyServer1
-...</pre>
-    <p>
-      Now run the client without the -Di=100 parameter to send infinite
-      requests. While running the client shutdown the server named MyServer1.
-      You can observe that requests are only distributed among MyServer2 and
-      MyServer3 after shutting down MyServer1. Console output before and after
-      shutting down MyServer1 is listed below (MyServer1 was shutdown after
-      request 63):
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 61 ==&gt; Response from server: MyServer1
-[java] Request: 62 ==&gt; Response from server: MyServer2
-[java] Request: 63 ==&gt; Response from server: MyServer3
-[java] Request: 64 ==&gt; Response from server: MyServer2
-[java] Request: 65 ==&gt; Response from server: MyServer3
-[java] Request: 66 ==&gt; Response from server: MyServer2
-[java] Request: 67 ==&gt; Response from server: MyServer3
-...</pre>
-    <p>
-      Now restart MyServer1. You can observe that requets will be again sent to
-      all three servers roughly after 60 seconds. This is because we have
-      specified &lt;suspendDurationOnFailure&gt; as 60 seconds in the
-      configuration. Therefore, load balance endpoint will suspend any failed
-      child endpoint only for 60 seconds after detecting the failure.
-    </p>
-    <h2>
-      <a name="Sample53" id="Sample53">Sample 53: Failover sending among 3
-      endpoints</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;failover&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/failover&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the failover sending</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 53 (i.e. synapse -sample 53)
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start three instances of sample
-      Axis2 server as mentioned in sample 52.
-    </p>
-    <p/>
-    <p>
-      Above configuration sends messages with the failover behavior. Initially
-      the server at port 9001 is treated as primary and other two are treated as
-      back ups. Messages are always directed only to the primary server. If the
-      primary server has failed, next listed server is selected as the primary.
-      Thus, messages are sent successfully as long as there is at least one
-      active server. To test this, run the loadbalancefailover client to send
-      infinite requests as follows:
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover</pre>
-    <p>
-      You can see that all requests are processed by MyServer1. Now shutdown
-      MyServer1 and inspect the console output of the client. You will observe
-      that all subsequent requests are processed by MyServer2.
-    </p>
-    <p>
-      The console output with MyServer1 shutdown after request 127 is listed
-      below:
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 125 ==&gt; Response from server: MyServer1
-[java] Request: 126 ==&gt; Response from server: MyServer1
-[java] Request: 127 ==&gt; Response from server: MyServer1
-[java] Request: 128 ==&gt; Response from server: MyServer2
-[java] Request: 129 ==&gt; Response from server: MyServer2
-[java] Request: 130 ==&gt; Response from server: MyServer2
-...</pre>
-    <p>
-      You can keep on shutting down servers like this. Client will get a
-      response till you shutdown all listed servers. Once all servers are
-      shutdown, the error sequence is activated and a fault message is sent to
-      the client as follows.
-    </p>
-<pre xml:space="preserve">[java] COULDN'T SEND THE MESSAGE TO THE SERVER.</pre>
-    <p>
-      Once a server is detected as failed, it will be added to the active
-      servers list again after 60 seconds (specified in &lt;suspendDurationOnFailure&gt;
-      in the configuration). Therefore, if you have restarted any of the stopped
-      servers and have shutdown all other servers, messages will be directed to
-      the newly started server.
-    </p>
-    <h2>
-      <a name="Sample54" id="Sample54">Sample 54: Session affinity load
-      balancing between 3 endpoints</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;!-- specify the session as the simple client session provided by Synapse for
-                    testing purpose --&gt;
-                    <strong>&lt;session type="simpleClientSession"/&gt;</strong>
-
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the load balancing with session affinity
-      using client initiated sessions</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 54 (i.e. synapse -sample 54).
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start three instances of the
-      sample Axis2 server as in sample 52.
-    </p>
-    <p/>
-    <p>
-      Above configuration is same as the load balancing configuration in sample
-      52, except that the session type is specified as "simpleClientSession".
-      This is a client initiated session, which means that the client generates
-      the session identifier and send it to with each request. In this sample
-      session type, client adds a SOAP header named ClientID containing the
-      identifier of the client. Synapse binds this ID with a server on the first
-      request and sends all seccessive requests containing that ID to the same
-      server. Now switch to samples/axis2Client directory and run the client
-      using the following command to check this in action.
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Dmode=session</pre>
-    <p>
-      In the session mode, client continuesly sends requests with three diferent
-      client (session) IDs. One ID is selected among these three IDs for each
-      request randomly. Then client prints the session ID with the responded
-      server for each request. Client output for the first 10 requests are shown
-      below.
-    </p>
-<pre xml:space="preserve">[java] Request: 1 Session number: 1 Response from server: MyServer3
-[java] Request: 2 Session number: 2 Response from server: MyServer2
-[java] Request: 3 Session number: 0 Response from server: MyServer1
-[java] Request: 4 Session number: 2 Response from server: MyServer2
-[java] Request: 5 Session number: 1 Response from server: MyServer3
-[java] Request: 6 Session number: 2 Response from server: MyServer2
-[java] Request: 7 Session number: 2 Response from server: MyServer2
-[java] Request: 8 Session number: 1 Response from server: MyServer3
-[java] Request: 9 Session number: 0 Response from server: MyServer1
-[java] Request: 10 Session number: 0 Response from server: MyServer1
-... </pre>
-    <p>
-      You can see that session number 0 is always directed to the server named
-      MyServer1. That means session number 0 is bound to MyServer1. Similarly
-      session 1 and 2 are bound to MyServer3 and MyServer2 respectively.
-    </p>
-    <h2>
-      <a name="Sample55" id="Sample55">Sample 55: Session affinity load
-      balancing between fail over endpoints</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;!-- specify the session as the simple client session provided by Synapse for
-                    testing purpose --&gt;
-                    <strong>&lt;session type="simpleClientSession"/&gt;</strong>
-
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;failover&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/failover&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;failover&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9004/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/failover&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the session affinity based load
-      balancing with failover capability</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 55 (i.e. synapse -sample 55).
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start four sample Axis2 servers
-      on http ports 9001, 9002, 9003 and 9004 respectively (make sure to specify
-      unconflicting https ports).
-    </p>
-    <p/>
-    <p>
-      This configuration also uses "simpleClientSession" to bind sessions as in
-      the previous sample. But failover endpoints are specified as the child
-      endpoints of the load balance endpoint. Therefore sessions are bound to
-      the failover endpoints. Session information has to be replicated among the
-      servers listed under each failover endpoint using some clustering
-      mechanism. Therefore, if one endpoint bound to a session failed,
-      successive requets for that session will be directed to the next endpoint
-      in that failover group. Run the client using the following command to
-      observe this behavoir.
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Dmode=session</pre>
-    <p>
-      You can see a client output as shown below.
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 222 Session number: 0 Response from server: MyServer1
-[java] Request: 223 Session number: 0 Response from server: MyServer1
-[java] Request: 224 Session number: 1 Response from server: MyServer1
-[java] Request: 225 Session number: 2 Response from server: MyServer3
-[java] Request: 226 Session number: 0 Response from server: MyServer1
-[java] Request: 227 Session number: 1 Response from server: MyServer1
-[java] Request: 228 Session number: 2 Response from server: MyServer3
-[java] Request: 229 Session number: 1 Response from server: MyServer1
-[java] Request: 230 Session number: 1 Response from server: MyServer1
-[java] Request: 231 Session number: 2 Response from server: MyServer3
-...</pre>
-    <p>
-      Note that session 0 is always directed to MyServer1 and session 1 is
-      directed to MyServer3. No requests are directed to MyServer2 and MyServer4
-      as they are kept as backups by failover endpoints. Now shutdown the server
-      named MyServer1 while running the sample. You will observer that all
-      successive requests for session 0 is now directed to MyServer2, which is
-      the backup server for MyServer1's group. This is shown below, where
-      MyServer1 was shutdown after the request 534.
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 529 Session number: 2 Response from server: MyServer3
-[java] Request: 530 Session number: 1 Response from server: MyServer1
-[java] Request: 531 Session number: 0 Response from server: MyServer1
-[java] Request: 532 Session number: 1 Response from server: MyServer1
-[java] Request: 533 Session number: 1 Response from server: MyServer1
-[java] Request: 534 Session number: 1 Response from server: MyServer1
-[java] Request: 535 Session number: 0 Response from server: MyServer2
-[java] Request: 536 Session number: 0 Response from server: MyServer2
-[java] Request: 537 Session number: 0 Response from server: MyServer2
-[java] Request: 538 Session number: 2 Response from server: MyServer3
-[java] Request: 539 Session number: 0 Response from server: MyServer2
-...</pre>
-    <h2>
-      <a name="Sample56" id="Sample56">Sample 56: WSDL endpoint</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;!-- get epr from the given wsdl --&gt;
-                &lt;endpoint&gt;
-                    &lt;wsdl uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl" service="SimpleStockQuoteService" port="SimpleStockQuoteServiceSOAP11port_http"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of WSDL endpoints</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 56 (i.e. synapse -sample 56).
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService and start the sample Axis2 server.
-    </p>
-    <p>
-      This sample uses a WSDL endpoint inside the send mediator. WSDL endpoints
-      can extract endpoint's address from the given WSDL. As WSDL documents can
-      have many services and many ports inside each service, the service and
-      port of the required endpoint has to be specified. As with address
-      endpoints, QoS parameters for the endpoint can be specified inline in the
-      configuration. An excerpt taken from the sample_proxy_1.wsdl containing
-      the specified service and port is listed below.
-    </p>
-<pre xml:space="preserve">&lt;wsdl:service name="SimpleStockQuoteService"&gt;
-    &lt;wsdl:port name="SimpleStockQuoteServiceSOAP11port_http"
-               binding="axis2:SimpleStockQuoteServiceSOAP11Binding"&gt;
-        &lt;soap:address location="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/wsdl:port&gt;
-    &lt;wsdl:port name="SimpleStockQuoteServiceSOAP12port_http"
-               binding="axis2:SimpleStockQuoteServiceSOAP12Binding"&gt;
-        &lt;soap12:address location="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/wsdl:port&gt;
-&lt;/wsdl:service&gt;</pre>
-    <p>
-      Specified service and port refers to the endpoint address
-      "http://localhost:9000/soap/SimpleStockQuoteService" according to the
-      above WSDL. Now run the client using the following command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-    <p>
-      Client will print the quote price for IBM received from the server running
-      on port 9000. Observe the Axis2 console and the Synapse console to verify
-      this behavior.
-    </p>
-    <h1>
-      <a name="MessageMediationQoS" id="MessageMediationQoS">Quality of
-      Service addition or deduction samples in message mediation</a>
-    </h1>
-    <h2>
-      <a name="Sample100" id="Sample100">Sample 100: Using WS-Security for
-      outgoing messages</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="sec_policy" src="file:repository/conf/sample/resources/policy/policy_3.xml"/&gt;
-
-    &lt;in&gt;
-        &lt;send&gt;
-            &lt;endpoint name="secure"&gt;
-                &lt;address uri="http://localhost:9000/soap/SecureStockQuoteService"&gt;
-                    &lt;enableSec policy="sec_policy"/&gt;
-                    &lt;enableAddressing/&gt;
-                &lt;/address&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;header name="wsse:Security" action="remove"
-                xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Connecting to endpoints with WS-Security for
-      outgoing messages</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/>
-    </p>
-    <p>
-      You may also need to download and install the unlimited strength policy
-      files for your JDK before using Apache Rampart (e.g. see
-      http://java.sun.com/javase/downloads/index_jdk5.jsp)
-    </p>
-    <p>
-      Start the Synapse configuration numbered 100: i.e. synapse -sample 100<br/>
-      Start the Axis2 server and deploy the SecureStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      Use the stock quote client to send a request without WS-Security. Synapse
-      is configured to enable WS-Security as per the policy specified by
-      'policy_3.xml' for the outgoing messages to the SecureStockQuoteService
-      endpoint hosted on the Axis2 instance. The debug log messages on Synapse
-      shows the encrypted message flowing to the service and the encrypted
-      response being received by Synapse. The wsse:Security header is then
-      removed from the decrypted message and the response is delivered back to
-      the client, as expected. You may execute the client as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-    <p>
-      The message sent by Synapse to the secure service can be seen as follows,
-      when TCPMon is used.
-    </p>
-<pre xml:space="preserve">POST http://localhost:9001/soap/SecureStockQuoteService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:getQuote
-Content-Type: text/xml; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
-800
-&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-   &lt;soapenv:Envelope xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:wsa="http://www.w3.org/2005/08/addressing" ..&gt;
-      &lt;soapenv:Header&gt;
-         &lt;wsse:Security ..&gt;
-            &lt;wsu:Timestamp ..&gt;
-               ...
-            &lt;/wsu:Timestamp&gt;
-            &lt;xenc:EncryptedKey..&gt;
-               ...
-            &lt;/xenc:EncryptedKey&gt;
-            &lt;wsse:BinarySecurityToken ...&gt;
-               &lt;ds:SignedInfo&gt;
-               ...
-               &lt;/ds:SignedInfo&gt;
-               &lt;ds:SignatureValue&gt;
-               ...
-               &lt;/ds:SignatureValue&gt;
-               &lt;ds:KeyInfo Id="KeyId-29551621"&gt;
-                  ...
-               &lt;/ds:KeyInfo&gt;
-            &lt;/ds:Signature&gt;
-         &lt;/wsse:Security&gt;
-         &lt;wsa:To&gt;http://localhost:9001/soap/SecureStockQuoteService&lt;/wsa:To&gt;
-         &lt;wsa:MessageID&gt;urn:uuid:1C4CE88B8A1A9C09D91177500753443&lt;/wsa:MessageID&gt;
-         &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-      &lt;/soapenv:Header&gt;
-      &lt;soapenv:Body xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="Id-3789605"&gt;
-         &lt;xenc:EncryptedData Id="EncDataId-3789605" Type="http://www.w3.org/2001/04/xmlenc#Content"&gt;
-            &lt;xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc" /&gt;
-            &lt;xenc:CipherData&gt;
-                &lt;xenc:CipherValue&gt;Layg0xQcnH....6UKm5nKU6Qqr&lt;/xenc:CipherValue&gt;
-            &lt;/xenc:CipherData&gt;
-         &lt;/xenc:EncryptedData&gt;
-      &lt;/soapenv:Body&gt;
-   &lt;/soapenv:Envelope&gt;0</pre>
-    <h2>
-      <a name="Sample101" id="Sample101">Sample 101: Reliable message
-      exchange between Synapse and the back-end server using
-      WS-ReliableMessaging</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;in&gt;
-        &lt;RMSequence single="true" version="1.0"/&gt;
-        &lt;send&gt;
-           &lt;endpoint name="reliable"&gt;
-              &lt;address uri="http://localhost:9000/soap/ReliableStockQuoteService"&gt;
-                 &lt;enableRM/&gt;
-                 &lt;enableAddressing/&gt;
-              &lt;/address&gt;
-           &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;header name="wsrm:SequenceAcknowledgement" action="remove"
-                xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-        &lt;header name="wsrm:Sequence" action="remove"
-                xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-
-&lt;/definitions&gt;</pre>
-    <strong>Objective: Demonstrate the message exchange between Synapse and
-    the server using WS-ReliableMessaging (WS-RM)</strong>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Deploy the ReliableStockQuoteService in the sample Axis2 server by
-      switching to the samples/axis2Server/src/ReliableStockQuoteService
-      directory and running ant.
-    </p>
-    <p>
-      Start the sample Axis2 server on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 101 (i.e. synapse -sample
-      101).
-    </p>
-    <p/>
-    <p>
-      In the above configuration, WS-RM is engaged to the endpoint using the
-      &lt;enableRM/&gt; tag. It is possible to engage WS-RM to both Address and
-      WSDL endpoints using this tag. In addition to the RM enabled endpoint,
-      RMSequence mediator is specified before the send mediator. This mediator
-      is used to specify the set of messages to be sent using a single RM
-      sequence. In this sample it is specified as single message per sequence.
-      It also specifies the version of the WS-RM to be used. Refer to the
-      Synapse configuration language documentation for more information about
-      the RMSequence mediator. RM related SOAP headers are removed form the
-      message in the out mediator as WS-RM message exchange happens only between
-      the Synapse and the server. Now run the sample client using the following
-      command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-    <p>
-      You can observer the client output displaying the quote price for IBM as
-      follows:
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $189.2521262517493</pre>
-    <p>
-      There is no difference to be observed between the normal message exchange
-      and WS-RM enabled message exchange as far as client and server outputs are
-      considered. But if you look at the wire level messages, you would observe
-      additional WS-RM messages and WS-RM elements. Synapse, the initiator of
-      the RM sequence, first try to create a sequence by sending a message with
-      CreateSequence element.
-    </p>
-<pre xml:space="preserve">...
-&lt;soapenv:Body&gt;
-   &lt;wsrm:CreateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-      &lt;wsrm:AcksTo&gt;
-         &lt;wsa:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/wsa:Address&gt;
-      &lt;/wsrm:AcksTo&gt;
-      &lt;wsrm:Offer&gt;
-         &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-      &lt;/wsrm:Offer&gt;
-   &lt;/wsrm:CreateSequence&gt;
-&lt;/soapenv:Body&gt;
-...</pre>
-    <p>
-      Sample Axis2 server responds to CreateSequence request with the following
-      message:
-    </p>
-<pre xml:space="preserve">...
-&lt;soapenv:Body&gt;
-   &lt;wsrm:CreateSequenceResponse xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-      &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-      &lt;wsrm:Accept&gt;
-         &lt;wsrm:AcksTo&gt;
-            &lt;wsa:Address&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:Address&gt;
-         &lt;/wsrm:AcksTo&gt;
-      &lt;/wsrm:Accept&gt;
-   &lt;/wsrm:CreateSequenceResponse&gt;
-&lt;/soapenv:Body&gt;
-...</pre>
-    <p>
-      Once the sequence is established, Synapse sends the request to the server
-      with the pre-negotiated sequence ID.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:To&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:To&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:DB9A5257B637DDA38B1179807372560712002-1515891720&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-        &lt;wsrm:Sequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                       soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
-            &lt;wsrm:LastMessage/&gt;
-        &lt;/wsrm:Sequence&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-            &lt;m0:request&gt;
-                &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-            &lt;/m0:request&gt;
-        &lt;/m0:getQuote&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Synapse keeps on sending above message till the server responds with a
-      valid response message with 200 OK HTTP header. If the server is not ready
-      with a response, it will respond with 202 Accepted HTTP header for all
-      requests. Once the server is ready with a response it will send the
-      response message with sequence ID as follows.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:879853A6871A66641C1179807373804&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://services.samples/ReliableStockQuoteServicePortType/getQuoteResponse
-        &lt;/wsa:Action&gt;
-        &lt;wsa:RelatesTo&gt;urn:uuid:DB9A5257B637DDA38B1179807372560712002-1515891720&lt;/wsa:RelatesTo&gt;
-        &lt;wsrm:Sequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                       soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
-            &lt;wsrm:LastMessage/&gt;
-        &lt;/wsrm:Sequence&gt;
-        &lt;wsrm:SequenceAcknowledgement xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                                      soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:AcknowledgementRange Lower="1" Upper="1"/&gt;
-        &lt;/wsrm:SequenceAcknowledgement&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-...</pre>
-    <p>
-      Now both Synapse and the server are done with the actual message exchange.
-      Then Synapse sends a request to terminate the sequence as follows:
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:To&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:To&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:546F6F33FB7D8BBE351179807379591&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence&lt;/wsa:Action&gt;
-        &lt;wsrm:SequenceAcknowledgement xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                                      soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:AcknowledgementRange Lower="1" Upper="1"/&gt;
-        &lt;/wsrm:SequenceAcknowledgement&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;wsrm:TerminateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-        &lt;/wsrm:TerminateSequence&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Server responds to the sequence termination message, accepting to
-      terminate the sequence as follows.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:ReplyTo&gt;
-            &lt;wsa:Address&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:Address&gt;
-        &lt;/wsa:ReplyTo&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:879853A6871A66641C1179807380190&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence&lt;/wsa:Action&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;wsrm:TerminateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-        &lt;/wsrm:TerminateSequence&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Note that although each of above messages are separate SOAP messages, in
-      most cases they will be exchanged in a single socket connection as HTTP
-      Keep-Alive header is used.
-    </p>
-    <h1>
-      <a name="ProxyServices" id="ProxyServices">Synapse Proxy service
-      samples</a>
-    </h1>
-    <h2>
-      <a name="Sample150" id="Sample150">Sample 150: Introduction to proxy
-      services</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to Synapse proxy services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 150: i.e. synapse -sample 150<br/> Start the
-      Axis2 server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p/>
-    <p>
-      Once Synapse starts, you could go to
-      http://localhost:8080/soap/StockQuoteProxy?wsdl and view the WSDL
-      generated for the proxy service defined in the configuration. This WSDL is
-      based on the source WSDL supplied in the proxy service definition, and is
-      updated to reflect the proxy service EPR.
-    </p>
-    <p>
-      Execute the stock quote client by requesting for a stock quote on the
-      proxy service as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy</pre>
-    <p>
-      An 'inSequence' or 'endpoint' or both of these would decide how the
-      message would be handled after the proxy service receives the message. In
-      the above example, the request received is forwarded to the sample service
-      hosted on Axis2. The 'outSequence' defines how the response is handled
-      before it is sent back to the client. By default, a proxy service is
-      exposed over all transports configured for Synapse, unless these are
-      specifically mentioned through the 'transports' attribute.
-    </p>
-    <h2>
-      <a name="Sample151" id="Sample151">Sample 151: Custom sequences and
-      endpoints with proxy services</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="proxy_1"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;&lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;&lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-    &lt;sequence name="out"&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-    &lt;endpoint name="proxy_2_endpoint"&gt;
-        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/endpoint&gt;
-    &lt;localEntry key="proxy_wsdl" src="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-
-    &lt;proxy name="StockQuoteProxy1"&gt;
-        &lt;publishWSDL key="proxy_wsdl"/&gt;
-        &lt;target inSequence="proxy_1" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-
-    &lt;proxy name="StockQuoteProxy2"&gt;
-        &lt;publishWSDL key="proxy_wsdl"/&gt;
-        &lt;target endpoint="proxy_2_endpoint" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Using custom sequences and endpoints for message
-      mediation with proxy services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 151: i.e. synapse -sample 151<br/> Start the
-      Axis2 server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p/>
-    <p>
-      This configuration creates two proxy services.. The first proxy service
-      'StockQuoteProxy1' uses the sequence named 'proxy_1' to process incoming
-      messages and the sequence named "out" to process outgoing responses. The
-      second proxy service 'StockQuoteProxy2' is set to directly forward
-      messages that are received to the endpoint named 'proxy_2_endpoint'
-      without any mediation.
-    </p>
-    <p>
-      You could send a stock quote request to each of these proxy services and
-      receive the reply generated by the actual service hosted on the Axis2
-      instance.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy1<br/>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy2</pre>
-    <h2>
-      <a name="Sample152" id="Sample152">Sample 152: Switching transports and
-      message format from SOAP to REST/POX</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy" transports="https"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="pox"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Switching transports and from SOAP to REST/POX</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 152: i.e. synapse -sample 152
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This configuration demonstrates how a proxy service could be exposed on a
-      subset of available transports, and how it could switch from one transport
-      to another. This example exposes the created proxy service only on https,
-      and thus if the user tries to access it over http, would result in a
-      fault.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy
-...
-     [java] org.apache.axis2.AxisFault: The service cannot be found for the endpoint reference (EPR) /soap/StockQuoteProxy</pre>
-    <p/>
-    <p>
-      Accessing this over https (ant stockquote
-      -Dtrpurl=https://localhost:8443/soap/StockQuoteProxy) causes the proxy
-      service to access the SimpleStockQuoteService on the sample Axis2 server
-      using REST/POX. This could be seen if the message exchange was captured
-      using TCPMon as follows. The REST/POX response is now transformed back
-      into a SOAP message and returned to the client.
-    </p>
-<pre xml:space="preserve">POST http://localhost:9000/soap/SimpleStockQuoteService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:getQuote
-Content-Type: application/xml; charset=UTF-8;action="urn:getQuote";
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
-75
-&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-   &lt;m0:request&gt;
-      &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-   &lt;/m0:request&gt;
-&lt;/m0:getQuote&gt;</pre>
-<pre xml:space="preserve">HTTP/1.1 200 OK
-Content-Type: application/xml; charset=UTF-8;action="http://services.samples/SimpleStockQuoteServicePortType/getQuoteResponse";
-Date: Tue, 24 Apr 2007 14:42:11 GMT
-Server: Synapse-HttpComponents-NIO
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-
-2b3
-&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-   &lt;ns:return&gt;
-      &lt;ns:change&gt;3.7730036841862384&lt;/ns:change&gt;
-      &lt;ns:earnings&gt;-9.950236235550818&lt;/ns:earnings&gt;
-      &lt;ns:high&gt;-80.23868444613285&lt;/ns:high&gt;
-      &lt;ns:last&gt;80.50750970812187&lt;/ns:last&gt;
-      &lt;ns:lastTradeTimestamp&gt;Tue Apr 24 20:42:11 LKT 2007&lt;/ns:lastTradeTimestamp&gt;
-      &lt;ns:low&gt;-79.67368355714606&lt;/ns:low&gt;
-      &lt;ns:marketCap&gt;4.502043663670823E7&lt;/ns:marketCap&gt;
-      &lt;ns:name&gt;IBM Company&lt;/ns:name&gt;
-      &lt;ns:open&gt;-80.02229531286982&lt;/ns:open&gt;
-      &lt;ns:peRatio&gt;25.089295161182022&lt;/ns:peRatio&gt;
-      &lt;ns:percentageChange&gt;4.28842665653824&lt;/ns:percentageChange&gt;
-      &lt;ns:prevClose&gt;87.98107059692451&lt;/ns:prevClose&gt;
-      &lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;
-      &lt;ns:volume&gt;19941&lt;/ns:volume&gt;
-   &lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;</pre>
-    <p/>
-    <h2>
-      <a name="Sample153" id="Sample153">Sample 153: Routing the messages
-      arrived to a proxy service without processing the security headers</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SecureStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Routing the messages arrived to a proxy service
-      without processing the MustUnderstand headers (Security header)</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> You may also need to
-      download and install the unlimited strength policy files for your JDK
-      before using Apache Rampart (e.g. see
-      http://java.sun.com/javase/downloads/index_jdk5.jsp)
-    </p>
-    <p>
-      Start the Synapse configuration numbered 153: i.e. synapse -sample 153<br/>
-      Start the Axis2 server and deploy the SecureStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      The proxy service will recieve secure messages with security headers which
-      are MustUnderstand. But hence element 'engageSec' is not present in the
-      proxy configuration synapse will not engage that Apache Rampart on this
-      proxy service. It is expected that an MustUnderstand failure exception on
-      the AxisEngine would occur before the message arrives Synapse. But Synapse
-      handles this message and gets it in by setting all the headers which are
-      MustUnderstand and not processed to processed state. This will enable
-      synapse to route the messages without reading the Security headers (just
-      routing the messages from client to service, both of which are secure). To
-      execute the client, send a stock quote request to the proxy service, and
-      sign and encrypt the request by specifying the client side security policy
-      as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy -Dpolicy=./../../repository/conf/sample/resources/policy/client_policy_3.xml</pre>
-    <p>
-      By following through the debug logs or TCPMon output, you could see that
-      the request received by the proxy service was signed and encrypted. Also,
-      looking up the WSDL of the proxy service by requesting the URL
-      http://localhost:8080/soap/StockQuoteProxy?wsdl reveals the security
-      policy attachments are not there and security is not engaged. When sending
-      the message to the backend service, you could verify that the security
-      headers were there as in the original message to synapse from client, and
-      that the response received does use WS-Security, and forwarded back to the
-      client without any modification. You should note that this wont be a
-      security hole because the message inside synapse is signed and encrypted
-      and can only be forwarded to a secure service to be useful.
-    </p>
-    <h1>
-      <a name="ProxyServiceQoS" id="ProxyServiceQoS">QoS addition and
-      deduction for service mediation (proxy) samples</a>
-    </h1>
-    <h2>
-      <a name="Sample200" id="Sample200">Sample 200: Using WS-Security with
-      policy attachments for proxy services</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="sec_policy" src="file:repository/conf/sample/resources/policy/policy_3.xml"/&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;header name="wsse:Security" action="remove"
-                        xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;policy key="sec_policy"/&gt;
-        &lt;enableSec/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Using WS-Security signing and encryption with proxy
-      services through WS-Policy</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> You may also need to
-      download and install the unlimited strength policy files for your JDK
-      before using Apache Rampart (e.g. see
-      http://java.sun.com/javase/downloads/index_jdk5.jsp)
-    </p>
-    <p>
-      Start the Synapse configuration numbered 200: i.e. synapse -sample 200<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      The proxy service expects to receive a signed and encrypted message as
-      specified by the security policy. Please see Apache Rampart and Axis2
-      documentation on the format of the policy file. The element 'engageSec'
-      specifies that Apache Rampart should be engaged on this proxy service.
-      Hence if Rampart rejects any request messages that does not conform to the
-      specified policy, those messages will never reach the 'inSequence' to be
-      processed. Since the proxy service is forwarding the received request to
-      the simple stock quote service that does not use WS-Security, we are
-      instructing Synapse to remove the wsse:Security header from the outgoing
-      message. To execute the client, send a stock quote request to the proxy
-      service, and sign and encrypt the request by specifying the client side
-      security policy as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy -Dpolicy=./../../repository/conf/sample/resources/policy/client_policy_3.xml</pre>
-    <p>
-      By following through the debug logs or TCPMon output, you could see that
-      the request received by the proxy service was signed and encrypted. Also,
-      looking up the WSDL of the proxy service by requesting the
-      URLhttp://localhost:8080/soap/StockQuoteProxy?wsdl reveals the security
-      policy attachment to the supplied base WSDL. When sending the message to
-      the backend service, you could verify that the security headers were
-      removed, and that the response received does not use WS-Security, but that
-      the response being forwarded back to the client is signed and encrypted as
-      expected by the client.
-    </p>
-    <h2>
-      <a name="Sample201" id="Sample201">Sample 201: Reliable message
-      exchange between the client and proxy services using WS-ReliableMessaging</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;header name="wsrm:SequenceAcknowledgement" action="remove"
-                        xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-                &lt;header name="wsrm:Sequence" action="remove"
-                        xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;enableRM/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <strong>Objective: Demonstrate the reliable message exchange between the
-    client and Synapse using WS-ReliableMessaging (WS-RM)</strong>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService in the sample Axis2 server and start it
-      on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration number 201 (i.e. synapse
-      -sample 201).
-    </p>
-    <p/>
-    <p>
-      In the above configuration, a proxy service is created with WS-RM enabled
-      using the &lt;enableRM/&gt; tag. Therefore, this proxy service is capable
-      of communicating with a WS-RM client. It also removes the WS-RM headers in
-      the In Sequence before the message is sent to the back end server. This is
-      required as the reliable messaging is applicable only between the client
-      and Synapse. Now start the client with WS-RM as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080/soap/StockQuoteProxy -Dwsrm=true</pre>
-    <p>
-      In this case, client sends WS-RM enabled request to Synapse where Synapse
-      sends normal request to the server. This can be observed by examining the
-      wire level messages between the client and Synapse. These messages would
-      be similar to the wire level messages shown in sample 53. Each message
-      would perform a similar function to the messages discussed in sample 53.
-    </p>
-    <p/>
-    <h1>
-      <a name="Transport" id="Transport">Transport samples and switching
-      transports</a>
-    </h1>
-    <h2>
-      <a name="Sample250" id="Sample250">Sample 250: Introduction to
-      switching transports - JMS to http/s</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="StockQuoteProxy" transports="jms"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to switching transports with proxy
-      services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService (Refer steps above)<br/>
-      Download, install and start a JMS server, and configure Synapse to listen
-      on JMS (refer notes below)<br/> Start the Synapse configuration
-      numbered 250: i.e. synapse -sample 250<br/> For this example we would
-      use ActiveMQ as the JMS provider. Once ActiveMQ is installed and started
-      you should get a message as follows:
-    </p>
-<pre xml:space="preserve">INFO BrokerService - ActiveMQ JMS Message Broker (localhost) started</pre>
-    <p>
-      You will now need to configure the Axis2 instance used by Synapse (not the
-      sample Axis2 server) to enable JMS support using the above provider. Refer
-      to the Axis2 documentation on setting up JMS for more details
-      (http://ws.apache.org/axis2/1_1/jms-transport.html). You will also need to
-      copy the ActiveMQ client jar files activeio-core-3.0-beta1.jar,
-      activemq-core-4.0-RC2.jar and geronimo-j2ee-management_1.0_spec-1.0.jar
-      into the lib directory to allow Synapse to connect to the JMS provider.
-    </p>
-    <p>
-      For a default ActiveMQ v4.0 installation, you may uncomment the Axis2
-      transport listener configuration found at repository/conf/axis2.xml as
-    </p>
-<pre xml:space="preserve">&lt;transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener"&gt; ...</pre>
-    <p>
-      Once you start the Synapse configuration and request for the WSDL of the
-      proxy service (http://localhost:8080/soap/StockQuoteProxy?wsdl) you will
-      notice that its exposed only on the JMS transport. This is because the
-      configuration specified this requirement in the proxy service definition.
-    </p>
-    <p>
-      Now lets send a stock quote request on JMS, using the dumb stock quote
-      client as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/StockQuoteProxy -Djms_payload=MSFT</pre>
-    <p>
-      On the Synapse debug log you will notice that the JMS listener received
-      the request message as:
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver -Proxy Service StockQuoteProxy received a new message...</pre>
-    <p>
-      Now if you examine the console running the sample Axis2 server, you will
-      see a message indicating that the server has accepted an order as follows:
-    </p>
-<pre xml:space="preserve">Accepted order for : 16517 stocks of MSFT at $ 169.14622538721846</pre>
-    <p>
-      In this sample, client sends the request message to the proxy service
-      exposed in JMS in Synsape. Synapse forwards this message to the HTTP EPR
-      of the simple stock quote service hosted on the sample Axis2 server, and
-      returns the reply back to the client through a JMS temporary queue.
-    </p>
-    <p>
-      Note: It is possible to instruct a JMS proxy service to listen to an
-      already existing destination without creating a new one. To do this, use
-      the property elements on the proxy service definition to specify the
-      destination and connection factory etc.
-    </p>
-    <p>
-      e.g.
-    </p>
-<pre xml:space="preserve">&lt;property name="transport.jms.Destination" value="dynamicTopics/something.TestTopic"/&gt;</pre>
-    <h2>
-      <a name="Sample251" id="Sample251">Sample 251: Switching from http/s to
-      JMS</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="StockQuoteProxy" transports="http"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;amp;
-                   java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;amp;java.naming.provider.url=tcp://localhost:61616"/&gt;
-            &lt;/endpoint&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate switching from HTTP to JMS</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Download, install and
-      start a JMS server
-    </p>
-    <p>
-      Configure sample Axis2 server for JMS (refer notes above)<br/> Start
-      the Axis2 server and deploy the SimpleStockQuoteService (see below)<br/>
-      Configure the Synase JMS transport (refer notes above - sample 250)<br/>
-      Start the Synapse configuration numbered 251: i.e. synapse -sample 251
-    </p>
-    <p>
-      To switch from HTTP to JMS, edit the
-      samples/axis2Server/repository/conf/axis2.xml for the sample Axis2 server
-      and enable JMS (refer notes above), and restart the server. Now you can
-      see that the simple stock quote service is available in both JMS and HTTP
-      in the sample Axis2 server. To see this, point your browser to the WSDL of
-      the service at http://localhost:9000/soap/SimpleStockQuoteService?wsdl.
-      JMS URL for the service is mentioned as below:
-    </p>
-<pre xml:space="preserve">jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=
-QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;
-java.naming.provider.url=tcp://localhost:61616</pre>
-    <p>
-      You may also notice that the simple stock quote proxy service exposed in
-      Synapse is now available only in HTTP as we have specified transport for
-      that service as HTTP. To observe this, access the WSDL of stock quote
-      proxy service at http://localhost:8080/soap/StockQuoteProxy?wsdl.
-    </p>
-    <p>
-      This Synapse configuration creates a proxy service over HTTP and forwards
-      received messages to the above EPR using JMS, and sends back the response
-      to the client over HTTP once the simple stock quote service responds with
-      the stock quote reply over JMS to the Synapse server. To test this, send a
-      place order request to Synapse using HTTP as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy -Dmode=placeorder -Dsymbol=MSFT</pre>
-    <p>
-      The sample Axis2 server console will print a message indicating that it
-      has accepted the order as follows:
-    </p>
-<pre xml:space="preserve">Accepted order for : 18406 stocks of MSFT at $ 83.58806051152119</pre>
-    <h2>
-      <a name="Sample252" id="Sample252">Sample 252: Pure text/binary and POX
-      message support with JMS</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="text_proxy"&gt;
-        &lt;header name="Action" value="urn:placeOrder"/&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-            var args = mc.getPayloadXML().toString().split(" ");
-            mc.setPayloadXML(
-            &lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-                &lt;m:order&gt;
-                    &lt;m:price&gt;{args[0]}&lt;/m:price&gt;
-                    &lt;m:quantity&gt;{args[1]}&lt;/m:quantity&gt;
-                    &lt;m:symbol&gt;{args[2]}&lt;/m:symbol&gt;
-                &lt;/m:order&gt;
-            &lt;/m:placeOrder&gt;);
-        ]]&gt;&lt;/script&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="mtom_proxy"&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;header name="Action" value="urn:oneWayUploadUsingMTOM"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="mtom"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="pox_proxy"&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;header name="Action" value="urn:placeOrder"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="soap11"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="out"&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;proxy name="JMSFileUploadProxy" transports="jms"&gt;
-        &lt;target inSequence="mtom_proxy" outSequence="out"/&gt;
-        &lt;parameter name="transport.jms.Wrapper"&gt;{http://services.samples/xsd}element&lt;/parameter&gt;
-    &lt;/proxy&gt;
-    &lt;proxy name="JMSTextProxy" transports="jms"&gt;
-        &lt;target inSequence="text_proxy" outSequence="out"/&gt;
-        &lt;parameter name="transport.jms.Wrapper"&gt;{http://services.samples/xsd}text&lt;/parameter&gt;
-    &lt;/proxy&gt;
-    &lt;proxy name="JMSPoxProxy" transports="jms"&gt;
-        &lt;target inSequence="pox_proxy" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Pure POX/Text and Binary JMS Proxy services -
-      including MTOM</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Configure JMS for Synapse
-      (Refer notes)<br/> Start the Synapse configuration numbered 252: i.e.
-      synapse -sample 252<br/> Start the Axis2 server and deploy the
-      SimpleStockQuoteService and the MTOMSwASampleService if not already done
-    </p>
-    <p/>
-    <p>
-      This configuration creates three JMS proxy services named
-      JMSFileUploadProxy, JMSTextProxy and JMSPoxProxy exposed over JMS queues
-      with the same names as the services. The first part of this example
-      demonstrates the pure text message support with JMS, where a user sends a
-      space separated text JMS message of the form "&lt;price&gt; &lt;qty&gt;
-      &lt;symbol&gt;". Synapse converts this message into a SOAP message and
-      sends this to the SimpleStockQuoteServices' placeOrder operation. Synapse
-      uses the script mediator to transform the text message into a XML payload
-      using the Javascript support available to tokenize the string. The proxy
-      service property named "transport.jms.Wrapper" defines a custom wrapper
-      element QName, to be used when wrapping text/binary content into a SOAP
-      envelope.
-    </p>
-    <p/>
-    <p>
-      Execute JMS client as follows. This will post a pure text JMS message with
-      the content defined (e.g. "12.33 1000 ACP") to the specified JMS
-      destination - dynamicQueues/JMSTextProxy
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=text -Djms_payload="12.33 1000 ACP" -Djms_dest=dynamicQueues/JMSTextProxy</pre>
-    <p>
-      Following the debug logs, you could notice that Synapse received the JMS
-      text message and transformed it into a SOAP payload as follows. Notice
-      that the wrapper element "{http://services.samples/xsd}text" has been used
-      to hold the text message content.
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-  &lt;soapenv:Body&gt;&lt;axis2ns1:text xmlns:axis2ns1="http://services.samples/xsd"&gt;12.33 1000 ACP&lt;/axis2ns1:text&gt;&lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Now, you could see how the script mediator created a stock quote request
-      by tokenizing the text as follows, and sent the message to the placeOrder
-      operation of the SimpleStockQuoteService.
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG AddressEndpoint - Sending message to endpoint :: name = AnonymousEndpoints resolved address = http://localhost:9000/soap/SimpleStockQuoteService
-[JMSWorker-1] DEBUG AddressEndpoint - SOAPAction: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - WSA-Action: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;
-  &lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;&lt;m:order&gt;&lt;m:price&gt;12.33&lt;/m:price&gt;&lt;m:quantity&gt;1000&lt;/m:quantity&gt;&lt;m:symbol&gt;ACP&lt;/m:symbol&gt;&lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      The sample Axis2 server would now accept the one way message and issue the
-      following message:
-    </p>
-<pre xml:space="preserve">Wed Apr 25 19:50:56 LKT 2007 samples.services.SimpleStockQuoteService :: Accepted order for : 1000 stocks of ACP at $ 12.33</pre>
-    <p/>
-    <p>
-      The next section of this example demonstrates how a pure binary JMS
-      message could be received and processed through Synapse. The configuration
-      creates a proxy service named 'JMSFileUploadProxy' that accepts binary
-      messages and wraps them into a custom element
-      '{http://services.samples/xsd}element'. The received message is then
-      forwarded to the MTOMSwASampleService using the SOAP action
-      'urn:oneWayUploadUsingMTOM' and optimizing binary conent using MTOM. To
-      execute this sample, use the JMS client to publish a pure binary JMS
-      message containing the file
-      './../../repository/conf/sample/resources/mtom/asf-logo.gif' to the JMS
-      destination 'dynamicQueues/JMSFileUploadProxy' as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=binary -Djms_dest=dynamicQueues/JMSFileUploadProxy -Djms_payload=./../../repository/conf/sample/resources/mtom/asf-logo.gif</pre>
-    <p>
-      Examining the Synapse debug logs reveals that the binary content was
-      received over JMS and wrapped with the specified element into a SOAP
-      infoset as follows:
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Proxy Service JMSFileUploadProxy received a new message...
-...
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-&lt;soapenv:Body&gt;&lt;axis2ns1:element xmlns:axis2ns1="http://services.samples/xsd"&gt;R0lGODlhgw...AAOw==&lt;/axis2ns1:element&gt;&lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Thereafter the message was sent as a MTOM optimized message as specified
-      by the 'format=mtom' attribute of the endpoint, to the
-      MTOMSwASampleService using the SOAP action 'urn:oneWayUploadUsingMTOM'.
-      Once received by the sample service, it is saved into a temporary file and
-      could be verified for correctness.
-    </p>
-<pre xml:space="preserve">Wrote to file : /tmp/mtom-60319.gif</pre>
-    <p/>
-    <p>
-      The final section of this example shows how a POX JMS message received by
-      Synapse is sent to the SimpleStockQuoteService as a SOAP message. Use the
-      JMS client as follows to create a POX (Plain Old XML) message with a stock
-      quote request payload (without a SOAP envelope), and send it to the JMS
-      destination 'dynamicQueues/JMSPoxProxy' as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/JMSPoxProxy -Djms_payload=MSFT</pre>
-    <p>
-      You can see that Synapse received the POX message and displays it as
-      follows in the debug logs, and then converts it into a SOAP payload and
-      sends to the SimpleStockQuoteService after setting the SOAP action as
-      'urn:placeOrder'.
-    </p>
-    <p/>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Proxy Service JMSPoxProxy received a new message...
-...
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-    &lt;m:order&gt;
-        &lt;m:price&gt;172.39703010684752&lt;/m:price&gt;
-        &lt;m:quantity&gt;19211&lt;/m:quantity&gt;
-        &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-    &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Using the sequence named pox_proxy for message mediation
-...
-[JMSWorker-1] DEBUG HeaderMediator - Setting header : Action to : urn:placeOrder
-...
-[JMSWorker-1] DEBUG AddressEndpoint - Sending message to endpoint :: name = AnonymousEndpoints resolved address = http://localhost:9000/soap/SimpleStockQuoteService
-[JMSWorker-1] DEBUG AddressEndpoint - SOAPAction: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-    &lt;m:order&gt;
-        &lt;m:price&gt;172.39703010684752&lt;/m:price&gt;
-        &lt;m:quantity&gt;19211&lt;/m:quantity&gt;
-        &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-    &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[JMSWorker-1] DEBUG Axis2FlexibleMEPClient - sending [add = false] [sec = false] [rm = false] [ mtom = false] [ swa = false] [ force soap=true; pox=false] [ to null] </pre>
-    <p>
-      The sample Axis2 server displays a successful message on the receipt of
-      the message as:
-    </p>
-<pre xml:space="preserve">Wed Apr 25 20:24:50 LKT 2007 samples.services.SimpleStockQuoteService :: Accepted order for : 19211 stocks of MSFT at $ 172.39703010684752</pre>
-    <h2>
-      <a name="Sample253" id="Sample253">Sample 253: One way bridging from
-      JMS to http and replying with a 202 Accepted response</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="JMStoHTTPStockQuoteProxy" transports="jms"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-    &lt;proxy name="OneWayProxy" transports="http"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;log level="full"/&gt;
-                &lt;property name="RESPONSE" value="true"/&gt;
-                &lt;header name="To" value="http://www.w3.org/2005/08/addressing/anonymous"/&gt;
-                &lt;property name="SC_ACCEPTED" value="true" scope="axis2"/&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-                &lt;send/&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate one way message bridging from JMS to
-      http and replying with a http 202 Accepted response</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      Start the Synapse configuration numbered 253: i.e. synapse -sample 253
-    </p>
-    <p/>
-    <p>
-      This example invokes the one-way 'placeOrder' operation on the
-      SimpleStockQuoteService using the Axis2 ServiceClient.fireAndForget() API
-      at the client. To test this, use 'ant -Dmode=placeorder...' and you will
-      notice the one way JMS message flowing through Synapse into the sample
-      Axis2 server instance over http, and Axis2 acknowledging it with a http
-      202 Accepted response.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dmode=placeorder -Dtrpurl="jms:/JMStoHTTPStockQuoteProxy?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61616"</pre>
-<pre xml:space="preserve">SimpleStockQuoteService :: Accepted order for : 7482 stocks of IBM at $ 169.27205579038733</pre>
-    <p>
-      The second example shows how Synapse could be made to respond with a http
-      202 Accepted response to a request received. The proxy service simply logs
-      the message received and acknowledges it. On the Synapse console you could
-      see the logged message, and if TCPMon was used at the client, you would
-      see the 202 Accepted response sent back to the client from Synapse
-    </p>
-<pre xml:space="preserve">ant stockquote -Dmode=placeorder -Dtrpurl=http://localhost:8080/soap/OneWayProxy</pre>
-<pre xml:space="preserve">HTTP/1.1 202 Accepted
-Content-Type: text/xml; charset=UTF-8
-Host: 127.0.0.1
-SOAPAction: "urn:placeOrder"
-Date: Sun, 06 May 2007 17:20:19 GMT
-Server: Synapse-HttpComponents-NIO
-Transfer-Encoding: chunked
-
-0</pre>
-    <h2>
-      <a name="Sample254" id="Sample254">Sample 254: Using the file system as
-      transport medium using VFS transport listener and sender</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-        &lt;proxy name="StockQuoteProxy" transports="vfs"&gt;
-                &lt;parameter name="transport.vfs.FileURI"&gt;file:///home/user/test/in&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ContentType"&gt;text/xml&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.FileNamePattern"&gt;.*\.xml&lt;/parameter&gt;
-                &lt;parameter name="transport.PollInterval"&gt;15&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.MoveAfterProcess"&gt;file:///home/user/test/original&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.MoveAfterFailure"&gt;file:///home/user/test/original&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ActionAfterProcess"&gt;MOVE&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.ActionAfterFailure"&gt;MOVE&lt;/parameter&gt;
-
-                &lt;target&gt;
-                        &lt;endpoint&gt;
-                                &lt;address format="soap12" uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                        &lt;outSequence&gt;
-                                &lt;property name="transport.vfs.ReplyFileName"
-                                          expression="fn:concat(fn:substring-after(get-property('MessageID'), 'urn:uuid:'), '.xml')" scope="transport"/&gt;
-                                &lt;send&gt;
-                                        &lt;endpoint&gt;
-                                                &lt;address uri="vfs:file:///home/user/test/out"/&gt; &lt;!--CHANGE--&gt;
-                                        &lt;/endpoint&gt;
-                                &lt;/send&gt;
-                        &lt;/outSequence&gt;
-                &lt;/target&gt;
-                &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Using the file system as transport medium using VFS
-      transport listener and sender</strong>
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p>
-      Create three new directories in a test directory. e.g. in, out, original
-      in /home/user/test. Open
-      SYNAPSE_HOME/repository/conf/sample/synapse_sample_115.xml and edit the
-      following values. Change transport.vfs.FileURI,
-      transport.vfs.MoveAfterProcess, transport.vfs.MoveAfterFailure parameter
-      values to the above in, original, original directories respectively.
-      Change outSequence endpoint address uri to out directory with the prefeix
-      <em>vfs:</em>. Values you have to change are marked with &lt;!--CHANGE--&gt;.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 254: i.e. synapse -sample 254
-    </p>
-    <p>
-      Copy SYNAPSE_HOME/repository/conf/sample/resources/vfs/test.xml to the
-      directory given in transport.vfs.FileURI above.
-    </p>
-    <p>
-      test.xml file content is as follows
-    </p>
-<pre xml:space="preserve">&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-        &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
-        &lt;soapenv:Body&gt;
-                &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-                        &lt;m0:request&gt;
-                                &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-                        &lt;/m0:request&gt;
-                &lt;/m0:getQuote&gt;
-        &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      VFS transport listener will pick the file from <em>in</em>
-      directory and send it to the Axis2 service. The request XML file will be
-      moved to <em>original</em> directory. The response from the Axis2
-      server will be saved to <em>out</em> directory.
-    </p>
-    <h2>
-      <a name="Sample255" id="Sample255">Sample 255: Switching from ftp
-      transport listener to mail transport sender</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-        &lt;proxy name="StockQuoteProxy" transports="vfs"&gt;
-                &lt;parameter name="transport.vfs.FileURI"&gt;vfs:ftp://guest:guest@localhost/test?vfs.passive=true&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ContentType"&gt;text/xml&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.FileNamePattern"&gt;.*\.xml&lt;/parameter&gt;
-                &lt;parameter name="transport.PollInterval"&gt;15&lt;/parameter&gt;
-
-                &lt;target&gt;
-                        &lt;inSequence&gt;
-                                &lt;header name="Action" value="urn:getQuote"/&gt;
-                        &lt;/inSequence&gt;
-                        &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                        &lt;outSequence&gt;
-                                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-                                &lt;send&gt;
-                                        &lt;endpoint&gt;
-                                                &lt;address uri="mailto:user@host"/&gt; &lt;!--CHANGE--&gt;
-                                        &lt;/endpoint&gt;
-                                &lt;/send&gt;
-                        &lt;/outSequence&gt;
-                &lt;/target&gt;
-                &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Switching from ftp transport listener to mail
-      transport sender</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> You will need access to
-      an FTP server and an SMTP server to try this sample.
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p>
-      Enable mail transport sender in the Synapse axis2.xml. See <a
-      href="Synapse_Samples_Setup.html#mailsender">Setting up mail transport
-      sender</a>
-    </p>
-    <p>
-      Create a new test directory in the FTP server. Open
-      SYNAPSE_HOME/repository/conf/sample/synapse_sample_116.xml and edit the
-      following values. Change transport.vfs.FileURI parameter value point to
-      the test directory at the FTP server. Change outSequence endpoint address
-      uri email address to a working email address. Values you have to change
-      are marked with &lt;!--CHANGE--&gt;.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 255: i.e. synapse -sample 255
-    </p>
-    <p>
-      Copy SYNAPSE_HOME/repository/conf/sample/resources/vfs/test.xml to the ftp
-      directory given in transport.vfs.FileURI above.
-    </p>
-    <p>
-      VFS transport listener will pick the file from the directory in the ftp
-      server and send it to the Axis2 service. The file in the ftp directory
-      will be deleted. The response will be sent to the given email address.
-    </p>
-    <h1>
-      <a name="Task" id="Task">Introduction to synapse tasks</a>
-    </h1>
-    <h2>
-      <a name="Sample300" id="Sample300">Sample 300: Introduction to tasks
-      with simple trigger</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;task class="org.apache.synapse.startup.tasks.MessageInjector" name="CheckPrice"&gt;
-        &lt;property name="to" value="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-        &lt;property name="soapAction" value="urn:getQuote"/&gt;
-        &lt;property name="message"&gt;
-            &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;m0:request&gt;
-                    &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-                &lt;/m0:request&gt;
-            &lt;/m0:getQuote&gt;
-        &lt;/property&gt;
-        &lt;trigger interval="5000"/&gt;
-    &lt;/task&gt;
-
-    &lt;in&gt;
-        &lt;send/&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="Stock Quote on" expression="//ns:return/ns:lastTradeTimestamp/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-            &lt;property name="For the organization" expression="//ns:return/ns:name/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-            &lt;property name="Last Value" expression="//ns:return/ns:last/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-        &lt;/log&gt;
-    &lt;/out&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduce the concept of tasks and how simple
-      trigger works</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> You will need access to
-      build the SimpleStockQuoteService as mentioned in the above and start the
-      sample axis2 server before staring synapse.
-    </p>
-    <p>
-      When ever synapse gets started and initialized, this task will run
-      periodically in 5 second intervals. You could limit the number of times
-      that you want to run this task by adding a count attribute with an integer
-      as the value, if the count is not present as in this sample this task will
-      run forever.
-    </p>
-    <p>
-      One can write his own task class implementing the
-      org.apache.synapse.startup.Task interface and implementing the execute
-      method to do the task. For this particular sample we have used the
-      MessageInjector which just injects a message specified in to the synapse
-      environment.
-    </p>
-    <h1>
-      <a name="AdvancedMediation" id="AdvancedMediation">Advanced mediations
-      with advanced mediators</a>
-    </h1>
-    <h2>
-      <a name="ScriptMediator" id="ScriptMediator">Using scripts in mediation
-      (Script Mediator)</a>
-    </h2>
-    <p>
-      The Synapse Script Mediator is a Synapse extension, and thus all
-      prerequisites are not bundled by default with the Synapse distribution.
-      Before you use some script mediators you may need to manually add the
-      required jar files to the Synapse lib directory, and optionally perform
-      other installation tasks as may be required by the individual scripting
-      language. This is explained in the <a
-      href="Synapse_Samples_Setup.html#script">Samples Setup guide</a>.
-    </p>
-    <h2>
-      <a name="Sample350" id="Sample350">Sample 350: Introduction to the
-      script mediator using js scripts</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="stockquoteScript" src="file:repository/conf/sample/resources/script/stockquoteTransform.js"/&gt;
-
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote request expected by the service --&gt;
-        &lt;script language="js" key="stockquoteScript" function="transformRequest"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="js" key="stockquoteScript" function="transformResponse"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p/>
-<pre xml:space="preserve">&lt;x&gt;&lt;![CDATA[
-  function transformRequest(mc) {
-     var symbol = mc.getPayloadXML()..*::Code.toString();
-     mc.setPayloadXML(
-        &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-           &lt;m:request&gt;
-              &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
-           &lt;/m:request&gt;
-        &lt;/m:getQuote&gt;);
-  }
-
-  function transformResponse(mc) {
-     var symbol = mc.getPayloadXML()..*::symbol.toString();
-     var price = mc.getPayloadXML()..*::last.toString();
-     mc.setPayloadXML(
-        &lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;
-   &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
-   &lt;m:Price&gt;{price}&lt;/m:Price&gt;
-        &lt;/m:CheckPriceResponse&gt;);
-  }
-]]&gt;&lt;/x&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to script mediators</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 350: i.e. synapse -sample 350<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This sample is similar to sample 8 but instead of using XSLT the
-      transformation is done with JavaScript and E4X. Note that the script
-      source loaded from a resource must be specified within a CDATA tag within
-      an XML element. The script used in this example has two functions,
-      'transformRequest' and 'transformResponse', and the Synapse configuration
-      uses the function attribute to specify which function should be invoked.
-      Use the stock quote client to issue a custom quote client as follows.:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=customquote</pre>
-    <p>
-      Synapse uses the script mediator and the specified Javascript function to
-      convert the custom request to a standard quote request. Subsequently the
-      response received is transformed and sent back to the client.
-    </p>
-    <h2>
-      <a name="Sample351" id="Sample351">Sample 351: In-line script mediation
-      with JavaScript</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote requst expected by the service --&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-               var symbol = mc.getPayloadXML()..*::Code.toString();
-               mc.setPayloadXML(
-                  &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-                     &lt;m:request&gt;
-                        &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
-                     &lt;/m:request&gt;
-                  &lt;/m:getQuote&gt;);
-        ]]&gt;&lt;/script&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-               var symbol = mc.getPayloadXML()..*::symbol.toString();
-               var price = mc.getPayloadXML()..*::last.toString();
-               mc.setPayloadXML(
-                  &lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;
-               &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
-               &lt;m:Price&gt;{price}&lt;/m:Price&gt;
-                  &lt;/m:CheckPriceResponse&gt;);
-            ]]&gt;&lt;/script&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to in-line script mediation</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 351: i.e. synapse -sample 351<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This example is functionally equivalent to sample # 350 and sample # 8,
-      and demonstrates in-line script mediation in Synapse. Use the stock quote
-      client to send a custom quote as in example # 500 to test this example.
-    </p>
-    <p/>
-    <h2>
-      <a name="Sample352" id="Sample352">Sample 352: Accessing Synapse
-      message context API methods using scripting language</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-       &lt;!-- change the MessageContext into a response and set a response payload --&gt;
-       &lt;script language="js"&gt;&lt;![CDATA[
-          mc.setTo(mc.getReplyTo());
-          mc.setProperty("RESPONSE", "true");
-          mc.setPayloadXML(
-             &lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-                &lt;ns:return&gt;
-                   &lt;ns:last&gt;99.9&lt;/ns:last&gt;
-                &lt;/ns:return&gt;
-             &lt;/ns:getQuoteResponse&gt;);
-       ]]&gt;&lt;/script&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Accessing the Synapse APIs from scripting languages</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 352: i.e. bin/synapse -sample 352<br/>
-    </p>
-    <p/>
-    <p>
-      This example shows how an inline JavaScript mediator script could access
-      the Synapse message context API to set its 'To' EPR and to set a custom
-      property to mark it as a response. Execute the stock quote client, and you
-      will receive the response "99.9" as the last sale price as per the above
-      script.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/
-...
-stockquote:
-     [java] Standard :: Stock price = $99.9</pre>
-    <h2>
-      <a name="Sample353" id="Sample353">Sample 353: Using Ruby scripts for
-      mediation</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;localEntry key="stockquoteScript" src="file:repository/conf/sample/resources/script/stockquoteTransform.rb"/&gt;
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote request expected by the service --&gt;
-        &lt;script language="rb" key="stockquoteScript" function="transformRequest"/&gt;
-
-        &lt;!-- send message to real endpoint referenced by name "stockquote" and stop --&gt;
-        &lt;send&gt;
-            &lt;endpoint name="stockquote"&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="rb" key="stockquoteScript" function="transformResponse"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-<pre xml:space="preserve">&lt;x&gt;&lt;![CDATA[
-require 'rexml/document'
-include REXML
-
-def transformRequest(mc)
-   newRequest= Document.new '&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;'&lt;&lt;
-      '&lt;m:request&gt;&lt;m:symbol&gt;&lt;/m:symbol&gt;&lt;/m:request&gt;&lt;/m:getQuote&gt;'
-   newRequest.root.elements[1].elements[1].text = mc.getPayloadXML().root.elements[1].get_text
-   mc.setPayloadXML(newRequest)
-end
-
-def transformResponse(mc)
-   newResponse = Document.new '&lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;&lt;m:Code&gt;' &lt;&lt;
-      '&lt;/m:Code&gt;&lt;m:Price&gt;&lt;/m:Price&gt;&lt;/m:CheckPriceResponse&gt;'
-   newResponse.root.elements[1].text = mc.getPayloadXML().root.elements[1].elements[1].get_text
-   newResponse.root.elements[2].text = mc.getPayloadXML().root.elements[1].elements[2].get_text
-   mc.setPayloadXML(newResponse)
-end
-]]&gt;&lt;/x&gt;</pre>
-    <p>
-      <strong>Objective: Script mediators using Ruby</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      This sample uses Ruby so first setup support for this in Synapse as
-      described at <a href="Synapse_Samples_Setup.html#script">Configuring
-      JRuby</a>.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 353: i.e. bin/synapse -sample 353<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This sample is functionally equivalent to sample # 500 (#501 and #8) but
-      instead uses a Ruby script using the JRuby interpreter. The script has two
-      functions, 'transformRequest' and 'transformResponse', and the Synapse
-      configuration specifies which function is to be invoked when used. Execute
-      the stock quote client to send a custom stock quote as per example #500
-      and check the received stock quote response.
-    </p>
-    <h2>
-      <a name="DBMediators" id="DBMediators">Database interactions in
-      mediation (DBLookup / DBReport)</a>
-    </h2>
-    <p>
-      Following database mediators use Derby in a client/server configuration by
-      using the network server. Therefore, to proceed with the following
-      samples, you need a working Derby database server and you have to follow
-      the steps in <a href="Synapse_Samples_Setup.html#derby">Sample Setup
-      Guide</a> before going through the samples.
-    </p>
-    <p/>
-    <h2>
-      <a name="Sample360" id="Sample360">Sample 360: Introduction to dblookp
-      mediator</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="myFaultHandler"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/makefault&gt;
-
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-        &lt;send/&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="myFaultHandler"&gt;
-        &lt;in&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Looking up from the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dblookup xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;select * from company where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:getQuote/m0:request/m0:symbol"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                    &lt;result name="company_id" column="id"/&gt;
-                &lt;/statement&gt;
-            &lt;/dblookup&gt;
-
-            &lt;switch source="get-property('company_id')"&gt;
-                &lt;case regex="c1"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="c2"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="c3"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;default&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="** Unrecognized Company ID **"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="** Unrecognized Company ID **"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/default&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p/>
-    <p/>
-    <p>
-      <strong>Objective:</strong> I<strong>ntroduction to the
-      dblookup mediator</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong> Setting up Derby database as
-      explained above.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 360: i.e. synapse -sample 360
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This sample demonstrates simple database read operations through Synapse.
-      When a message arrives at dblookup mediator, it opens a connection to the
-      database and executes the SQL query. The SQL query use '?' character for
-      attributes that will be filled at runtime. The parameters define how to
-      calculate the value of those attributes at runtime. In this sample a
-      dblookup mediator has been used to extract 'id' of the company from the
-      company database using the symbol which is evaluated using an xpath
-      against the SOAP envelope. Then 'id' base switching will be done by a
-      switch mediator.
-    </p>
-    <p/>
-    <p>
-      When the IBM stock quote is requested,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=IBM</pre>
-    <p>
-      Synapse console shows
-    </p>
-<pre xml:space="preserve">INFO LogMediator text = ** Looking up from the Database **INFO LogMediator text = Company ID &#x2013; c1<br/></pre>
-    <p/>
-    <p>
-      For the SUN stock quote,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=SUN</pre>
-    <p/>
-    <p>
-      Synapse console shows
-    </p>
-<pre xml:space="preserve">INFO LogMediator text = ** Looking up from the Database **INFO LogMediator text = Company ID &#x2013; c2<br/></pre>
-    <p>
-      and for the MSFT stock quote,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</pre>
-<pre xml:space="preserve">INFO LogMediator text = ** Looking up from the Database **<br/>INFO LogMediator text = Company ID &#x2013; c2</pre>
-    <p>
-      For any other symbols, Synapse console shows
-    </p>
-<pre xml:space="preserve">INFO LogMediator text = ** Unrecognized Company ID **</pre>
-    <p/>
-    <p>
-      and the client gets a response which has following message.
-    </p>
-<pre xml:space="preserve">** Unrecognized Company ID **</pre>
-    <div>
-    </div>
-    <h2>
-      <a name="Sample361" id="Sample361">Sample 361: Introduction to dbreport
-      mediator</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Reporting to the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dbreport xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;update company set price=? where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:last/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="DOUBLE"/&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                &lt;/statement&gt;
-            &lt;/dbreport&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <div>
-      <p>
-        <strong>Objective: I<strong>ntroduction to the dbreport mediator</strong></strong>
-      </p>
-      <p>
-        <strong>Prerequisites:</strong> Setting up Derby database as
-        above.
-      </p>
-      <p>
-        Start the Synapse configuration numbered 361: i.e. synapse -sample 361
-      </p>
-      <p>
-        Start the Axis2 server and deploy the SimpleStockQuoteService if not
-        already done
-      </p>
-    </div>
-    <p>
-      This sample demonstrate simple database write operations. The dbreport
-      mediator writes (i.e. inserts one row) to a table using the message
-      details. It works the same as the dblookup mediator. In this sample ,
-      dbreport mediator is used for updating the stock price of the company
-      using the last quote value which is calculated by evaluating an XPath
-      against the response message. After running this sample, user can check
-      the company table using the Derby client tool. It will show the inserted
-      value by the dbreport mediator.
-    </p>
-    <p/>
-    <p>
-      Run the client using,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=IBM</pre>
-    <p>
-      and then execute the following query using database client tool against
-      synapsedb.
-    </p>
-<pre xml:space="preserve">select price from company where name='IBM';</pre>
-    <p>
-      It will show some value as follows.
-    </p>
-<pre xml:space="preserve">96.39535981018865</pre>
-    <div>
-    </div>
-    <h2>
-      <a name="Sample362" id="Sample362">Sample 362: Action of dbreport and
-      dblookup mediators together</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Reporting to the Database **"/&gt;
-            &lt;/log&gt;
-
-            &lt;dbreport xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;update company set price=? where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:last/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="DOUBLE"/&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                &lt;/statement&gt;
-            &lt;/dbreport&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Looking up from the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dblookup xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;select * from company where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                    &lt;result name="stock_price" column="price"/&gt;
-                &lt;/statement&gt;
-            &lt;/dblookup&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          expression="fn:concat('Stock price - ',get-property('stock_price'))"/&gt;
-            &lt;/log&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of dbreport and dblookup
-      mediators</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong> Setting up Derby database as
-      above.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 362: i.e. synapse -sample 362
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      In this sample ,the dbreport mediator works the same as the above sample.
-      It updates the price for the given company using the response messages
-      content. Then the dblookup mediator reads the last updated value from the
-      company database and logs it.
-    </p>
-    <p>
-      When running client,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=IBM</pre>
-    <p>
-      Synapse console shows,
-    </p>
-<pre xml:space="preserve">INFO LogMediator text = ** Reporting to the Database **<br/><br/>...<br/><br/>INFO LogMediator text = ** Looking up from the Database **<br/><br/>...<br/><br/>INFO LogMediator text = Stock price - 153.47886496064808</pre>
-    <p/>
-    <h2>
-      <a name="Throttle" id="Throttle">Throtteling messages (Throttle
-      Mediator)</a>
-    </h2>
-
-    <h2>
-      <a name="Sample370" id="Sample370">Sample 370: Introduction to throttle
-      mediator and concurrency throttling</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;throttle id="A"&gt;
-                &lt;policy&gt;
-                    &lt;!-- define throttle policy --&gt;
-                    &lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
-                                xmlns:throttle="http://www.wso2.org/products/wso2commons/throttle"&gt;
-                        &lt;throttle:ThrottleAssertion&gt;
-                            &lt;throttle:MaximumConcurrentAccess&gt;10&lt;/throttle:MaximumConcurrentAccess&gt;
-                        &lt;/throttle:ThrottleAssertion&gt;
-                    &lt;/wsp:Policy&gt;
-                &lt;/policy&gt;
-                &lt;onAccept&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Accept**"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/onAccept&gt;
-                &lt;onReject&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Denied**"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="**Access Denied**"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/onReject&gt;
-            &lt;/throttle&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;throttle id="A"/&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <b>Objective: Demonstrate the use of throttle mediator for concurrency
-      throttling </b>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService in sample Axis2 server and start it on
-      port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 370 (i.e. synapse -sample
-      370).
-    </p>
-    <p/>
-    <p>
-      Above configuration specifies a throttle mediator inside the in mediator.
-      Therefore, all request messages directed to the main sequence will be
-      subjected to throttling. Throttle mediator has policy, onAccept and
-      onReject tags at top level. Policy tag specifies the throttling policy to
-      be applied for messages. In this sample policy contains only component
-      called "MaximumConcurrentAccess" .This indicates the maximum number of
-      concurrent request that may have passed through the synapse on a single
-      unit of time. To test concurrency throttling ,it is required to send
-      concurrent request to synapse. For synapse with above configuration ,if
-      client send 20 request concurrently ,then approximately half of those will
-      success. The client command is as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080/</pre>
-    <p/>
-    <h2>
-      <a name="Sample371" id="Sample371">Sample 371: Restricting requests
-      based on policies </a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;throttle id="A"&gt;
-                &lt;policy&gt;
-                    &lt;!-- define throttle policy --&gt;
-                    &lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
-                                xmlns:throttle="http://www.wso2.org/products/wso2commons/throttle"&gt;
-                        &lt;throttle:ThrottleAssertion&gt;   <br/>                                   &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;Other&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;4&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;800000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;10000&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.200-192.168.8.222&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;8&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;800000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;10&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.201&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;200&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;600000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.198&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;50&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;500000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                        &lt;/throttle:ThrottleAssertion&gt;
-                    &lt;/wsp:Policy&gt;
-                &lt;/policy&gt;
-                &lt;onAccept&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Accept**"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/onAccept&gt;
-                &lt;onReject&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Denied**"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="**Access Denied**"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/onReject&gt;
-            &lt;/throttle&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;throttle id="A"/&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of throttle mediator for
-      restricting request counts</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService in sample Axis2 server and start it on
-      port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 371 (i.e. synapse -sample
-      371).
-    </p>
-    <p/>
-    <p>
-      Above configuration specifies a throttle mediator inside the in mediator.
-      Therefore, all request messages directed to the main sequence will be
-      subjected to throttling. Throttle mediator has policy, onAccept and
-      onReject tags at the top level. Policy tag specifies the throttling policy
-      to be applied for messages. It contains some IP address ranges and the
-      maximum number of messages to be allowed for those ranges within a time
-      period given in "UnitTime" tag. "ProhibitTimePeriod" tag specifies the
-      time period to prohibit further requests after the received request count
-      exceeds the specified time. Now run the client 5 times repetitively using
-      the following command to see how throttling works.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080/</pre>
-    <p>
-      For the first four requests you will get the quote prices for IBM as
-      follows.
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $177.20143371883802</pre>
-    <p>
-      You will receive the following response for the fifth request.
-    </p>
-<pre xml:space="preserve">[java] org.apache.axis2.AxisFault: **Access Denied**</pre>
-    <p>
-      Maximum number of requests within 800000 milliseconds is specified as 4
-      for any server (including localhost) other than the explicitly specified
-      ones. Therefore, our fifth request is denied by the throttle mediator. You
-      can verify this by looking at the Synapse console.
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-2] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-3] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-4] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-5] INFO  LogMediator - text = **Access Denied** </pre>
-    <h2>
-      <a name="Sample372" id="Sample372">Sample 372: Use of both concurrency
-      throttling and request rate based throttling </a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Use of both concurrency throttling and request rate based throttling --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;150000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;sequence name="onAcceptSequence"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="**Access Accept**"/&gt;
-        &lt;/log&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-    &lt;sequence name="onRejectSequence" trace="enable"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="**Access Denied**"/&gt;
-        &lt;/log&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver"
-                  xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="**Access Denied**"/&gt;
-        &lt;/makefault&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" action="remove"/&gt;
-        &lt;send/&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-             &lt;inSequence&gt;
-                &lt;throttle onReject="onRejectSequence" onAccept="onAcceptSequence" id="A"&gt;
-                    &lt;policy key="conf/sample/resources/policy/throttle_policy.xml"/&gt;
-                &lt;/throttle&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;throttle id="A"/&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <div>
-    </div>
-    <p>
-      <strong>Objective: Use of both concurrency throttling and request rate
-      based throttling </strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong> Deploy the
-      SimpleStockQuoteService in sample Axis2 server and start it on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 372 (i.e. synapse -sample
-      372).
-    </p>
-    <p/>
-    <p>
-      Throttle policy is loaded from the &#x201c;throttle_policy. xml&#x201d;
-      .That policy contains merging policy from sample 370 and 371. To check the
-      functionality , it is need to run load test.The all enabled request from
-      the concurrency throttling will be controlled by the access rate base
-      throttling according to the policy.
-    </p>
-    <p>
-      Run the client as follows
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy</pre>
-    <div>
-      <p>
-        You will get results same as sample 371.if you run the load test,
-        results will be different due to affect of concurrency throttling.
-      </p>
-    </div>
-    <h2>
-      <a name="Class" id="Class">Extending the mediation in java (Class
-      Mediator)</a>
-    </h2>
-    <p>
-      Class mediator can be used to write your own custom mediation in Java and
-      you have access to the SynapseMessageContext and all the Synapse API in
-      there. This is a useful extension mechanism within Synapse to extend its
-      functionality. This class can contain fields for which you can assign
-      values at runtime through the configuration.
-    </p>
-    <h2>
-      <a name="Sample380" id="Sample380">Sample 380: Writing your own custom
-      mediation in Java</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="fault"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="Mediation failed."/&gt;
-        &lt;/makefault&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="fault"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint name="stockquote"&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;class name="samples.mediators.DiscountQuoteMediator"&gt;
-                &lt;property name="discountFactor" value="10"/&gt;
-                &lt;property name="bonusFor" value="5"/&gt;
-            &lt;/class&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p/>
-    <p>
-      <strong>Objective: Demonstrate the use of Class mediator to extend the
-      mediation functionality</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Make sure the synapse-samples-1.0.jar is in your class path (by default
-      this jar is placed in the lib directory when installing Synapse).
-    </p>
-    <p>
-      Start Synapse with the sample configuration 380 (i.e. synapse -sample 380)
-    </p>
-    <p>
-      Start the sample Axis2 server and deploy the SimpleStockQuoteService.
-    </p>
-    <p/>
-    <p>
-      In this configuration, Synapse hands over the request message to the
-      specified endpoint, which sends it to the Axis2 server running on port
-      9000.
-    </p>
-    <p>
-      But the response message is passed through the class mediator before
-      sending it back to the client. Two parameters named "discountFactor"
-    </p>
-    <p>
-      and "bonusFor" are passed to the instance mediator implementation class
-      (i.e. samples.mediators.DiscountQuoteMediator) before each
-    </p>
-    <p>
-      invocation. Code of the mediator implementation class is shown below.
-    </p>
-<pre xml:space="preserve">package samples.mediators;
-
-import org.apache.synapse.MessageContext;
-import org.apache.synapse.Mediator;
-import org.apache.axiom.om.OMElement;
-import org.apache.axiom.om.OMAbstractFactory;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.soap.SOAPFactory;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import javax.xml.namespace.QName;
-
-public class DiscountQuoteMediator implements Mediator {
-
-    private static final Log log = LogFactory.getLog(DiscountQuoteMediator.class);
-
-    private String discountFactor="10";
-
-    private String bonusFor="10";
-
-    private int bonusCount=0;
-
-    public DiscountQuoteMediator(){}
-
-    public boolean mediate(MessageContext mc) {
-
-        String price= mc.getEnvelope().getBody().getFirstElement().getFirstElement().
-                getFirstChildWithName(new QName("http://services.samples/xsd","last")).getText();
-
-        //converting String properties into integers
-        int discount=Integer.parseInt(discountFactor);
-        int bonusNo=Integer.parseInt(bonusFor);
-        double currentPrice=Double.parseDouble(price);
-
-        //discounting factor is deducted from current price form every response
-        Double lastPrice = new Double(currentPrice - currentPrice * discount / 100);
-
-        //Special discount of 5% offers for the first responses as set in the bonusFor property
-        if (bonusCount &lt;= bonusNo) {
-            lastPrice = new Double(lastPrice.doubleValue() - lastPrice.doubleValue() * 0.05);
-            bonusCount++;
-        }
-
-        String discountedPrice = lastPrice.toString();
-
-        mc.getEnvelope().getBody().getFirstElement().getFirstElement().getFirstChildWithName
-                (new QName("http://services.samples/xsd","last")).setText(discountedPrice);
-
-        System.out.println("Quote value discounted.");
-        System.out.println("Original price: " + price);
-        System.out.println("Discounted price: " + discountedPrice);
-
-        return true;
-    }
-
-    public String getType() {
-        return null;
-    }
-
-    public void setTraceState(int traceState) {
-        traceState = 0;
-    }
-
-    public int getTraceState() {
-        return 0;
-    }
-
-    public void setDiscountFactor(String discount) {
-        discountFactor=discount;
-    }
-
-    public String getDiscountFactor() {
-        return discountFactor;
-    }
-
-    public void setBonusFor(String bonus){
-        bonusFor=bonus;
-    }
-
-    public String getBonusFor(){
-        return bonusFor;
-    }
-}</pre>
-    <p>
-      All classes developed for class mediation should implement the Mediator
-      interface, which contains the mediate(...) method. mediate(...) method of
-      the above class is invoked for each response message mediated through the
-      main sequence, with the message context of the current message as the
-      parameter. All the details of the message including the SOAP headers, SOAP
-      body and properties of the context hierarchy can be accessed from the
-      message context. In this sample, the body of the message is retrieved and
-      the discount percentage is subtracted from the quote price. If the quote
-      request number is less than the number specified in the "bonusFor"
-      property in the configuration, a special discount is given.
-    </p>
-    <p/>
-    <p>
-      Now run the client using the following command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-    <p>
-      You will see the below output in the client console with the discounted
-      quote value.
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $138.77458254967408</pre>
-    <p>
-      Now check the console running Synapse. You will see the original value and
-      the discounted value for the requested quote as follows.
-    </p>
-<pre xml:space="preserve">Quote value discounted.
-Original price: 162.30945327447262
-Discounted price: 138.77458254967408</pre>
-    <p/>
-    <h2>
-      <a name="XQuery" id="XQuery">Evaluating XQuery for mediation (XQuery
-      Mediator)</a>
-    </h2>
-
-    <h2>
-      <a name="Sample390" id="Sample390">Sample 390: Introduction to the
-      XQuery mediator</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to a URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;localEntry key="xquery-key-req"
-                src="file:repository/conf/sample/resources/xquery/xquery_req.xq"/&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;xquery key="xquery-key-req"&gt;
-                    &lt;variable name="payload" type="ELEMENT"/&gt;
-                &lt;/xquery&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;out&gt;
-                     &lt;xquery key="xquery/xquery_res.xq"&gt;
-                        &lt;variable name="payload" type="ELEMENT"/&gt;
-                    &lt;/xquery&gt;
-                     &lt;send/&gt;
-                &lt;/out&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;&lt;/proxy&gt;&lt;/definitions&gt; </pre>
-    <p/>
-    <p>
-      <b>Objective: Introduction transformation using XQuery mediator</b>
-    </p>
-    <p>
-      <b>Prerequisites</b>:Start the Synapse configuration numbered
-      390: i.e. synapse -sample 390
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done.
-    </p>
-    <p/>
-    <p>
-      This example uses the XQuery mediator to perform transformations. This
-      sample behaves the same as sample number 8 and the only difference is that
-      this sample uses XQuery instead of XSLT for transformation.
-    </p>
-    <p/>
-    <p>
-      Execute the custom quote client as 'ant stockquote -Dmode=customquote ...'
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy -Dmode=customquote </pre>
-    <p/>
-    <h2>
-      <a name="Sample391" id="Sample391">Sample 391: How to use data from an
-      external XML document with in XQuery </a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to  URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;out&gt;
-                    &lt;xquery key="xquery/xquery_commisson.xq"&gt;
-                        &lt;variable name="payload" type="ELEMENT"&gt;&lt;/variable&gt;
-                            &lt;variable name="commission" type="ELEMENT" key="misc/commission.xml"&gt;&lt;/variable&gt;
-                    &lt;/xquery&gt;
-                    &lt;send/&gt;
-                &lt;/out&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;&lt;/proxy&gt;&lt;/definitions&gt;   ns&gt;</pre>
-    <p>
-      <b/>
-    </p>
-    <p>
-      <b><strong>Objective: Demonstrate the use of XQuery mediator to
-      import external XML documents to the XQuery engine</strong></b>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService
-      in sample Axis2 server and start it on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 391 (i.e. synapse -sample
-      391).
-    </p>
-    <p>
-      In this sample, data from commission.xml document is used inside XQUERY
-      document. The stock quote price from the response and commission from the
-      commission.xml document will be added and given as a new price .
-    </p>
-    <p>
-      Invoke the client as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy</pre>
-    <h2>
-      <a name="Splitter" id="Splitter">Splitting messages in to parts and
-      process in parallel (Iterate / Clone)</a>
-    </h2>
-
-    <h2>
-      <a name="Sample400" id="Sample400">Sample 400: Message splitting and
-      aggregating the responses</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="SplitAggregateProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;iterate expression="//m0:getQuote/m0:request" preservePayload="true"
-                         attachPath="//m0:getQuote"
-                         xmlns:m0="http://services.samples/xsd"&gt;
-                    &lt;target&gt;
-                        &lt;sequence&gt;
-                            &lt;send&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address
-                                        uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/send&gt;
-                        &lt;/sequence&gt;
-                    &lt;/target&gt;
-                &lt;/iterate&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;aggregate&gt;
-                    &lt;onComplete expression="//m0:getQuoteResponse"
-                                xmlns:m0="http://services.samples/xsd"&gt;
-                        &lt;send/&gt;
-                    &lt;/onComplete&gt;
-                    &lt;invalidate&gt;
-                        &lt;log level="full"/&gt;
-                        &lt;drop/&gt;
-                    &lt;/invalidate&gt;
-                &lt;/aggregate&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <b><strong>Objective: Demonstrate the use of Iterate mediator to
-      split the messages in to parts and process them asynchronously and then
-      aggregate the responses coming in to synapse</strong></b>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService
-      in sample Axis2 server and start it on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 400 (i.e. synapse -sample
-      400).
-    </p>
-    <p>
-      In this sample, the message sent to synapse has embedded with a number of
-      elements of the same type in one message. When synapse received this
-      message it will iterate through those elements and then sent to the
-      specified endpoint. When all the responses appear in to synapse then those
-      messages will be aggregated to form the resultant response and sent back
-      to the client.
-    </p>
-    <p>
-      Invoke the client as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8080/soap/SplitAggregateProxy -Ditr=4</pre>
-
-
-
-
-    <h2>
-      <a name="Cache" id="Cache">Caching the responses over the requests
-      (Cache Mediator)</a>
-    </h2>
-    <p>
-      Cached mediator can be used to utilize the network bandwidth, to protect
-      the backend service from being loaded with the same type of requests like
-      browser refresh actions and also to speed up the execution of the web
-      service. This mediator should be used with sence, because it is not
-      applicable for each and every service (for example services with dynamic
-      responses for a particular release)
-    </p>
-    <h2>
-      <a name="Sample420" id="Sample420">Sample 420: Simple cache implemented
-      on synapse for the actual service</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;cache timeout="20000" scope="per-host"
-               hashGenerator="org.wso2.caching.digest.DOMHASHGenerator"&gt;
-            &lt;implementation type="memory" maxSize="100"/&gt;
-        &lt;/cache&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;cache/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <b><strong>Objective: Demonstrate the use of Cache mediator in order
-      to cache the response and use that cached response as the response for an
-      identical xml request</strong></b>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService
-      in sample Axis2 server and start it on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 420 (i.e. synapse -sample
-      420).
-    </p>
-    <p>
-      In this sample, the message sent to synapse is checked for an existing
-      cached response by calculating the hash value of the request. If there is
-      a cache hit in synapse then this request will not be forwarded to the
-      actual service, rather synapse respond to the client with the cached
-      response. In case of a cache miss that particular message will be
-      forwarded to the actual service and cached that response in the out path
-      for the use of consecutive requests of the same type.
-    </p>
-    <p>
-      To observe this behaviour, invoke the client as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-    <p>
-      You could notice that if you send more than one requests within 20 seconds
-      only the first request is forwarded to the actual service, and the rest of
-      the requests will be served by the cache inside Synapse. You could observe
-      this by looking at the printed line of the axis2 server, as well as by
-      observing a constant rate as the response to the client instead of the
-      random rate, which changes by each and every 20 seconds.
-    </p>
-    <p>
-      &#160;
-    </p>
-    <p>
-      &#160;
-    </p>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_1/samples.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1/samples_setup.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1/samples_setup.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1/samples_setup.xml	(nonexistent)
@@ -1,631 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
-    <title>
-      Apache Synapse Samples
-    </title>
-    <meta name="generator" content="Amaya 9.54, see http://www.w3.org/Amaya/"/>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Overview
-    </h1>
-    <p/>
-    <p>
-      Synapse ships with a set of working examples that demonstrate some of the
-      basic features and capabilities of Synapse. A set of sample clients and
-      services are provided in addition to the sample configurations. Scripts
-      are provided to execute the sample scenarios as explained below.
-    </p>
-    <h4>
-      Prerequisites
-    </h4>
-    <p>
-      To try out the samples you will need Java development kit version 1.5.x or
-      later and Apache Ant version 1.6.5 or later. Ant can be downloaded from
-      http://ant.apache.org. The JMS examples can be executed against an
-      ActiveMQ installation by default (or another JMS provider with relevant
-      configuration changes.)
-    </p>
-    <p/>
-    <p>
-      Note*: The samples and the documentation assume that you are running
-      Synapse in DEBUG mode. You can switch from the default INFO log messages
-      to DEBUG log messages by changing the line
-      "log4j.category.org.apache.synapse=INFO" as
-      "log4j.category.org.apache.synapse=DEBUG" in the lib/log4j.properties
-      file.
-    </p>
-    <h2>
-      Understanding the Samples
-    </h2>
-    <table border="1" style="width: 100%">
-      <caption/>
-      <tbody>
-        <tr>
-          <td>
-            Client
-          </td>
-          <td>
-            Synapse
-          </td>
-          <td>
-            Service
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td/>
-          <td/>
-        </tr>
-        <tr>
-          <td>
-            ant stockquote
-          </td>
-          <td>
-            ./synapse.sh -sample &lt;n&gt;
-          </td>
-          <td>
-            SimpleStockQuoteService
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td/>
-          <td>
-            SecureStockQuoteService etc.
-          </td>
-        </tr>
-      </tbody>
-    </table>
-    <p>
-      The above diagram depicts the interactions between the clients, Synapse
-      and the services at a higher level. The Clients are able to send SOAP/REST
-      or POX messages over transports such as http/s or JMS with WS-Addressing,
-      WS-Security or WS-Reliable messaging. They can send binary optimized
-      content using MTOM or SwA or binary or plain text JMS messages. After
-      mediation through Synapse, the requests are passed over to the sample
-      services. The sample clients and services are explained below.
-    </p>
-    <p/>
-    <h2>
-      Using the Sample Clients
-    </h2>
-    <p/>
-    <p>
-      The sample clients can be executed from the samples/axis2Client directory
-      through the provided ant script. Simply executing 'ant' displays the
-      available clients and some of the sample options used to configure them.
-      The sample clients available are listed below:
-    </p>
-    <h3>
-      1. Stock Quote Client
-    </h3>
-    <p/>
-    <p>
-      This is a simple SOAP client that can send stock quote requests, and
-      receive and display the last sale price for a stock symbol.
-    </p>
-<pre xml:space="preserve">ant stockquote [-Dsymbol=IBM|MSFT|SUN|..]
-  [-Dmode=quote | customquote | fullquote | placeorder | marketactivity]
-  [-Daddurl=http://localhost:9000/soap/SimpleStockQuoteService]
-  [-Dtrpurl=http://localhost:8080] [-Dprxurl=http://localhost:8080]
-  [-Dpolicy=../../repository/conf/sample/resources/policy/policy_1.xml]</pre>
-
-
-    <p>
-      The client is able to operate in the following modes, and send the
-      payloads listed below as SOAP messages:
-    </p>
-    <ul>
-      <li>
-      </li>
-      <li>
-        quote - send a quote request for a single stock as follows. The response
-        contains the last sales price for the stock which will be displayed
-<pre xml:space="preserve">&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getQuote&gt;</pre>
-      </li>
-      <li>
-      </li>
-      <li>
-        customquote - send a quote request in a custom format. Synapse will
-        transform this custom request to the standard stock quote request format
-        and send it to the service. Upon receipt of the response, it will be
-        transformed again to a custom response format and returned to the
-        client, which will then display the last sales price.
-<pre xml:space="preserve">&lt;m0:checkPriceRequest xmlns:m0="http://www.apache-synapse.org/test"&gt;
-  &lt;m0:Code&gt;symbol&lt;/m0:Code&gt;
-&lt;/m0:checkPriceRequest&gt;</pre>
-      </li>
-      <li>
-      </li>
-      <li>
-        fullquote - get quote reports for the stock over a number of days (i.e.
-        last 100 days of the year).
-<pre xml:space="preserve">&lt;m:getFullQuote xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getFullQuote&gt;</pre>
-      </li>
-      <li>
-      </li>
-      <li>
-        placeorder - place an order for stocks using a one way request
-<pre xml:space="preserve">&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:order&gt;
-    &lt;m:price&gt;3.141593E0&lt;/m:price&gt;
-    &lt;m:quantity&gt;4&lt;/m:quantity&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;</pre>
-      </li>
-      <li>
-      </li>
-      <li>
-        marketactivity - get a market activity report for the day (i.e. quotes
-        for multiple symbols)
-<pre xml:space="preserve">&lt;m:getMarketActivity xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-    ...
-    &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getMarketActivity&gt;</pre>
-      </li>
-      <li>
-      </li>
-    </ul>
-    <p>
-      Note : See samples/axis2Client/src/samples/common/StockQuoteHandler.java
-      for sample responses expected by the clients.
-    </p>
-    <h4>
-      Smart Client Mode:
-    </h4>
-    <p>
-      The 'addurl' property sets the WS-Addressing EPR, and the 'trpurl' sets a
-      transport URL for a message. Thus by specifying both of these properties,
-      the client can operate in the 'smart client' mode, where the addressing
-      EPR can specify the ultimate receiver, while the transport URL set to
-      Synapse will ensure that any necessary mediation takes place before the
-      message is delivered to the ultimate receiver.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Daddurl=&lt;addressingEPR&gt; -Dtrpurl=&lt;synapse&gt;</pre>
-    <h4>
-      Gateway / Dumb Client Mode:
-    </h4>
-    <p>
-      By specifying only a transport URL, the client operates in the 'dumb
-      client' mode, where it sends the message to Synapse and depends on the
-      Synapse rules for proper mediation and routing of the message to the
-      ultimate destination.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Dtrpurl=&lt;synapse&gt;</pre>
-    <h4>
-      Proxy Client Mode:
-    </h4>
-    <p>
-      In this mode, the client uses the 'prxurl' as a http proxy to send the
-      request. Thus by setting the 'prxurl' to Synapse, the client can ensure
-      that the message will reach Synapse for mediation. The client can
-      optionally set a WS-Addressing EPR if required.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Dprxurl=&lt;synapse&gt; [-Daddurl=&lt;addressingEPR&gt;]</pre>
-
-    <p/>
-    <p>
-      Specifying a policy
-    </p>
-    <p>
-      By specifying a WS-Policy using the 'policy' property, QoS aspects such as
-      WS-Security can be enforced on the request. The policy can specify details
-      such as timestamps, signatures and encryption. See Apache Axis2 and Apache
-      Rampart documentation for more information.
-    </p>
-    <p/>
-    <h3>
-      2. Generic JMS Client
-    </h3>
-    <p/>
-    <p>
-      The JMS client is able to send plain text, plain binary content or POX
-      content by directly publishing a JMS message to the specified destination.
-      The JMS destination name should be specified with the 'jms_dest' property.
-      The 'jms_type' property can specify 'text', 'binary' or 'pox' to specify
-      the type of message payload.
-    </p>
-    <p/>
-    <p>
-      The plain text payload for a 'text' message can be specified through the
-      'payload' property. For binary messages, the 'payload' property will
-      contain the path to the binary file. For POX messages, the 'payload'
-      property will hold a stock symbol name to be used within the POX request
-      for stock order placement request.
-    </p>
-    <p>
-      e.g:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=text -Djms_dest=dynamicQueues/JMSTextProxy -Djms_payload="24.34 100 IBM"
-ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/JMSPoxProxy -Djms_payload=MSFT
-ant jmsclient -Djms_type=binary -Djms_dest=dynamicQueues/JMSFileUploadProxy
-                     -Djms_payload=./../../repository/conf/sample/resources/mtom/asf-logo.gif</pre>
-    <p>
-      Note: The JMS client assumes the existence of a default ActiveMQ (4.1.0 or
-      above) installation on the local machine.
-    </p>
-    <p/>
-    <h3>
-      3. MTOM / SwA Client
-    </h3>
-    <p/>
-    <p>
-      The MTOM / SwA client is able to send a binary image file as a MTOM or SwA
-      optimized message, and receive the same file again through the response
-      and save it as a temporary file. The 'opt_mode' can specify 'mtom' or
-      'swa' respectively for the above mentioned optimizations. Optionally the
-      path to a custom file can be specified through the 'opt_file' property,
-      and the destination address can be changed through the 'opt_url' property
-      if required.
-    </p>
-<pre xml:space="preserve">e.g. ant optimizeclient -Dopt_mode=[mtom | swa]</pre>
-
-    <p/>
-    <h2>
-      Starting the Sample Services
-    </h2>
-    <p/>
-    <p>
-      The sample services ship with a pre-configured Axis2 server and
-      demonstrates in-only and in-out SOAP/REST or POX messaging over http/s and
-      JMS transports, using WS-Addressing, WS-Security and WS-Reliable Messaging
-      and handling of binary content using MTOM and SwA.
-    </p>
-    <p>
-      The sample services can be found in the samples/axis2Server/src directory
-      and can be built and deployed using ant from within each service directory
-    </p>
-<pre xml:space="preserve">user@host:/tmp/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService$ ant
-Buildfile: build.xml
-...
-build-service:
-   ....
-      [jar] Building jar: /tmp/synapse-1.1/samples/axis2Server/repository/services/SimpleStockQuoteService.aar
-
-BUILD SUCCESSFUL
-Total time: 3 seconds</pre>
-    <p/>
-    <p>
-      To start the Axis2 server, go to the samples/axis2Server directory and
-      execute the axis2server.sh or axis2server.bat script. This starts the
-      Axis2 server with the http transport listener on port 9000 and https on
-      9002 respectively. To enable JMS transport, you will need to setup and
-      start a JMS provider. An ActiveMQ 4.0.1 or later JMS server on the local
-      machine is supported by default, and can be easily enabled by uncommenting
-      the JMS transport from the repository/conf/axis2.xml
-    </p>
-    <p/>
-    <h3>
-      Sample services
-    </h3>
-    <h4>
-      1. SimpleStockQuoteService
-    </h4>
-    <p>
-      This service has four operations, getQuote (in-out), getFullQuote(in-out),
-      getMarketActivity(in-out) and placeOrder (in-only). The getQuote operation
-      will generate a sample stock quote for a given symbol. The getFullQuote
-      operation will generate a history of stock quotes for the symbol for a
-      number of days, and the getMarketActivity operation returns stock quotes
-      for a list of given symbols. The placeOrder operation will accept a one
-      way message for an order.
-    </p>
-    <h4>
-      2. SecureStockQuoteService
-    </h4>
-    <p>
-      This service is a clone of the SimpleStockQuoteService, but has
-      WS-Security enabled and an attached security policy for signing and
-      encryption of messages.
-    </p>
-    <h4>
-      3. MTOMSwASampleService
-    </h4>
-    <p>
-      This service has three operations uploadFileUsingMTOM(in-out),
-      uploadFileUsingSwA(in-out) and oneWayUploadUsingMTOM(in-only) and
-      demonstrates the use of MTOM and SwA. The uploadFileUsingMTOM and
-      uploadFileUsingSwA operations accept a binary image from the SOAP request
-      as MTOM and SwA, and returns this image back again as the response, while
-      the oneWayUploadUsingMTOM saves the request message to disk.
-    </p>
-    <p/>
-    <h3>
-      Starting Sample Synapse Configurations
-    </h3>
-    <p>
-      To start Synapse with the sample default configuration, execute the
-      synapse.bat or synapse.sh script found in the /bin directory. This starts
-      up an instance of Synapse using the Synapse and Axis2 configuration files
-      located in the repository/conf directory. The repository/conf/samples
-      directory contains the sample configurations available as synapse_sample_&lt;n&gt;.xml
-      files. To start a specific sample configuration of Synapse, use the
-      '-sample &lt;n&gt;' switch as follows:
-    </p>
-<pre xml:space="preserve">synapse.bat -sample &lt;n&gt;
-synapse.sh -sample &lt;n&gt;</pre>
-    <p/>
-    <h2>
-      Setting up the JMS Listener
-    </h2>
-    <p/>
-    <p>
-      The samples used in this guide assumes the existence of a local ActiveMQ
-      (4.1.0 or higher) installation properly installed and started up. You also
-      need to copy the following client JAR files into the Synapse 'lib' folder
-      to support ActiveMQ. These files are found in the 'lib' directory of the
-      ActiveMQ installation.
-    </p>
-    <ul>
-      <li>
-      </li>
-      <li>
-        activeio-core-3.0.0-incubator.jar
-      </li>
-      <li>
-      </li>
-      <li>
-        activemq-core-4.1.0-incubator.jar
-      </li>
-      <li>
-      </li>
-      <li>
-        geronimo-j2ee-management_1.0_spec-1.0.jar
-      </li>
-      <li>
-      </li>
-    </ul>
-    <p>
-      To enable the JMS transport, you need to uncomment the JMS transport
-      listener configuration. If you are using a JMS provider other than
-      ActiveMQ this configuration should be updated to reflect your environment.
-      Once uncommented, the default configuration should be as follows. To
-      enable JMS for synapse, the repository/conf/axis2.xml must be updated,
-      while to enable JMS support for the sample Axis2 server the
-      samples/axis2Server/repository/conf/axis2.xml file must be updated.
-    </p>
-<pre xml:space="preserve">    &lt;!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)--&gt;
-    &lt;transportReceiver name="jms" class="org.apache.synapse.transport.jms.JMSListener"&gt;
-        &lt;parameter name="myTopicConnectionFactory" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;TopicConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-
-        &lt;parameter name="myQueueConnectionFactory" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-
-        &lt;parameter name="default" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-    &lt;/transportReceiver&gt;</pre>
-    <p/>
-    <h2 id="mailsender">
-      Setting up Mail Transport Sender
-    </h2>
-    <p>
-      To enable the mail transport, you need to uncomment the mail transport
-      sender configuration in the repository/conf/axis2.xml. Change the
-      mail.smtp.host parameter value to a working SMTP host.
-    </p>
-<pre xml:space="preserve">    &lt;!-- ================================================= --&gt;
-    &lt;!-- Mail Transport Sender  --&gt;
-    &lt;!--Only need to uncomment the sender. Configuration is achieved with every client.
-        At any instant mail host should be given. Sample configuration has been given.
-        http://people.apache.org/~pzf/SMTPBase64Binding-0.2.html--&gt;
-    &lt;!-- ================================================= --&gt;
-    &lt;transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender"&gt;
-        &lt;parameter name="mail.smtp.host"&gt;localhost&lt;/parameter&gt;
-    &lt;/transportSender&gt;</pre>
-    <p/>
-    <h2 id="script">
-      Configuring Synapse for Script Mediator Support
-    </h2>
-    <p/>
-    <p>
-      The Synapse Script Mediator is a Synapse extension, and thus all
-      prerequisites are not bundled by default with the Synapse distribution.
-      Before you use some script mediators you may need to manually add the
-      required jar files to the Synapse lib directory, and optionally perform
-      other installation tasks as may be required by the individual scripting
-      language. This is explained in the following sections.
-    </p>
-    <h4>
-      JavaScript Support
-    </h4>
-    <p>
-      The JavaScript/E4X support is enabled by default and comes ready-to-use
-      with the Synapse distribution.
-    </p>
-    <h4>
-      Ruby Support
-    </h4>
-    <p>
-      For Ruby support you need to download the 'jruby-complete.jar' from the
-      Maven repository for JRuby, and copy it into the 'lib' folder of Synapse .
-      The JRuby JAR can be downloaded from <a
-      href="http://repo1.maven.org/maven2/org/jruby/jruby-complete/">here</a>.
-    </p>
-    <p/>
-    <h2 id="derby">
-      Setting up Derby database server
-    </h2>
-    <p>
-      You can download Apache Derby distribution from <a
-      href="http://db.apache.org/derby/">http://db.apache.org/derby/</a>
-    </p>
-    <ol>
-      <li>
-      </li>
-      <li>
-        Set up and start the Derby network server
-      </li>
-      <li>
-      </li>
-      <li>
-        Create and open a connection to the database using the Derby client
-        driver
-        <p>
-          CONNECT
-          'jdbc:derby://localhost:1527/synapsedb;user=synapse;password=synapse;create=true';
-        </p>
-      </li>
-      <li>
-      </li>
-      <li>
-        Create a table using the following statement
-        <p>
-          create table company(name varchar(10), id varchar(10), price double);
-        </p>
-      </li>
-      <li>
-      </li>
-      <li>
-        Inserts some data using following statements
-        <p>
-          insert into company values ('IBM','c1',0.0);
-        </p>
-        <p>
-          insert into company values ('SUN','c2',0.0);
-        </p>
-        <p>
-          insert into company values ('MSFT','c3',0.0);
-        </p>
-      </li>
-      <li>
-      </li>
-    </ol>
-    <p>
-      When using Derby, you need to add derby.jar, derbyclient.jar and
-      derbynet.jar to the classpath. This can be done by putting the above three
-      jars into the Synapse lib directory. For testing these samples Derby
-      10.1.1.0 binary distribution was used.
-    </p>
-    <p>
-      You can use any other database product instead of Derby. Then you have to
-      change the database connection details accordingly. Also you have to copy
-      the required database driver jars to the Synapse classpath.
-    </p>
-    <p/>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_1/samples_setup.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1/extending.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1/extending.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1/extending.xml	(nonexistent)
@@ -1,482 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta content="text/html; charset=iso-8859-1" http-equiv="content-type"/>
-    <title>
-      Extending Synapse
-    </title>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Extending Synapse<br/>
-    </h1>
-    <h2>
-      Writing custom Mediator implementations
-    </h2>
-    <p>
-      The primary interface of the Synapse API is the MessageContext interface
-      defined below. This essentially defines the per-message context passed
-      through the chain of mediators, for each and every message received and
-      processed by Synapse. Each message instance is wrapped within a
-      MessageContext instance, and the message context is set with the
-      references to the SynapseConfiguration and SynapseEnvironments. The
-      SynapseConfiguration holds the global configuration model that defines
-      mediation rules, local registry entries and other and configuration, while
-      the environment gives access to the underlying SOAP implementation used -
-      Axis2. A typical mediator would need to manipulate the MessageContext by
-      referring to the SynapseConfiguration. However it is strongly recommended
-      that the SynapseConfiguration is not updated by mediator instances as it
-      is shared by all messages, and may be updated by Synapse administration or
-      configuration modules. Mediator instances may store local message
-      properties into the MessageContext for later retrieval by successive
-      mediators.<br/>
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/MessageContext.java?view=markup">MessageContext
-      Interface</a>
-    </h4>
-    <p/>
-<pre xml:space="preserve">package org.apache.synapse;
-
-import ...
-
-public interface MessageContext {
-
-    /**
-     * Get a reference to the current SynapseConfiguration
-     *
-     * @return the current synapse configuration
-     */
-    public SynapseConfiguration getConfiguration();
-
-    /**
-     * Set or replace the Synapse Configuration instance to be used. May be used to
-     * programatically change the configuration at runtime etc.
-     *
-     * @param cfg The new synapse configuration instance
-     */
-    public void setConfiguration(SynapseConfiguration cfg);
-
-    /**
-     * Returns a reference to the host Synapse Environment
-     * @return the Synapse Environment
-     */
-    public SynapseEnvironment getEnvironment();
-
-    /**
-     * Sets the SynapseEnvironment reference to this context
-     * @param se the reference to the Synapse Environment
-     */
-    public void setEnvironment(SynapseEnvironment se);
-
-    /**
-     * Get the value of a custom (local) property set on the message instance
-     * @param key key to look up property
-     * @return value for the given key
-     */
-    public Object getProperty(String key);
-
-    /**
-     * Set a custom (local) property with the given name on the message instance
-     * @param key key to be used
-     * @param value value to be saved
-     */
-    public void setProperty(String key, Object value);
-
-    /**
-     * Returns the Set of keys over the properties on this message context
-     * @return a Set of keys over message properties
-     */
-    public Set getPropertyKeySet();
-
-    /**
-     * Get the SOAP envelope of this message
-     * @return the SOAP envelope of the message
-     */
-    public SOAPEnvelope getEnvelope();
-
-    /**
-     * Sets the given envelope as the current SOAPEnvelope for this message
-     * @param envelope the envelope to be set
-     * @throws org.apache.axis2.AxisFault on exception
-     */
-    public void setEnvelope(SOAPEnvelope envelope) throws AxisFault;
-
-    /**
-     * SOAP message related getters and setters
-     */
-    public ....get/set()...
-
-}</pre>
-    <p>
-      The MessageContext interface is based on the Axis2 <a>MessageContext</a>
-      interface, and uses the Axis2 <a>EndpointReference</a> and
-      SOAPEnvelope classes/interfaces. The purpose of this interface is to
-      capture a message as it flows through the system. As you will see the
-      message payload is represented using the SOAP infoset. Binary messages can
-      be embedded in the Envelope using MTOM or SwA attachments using the AXIOM
-      object model.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/Mediator.java?view=markup">Mediator
-      interface</a>
-    </h4>
-    <p>
-      The second key interface for mediator writers is the Mediator interface:
-    </p>
-<pre xml:space="preserve">package org.apache.synapse;
-
-import org.apache.synapse.MessageContext;
-
-/**
- * All Synapse mediators must implement this Mediator interface. As a message passes
- * through the synapse system, each mediator's mediate() method is invoked in the
- * sequence/order defined in the SynapseConfiguration.
- */
-public interface <span style="font-weight: bold;">Mediator </span>{
-
-    /**
-     * Invokes the mediator passing the current message for mediation. Each
-     * mediator performs its mediation action, and returns true if mediation
-     * should continue, or false if further mediation should be aborted.
-     *
-     * @param synCtx the current message for mediation
-     * @return true if further mediation should continue
-     */
-    public boolean mediate(MessageContext synCtx);
-
-    /**
-     * This is used for debugging purposes and exposes the type of the current
-     * mediator for logging and debugging purposes
-     * @return a String representation of the mediator type
-     */
-    public String getType();
-}</pre>
-    <p>
-      A mediator can read and/or modify the <a>SynapseMessage</a> in
-      any suitable manner - adjusting the routing headers or changing the
-      message body. If the mediate() method returns false, it signals to the
-      Synapse processing model to stop further processing of the message. For
-      example, if the mediator is a security agent it may decide that this
-      message is dangerous and should not be processed further. This is
-      generally the exception as mediators are usually designed to co-operate to
-      process the message onwards.
-    </p>
-    <h3>
-      Leaf and Node Mediators, List mediators and Filter mediators
-    </h3>
-    <p>
-      Mediators may be Node mediators (i.e. these that can contain child
-      mediators) or Leaf mediators (mediators that does not hold any other child
-      mediators). A Node mediator  must implement the
-      org.apache.synapse.api.ListMediator interface listed below, or extend from
-      the org.apache.synapse.mediators.AbstractListMediator.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/ListMediator.java?view=markup">The
-      ListMediator interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.mediators;
-
-import java.util.List;
-
-/**
-* The List mediator executes a given sequence/list of child mediators
-*/
-public interface ListMediator extends Mediator {
-    /**
-    * Appends the specified mediator to the end of this mediator's (children) list
-    * @param m the mediator to be added
-    * @return true (as per the general contract of the Collection.add method)
-    */
-    public boolean addChild(Mediator m);
-
-    /**
-    * Appends all of the mediators in the specified collection to the end of this mediator's (children)
-    * list, in the order that they are returned by the specified collection's iterator
-    * @param c the list of mediators to be added
-    * @return true if this list changed as a result of the call
-    */
-    public boolean addAll(List c);
-
-    /**
-    * Returns the mediator at the specified position
-    * @param pos index of mediator to return
-    * @return the mediator at the specified position in this list
-    */
-    public Mediator getChild(int pos);
-
-    /**
-    * Removes the first occurrence in this list of the specified mediator
-    * @param m mediator to be removed from this list, if present
-    * @return true if this list contained the specified mediator
-    */
-    public boolean removeChild(Mediator m);
-
-    /**
-    * Removes the mediator at the specified position in this list
-    * @param pos the index of the mediator to remove
-    * @return the mediator previously at the specified position
-    */
-    public Mediator removeChild(int pos);
-
-    /**
-    * Return the list of mediators of this List mediator instance
-    * @return the child/sub mediator list
-    */
-    public List getList();
-}</pre>
-    <p>
-      A ListMediator implementation should call super.mediate(synCtx) to process
-      its sub mediator sequence. A FilterMediator is a ListMediator which
-      executes its sequence of sub mediators on successful outcome of a test
-      condition. The Mediator instance which performs filtering should implement
-      the FilterMediator interface.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/FilterMediator.java?view=markup">FilterMediator
-      interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.mediators;
-
-import org.apache.synapse.MessageContext;
-
-/**
- * The filter mediator is a list mediator, which executes the given (sub) list of mediators
- * if the specified condition is satisfied
- *
- * @see FilterMediator#test(org.apache.synapse.MessageContext)
- */
-public interface <span style="font-weight: bold;">FilterMediator </span>extends ListMediator {
-
-    /**
-     * Should return true if the sub/child mediators should execute. i.e. if the filter
-     * condition is satisfied
-     * @param synCtx
-     * @return true if the configured filter condition evaluates to true
-     */
-    public boolean test(MessageContext synCtx);
-}</pre>
-    <h2>
-      Writing custom Configuration implementations for mediators
-    </h2>
-    <p>
-      You may write your own custom configurator for the Mediator implementation
-      you write without relying on the Class mediator or Spring extension for
-      its initialization. You could thus write a MediatorFactory implementation
-      which defines how to digest a custom XML configuration element to be used
-      to create and configure the custom mediator instance. A MediatorSerializer
-      implementation defines how a configuration should be serialized back into
-      an XML configuration. The custom MediatorFactory &amp; MediatorSerializer
-      implementations and the mediator class/es must be bundled in a JAR file
-      conforming to the J2SE Service Provider model (See the description for
-      Extensions below for more details and examples) and placed into the
-      SYNAPSE_HOME/lib folder, so that the Synapse runtime could find and load
-      the definition. Essentially this means that a custom JAR file must bundle
-      your class implementing the Mediator interface, and the MediatorFactory
-      implementation class and contain two text files named
-      "org.apache.synapse.config.xml.MediatorFactory" and
-      "org.apache.synapse.config.xml.MediatorSerializer" which will contain the
-      fully qualified name(s) of your MediatorFactory and MediatorSerializer
-      implementation classes. You should also place any dependency JARs into the
-      same lib folder so that the correct classpath references could be made.
-      The MediatorFactory interface listing is given below, which you should
-      implement, and its getTagQName() method must define the fully qualified
-      element of interest for custom configuration. The Synapse initialization
-      will call back to this MediatorFactory instance through the
-      createMediator(OMElement elem) method passing in this XML element, so that
-      an instance of the mediator could be created utilizing the custom XML
-      specification and returned. See the ValidateMediator and the
-      ValidateMediatorFactory classes under modules/extensions in the Synapse
-      source distribution for examples.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorFactory.java?view=markup">The
-      MediatorFactory interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.config.xml;
-
-import ...
-
-/**
- * A mediator factory capable of creating an instance of a mediator through a given
- * XML should implement this interface
- */
-public interface MediatorFactory {
-    /**
-     * Creates an instance of the mediator using the OMElement
-     * @param elem
-     * @return the created mediator
-     */
-    public Mediator createMediator(OMElement elem);
-
-    /**
-     * The QName of this mediator element in the XML config
-     * @return QName of the mediator element
-     */
-    public QName getTagQName();
-}</pre>
-    <p/>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorSerializer.java?view=markup">The
-      MediatorSerializer interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.config.xml;
-
-import ...
-
-/**
- * Interface which should be implemented by mediator serializers. Does the
- * reverse of the MediatorFactory
- */
-public interface MediatorSerializer {
-
-    /**
-     * Return the XML representation of this mediator
-     * @param m mediator to be serialized
-     * @param parent the OMElement to which the serialization should be attached
-     * @return the serialized mediator XML
-     */
-    public OMElement serializeMediator(OMElement parent, Mediator m);
-
-    /**
-     * Return the class name of the mediator which can be serialized
-     * @return the class name
-     */
-    public String getMediatorClassName();
-}</pre>
-    <h2>
-      Configuring mediators
-    </h2>
-    <p>
-      Mediators could access the Synapse registry to load resources and
-      configure the local behaviour. Refer to the Spring mediator and Script
-      mediator implementations for examples on how this could be achieved.
-    </p>
-    <h4>
-      Loading of Extensions by the Synapse runtime
-    </h4>
-    <p>
-      Synapse loads available extensions from the runtime classpath using the <a
-      href="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service%20Provider">J2SE
-      Service Provider model</a>. This essentially iterates over the
-      available JAR files, for  a META-INF/services directory within each file,
-      and looks for a text file with the name
-      org.apache.synapse.config.xml.MediatorFactory which contains a list of
-      fully qualified classname that implement the above interface, listing each
-      class in a separate line. e.g. The built-in synapse-extensions.jar
-      contains the following structure
-    </p>
-<pre xml:space="preserve">synapse-extensions.jar
-    /META-INF/services
-        org.apache.synapse.config.xml.MediatorFactory
-        org.apache.synapse.config.xml.MediatorSerializer
-    /... the implementation classes as usual...</pre>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_1/extending.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1/configuration.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1/configuration.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1/configuration.xml	(nonexistent)
@@ -1,1511 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta content="text/html; charset=iso-8859-1" http-equiv="content-type"/>
-    <title>
-      Synapse Configuration Language
-    </title>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Synapse Configuration Language
-    </h1>
-    <p>
-      The Synapse configuration language is designed to support a processing
-      model where messages come into Synapse, are processed via some number of
-      mediators and then delivered to an endpoint somewhere. It is currently
-      direction agnostic, but directionality can easily be added as a selection
-      mechanism for mediators (see below for details).
-    </p>
-    <h3>
-      Overall Structure
-    </h3>
-    <p>
-      A Synapse configuration looks like the following at the top level:
-    </p>
-<pre xml:space="preserve"> &lt;definitions&gt;
-   &lt;<a href="#registry">registry</a> provider="string"&gt;...&lt;/registry&gt;?
-   &lt;<a href="#localEntry">localEntry</a> key="string"&gt;...&lt;/localEntry&gt;?
-   &lt;<a href="#sequence">sequence</a> name="string"&gt;...&lt;/sequence&gt;?
-   &lt;<a href="#endpoint">endpoint</a> name="string"&gt;...&lt;/endpoint&gt;?
-   &lt;<a href="#proxy">proxy</a> name="string" ...&gt;...&lt;/proxy&gt;?
-   &lt;<a href="#task">task</a> name="string" ...&gt;...&lt;/task&gt;?
-   <a href="#mediator">mediator</a>*
- &lt;/definitions&gt;</pre>
-    <p/>
-    <p>
-      The Synapse configuration is held in a single XML file called the
-      'synapse.xml' and this may refer to other configuration fragments and
-      resources - which may be held in an external Registry or Repository. The
-      Synapse release ships with a simple URL based registry implementation that
-      could use a file system, web server etc. as the registry/repository
-      backend. When using the file system, the contents could be held in a
-      version controlled directory so that changes could be controlled and moved
-      from Dev, QA, Staging to Production. The Synapse engine and the simple URL
-      registry implementation support caching and dynamic refreshing of some
-      configuration elements [sequences &amp; endpoints] and resources such as
-      XSLT's, Scripts, XSDs etc. Synapse can be easily integrated with an
-      external registry by implementing the
-      'org.apache.synapse.registry.Registry' interface.
-    </p>
-    <p/>
-    <p>
-      A Synapse configuration refers to resources stored on an external Registry
-      via 'keys'. The 'localEntry' elements in a configuration provides the
-      capability to define a new resource or configuration fragment; or to
-      override any existing resource available under a registry with a local
-      replacement. An example would be to use a localEntry to override the
-      production endpoint definition for development time. Local entries could
-      direct to an external URL for the resource content, or provide the text or
-      XML content inline.
-    </p>
-    <p/>
-    <p>
-      Synapse accepts messages for mediation via the exposed/enabled transports.
-      These are configured via the 'axis2.xml' configuration file. By default
-      the http, https and VFS transports are enabled. Using the JMS and Mail
-      transports requires that these be enabled and configured for your
-      environment via the axis2.xml file. Once a proxy service is defined, it
-      could be configured to listen for messages on one or more of the enabled
-      transports. A proxy service then listens for messages over the selected
-      transports by exposing a virtual service. A proxy service maybe a SOAP or
-      POX service over http/s or SOAP, POX or Plain Text service for other
-      transports such as JMS and VFS - e.g. CSV content being its payload. Thus
-      Synapse is able to switch between these message formats and transports, as
-      well as introduce or terminate QoS aspects such as WS-Security/RM through
-      proxy services.
-    </p>
-    <p/>
-    <p>
-      Sequences define an ordered execution of a set of 'Mediators', where each
-      'Mediator' gets full access to the current message flowing through the
-      system. Synapse ships with a common set of mediators that can handle most
-      of the common tasks such as - logging, content based routing,
-      transformations using XSLT/XQuery, validation, BSF scripting language
-      based or Java class based mediation, database reporting or lookup,
-      caching, throttling, cloning, splitting and aggregation etc. Writing a
-      custom mediator in Java is easy and the supplementary documentation
-      provides more details. The 'Class' and 'POJO' mediators allows one to
-      plugin a Java class easily into the Synapse engine with minimal effort.
-    </p>
-    <p/>
-    <p>
-      Typically proxy services associates mediation sequences for processing
-      incoming and outgoing messages. A Synapse configuration holds two special
-      sequences called the 'main' and 'fault' sequences. The 'main' sequence
-      executes for any message that is not received by any particular proxy
-      service. When using the http/s transports - this refers to the concept of
-      'Message Mediation' where Synapse may be configured as a transparent proxy
-      to its clients. In this scenario, Synapse could receive all messages on
-      the wire and mediate them as necessary and send them to the final
-      destinations. The 'fault' sequence executes whenever Synapse itself
-      encounters an error while processing a message - or when a fault handler
-      has not been defined to handle exceptions. Typically a fault sequence
-      would log the failed message and any other context information.
-    </p>
-    <p/>
-    <p>
-      Endpoints define aspects to be considered when sending a message out from
-      Synapse. Endpoints also allow load balancing, fail-over and timeout
-      scenarios to be handled - or to introduce WS-Security, Addressing or RM
-      for messages sent to an endpoint. An endpoint maybe defined as an Address
-      or using a WSDL definition.
-    </p>
-    <p/>
-    <h2>
-      <a name="registry" id="registry">Registry</a>
-    </h2>
-    <p>
-      The &lt;registry&gt; element is used to define a remote registry which are
-      referenced from within the configuration. The registry provider specifies
-      an implementation class for the registry used, and optionally a number of
-      configuration parameters may be specified to configure the connection to
-      the registry.
-    </p>
-<pre xml:space="preserve"> &lt;registry provider="string"/&gt;
-   &lt;parameter name="string"&gt;text | xml&lt;/parameter&gt;*
- &lt;/registry&gt;</pre>
-    <p>
-      Registry entries loaded from a remote registry are cached within Synapse
-      as dictated by the registry, and reloaded after the cache periods expires.
-      Hence it is possible to define configuration elements such as (dynamic)
-      sequences and endpoints, as well as resources such as XSLT's or XSDs off
-      the registry, and update the configuration as these change dynamically
-      over time.
-    </p>
-    <p/>
-    <h3>
-      <a name="localEntry" id="localEntry">Local Entry</a>
-    </h3>
-    <p>
-      The &lt;localEntry&gt; element is used to declare registry entries that
-      are local to the Synapse instance, as shown below
-    </p>
-<pre xml:space="preserve">  &lt;localEntry key="string" [src="url"]&gt;text | xml&lt;/localEntry&gt;</pre>
-    <p>
-      These entries are top level entries which are set globally for the entire
-      system. Values of these entries can be retrieved via the extension XPath
-      function "synapse:get-property(prop-name)".
-    </p>
-    <p>
-      An entry can be static text specified as inline text or static XML
-      specified as an inline XML fragment or specified as a URL (using the src
-      attribute). These local entries can override any existing entries with the
-      same keys of the remote registry.
-    </p>
-    <p/>
-    <h2>
-      <a name="sequence" id="sequence">Sequences</a>
-    </h2>
-    <p>
-      A &lt;sequence&gt; element is used to define a sequence of mediators that
-      can be invoked later by name.
-    </p>
-<pre xml:space="preserve"> &lt;sequence name="string" [onError="string"] [key="string"] [trace="enable"]&gt;
-   mediator*
- &lt;/sequence&gt;</pre>
-    <p>
-      If the configuration defines a sequence named "main" then it is considered
-      as the main mediation sequence of Synapse. If such a sequence is not
-      defined locally, and a registry has been specified, the registry is looked
-      up for a key named "main" to find the main mediation sequence. Synapse
-      also supports the specification of mediators directly within the &lt;definitions&gt;
-      tag, and if any mediators are present, will be considered to constitute
-      the main sequence. In the absence of a main sequence, the Synapse runtime
-      will create a default main sequence that consists of an implicit send
-      mediator.
-    </p>
-    <p>
-      Synapse considers a sequence named "fault", or in its absence a registry
-      entry with a key "fault" as its general fault handler sequence. If Synapse
-      encounters an erroneous situation while processing a message through a
-      sequence, it executes the defined error handling sequence for the current
-      context - which may be specified as the 'onError' sequence for a sequence
-      mediator. If a fault sequence is not specified or cannot be found through
-      the registry, Synapse will create a default fault sequence that will
-      perform a default logging of the message at the log level 'full'.
-    </p>
-    <p>
-      If an optional error handler sequence name is specified on any sequence
-      through the attribute 'onError', an exception on this sequence will invoke
-      the sequence specified by this key.
-    </p>
-    <p>
-      A Dynamic Sequence may be defined by specifying a key reference to a
-      registry entry. As the remote registry entry changes, the sequence will
-      dynamically be updated according to the specified cache duration and
-      expiration. If tracing is enabled on a sequence, all messages being
-      processed through the sequence would write tracing information through
-      each mediation step to the trace.log file configured via the
-      log4j.properties configuration. Setting the trace log level to TRACE would
-      additionally dump the message at each mediation.
-    </p>
-    <p/>
-    <h2>
-      <a name="endpoint" id="endpoint">Endpoints</a>
-    </h2>
-    <p>
-      An &lt;endpoint&gt; element defines a destination for an outgoing message.
-      An endpoint may be specified as an address endpoint, WSDL based endpoint,
-      a load balanced endpoint or a fail-over endpoint as follows:
-    </p>
-<pre xml:space="preserve">&lt;endpoint [name="string"] [key="string"][trace="enable"]&gt;
-  <a href="#address-endpoint">address-endpoint</a> | <a href="#wsdl-endpoint">wsdl-endpoint</a> | <a href="#load-balanced-endpoint">load-balanced-endpoint</a> | <a href="#fail-over-endpoint">fail-over-endpoint</a>
-&lt;/endpoint&gt; </pre>
-    <p>
-      All above endpoint types can have a name attribute. Such named endpoints
-      can be refered by other endpoints, which only contain the key attribute.
-      For example if there is an endpoint named as "foo", following endpoint can
-      be used in any place, where "foo" has to be used. A tracing enabled
-      endpoint would generate trace information into the trace log for each
-      message that passes through.
-    </p>
-<pre xml:space="preserve">&lt;endpoint key="foo"/&gt;</pre>
-    <h4>
-      <a name="address-endpoint" id="address-endpoint">Address Endpoint</a>
-    </h4>
-    <p>
-      Address endpoint is an endpoint defined by specifying the EPR and other
-      attributes of the endpoint directly in the configuration.The 'uri'
-      attribute of the address element contains the EPR of the target endpoint.
-      Message format for the endpoint and the method to optimize attachments can
-      be specified in the format and optimize attributes respectively. Reliable
-      messaging and security policies for the endpoint can be specified in the
-      policy attribute of the enableRM and enableSec elements respectively.
-      WS-Addressing can be engaged for the messaging going to the endpoint by
-      the enableAddressing element. suspendDurationOnFailure attribute specifies
-      the time duration in seconds to suspend this endpoint, if it is detected
-      as failed. If this attribute is not specified, endpoint will never be
-      recovered after a failure.
-    </p>
-    <p/>
-    <p>
-      Address endpoints can timeout the responses if they failed to arrive
-      Synapse in predefined time duration. This is done by the timeout elements.
-      duration element inside the timeout element contains duration for the
-      timeout in seconds. action element specifies the action to be performed
-      once a timeout occurs. Allowed actions are discard and fault. If discard
-      is specified, responses arriving after the timeout will be discarded
-      without further processing. If fault is specified as the action, fault
-      sequence applicable for the endpoint will be activated as soon as the
-      timeout occurs and responses will not be processed after that.
-    </p>
-<pre xml:space="preserve">&lt;address uri="endpoint-address" format="soap11|soap12|pox" [optimize="mtom|swa"]&gt;
-  &lt;enableRM [policy="key"]/&gt;?
-  &lt;enableSec [policy="key"]/&gt;?
-  &lt;enableAddressing/&gt;?
-  &lt;suspendDurationOnFailure&gt;suspend-duration&lt;/suspendDurationOnFailure&gt;?
-  &lt;timeout&gt;
-    &lt;duration&gt;timeout-duration&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-&lt;/address&gt;</pre>
-    <h4>
-      <a name="wsdl-endpoint" id="wsdl-endpoint">WSDL Endpoint</a>
-    </h4>
-    <p>
-      WSDL endpoint is an endpoint based on a WSDL document. It can extract the
-      target EPR from a given WSDL. The WSDL document can be specified either as
-      a URI or as an inlined definition within the configuration. The service
-      and port name containing the target EPR has to be specified in service and
-      port attributes respectively. enableRM, enableSec, enableAddressing,
-      suspendDurationOnFailure and timeout elements are same as for the Address
-      endpoint.
-    </p>
-<pre xml:space="preserve">&lt;wsdl [uri="wsdl-uri"] service="qname" port/endpoint="qname"&gt;
-  &lt;wsdl:definition&gt;...&lt;/wsdl:definition&gt;?
-  &lt;wsdl20:description&gt;...&lt;/wsdl20:description&gt;?
-  &lt;enableRM [policy="key"]/&gt;?
-  &lt;enableSec [policy="key"]/&gt;?
-  &lt;enableAddressing/&gt;?
-  &lt;suspendDurationOnFailure&gt;suspend-duration&lt;/suspendDurationOnFailure&gt;?
-  &lt;timeout&gt;
-    &lt;duration&gt;timeout-duration&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-&lt;/wsdl&gt;</pre>
-    <h4>
-      <a name="load-balanced-endpoint" id="load-balanced-endpoint">Load
-      balanced Endpoint</a>
-    </h4>
-    <p>
-      A Load balanced endpoint distributes the messages (load) arriving at it
-      among a set of listed endpoints by evaluating the load balancing policy
-      and any other relevant parameters. Policy attribute of the load balance
-      element specifies the load balance policy (algorithm) to be used for
-      selecting the target endpoint. Currently only the roundRobin policy is
-      supported. failover attribute determines if the next endpoint should be
-      selected once the currently selected endpoint has failed. Default is true.
-      The set of endpoints among which the load is distributed can be listed
-      under the loadBalance element. Those endpoints can belong to any endpoint
-      type mentioned in this document. For example, failover endpoints can be
-      listed inside the load balance endpoint to load balance between failover
-      groups.
-    </p>
-    <p/>
-    <p>
-      The optional session element makes the endpoint a session affinity based
-      load balancing endpoint. If it is specified, sessions are bound to
-      endpoints in the first message and all successive messages for those
-      sessions are directed to their associated endpoints. http sessions are
-      supported currently, which identifies sessions based on http cookies.
-      failover attribute mentioned above is not applicable for session affinity
-      based endpoints and it is always set to false. If it is required to have
-      failover behavior in session affinity based load balance endpoints, list
-      failover endpoints as the target endpoints.
-    </p>
-<pre xml:space="preserve">&lt;session type="http"/&gt;?
-&lt;loadBalance [policy="roundRobin"] [failover="true|false"]&gt;
-  &lt;endpoint .../&gt;+
-&lt;/loadBalance&gt;</pre>
-    <h4>
-      <a name="fail-over-endpoint" id="fail-over-endpoint">Failover Endpoint</a>
-    </h4>
-    <p>
-      Failover endpoints send messages to the listed endpoints with the
-      following failover behavior. At the start, first listed endpoint is
-      selected as the primary and all other endpoints are treated as backups.
-      Incoming messages are always sent only to the primary endpoint. If the
-      primary endpoint fails, next active endpoint is selected as the primary
-      and failed endpoint is marked as inactive. Thus it sends messages
-      successfully as long as there is at least one active endpoint among the
-      listed endpoints.
-    </p>
-<pre xml:space="preserve">&lt;failover&gt;
-  &lt;endpoint .../&gt;+
-&lt;/failover&gt;</pre>
-    <h2>
-      <a name="proxy" id="proxy">Proxy service</a>
-    </h2>
-    <p>
-      A &lt;proxy&gt; element is used to define a Synapse Proxy service.
-    </p>
-<pre xml:space="preserve"> &lt;proxy name="string" [transports="(http |https |jms )+|all"]&gt;
-   &lt;description&gt;...&lt;/description&gt;?
-   &lt;target [inSequence="name"] [outSequence="name"] [faultSequence="name"] [endpoint="name"]&gt;
-      &lt;inSequence&gt;...&lt;/inSequence&gt;?
-      &lt;outSequence&gt;...&lt;/outSequence&gt;?
-      &lt;faultSequence&gt;...&lt;/faultSequence&gt;?
-      &lt;endpoint&gt;...&lt;/endpoint&gt;?
-   &lt;/target&gt;?
-   &lt;publishWSDL key="string" uri="string"&gt;
-      &lt;description&gt;...&lt;/description&gt; | &lt;definitions&gt;...&lt;/definitions&gt;
-   &lt;publishWSDL&gt;?
-   &lt;enableSec/&gt;?                            // These two tags will removed after the recognition of the Security and RM can be done by looking at policy
-   &lt;enableRM/&gt;?
-   &lt;policy key="string"&gt;...&lt;/policy&gt;?       // optional service level policies
-                                            // (e.g. WS-Security and/or WS-RM policies)
-   &lt;parameter name="string"&gt;                // optional service parameters
-      string | xml                          // (e.g. transport.jms.ConnectionFactory)
-   &lt;/parameter&gt;
- &lt;/proxy&gt;</pre>
-    <p>
-      A proxy service is created and exposed on the specified transports through
-      the underlying Axis2 instance, exposing service EPR's as per the standard
-      Axis2 conventions - based on the service name. (Note: that currently Axis2
-      does not allow custom URI's to be set for services on some transports.)
-      The Proxy service could be exposed over all enabled Axis2 transports such
-      as http, https, JMS etc. or on a subset of these. Each service could
-      define the target for received messages as a named sequence or a direct
-      endpoint. Target inSequence or endpoint is required for the proxy
-      configuration, and a target outSequence defines how responses should be
-      handled. Any supplied WS-Policies would apply as service level policies,
-      and any service parameters could be passed into the proxy services'
-      AxisService instance using the parameter elements (e.g. the JMS
-      destination etc). If the proxy service should enable WS-Reliable Messaging
-      or Security, the appropriate modules could be engaged, and specified
-      policies will apply.
-    </p>
-    <p>
-      A Dynamic Proxy may be defined by specifying the properties of the proxy
-      as dynamic entries by refering them with the key. (For example one could
-      specify the inSequence or endpoint with the remote key, without defining
-      it in the local configuration) As the remote registry entry changes, the
-      properties of the proxy will dynamically be updated accordingly. (Note:
-      proxy service definition itself can not be specified to be dynamic; i.e
-      &lt;proxy key="string"/&gt; is wrong)
-    </p>
-    <p/>
-    <p>
-      Transport specific parameters
-    </p>
-    <table border="1" style="width: 100%">
-      <caption/>
-      <tbody>
-        <tr>
-          <td>
-            Transport
-          </td>
-          <td>
-            Require
-          </td>
-          <td>
-            Parameter
-          </td>
-          <td>
-            Description
-          </td>
-        </tr>
-        <tr>
-          <td>
-            JMS
-          </td>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.jms.ConnectionFactory
-          </td>
-          <td>
-            The JMS connection factory definition (from axis2.xml) to be used to
-            listen for messages for this service
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.jms.Destination
-          </td>
-          <td>
-            The JMS Destination name (Defaults to a Queue with the service name)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.jms.ReplyDestination
-          </td>
-          <td>
-            The Destination where a reply would be posted
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td/>
-          <td/>
-          <td/>
-        </tr>
-        <tr>
-          <td>
-            VFS
-          </td>
-          <td>
-            Required
-          </td>
-          <td>
-            transport.vfs.FileURI
-          </td>
-          <td>
-            The primary File (or Directory) URI in the vfs* transport format,
-            for this service
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Required
-          </td>
-          <td>
-            transport.vfs.ContentType
-          </td>
-          <td>
-            The content type for messages for this service
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.FileNamePattern
-          </td>
-          <td>
-            A file name regex pattern to match files against a directory
-            specified by the FileURI
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.PollInterval
-          </td>
-          <td>
-            The poll interval (in seconds)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ActionAfterProcess
-          </td>
-          <td>
-            DELETE or MOVE
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.MoveAfterProcess
-          </td>
-          <td>
-            The directory to move files after processing (i.e. all files process
-            successfully)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ActionAfterErrors
-          </td>
-          <td>
-            DELETE or MOVE
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.MoveAfterErrors
-          </td>
-          <td>
-            The directory to move files after errors (i.e. some of the files
-            succeed but some fail)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ActionAfterFailure
-          </td>
-          <td>
-            DELETE or MOVE
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.MoveAfterFailure
-          </td>
-          <td>
-            The directory to move after failure (i.e. all files fail)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td/>
-          <td/>
-          <td/>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ReplyFileURI
-          </td>
-          <td>
-            Reply file URI
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ReplyFileName
-          </td>
-          <td>
-            Reply file name (defaults to response.xml)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td/>
-          <td/>
-          <td/>
-        </tr>
-      </tbody>
-    </table>
-    <p>
-      *VFS Transport URI examples
-    </p>
-    <p>
-      file:///directory/filename.ext
-    </p>
-    <p>
-      file:////somehost/someshare/afile.txt
-    </p>
-    <p>
-      jar:../lib/classes.jar!/META-INF/manifest.mf
-    </p>
-    <p>
-      jar:zip:outer.zip!/nested.jar!/somedir
-    </p>
-    <p>
-      ftp://myusername:mypassword@somehost/pub/downloads/somefile.tgz[?vfs.passive=true]</p>
-    <h2>
-      <a name="task" id="task">Tasks</a>
-    </h2>
-    <p>
-      A &lt;task&gt; element is used to define a Synapse Startup Task.
-    </p>
-<pre xml:space="preserve"> &lt;task class="org.my.synapse.Task" name="string"&gt;
-   &lt;property name="stringProp" value="String"/&gt;
-   &lt;property name="xmlProp"&gt;
-     &lt;somexml&gt;config&lt;/somexml&gt;
-   &lt;/property&gt;
-   &lt;trigger ([[count="10"]? interval="1000"] | [cron="0 * 1 * * ?"] | [once=(true | false)])/&gt;
- &lt;/task&gt;</pre>
-    <p>
-      A task is created and scheduled to run at the specified time intervals or
-      as specified by the cron expression. The Task class specifies the actual
-      task implementation class (which must implement
-      org.apache.synapse.startup.Task interface) to be executed at the specified
-      interval/s, and name specifies an identifier for the scheduled task.
-      Fields in the task class can be set using properties provided as string
-      literals or as XML fragments. (For example; if the task implementation
-      class has a field named "version" with a corresponding setter method, the
-      configuration value which will be assigned to this field before running
-      the task can be specified using a property with the name version)
-    </p>
-    <p>
-      There are three different trigger mechanisms to schedule tasks. A simple
-      trigger is specified specifying a 'count' and an 'interval', implying that
-      the task will run a 'count' number of times at specified intervals. A
-      trigger may also be specified as a cron trigger using a cron expression. A
-      one-time trigger is specified using the 'once' attribute as true in the
-      definition and could be specified as true in which case this task will be
-      executed only once just after the initialization of Synapse
-    </p>
-    <p/>
-    <h2>
-      <a name="mediator" id="mediator">Mediators</a>
-    </h2>
-    <p>
-      A mediator token refers to any of the following tokens:
-    </p>
-<pre xml:space="preserve"><a href="#send">send</a> | <a href="#drop">drop</a> | <a href="#log">log</a> | <a href="#property">property</a> | <a href="#sequence_ref">sequence</a> | <a href="#validate">validate</a> | <a href="#makefault">makefault</a> | <a href="#xslt">xslt</a> | <a href="#header">header</a> | <a href="#filter">filter</a> | <a href="#switch">switch</a> | <a href="#in">in</a> | <a href="#out">out</a> | <a href="#dblookup">dblookup</a> | <a href="#dbreport">dbreport</a> | <a href="#RMSequence">RMSequence</a> | <a href="#throttle">throttle</a> | <a href="#xquery">xquery</a> | <a href="#cache">cache</a> | <a href="#clone">clone</a> | <a href="#iterate">iterate</a> | <a href="#aggregate">aggregate</a> | <a href="#class">class</a> | <a href="#pojoCommand">pojoCommand</a> | <a href="#script">script</a> | <a href="#spring">spring</a> </pre>
-    <p>
-      In addition to the above, Synapse will be able to load custom mediators
-      via the J2SE Service Provider model. Mediator extensions must implement
-      the MediatorFactory interface.
-    </p>
-    <h3>
-      Core Mediators
-    </h3>
-    <h4>
-      <a name="send" id="send">Send</a>
-    </h4>
-    <p>
-      The send token represents a &lt;send&gt; element. The &lt;send&gt; element
-      is used to send messages out of Synapse to some endpoint, and stop further
-      mediation of the message. The send mediator also copies any message
-      context properties from the current message context to the reply message
-      received on the execution of the send operation. This allows the reply
-      messages to be correlated to the original messages in a flexible manner.
-      Messages may be correlated by WS-A MessageID, or even simple custom text
-      labels. Also see the property mediator.
-    </p>
-    <p>
-      In the simplest case, the place to send the message to is implicit in the
-      message (via a property of the message itself)- that is indicated by the
-      following:
-    </p>
-<pre xml:space="preserve"> &lt;send/&gt;</pre>
-    <p>
-      If the message is to be sent to one or more endpoints, then the following
-      is used:
-    </p>
-<pre xml:space="preserve"> &lt;send&gt;
-   (endpointref | endpoint)+
- &lt;/send&gt;</pre>
-    <p>
-      where the endpointref token refers to the following:
-    </p>
-<pre xml:space="preserve"> &lt;endpoint key="name"/&gt;</pre>
-    <p>
-      and the endpoint token refers to an anonymous endpoint defined.
-    </p>
-    <p/>
-    <h4>
-      <a name="drop" id="drop">Drop</a>
-    </h4>
-    <p>
-      The drop token refers to a &lt;drop&gt; element which is used to drop a
-      message:
-    </p>
-<pre xml:space="preserve"> &lt;drop/&gt;</pre>
-    <p>
-      Once the &lt;drop&gt; mediator executes, further processing of the current
-      message stops.
-    </p>
-    <p/>
-    <h4>
-      <a name="log" id="log">Log</a>
-    </h4>
-    <p>
-      The log token refers to a &lt;log&gt; element which may be used to log
-      messages being mediated:
-    </p>
-<pre xml:space="preserve"> &lt;log [level="string"] [separator="string"]&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
- &lt;/log&gt;</pre>
-    <p>
-      The optional level attribute selects a pre-defined subset of properties to
-      be logged.
-    </p>
-    <p>
-      e.g.
-    </p>
-    <ul>
-      <li>
-        simple = To, From, WSAction, SOAPAction, ReplyTo, MessageID and any
-        properties
-      </li>
-      <li>
-        headers = All SOAP header blocks and any properties
-      </li>
-      <li>
-        full = all attributes included in log level 'simple' and the SOAP
-        envelope and any properties
-      </li>
-      <li>
-        custom = Only properties specified to the Log mediator
-      </li>
-    </ul>
-    <p>
-      A separator if defined will be used to separate the attributes being
-      logged. The default separator is the ',' comma.
-    </p>
-    <p/>
-    <h4>
-      <a name="property" id="property">Property</a>
-    </h4>
-<pre xml:space="preserve"> &lt;property name="string" [action=set|remove] (value="literal" | expression="xpath") [scope=transport|axis2|axis2-client]/&gt;</pre>
-    <p>
-      The property token refers to a &lt;property&gt; element which is a
-      mediator that has no direct impact on the message but rather on the
-      message context flowing through Synapse. The properties which does not
-      specify the action thus set on the message context applies only to the
-      current message and can be later retrieved through the
-      synapse:get-property(prop-name) extension function. If a scope is
-      specified for a property, the property could be set as a transport header
-      property or an (underlying) Axis2 message context property, or as a Axis2
-      client option or as an Axis2 message context property. If a scope is not
-      specified, it will default to the Synapse message context scope. Using the
-      property element with action specified as "remove" you can remove the
-      message context properties if available.
-    </p>
-    <p>
-      There are some well-defined properties that you can get/set:
-    </p>
-    <ul>
-      <li>
-        RESPONSE - 'true' means the message is marked as a response message
-      </li>
-      <li>
-        OUT_ONLY - 'true' means the message is marked as an out-only message
-        that does not expect a response
-      </li>
-      <li>
-        ERROR_CODE - this is set to any error message code encountered
-      </li>
-      <li>
-        ERROR_MESSAGE - this is set to any error message text encountered
-      </li>
-      <li>
-        ERROR_DETAIL - this is set to any error message detail text encountered
-      </li>
-    </ul>
-    <p>
-      There are also some Axis2 and module properties that are useful to set
-      (with scope="axis2"):
-    </p>
-    <ul>
-      <li>
-        Sandesha2RMSpecVersion - can be '1.0' or '1.1'
-      </li>
-      <li>
-        Sandesha2SequenceKey - can be an identifier specifying an Sandesha
-        internal sequence key, and
-      </li>
-      <li>
-        Sandesha2LastMessage - 'true' will make this the last message and
-        terminate the sequence
-      </li>
-    </ul>
-    <p/>
-    <h4>
-      <a name="sequence_ref" id="sequence_ref">Sequence</a>
-    </h4>
-<pre xml:space="preserve"> &lt;sequence key="name"/&gt;</pre>
-    <p>
-      A sequence ref token refers to a &lt;sequence&gt; element which is used to
-      invoke a named sequence of mediators.
-    </p>
-    <p/>
-    <h4>
-      <a name="validate" id="validate">Validate</a>
-    </h4>
-<pre xml:space="preserve"> &lt;validate [source="xpath"]&gt;
-   &lt;property name="validation-feature-id" value="true|false"/&gt;*
-   &lt;schema key="string"/&gt;+
-   &lt;on-fail&gt;
-     mediator+
-   &lt;/on-fail&gt;
- &lt;/validate&gt;</pre>
-    <p>
-      The &lt;validate&gt; mediator validates the result of the evaluation of
-      the source xpath expression, against the schema specified. If the source
-      attribute is not specified, the validation is performed against the first
-      child of the SOAP body of the current message. If the validation fails,
-      the on-fail sequence of mediators is executed. Properties could be used to
-      turn on/off some of the underlying features of the validator (See
-      http://xerces.apache.org/xerces2-j/features.html)
-    </p>
-    <p/>
-    <h3>
-      Transformation Mediators
-    </h3>
-    <h4>
-      <a name="makefault" id="makefault">Makefault</a>
-    </h4>
-<pre xml:space="preserve"> &lt;makefault [version="soap11|soap12"]&gt;
-   &lt;code (value="literal" | expression="xpath")/&gt;
-   &lt;reason (value="literal" | expression="xpath")&gt;
-   &lt;node&gt;?
-   &lt;role&gt;?
-   &lt;detail&gt;?
- &lt;/makefault&gt;</pre>
-    <p>
-      The &lt;makefault&gt; mediator transforms the current message into a fault
-      message, but does NOT send it. The &lt;send&gt; mediator needs to be
-      invoked to send a fault message created this way. The fault message "to"
-      header is set to the "faultTo" of the original message if such a header
-      existed on the original message.
-    </p>
-    <p/>
-    <h4>
-      <a name="xslt" id="xslt">XSLT</a>
-    </h4>
-<pre xml:space="preserve"> &lt;xslt key="string" [source="xpath"]&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
-   &lt;feature name="string" value="true| false" /&gt;
- &lt;/xslt&gt;</pre>
-    <p>
-      The &lt;xslt&gt; mediator applies the specified XSLT transformation to the
-      given element. If the source element is not specified, it defaults to the
-      first child of the soap body. Optionally parameters (XSLT) could be passed
-      into the transformations through the &lt;property&gt; elements.The &lt;feature&gt;
-      defines a any feature which should be set to the TransformerFactory by
-      explicitly. The feature
-      'http://ws.apache.org/ns/synapse/transform/feature/dom' turns on DOM based
-      transformations instead of serializing elements into Byte streams and/or
-      temporary files. However, this may not prove to be stable for all
-      scenarios - especially for large message transformation.
-    </p>
-    <p/>
-    <h4>
-      <a name="header" id="header">Header</a>
-    </h4>
-<pre xml:space="preserve"> &lt;header name="qname" (value="literal" | expression="xpath") [action="set"]/&gt;
- &lt;header name="qname" action="remove"/&gt;</pre>
-    <p>
-      The &lt;header&gt; mediator sets or removes a specified header from the
-      current soap message. Currently the set header only supports simple valued
-      headers. In the future we may extend this to have XML structured headers
-      by embedding the XML content within the element itself. The optional
-      action attribute specifies whether the mediator should set or remove the
-      header. If omitted, it defaults to a set-header.
-    </p>
-    <p/>
-    <h3>
-      Selection Mediators
-    </h3>
-    <h4>
-      <a name="filter" id="filter">Filter</a>
-    </h4>
-<pre xml:space="preserve"> &lt;filter (source="xpath" regex="string") | xpath="xpath"&gt;
-   mediator+
- &lt;/filter&gt;</pre>
-    <p>
-      The &lt;filter&gt; mediator either test the given xpath expression as a
-      boolean expression, or match the evaluation result of a source xpath
-      expression against the given regular expression. If the test succeeds, the
-      filter mediator will execute the enclosed mediators in sequence.
-    </p>
-    <p/>
-    <h4>
-      <a name="switch" id="switch">Switch</a>
-    </h4>
-<pre xml:space="preserve"> &lt;switch source="xpath"&gt;
-   &lt;case regex="string"&gt;
-     mediator+
-   &lt;/case&gt;+
-   &lt;default&gt;
-     mediator+
-   &lt;/default&gt;?
- &lt;/switch&gt;</pre>
-    <p>
-      The &lt;switch&gt; mediator will evaluate the given source xpath
-      expression into its string value, and match it against the given regular
-      expressions. If the specified cases does not match and a default case
-      exists, it will be executed.
-    </p>
-    <a name="in" id="in"/>
-    <h4>
-      <a name="out" id="out">In / Out</a>
-    </h4>
-<pre xml:space="preserve">&lt;in&gt;<br/>  mediator+
-&lt;/in&gt;<br/></pre>
-<pre xml:space="preserve">&lt;out&gt;
-  mediator+
-&lt;/out&gt;</pre>
-    <p>
-      <br/>
-    </p>
-    <p>
-      The In and Out mediators will execute the child mediators over the current
-      message if the message matches the direction of the mediator. Hence all
-      incoming messages would pass through the "&lt;in&gt;" mediators and vice
-      versa.
-    </p>
-    <p/>
-    <h3>
-      Database Mediators
-    </h3>
-    <h4>
-      <a name="dblookup" id="dblookup">DB-lookup</a>
-    </h4>
-<pre xml:space="preserve">&lt;dblookup&gt;
-   &lt;connection&gt;
-     &lt;pool&gt;
-      (
-       &lt;driver/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     |
-       &lt;dsName/&gt;
-       &lt;icClass/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     )
-       &lt;property name="name" value="value"/&gt;*
-     &lt;/pool&gt;
-   &lt;/connection&gt;
-   &lt;statement&gt;
-     &lt;sql&gt;select something from table where something_else = ?&lt;/sql&gt;
-     &lt;parameter [value="" | expression=""] type="int|string"/&gt;*
-     &lt;result name="string" column="int|string"/&gt;*
-   &lt;/statement&gt;+
-&lt;/dblookup&gt;</pre>
-    <p/>
-    <p>
-      The dblookup mediator is capable of executing an arbitrary SQL select
-      statement, and then set some resulting values as local message properties
-      on the message context. The DB connection used maybe looked up from an
-      external DataSource or specified in-line, in which case an Apache DBCP
-      connection pool is established and used. Apache DBCP connection pools
-      support the following properties:
-    </p>
-    <ul>
-      <li>
-        autocommit = true | false
-      </li>
-      <li>
-        isolation = Connection.TRANSACTION_NONE |
-        Connection.TRANSACTION_READ_COMMITTED |
-        Connection.TRANSACTION_READ_UNCOMMITTED |
-        Connection.TRANSACTION_REPEATABLE_READ |
-        Connection.TRANSACTION_SERIALIZABLE
-      </li>
-      <li>
-        initialsize = int
-      </li>
-      <li>
-        maxactive = int
-      </li>
-      <li>
-        maxidle = int
-      </li>
-      <li>
-        maxopenstatements = int
-      </li>
-      <li>
-        maxwait = long
-      </li>
-      <li>
-        minidle = int
-      </li>
-      <li>
-        poolstatements = true | false
-      </li>
-      <li>
-        testonborrow = true | false
-      </li>
-      <li>
-        testonreturn = true | false
-      </li>
-      <li>
-        testwhileidle = true | false
-      </li>
-      <li>
-        validationquery = String
-      </li>
-    </ul>
-    <p>
-      More than one statement may be specified, and the SQL statement may
-      specify parameters which could be specified as values or expressions. The
-      types of parameters could be any valid SQL types. Only the first row of a
-      result set will be considered and any others are ignored. The single &lt;result&gt;
-      element contains the 'name' and the column' attributes. The 'name'
-      attribute defines the name under which the result is stored in the Synapse
-      message context, and the column attribute specifies a column number or
-      name .
-    </p>
-    <h4>
-      <a name="dbreport" id="dbreport">DB-report</a>
-    </h4>
-<pre xml:space="preserve">&lt;dbreport&gt;
-   &lt;connection&gt;
-     &lt;pool&gt;
-      (
-       &lt;driver/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     |
-       &lt;dsName/&gt;
-       &lt;icClass/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     )
-       &lt;property name="name" value="value"/&gt;*
-     &lt;/pool&gt;
-   &lt;/connection&gt;
-   &lt;statement&gt;
-     &lt;sql&gt;insert into something values(?, ?, ?, ?)&lt;/sql&gt;
-     &lt;parameter [value="" | expression=""] type="int|string"/&gt;*
-    &lt;/statement&gt;+
-&lt;/dblreport&gt;</pre>
-    <p/>
-    <p>
-      The dbreport mediator is very similar to the dblookup mediator, but writes
-      information to a Database, using the specified insert SQL statement.
-    </p>
-    <p/>
-    <h3>
-      Advanced Mediators
-    </h3>
-    <h4>
-      <a name="RMSequence" id="RMSequence">RMSequence</a>
-    </h4>
-<pre xml:space="preserve"> &lt;RMSequence (correlation="xpath" [last-message="xpath"]) | single="true" [version="1.0|1.1"]/&gt;</pre>
-    <p>
-      The &lt;RMSequence&gt; mediator can be used to create a sequence of
-      messages to communicate via WS-Reliable Messaging with an WS-RM enabled
-      endpoint (&lt;enableRM&gt;). The simple use case of this mediator is to
-      specify a single="true" property, because this means that only one message
-      is involved in the same sequence. However if multiple messages should be
-      sent in the same sequence, the correlation property should be used with a
-      XPath expression that selects an unique element value from the incoming
-      message. With the result of the XPath expression, Synapse can group
-      messages together that belong to the same sequence. To close the sequence
-      neatly, for the last message of the sequence also an XPath expression
-      should be specified. With the version attribute the WS-RM specification
-      version to be used can be specified, 1.0 or 1.1.
-    </p>
-    <p/>
-    <h4>
-      <a name="throttle" id="throttle">Throttle</a>
-    </h4>
-<pre xml:space="preserve">&lt;throttle [onReject="string"] [onAccept="string"] [id="string"]&gt;
-    &lt;policy key="string"/&gt; | &lt;policy&gt;..&lt;/policy&gt;
-    &lt;onReject&gt;..&lt;/onReject&gt;
-    &lt;onAccept&gt;..&lt;/onAccept&gt;
-&lt;/throttle&gt;</pre>
-    <p/>
-    <p>
-      The Throttle mediator can be used for rate limiting as well as concurrency
-      based limiting. A WS-Policy dictates the throttling configuration and may
-      be specified inline or loaded from the registry. The Throttle mediator
-      could be added in the request path for rate limiting and concurrent access
-      limitation. When using for concurrent access limitation, the same throttle
-      mediator ID must be triggered on the response flow so that completed
-      responses are deducted from the available limit. The acceptance or
-      rejection sequence is executed depending on the evaluation of the
-      throttling policy against the current message.
-    </p>
-    <h4>
-      <a name="xquery" id="xquery">XQuery</a>
-    </h4>
-<pre xml:space="preserve">&lt;xquery [key="string"] [target="xpath"]&gt;
-    &lt;variable name="string" type="string" [key="string"] [expression="xpath"]/&gt;?
-&lt;/xquery&gt; </pre>
-    <p/>
-    <p>
-      The XQuery mediator can be used to perform an XQuery transformation. The
-      'variable' elements define a variable that could be bound to the dynamic
-      context of the XQuery engine in order to access those variables through
-      the XQuery script . The name of the variable corresponds to the name of
-      variable declaration in the XQuery script. The 'type' of the variable must
-      be a valid type defined by the JSR-000225 (XQJ API). The supported types
-      are:
-    </p>
-    <ul>
-      <li>
-        XQItemType.XQBASETYPE_INT -&gt; INT
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_INTEGER -&gt; INTEGER
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_BOOLEAN -&gt; BOOLEAN
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_BYTE - &gt; BYTE
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_DOUBLE -&gt; DOUBLE
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_SHORT -&gt; SHORT
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_LONG -&gt; LONG
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_FLOAT -&gt; FLOAT
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_STRING -&gt; STRING
-      </li>
-      <li>
-        XQItemType.XQITEMKIND_DOCUMENT -&gt; DOCUMENT
-      </li>
-      <li>
-        XQItemType.XQITEMKIND_DOCUMENT_ELEMENT -&gt; DOCUMENT_ELEMENT
-      </li>
-      <li>
-        XQItemType.XQITEMKIND_ELEMENT -&gt; ELEMENT
-      </li>
-    </ul>
-    <p>
-      The expressions will be evaluated against the current SOAP envelope.
-    </p>
-    <h4>
-      <a name="cache" id="cache">Cache</a>
-    </h4>
-<pre xml:space="preserve"> &lt;cache (id="string")? hashGenerator="class" scope="string" timeout="milliseconds"&gt;
-   &lt;onCacheHit (sequence="key")?&gt;
-     (mediator)+
-   &lt;/onCacheHit&gt;
-   &lt;implementation type=(memory | disk) maxSize="int"/&gt;
- &lt;/cache&gt;</pre>
-    <p>
-      The &lt;cache&gt; mediator will evaluate the hash value of the incoming
-      message as described in the hash generator implementation (which should be
-      a class implementing the org.wso2.caching.digest.DigestGenerator
-      interface) and looks in a cache for a matching response. If the generated
-      hash value has been found in the cache then the cache mediator will
-      execute the onCacheHit sequence which can be specified inline or refered
-      to the registry.
-    </p>
-    <h4>
-      <a name="clone" id="clone">Clone</a>
-    </h4>
-<pre xml:space="preserve"> &lt;clone continueParent=(true | false)&gt;
-   &lt;target to="uri" [soapAction="qname"] sequence="sequence_ref" endpoint="endpoint_ref"&gt;
-     &lt;sequence&gt;
-       (mediator)+
-     &lt;/sequence&gt;
-     &lt;endpoint&gt;
-       endpoint
-     &lt;/endpoint&gt;
-   &lt;/target&gt;
- &lt;/clone&gt;</pre>
-    <p>
-      The &lt;clone&gt; mediator closely resembles the Message Splitter EIP and
-      will split the message into number of identical messages all of which are
-      identical with the cloning message and processed parallelly using either
-      the specified sequence or endpoint (or both). Cloning message (parent) can
-      be continued or dropped depending on the boolean value of the
-      continueParent attribute which defaults to false and drops the parent when
-      false. This drop is not a general drop, rather stop the message processing
-      but does not closes the transport channel, leaving the ability of one or a
-      set of cloned message responses to be sent back to the caller
-    </p>
-    <h4>
-      <a name="iterate" id="iterate">Iterate</a>
-    </h4>
-<pre xml:space="preserve"> &lt;iterate continueParent=(true | false) preservePayload=(true | false) (attachPath="xpath")? expression="xpath"&gt;
-   &lt;target to="uri" [soapAction="qname"] sequence="sequence_ref" endpoint="endpoint_ref"&gt;
-     &lt;sequence&gt;
-       (mediator)+
-     &lt;/sequence&gt;
-     &lt;endpoint&gt;
-       endpoint
-     &lt;/endpoint&gt;
-   &lt;/target&gt;
- &lt;/iterate&gt;</pre>
-    <p>
-      The &lt;iterate&gt; mediator implements another EIP and will split the
-      message in to number of different messages derived from the parent message
-      by finding the matching elements of the XPATH expression specified in the
-      configuration. New messages will be created for each and every matching
-      element and processed parallelly using either the specified sequence or
-      endpoint or both. Parent message can be continued or dropped in the same
-      way as in the clone mediator. Iterate parent drop also is a channel
-      blocking drop as per in the clone mediator.
-    </p>
-    <h4>
-      <a name="aggregate" id="aggregate">Aggregate</a>
-    </h4>
-<pre xml:space="preserve"> &lt;aggregate&gt;
-   &lt;corelateOn expression="xpath"/&gt;
-   &lt;completeCondition timeout="time-in-seconds"&gt;
-     &lt;messageCount min="int-min" max="int-max"/&gt;
-   &lt;/completeCondition&gt;
-   &lt;onComplete expression="xpath" sequence="sequence-ref"&gt;
-     (mediator +)?
-   &lt;/onComplete&gt;
-   &lt;invalidate sequence="sequence-ref" timeout="time-in-seconds"&gt;
-     (mediator +)?
-   &lt;/invalidate&gt;
- &lt;/aggregate&gt;</pre>
-    <p>
-      The &lt;aggregate&gt; mediator implements the Message Aggregator EIP and
-      will aggregate the messages splitted using either the clone or iterate
-      mediators. At the same time it can aggregate messages on the presence of
-      matching elements specified by the corelateOn XPATH expression. Aggregate
-      will collect the messages coming in to that until the messages on the
-      aggregation satisfies the complete condition. On completion of the
-      aggregation it will execute the aggregated message using the onComplete
-      sequence. Aggregated message will be created by combining the messages
-      participating in the aggregation using the onComplete XPATH expression. If
-      a particular aggregation fails to complete in a pre configured time, then
-      that particular aggregation will be invalidated using the invalidate
-      sequence.
-    </p>
-    <h3>
-      Extension mediators
-    </h3>
-    <h4>
-      <a name="class" id="class">Class</a>
-    </h4>
-<pre xml:space="preserve"> &lt;class name="class-name"&gt;
-   &lt;property name="string" value="literal"&gt;
-     (either literal or XML child)
-   &lt;/property&gt;
- &lt;/class&gt; </pre>
-    <p>
-      The &lt;class&gt; mediator creates an instance of the specified class and
-      sets it as a mediator. The class must implement the
-      org.apache.synapse.api.Mediator interface. If any properties are
-      specified, the corresponding setter methods are invoked on the class,
-      once, during initialization.
-    </p>
-    <p/>
-    <h4>
-      <a name="pojoCommand" id="pojoCommand">POJOCommand</a>
-    </h4>
-<pre xml:space="preserve"> &lt;pojoCommand name="class-name"&gt;
-   &lt;property name="string" value="literal"&gt;
-     (either literal or XML child)
-   &lt;/property&gt;
-   &lt;property name="string" expression="xpath"/&gt;
- &lt;/pojoCommand&gt; </pre>
-    <p>
-      The &lt;pojoCommand&gt; mediator creates an instance of the specified
-      command class (which may implement the org.apache.synapse.Command
-      interface or should have a public void method named "execute"). If any
-      properties are specified, the corresponding setter methods are invoked on
-      the class and called the execute method of the command executed.
-    </p>
-    <p/>
-    <h3>
-      <a name="script" id="script">Scripting language mediators</a>
-    </h3>
-    <p/>
-    <p>
-      Synapse supports Mediators implemented in a variety of scripting languages
-      such as JavaScript, Python or Ruby. There are two ways of defining script
-      mediators, either with the script program statements stored in a separate
-      file which is referenced via the local or remote registry entry, or with
-      the script program statements embedded in-line within the Synapse
-      configuration. A script mediator using a script off the registry (local or
-      remote) is defined as follows:
-    </p>
-<pre xml:space="preserve"> &lt;script key="string" language="string" [function="script-function-name"]/&gt;</pre>
-    <p>
-      The property key is the registry key to load the script. The language
-      attribute specifies the scripting language of the script code (e.g. "js"
-      for Javascript, "rb" for ruby, "groovy" for Groovy, "py" for Python..).
-      The function is an optional attribute defining the name of the script
-      function to invoke, if not specified it defaults to a function named
-      'mediate'. The function is passed a single parameter - which is the
-      Synapse MessageContext. The function may return a boolean, if it does not,
-      then true is assumed, and the script mediator returns this value. An
-      inline script mediator has the script source embedded in the configuration
-      as follows:
-    </p>
-<pre xml:space="preserve"> &lt;script language="string"&gt;...script source code...&lt;script/&gt;</pre>
-    <p>
-      The execution context environment of the script has access to the Synapse
-      MessageContext predefined in a script variable named 'mc' . An example of
-      an inline mediator using JavaScript/E4X which returns false if the SOAP
-      message body contains an element named 'symbol' which has a value of 'IBM'
-      would be:
-    </p>
-<pre xml:space="preserve"> &lt;script language="js"&gt;mc.getPayloadXML()..symbol != "IBM";&lt;script/&gt;</pre>
-    <p>
-      Synapse uses the Apache <a href="http://jakarta.apache.org/bsf/">Bean
-      Scripting Framework</a> for the scripting language support, any
-      script language supported by BSF may be used to implement a Synapse
-      Mediator.
-    </p>
-    <p>
-      Implementing a Mediator with a script language can have advantages over
-      using the built in Synapse Mediator types or implementing a custom Java
-      class Mediator. Script Mediators have all the flexibility of a class
-      Mediator with access to the Synapse MessageContext and SynapseEnvironment
-      APIs, and the ease of use and dynamic nature of scripting languages allows
-      rapid development and prototyping of custom mediators. An additional
-      benefit of some scripting languages is that they have very simple and
-      elegant XML manipulation capabilities, for example JavaScript E4X or Ruby
-      REXML, so this makes them well suited for use in the Synapse mediation
-      environment. For both types of script mediator definition the
-      MessageContext passed into the script has additional methods over the
-      standard Synapse MessageContext to enable working with the XML in a way
-      natural to the scripting language. For example when using JavaScript
-      getPayloadXML and setPayloadXML, E4X XML objects, and when using Ruby,
-      REXML documents.
-    </p>
-    <h3>
-      Extensibility of Synapse
-    </h3>
-    <p>
-      The Synapse configuration language could be easily extended, with
-      configuration extensions as well as mediation extensions. The Spring
-      mediator is such an example.
-    </p>
-    <h4>
-      Spring Configuration
-    </h4>
-    <p>
-      A Spring configuration could be created as a localEntry or remote registry
-      entry providing a URL or a key reference to a Registry. The configuration
-      is then created on first use or as necessary (as per registry lookup
-      semantics) by the mediators which reference this configuration.
-    </p>
-<pre xml:space="preserve"> &lt;localEntry key="string"/&gt;
- &lt;localEntry key="string" src="url"/&gt;</pre>
-    <p>
-      The name attribute specifies a unique name for the configuration, and the
-      src, key or inlined XML references to the Spring configuration
-    </p>
-    <p/>
-    <h4>
-      <a name="spring" id="spring">Spring mediator</a>
-    </h4>
-<pre xml:space="preserve"> &lt;spring:spring bean="exampleBean1" key="string"/&gt;</pre>
-    <p>
-      The &lt;spring&gt; element creates an instance of a mediator, which is
-      managed by Spring. This Spring bean must implement the Mediator interface
-      for it to act as a Mediator. The key will reference the Spring
-      ApplicationContext/Configuration used for the bean
-    </p>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_1/configuration.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1/content.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1/content.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1/content.xml	(nonexistent)
@@ -1,66 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1" ?>
-<!--
-  ~  Licensed to the Apache Software Foundation (ASF) under one
-  ~  or more contributor license agreements.  See the NOTICE file
-  ~  distributed with this work for additional information
-  ~  regarding copyright ownership.  The ASF licenses this file
-  ~  to you under the Apache License, Version 2.0 (the
-  ~  "License"); you may not use this file except in compliance
-  ~  with the License.  You may obtain a copy of the License at
-  ~
-  ~   http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~  Unless required by applicable law or agreed to in writing,
-  ~  software distributed under the License is distributed on an
-  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  ~  KIND, either express or implied.  See the License for the
-  ~  specific language governing permissions and limitations
-  ~  under the License.
-  -->
-
-<document>
-
-  <properties>
-    <title>The lightweight ESB - Version 1.0</title>
-  </properties>
-
-<body>
-
-<section name="Apache Synapse - the lightweight ESB">
-  <p>
- Apache Synapse is a simple, lightweight and high performance Enterprise Service Bus (ESB) from Apache. Based on a small asynchronous core, Apache Synapse has excellent support for XML and Web services - as well as binary and text formats. The Synapse engine is configured with a simple XML format and comes with a set of useful transports and mediators. We recommend you start by reading the QuickStart and then trying out the samples.
-  </p>
-  <p>For more information, see:</p>
-
-  <ul>
-  <li><a href="./quickstart.html">Quick Start Guide</a></li>
-  <li><a href="./configuration.html">The Synapse Configuration Language</a></li>
-  <li><a href="./samples.html">A Quick start with Synapse Samples</a></li>
-  <li><a href="./extending.html">Extending Synapse</a></li>
-  <li>The WS Wiki <a href="http://wiki.apache.org/ws/Synapse">http://wiki.apache.org/ws/Synapse</a></li>
-  </ul>
-</section>
-
-<section name="Status">
-	<p>Synapse graduated from the Apache Incubator on the 2nd of January 2007, and has been
-    officially accepted as a sub-project of the Apache Web Services project</p>
-
-	<p>This release of Synapse is <a href="http://synapse.apache.org/download/1.1/download.cgi">1.1</a>. Its key features are </p>
-
-	<ul>
-        <li><p>Proxy services - facilitating transport, interface (WSDL/Schema/Policy), message format (SOAP/POX), QoS (WS-Security/RM) and optimization switching (MTOM/SwA)</p></li>
-        <li><p>Non-blocking http/s transports based on Apache <a target="_blank" href="http://hc.apache.org/httpcomponents-core/index.html">HttpCore</a> for ultrafast execution and support for thousands of connections</p></li>
-        <li><p>Built in Registry/Repository, facilitating dynamic updating and reloading of the configuration and associated resources (e.g. XSLTs, XSD, JS, ..)</p></li>
-        <li><p>Easily extended via custom Java class/Spring mediators, or BSF Scripting languages (Javascript, Ruby etc)</p></li>
-        <li><p>Load-balancing/Fail-over and Throttling support</p></li>
-        <li><p>WS-Security, WS-Reliable Messaging &amp; Throttling configurable via WS-Policies</p></li>
-        <li><p>JMS message support for binary, plain text and XML and SOAP payloads</p></li>
-        <li><p>Lightweight, XML and Web services centric messaging model</p></li>
-        <li><p>Configurations serialized into a file system for versioning/backup and restoration</p></li>
-        <li><p>Support for Error handling and timeouts, and recovery</p></li>
-    	<li><p>Many samples and a built-in Axis2 server to try out and experiment with samples (Samples includes WS-Security, JMS POX/Text messages, Script mediation and many more samples which can be run out of the box) </p></li>
-	    <li><p>Enhanced documentation</p></li>
-	</ul>
-</section>
-</body>
-</document>

Property changes on: java/modules/documentation/src/site/xdoc/1_1/content.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1/quickstart.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1/quickstart.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1/quickstart.xml	(nonexistent)
@@ -1,557 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<!DOCTYPE html
-   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
-   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-  <head>
-    <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
-    <title>
-      Apache Synapse - Quick Start Guide
-    </title>
-    <meta name="generator" content="Amaya 9.54, see http://www.w3.org/Amaya/"/>
-    <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-  </head>
-  <body>
-    <h1>
-      Quick start guide
-    </h1>
-    <p>
-      This guide will demonstrate two sample applications covering the basic and
-      the most common usage scenarios of Synapse; which is Message mediation and
-      Service mediation (i.e. using Proxy services). You will be guided through
-      a step by step approach to get a feeling about Synapse from the absolute
-      beginning.
-    </p>
-    <h3>
-      Pre-requisites
-    </h3>
-    <p>
-      You should have following pre-requisites installed on your system to
-      follow through this guide
-    </p>
-    <ul>
-      <li>
-        A Java 2 SE - JDK or JRE of version 1.5.x or higher
-      </li>
-      <li>
-        Apache Ant http://ant.apache.org
-      </li>
-    </ul>
-    <h2>
-      Message Mediation
-    </h2>
-    <p>
-      In this example Synapse will be used to simply log all the messages
-      passing through it. Although this simple scenario only performs logging,
-      it demonstrates the basics of message mediation, where the logging
-      functionality could be replaced with any combination of advanced
-      mediations such as transformations, content based routing as well as
-      bridging between different communication protocols etc. So, let's start
-      with the basics.
-    </p>
-    <h3>
-      Download
-    </h3>
-    <p>
-      Our first task is to download Synapse. Open a web browser and access the
-      following URL: http://ws.apache.org/synapse/download.cgi. You will then
-      see the list of available releases. Click on the 1.1 version, and you will
-      be directed to the Synapse 1.1 release download page. Now download the
-      'Standard binary distribution' ZIP or tar.gz archive compatible with your
-      operating system.
-    </p>
-    <h3>
-      Installation
-    </h3>
-    <p>
-      Synapse can be installed just by extracting the downloaded binary
-      archive.. A directory named synapse-1.1 will be created in the selected
-      parent directory, containing all the files required for Synapse. We will
-      refer to this directory as &lt;synapse-home&gt; from now on.
-    </p>
-    <h3>
-      Running the sample
-    </h3>
-    <p>
-      Synapse ships with a set of sample clients and services to demonstrate
-      some of its core capabilities. Hence, you will need to run three programs
-      to get an idea of message mediation. The destination server that hosts the
-      ultimate service to be invoked to service the client, the client itself,
-      and Synapse, which acts as the intermediary to bridge between the client
-      and the server.
-    </p>
-    <p/>
-    <h4>
-      Starting the sample Axis2 server
-    </h4>
-    <p>
-      In this case we are using a standalone Axis2 web services engine as the
-      server. You don't have to get it now, it is already bundled with your
-      Synapse distribution. But we have to deploy a sample service for which
-      client can send requests. Go to &lt;synapse-home&gt;/samples/axis2Server/src/SimpleStockQuoteService
-      directory. Run "ant" to build and deploy this service to the sample Axis2
-      server.
-    </p>
-    <p/>
-<pre xml:space="preserve">user@host:/opt/synapse-1.1/samples/axis2Server$ cd src/SimpleStockQuoteService/
-user@host:/opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService$ ant
-Buildfile: build.xml
-
-clean:
-
-init:
-    [mkdir] Created dir: /opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService/temp
-    [mkdir] Created dir: /opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/classes
-    [mkdir] Created dir: /opt/synapse-1.1/samples/axis2Server/repository/services
-
-compile-all:
-    [javac] Compiling 9 source files to /opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/classes
-
-build-service:
-    [mkdir] Created dir: /opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote
-    [mkdir] Created dir: /opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 1 file to /opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 1 file to /opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 9 files to /opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote
-      [jar] Building jar: /opt/synapse-1.1/samples/axis2Server/repository/services/SimpleStockQuoteService.aar
-
-BUILD SUCCESSFUL
-Total time: 2 seconds
-user@host:/opt/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService$</pre>
-    <p>
-      Now go to &lt;synapse-home&gt;/samples/axis2Server directory and start the
-      server using the following command. This will start Axis2 server on port
-      9000 (http).
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . axis2server.sh
-      </p>
-      <p>
-        Windows: axis2server.bat
-      </p>
-    </div>
-    <p>
-      You will see the following messages on the console.
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse-1.1/samples/axis2Server$ ./axis2server.sh
- Using Bouncy castle JAR for Java 1.5
- Using JAVA_HOME:   /opt/jdk1.5_06
- Using AXIS2 Repository :   /opt/synapse-1.1/samples/axis2Server/repository
- Using AXIS2 Configuration :   /opt/synapse-1.1/samples/axis2Server/repository/conf/axis2.xml
-2007-11-05 14:36:41,462 [-] [main]  INFO SimpleHTTPServer [SimpleAxisServer] Starting
-[SimpleAxisServer] Using the Axis2 Repository : /opt/synapse-1.1/samples/axis2Server/repository
-[SimpleAxisServer] Using the Axis2 Configuration File : /opt/synapse-1.1/samples/axis2Server/repository/conf/axis2.xml
-2007-11-05 14:36:43,864 [-] [main]  INFO HttpCoreNIOSender HTTPS Sender starting
-2007-11-05 14:36:43,891 [-] [main]  INFO HttpCoreNIOSender HTTP Sender starting
-2007-11-05 14:36:44,288 [-] [main]  INFO HttpCoreNIOListener HTTPS Listener starting on port : 9002
-2007-11-05 14:36:44,298 [-] [main]  INFO HttpCoreNIOListener HTTP Listener starting on port : 9000
-2007-11-05 14:36:44,350 [-] [main]  INFO SimpleHTTPServer [SimpleAxisServer] Started</pre>
-    <p/>
-    <h4>
-      Starting Synapse
-    </h4>
-    <p>
-      Now it's time to start Synapse. In this scenario we are starting Synapse
-      using the sample configuration found in synapse_sample_0.xml (i.e. in
-      repository/conf/sample) and listed below. It is configured to log and pass
-      through, all the messages.
-    </p>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;<br/>    &lt;log level="full"/&gt; <br/>    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p/>
-    <p>
-      Go to &lt;synapse-home&gt;/bin directory and type the command given below.
-      Synapse will be started on port 8080 (http) and 8443 (https - under JDK
-      1.5)
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . synapse.sh -sample 0
-      </p>
-      <p>
-        Windows: synapse.bat -sample 0
-      </p>
-    </div>
-    <p/>
-    <p>
-      Following messages will be displayed on the console to indicate the
-      successfull startup of Synapse.
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse-1.1/bin$ ./synapse.sh -sample 0
- Using Bouncy castle JAR for Java 1.5
-Starting Synapse/Java ...
-Using SYNAPSE_HOME:    /opt/synapse-1.1
-Using JAVA_HOME:       /opt/jdk1.5_06
-Using SYNAPSE_XML:     -Dsynapse.xml=/opt/synapse-1.1/repository/conf/sample/synapse_sample_0.xml
-2007-11-05 14:58:55,029 [-] [main]  INFO ServerManager Using the Axis2 Repository /opt/synapse-1.1/repository
-2007-11-05 14:58:56,617 [-] [main]  INFO SynapseInitializationModule Initializing Synapse at : Mon Nov 05 14:58:56 LKT 2007
-2007-11-05 14:58:56,618 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Loading mediator extensions...
-2007-11-05 14:58:56,619 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Initializing the Synapse configuration ...
-2007-11-05 14:58:56,624 [127.0.1.1-asankha] [main]  INFO XMLConfigurationBuilder Generating the Synapse configuration model by parsing the XML configuration
-2007-11-05 14:58:56,717 [127.0.1.1-asankha] [main]  INFO SynapseConfigurationBuilder Loaded Synapse configuration from : /opt/synapse-1.1/repository/conf/sample/synapse_sample_0.xml
-2007-11-05 14:58:56,724 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Deploying the Synapse service..
-2007-11-05 14:58:56,740 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Initializing Sandesha 2...
-2007-11-05 14:58:56,801 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Deploying Proxy services...
-2007-11-05 14:58:56,801 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Synapse initialized successfully...!
-2007-11-05 14:58:56,886 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOSender HTTPS Sender starting
-2007-11-05 14:58:56,887 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOSender HTTP Sender starting
-2007-11-05 14:58:57,039 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOListener HTTPS Listener starting on port : 8443
-2007-11-05 14:58:57,040 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport https on port 8443
-2007-11-05 14:58:57,041 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOListener HTTP Listener starting on port : 8080
-2007-11-05 14:58:57,041 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport http on port 8080
-2007-11-05 14:58:57,085 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport vfs
-2007-11-05 14:58:57,086 [127.0.1.1-asankha] [main]  INFO ServerManager Ready for processing</pre>
-    <p/>
-    <h4>
-      Run the client
-    </h4>
-    <p>
-      Now the final step, running the client. Go to &lt;synapse-home&gt;/samples/axis2Client
-      directory and type the following command
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse-1.1/samples/axis2Client$ ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080 -Dmode=quote -Dsymbol=IBM
-Buildfile: build.xml
-
-init:
-    [mkdir] Created dir: /opt/synapse-1.1/samples/axis2Client/target/classes
-
-compile:
-    [javac] Compiling 10 source files to /opt/synapse-1.1/samples/axis2Client/target/classes
-
-stockquote:
-     [java] Standard :: Stock price = $91.09641757880443
-
-BUILD SUCCESSFUL</pre>
-    <p/>
-    <p>
-      This sends a request for a stock quote for the symbol IBM and sets the
-      transport URL to Synapse (http://localhost:8080) and the WS-Addressing EPR
-      set that of the actual server
-      (http://localhost:9000/soap/SimpleStockQuoteService). The actual wire
-      level http message sent by the client is as follows, and is sent over port
-      8080 to the Synapse instance on localhost.
-    </p>
-<pre xml:space="preserve">POST / HTTP/1.1
-Content-Type: text/xml; charset=UTF-8
-SOAPAction: "urn:getQuote"
-User-Agent: Axis2
-Host: 127.0.0.1
-Transfer-Encoding: chunked
-
-218
-&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-   &lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-      &lt;soapenv:Header&gt;
-         &lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;
-         &lt;wsa:MessageID&gt;urn:uuid:D538B21E30B32BB8291177589283717&lt;/wsa:MessageID&gt;
-         &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-      &lt;/soapenv:Header&gt;
-      &lt;soapenv:Body&gt;
-         &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-            &lt;m0:request&gt;
-               &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-            &lt;/m0:request&gt;
-         &lt;/m0:getQuote&gt;
-      &lt;/soapenv:Body&gt;
-   &lt;/soapenv:Envelope&gt;0</pre>
-    <p/>
-    <p>
-      Now take a look at the console running Synapse. You will see that all the
-      details of the mediation are logged along with all the SOAP messages
-      passed through Synapse. If you execute Synapse in debug mode by editing
-      the lib/log4j.properties "log4j.category.org.apache.synapse" as "DEBUG"
-      instead of INFO, you will see more information as follows after a restart
-      and replay of the above scenario again.
-    </p>
-<pre xml:space="preserve">2007-11-05 15:03:51,082 [127.0.1.1-asankha] [I/O dispatcher 3]  INFO PipeImpl Using native OS Pipes for event-driven to stream IO bridging
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver Synapse received a new message for message mediation...
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver Received To: http://localhost:9000/soap/SimpleStockQuoteService
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver SOAPAction: urn:getQuote
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver WSA-Action: urn:getQuote
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2SynapseEnvironment Injecting MessageContext
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2SynapseEnvironment Using Main Sequence for injected message
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator Start : Sequence &lt;main&gt;
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator Sequence &lt;SequenceMediator&gt; :: mediate()
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG LogMediator Start : Log mediator
-2007-11-05 15:03:51,231 [127.0.1.1-asankha] [HttpServerWorker-1]  INFO LogMediator To: http://localhost:9000/soap/SimpleStockQuoteService, WSAction: urn:getQuote, SOAPAction: urn:getQuote, ReplyTo: http://www.w3.org/2005/08/addressing/anonymous, MessageID: urn:uuid:DB76240DF26CE9AF1D1194253430879, Direction: request, Envelope: &lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;&lt;soapenv:Header&gt;&lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;&lt;wsa:MessageID&gt;urn:uuid:DB76240DF26CE9AF1D1194253430879&lt;/wsa:MessageID&gt;&lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;&lt;m0:request&gt;&lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;&lt;/m0:request&gt;&lt;/m0:getQuote&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG LogMediator End : Log mediator
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator Start : Send mediator
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator Sending request message using implicit message properties..
-Sending To: http://localhost:9000/soap/SimpleStockQuoteService
-SOAPAction: urn:getQuote
-2007-11-05 15:03:51,254 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2FlexibleMEPClient Sending [add = false] [sec = false] [rm = false] [ to Address: http://localhost:9000/soap/SimpleStockQuoteService]
-2007-11-05 15:03:51,302 [127.0.1.1-asankha] [HttpServerWorker-1]  INFO TimeoutHandler This engine will expire all callbacks after : 86400 seconds, irrespective of the timeout action, after the specified or optional timeout
-2007-11-05 15:03:51,356 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator End : Send mediator
-2007-11-05 15:03:51,356 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator End : Sequence &lt;main&gt;
-2007-11-05 15:03:51,398 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Synapse received an asynchronous response message
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Received To: null
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver SOAPAction: null
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver WSA-Action: null
-2007-11-05 15:03:51,402 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;&lt;ns:return type="samples.services.GetQuoteResponse"&gt;&lt;ns:change&gt;4.03627430702446&lt;/ns:change&gt;&lt;ns:earnings&gt;-9.467701672785129&lt;/ns:earnings&gt;&lt;ns:high&gt;191.83014686803938&lt;/ns:high&gt;&lt;ns:last&gt;185.42637586281398&lt;/ns:last&gt;&lt;ns:lastTradeTimestamp&gt;Mon Nov 05 15:03:51 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;193.2690208751758&lt;/ns:low&gt;&lt;ns:marketCap&gt;-1737393.107878862&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-183.2632780777984&lt;/ns:open&gt;&lt;ns:peRatio&gt;-17.430497030284027&lt;/ns:peRatio&gt;&lt;ns:percentageChange&gt;1.9749680728382655&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;204.37162314344914&lt;/ns:prevClose&gt;&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;6695&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG Axis2SynapseEnvironment Injecting MessageContext
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG Axis2SynapseEnvironment Using Main Sequence for injected message
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator Start : Sequence &lt;main&gt;
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator Sequence &lt;SequenceMediator&gt; :: mediate()
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG LogMediator Start : Log mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1]  INFO LogMediator To: http://www.w3.org/2005/08/addressing/anonymous, MessageID: urn:uuid:A6510AF6BD288D8DFB1194253431259544001-942151716, Direction: response, Envelope: &lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;&lt;ns:return type="samples.services.GetQuoteResponse"&gt;&lt;ns:change&gt;4.03627430702446&lt;/ns:change&gt;&lt;ns:earnings&gt;-9.467701672785129&lt;/ns:earnings&gt;&lt;ns:high&gt;191.83014686803938&lt;/ns:high&gt;&lt;ns:last&gt;185.42637586281398&lt;/ns:last&gt;&lt;ns:lastTradeTimestamp&gt;Mon Nov 05 15:03:51 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;193.2690208751758&lt;/ns:low&gt;&lt;ns:marketCap&gt;-1737393.107878862&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-183.2632780777984&lt;/ns:open&gt;&lt;ns:peRatio&gt;-17.430497030284027&lt;/ns:peRatio&gt;&lt;ns:percentageChange&gt;1.9749680728382655&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;204.37162314344914&lt;/ns:prevClose&gt;&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;6695&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG LogMediator End : Log mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator Start : Send mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator Sending response message using implicit message properties..
-Sending To: http://www.w3.org/2005/08/addressing/anonymous
-SOAPAction: null
-2007-11-05 15:03:51,408 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator End : Send mediator
-2007-11-05 15:03:51,408 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator End : Sequence &lt;main&gt;</pre>
-    <p>
-      You have successfully completed the first part of this guide. Now let's
-      look at the next scenario, proxy services.
-    </p>
-    <p/>
-    <h2>
-      Proxy Services
-    </h2>
-    <p>
-      As the name implies, a proxy service acts as a service hosted in Synapse,
-      and typically fronts an existing service endpoint. A proxy service can be
-      created and exposed on a different transport, schema, WSDL, or QoS (such
-      as WS-Security, WS-Reliable Messaging) aspect than the real service and
-      could mediate the messages before being delivered to the actual endpoint,
-      and the responses before they reach the client.
-    </p>
-    <p>
-      Clients can send requests for proxy services directly to Synapse, as the
-      client sees as if they are hosted on it, and for example can perform ?wsdl
-      and view the WSDL of the virtual proxy service. But in the Synapse
-      configuration, such requests can be handled in anyway you like. Most
-      obvious thing would be to do some processing to the message and send it to
-      the actual service, probably running on a different computer. But it is
-      not necessary to always send the message to the actual service. You may
-      list any combination of tasks to be performed on the messages received for
-      the proxy service and terminate the flow or send some java back to the
-      client even without sending it to an actual service. Let's explore a
-      simple proxy services scenario step by step to get a better feeling. As
-      you have downloaded and installed Synapse in the previous section, now you
-      can start directly on the sample.
-    </p>
-    <p/>
-    <h3>
-      Running the sample
-    </h3>
-    <p>
-      As in the previous section, there should be three entities running to
-      demonstrate proxy services, the server, client and Synapse. Let's start
-      with the server.
-    </p>
-    <p/>
-    <h4>
-      Starting the sample Axis2 server
-    </h4>
-    <p>
-      As you have built and deployed the SimpleStockQuote service in the
-      previous section, you can simply start the server by switching to the &lt;synapse-home&gt;/samples/axis2Server
-      directory and running the following command.
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . axis2server.sh
-      </p>
-      <p>
-        Windows: axis2server.bat
-      </p>
-    </div>
-    <p>
-      You can see the console messages as in the previous section.
-    </p>
-    <h4>
-      Starting Synapse
-    </h4>
-    <p>
-      We have to start Synapse with a configuration containing a proxy service
-      definition. In this case we are using the synapse_sample_150.xml, so that
-      you don't have to write the configuration your self.
-    </p>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p/>
-    <p>
-      The above configuration will expose a proxy service named StockQuoteProxy
-      and specifies an endpoint
-      (http://localhost:9000/soap/SimpleStockQuoteService) as the target for the
-      proxy service. Therefore, messages coming to the proxy service will be
-      directed to the address http://localhost:9000/soap/SimpleStockQuoteService
-      specified in the endpoint. There is also an out sequence for the proxy
-      service, which is applicable for response messages. In the out sequence,
-      we just send the messages back to the client. The publishWSDL tag
-      specifies an WSDL to be published for this proxy service. Let's start
-      Synapse with this sample configuration by running the below command from
-      the &lt;synapse-home&gt;/bin directory. It is possible to specify a
-      sequence of mediation for incoming messages instead of a target endpoint,
-      and many other possibilities and options are available to configure proxy
-      services. These are explained in the samples and configuration guides.
-    </p>
-    <p/>
-    <div class="command">
-      <p>
-        Linux / Unix: . synapse.sh -sample 150
-      </p>
-      <p>
-        Windows: synapse.bat -sample 150
-      </p>
-    </div>
-    <p/>
-    <p>
-      Synapse will display a set of messages as in the previous section
-      describing the steps of starting procedure. Before running the client, it
-      is time to observe another feature of proxy services. That is displaying
-      the published WSDL. Just open a web browser and point it to the address
-      http://localhost:8080/soap/StockQuoteProxy?wsdl. You will see the
-      sample_proxy_1.wsdl specified in the configuration but containing the
-      correct EPR for the service over http/s.
-    </p>
-    <p/>
-    <h4>
-      Run the client
-    </h4>
-    <p>
-      Now it is time to see it in action. Go to the &lt;synapse-home&gt;/samples/axis2Clients
-      directory and type the following command:
-    </p>
-    <div class="command">
-      ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy
-      -Dmode=quote -Dsymbol=IBM
-    </div>
-    <p>
-      The above command sends a stockquote request directly to the provided
-      transport endpoint at: http://localhost:8080/soap/StockQuoteProxy. You
-      will see the response from the server displayed on the console as follows:
-    </p>
-    <div class="consoleOutput">
-      Standard :: Stock price = $165.32687331383468
-    </div>
-    <p/>
-    <p>
-      This quick guide illustrates the simple use case of proxy services. Please
-      refer to samples #100 and above in the Samples guide, for in depth
-      coverage of more advanced use cases.
-    </p>
-    <p/>
-    <p>
-      Yes, you are done with a quick look at Synapse. Now it is time to go
-      deeper and reveal the advanced features of Synapse. You can browse through
-      the samples for your interested areas. If you have any issue regarding
-      Synapse as a user, feel free ask it in the Synapse user mailing list
-      (http://ws.apache.org/synapse/mail-lists.html).
-    </p>
-    <p/>
-    <p/>
-    <p/>
-  </body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_1/quickstart.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1_1/content.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1_1/content.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1_1/content.xml	(nonexistent)
@@ -1,96 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1" ?>
-<!--
-  ~  Licensed to the Apache Software Foundation (ASF) under one
-  ~  or more contributor license agreements.  See the NOTICE file
-  ~  distributed with this work for additional information
-  ~  regarding copyright ownership.  The ASF licenses this file
-  ~  to you under the Apache License, Version 2.0 (the
-  ~  "License"); you may not use this file except in compliance
-  ~  with the License.  You may obtain a copy of the License at
-  ~
-  ~   http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~  Unless required by applicable law or agreed to in writing,
-  ~  software distributed under the License is distributed on an
-  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  ~  KIND, either express or implied.  See the License for the
-  ~  specific language governing permissions and limitations
-  ~  under the License.
-  -->
-
-<document>
-
-  <properties>
-    <title>The lightweight ESB</title>
-  </properties>
-
-<body>
-
-<section name="Apache Synapse Enterprise Service Bus (ESB)">
-  <p>
-       Apache Synapse is designed to be a simple, lightweight and high performance
-       Enterprise Service Bus (ESB) from Apache. Based on a small asynchronous core,
-       Apache Synapse has excellent support for XML and Web services - as well as binary and text formats.
-       The Synapse engine is configured with a simple XML format and comes with a set of ready-to-use transports and mediators.
-       We recommend you start by reading the QuickStart and then trying out the samples. Synapse is made available under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache Software License 2.0</a>.
-  </p><p>
-      <b>Latest News</b>
-  </p><p>
-      In December 2007, Apache Synapse became a top level project (TLP) of the
-      Apache Software Foundation.
-  </p>
-  <p>For more information, see:
-  <ul>
-  <li><a href="./quickstart.html">Quick Start Guide</a></li>
-  <li><a href="./configuration.html">The Synapse Configuration Language</a></li>
-  <li><a href="./samples.html">A Quick start with Synapse Samples</a></li>
-  <li><a href="./extending.html">Extending Synapse</a></li>
-  <li>The Developer mailing list:  <a href="mailto:dev-subscribe@synapse.apache.org">Subscribe</a></li>
-  <li>The User mailing list:  <a href="mailto:user-subscribe@synapse.apache.org">Subscribe</a></li>
-  <!--li>The Synapse Wiki <a href="http://wiki.apache.org/ws/Synapse">http://wiki.apache.org/ws/Synapse</a></li-->
-  </ul>
-  </p>
-</section>
-
-<section name="Introduction">
-<p>
-    Apache Synapse is an ESB that has been designed to be simple to configure, very fast, and effective at solving many integration and gatewaying problems.
-    Synapse has support for HTTP, SOAP, SMTP, JMS, FTP and file system transports, as well as first class support for standards such as WS-Addressing,
-    Web Services Security (WSS), Web Services Reliable Messaging (WSRM), efficient binary attachments (MTOM/XOP).
-    Synapse can transform messages using key standards such as XSLT, XPath and XQuery, or simply using Java. Synapse supports a number of useful
-    functions out-of-the-box without programming, but it also can be extended using popular programming languages such as Java, JavaScript, Ruby, and Groovy.
-</p>
-<p>
-    Synapse has a completely asynchronous core, and supports non-blocking HTTP and HTTPS using the
-    excellent <a href="http://hc.apache.org/httpcomponents-core/index.html">Apache HttpCore</a> NIO module. In addition, Synapse supports JMS v1.0 and higher, Apache VFS File Systems (FTP, SFTP, File (including zip/jar/tar/gz), Webdav, CIFS), POP3/IMAP/SMTP transports. Apache Synapse can process
-    SOAP 1.1/1.2, pure XML/REST, Text and Binary messages with support for any-to-any conversion and transformation.
-</p>
-</section>
-
-<section name="Key Features">
-		<p>The latest release of Synapse is <a href="../download/1.1.1/download.cgi">1.1.1</a>. Its key features are </p>
-
-	<ul>
-        <li><p>Proxy services - facilitating transport, interface (WSDL/Schema/Policy), message format (SOAP 1.1/1.2, POX/REST, Text, Binary), QoS (WS-Security/RM) and optimization switching (MTOM/SwA)</p></li>
-        <li><p>Non-blocking http/s transports based on Apache <a target="_blank" href="http://hc.apache.org/httpcomponents-core/index.html">HttpCore</a> for ultrafast execution and support for thousands of connections</p></li>
-        <li><p>Built in Registry/Repository, facilitating dynamic updating and reloading of the configuration and associated resources (e.g. XSLTs, XSD, JS, ..)</p></li>
-        <li><p>Easily extended via custom Java class (mediator and command)/Spring mediators, or BSF Scripting languages (Javascript, Ruby, Groovy etc)</p></li>
-        <li><p>Built in support for scheduling tasks using the <a target="_blank" href="http://www.opensymphony.com/quartz">Quartz</a> scheduler</p></li>
-        <li><p>Load-balancing/Fail-over, and clustered Throttling and Caching support</p></li>
-        <li><p>WS-Security, WS-Reliable Messaging &amp; Throttling configurable via WS-Policies</p></li>
-        <li><p>JMS (v1.x upwards) message support for binary, plain text and XML and SOAP payloads</p></li>
-        <li><p>Enhanced support for Apache VFS transports (s/ftp, file, zip/tar/gz, webdav, cifs..)</p></li>
-        <li><p>Support for message splitting &amp; aggregation using the EIP</p></li>
-        <li><p>Database lookup &amp; store support with DBMediators</p></li>
-        <li><p>Enhanced Mail transport with POP3/SMTP/IMAP protocols</p></li>
-        <li><p>Ability to pin a proxy service or a task to server instances on a cluster</p></li>
-        <li><p>Lightweight, XML and Web services centric messaging model</p></li>
-        <li><p>Configurations serialized into a file system for versioning/backup &amp; restoration with built-in Registry support</p></li>
-        <li><p>Support for Error handling and timeouts, recovery with http/s aintainance mode &amp; gracefull shutdown</p></li>
-        <li><p>JMX monitoring support</p></li>
-    	<li><p>Many samples and a built-in Axis2 server to try out and experiment with samples (Samples includes WS-Security, JMS POX/Text messages, Script mediation and many more samples which can be run out of the box) </p></li>
-	    <li><p>Enhanced documentation</p></li>
-	</ul>
-</section>
-</body>
-</document>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_1_1/content.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1_1/quickstart.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1_1/quickstart.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1_1/quickstart.xml	(nonexistent)
@@ -1,519 +0,0 @@
-<html>
-<head>
-  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
-  <title>Apache Synapse - Quick Start Guide</title>
-  <style type="text/css">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-</head>
-
-<body>
-<h1>Quick Start Guide</h1>
-
-<p>This guide will demonstrate two sample applications covering the basic and
-the most common usage scenarios of Synapse; which is Message mediation and
-Service mediation (i.e. using Proxy services). You will be guided through a
-step by step approach to get a feeling about Synapse from the absolute
-beginning.</p>
-
-<h3>Pre-requisites</h3>
-
-<p>You should have following pre-requisites installed on your system to
-follow through this guide</p>
-<ul>
-  <li>A Java 2 SE - JDK or JRE of version 1.5.x or higher</li>
-  <li>Apache Ant http://ant.apache.org</li>
-</ul>
-
-<h2>Message Mediation</h2>
-
-<p>In this example Synapse will be used to simply log all the messages
-passing through it. Although this simple scenario only performs logging, it
-demonstrates the basics of message mediation, where the logging functionality
-could be replaced with any combination of advanced mediations such as
-transformations, content based routing as well as bridging between different
-communication protocols etc. So, let's start with the basics.</p>
-
-<h3>Download</h3>
-
-<p>Our first task is to download Synapse. Open a web browser and access the
-following URL: http://ws.apache.org/synapse/download.cgi. You will then see
-the list of available releases. Click on the latest version, and you will be
-directed to the Synapse release download page. Now download the 'Standard
-binary distribution' ZIP or tar.gz archive compatible with your operating
-system.</p>
-
-<h3>Installation</h3>
-
-<p>Synapse can be installed just by extracting the downloaded binary
-archive.. A directory named synapse with the release number will be created
-in the selected parent directory, containing all the files required for
-Synapse. We will refer to this directory as &lt;synapse-home&gt; from now
-on.</p>
-
-<h3>Running the sample</h3>
-
-<p>Synapse ships with a set of sample clients and services to demonstrate
-some of its core capabilities. Hence, you will need to run three programs to
-get an idea of message mediation. The destination server that hosts the
-ultimate service to be invoked to service the client, the client itself, and
-Synapse, which acts as the intermediary to bridge between the client and the
-server.</p>
-
-<p></p>
-
-<h4>Starting the sample Axis2 server</h4>
-
-<p>In this case we are using a standalone Axis2 web services engine as the
-server. You don't have to get it now, it is already bundled with your Synapse
-distribution. But we have to deploy a sample service for which client can
-send requests. Go to
-&lt;synapse-home&gt;/samples/axis2Server/src/SimpleStockQuoteService
-directory. Run "ant" to build and deploy this service to the sample Axis2
-server. </p>
-
-<p></p>
-<pre>user@host:/opt/synapse-1.2-SNAPSHOT/samples/axis2Server$ cd src/SimpleStockQuoteService/
-user@host:/opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService$ ant
-Buildfile: build.xml
-
-clean:
-
-init:
-    [mkdir] Created dir: /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp
-    [mkdir] Created dir: /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/classes
-    [mkdir] Created dir: /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/repository/services
-
-compile-all:
-    [javac] Compiling 9 source files to /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/classes
-
-build-service:
-    [mkdir] Created dir: /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote
-    [mkdir] Created dir: /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 1 file to /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 1 file to /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 9 files to /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote
-      [jar] Building jar: /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/repository/services/SimpleStockQuoteService.aar
-
-BUILD SUCCESSFUL
-Total time: 2 seconds
-user@host:/opt/synapse-1.2-SNAPSHOT/samples/axis2Server/src/SimpleStockQuoteService$</pre>
-
-<p>Now go to &lt;synapse-home&gt;/samples/axis2Server directory and start the
-server using the following command. This will start Axis2 server on port 9000
-(http). </p>
-
-<div class="command">
-<p>Linux / Unix: . axis2server.sh</p>
-
-<p>Windows: axis2server.bat</p>
-</div>
-
-<p>You will see the following messages on the console.</p>
-<pre>user@host:/opt/synapse-1.2-SNAPSHOT/samples/axis2Server$ ./axis2server.sh
- Using Bouncy castle JAR for Java 1.5
- Using JAVA_HOME:   /opt/jdk1.5_06
- Using AXIS2 Repository :   /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/repository
- Using AXIS2 Configuration :   /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/repository/conf/axis2.xml
-2007-11-05 14:36:41,462 [-] [main]  INFO SimpleHTTPServer [SimpleAxisServer] Starting
-[SimpleAxisServer] Using the Axis2 Repository : /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/repository
-[SimpleAxisServer] Using the Axis2 Configuration File : /opt/synapse-1.2-SNAPSHOT/samples/axis2Server/repository/conf/axis2.xml
-2007-11-05 14:36:43,864 [-] [main]  INFO HttpCoreNIOSender HTTPS Sender starting
-2007-11-05 14:36:43,891 [-] [main]  INFO HttpCoreNIOSender HTTP Sender starting
-2007-11-05 14:36:44,288 [-] [main]  INFO HttpCoreNIOListener HTTPS Listener starting on port : 9002
-2007-11-05 14:36:44,298 [-] [main]  INFO HttpCoreNIOListener HTTP Listener starting on port : 9000
-2007-11-05 14:36:44,350 [-] [main]  INFO SimpleHTTPServer [SimpleAxisServer] Started</pre>
-
-<p></p>
-
-<h4>Starting Synapse</h4>
-
-<p>Now it's time to start Synapse. In this scenario we are starting Synapse
-using the sample configuration found in synapse_sample_0.xml (i.e. in
-repository/conf/sample) and listed below. It is configured to log and pass
-through, all the messages.</p>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;<br/>    &lt;log level="full"/&gt; <br/>    &lt;send/&gt; 
-&lt;/definitions&gt; </pre>
-
-<p></p>
-
-<p>Go to &lt;synapse-home&gt;/bin directory and type the command given below.
-Synapse will be started on port 8080 (http) and 8443 (https - under JDK
-1.5)</p>
-
-<div class="command">
-<p>Linux / Unix: . synapse.sh -sample 0</p>
-
-<p>Windows: synapse.bat -sample 0</p>
-</div>
-
-<p></p>
-
-<p>Following messages will be displayed on the console to indicate the
-successfull startup of Synapse.</p>
-<pre>user@host:/opt/synapse-1.2-SNAPSHOT/bin$ ./synapse.sh -sample 0
- Using Bouncy castle JAR for Java 1.5
-Starting Synapse/Java ...
-Using SYNAPSE_HOME:    /opt/synapse-1.2-SNAPSHOT
-Using JAVA_HOME:       /opt/jdk1.5_06
-Using SYNAPSE_XML:     -Dsynapse.xml=/opt/synapse-1.2-SNAPSHOT/repository/conf/sample/synapse_sample_0.xml
-2007-11-05 14:58:55,029 [-] [main]  INFO ServerManager Using the Axis2 Repository /opt/synapse-1.2-SNAPSHOT/repository
-2007-11-05 14:58:56,617 [-] [main]  INFO SynapseInitializationModule Initializing Synapse at : Mon Nov 05 14:58:56 LKT 2007
-2007-11-05 14:58:56,618 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Loading mediator extensions...
-2007-11-05 14:58:56,619 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Initializing the Synapse configuration ...
-2007-11-05 14:58:56,624 [127.0.1.1-asankha] [main]  INFO XMLConfigurationBuilder Generating the Synapse configuration model by parsing the XML configuration
-2007-11-05 14:58:56,717 [127.0.1.1-asankha] [main]  INFO SynapseConfigurationBuilder Loaded Synapse configuration from : /opt/synapse-1.1/repository/conf/sample/synapse_sample_0.xml
-2007-11-05 14:58:56,724 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Deploying the Synapse service..
-2007-11-05 14:58:56,740 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Initializing Sandesha 2...
-2007-11-05 14:58:56,801 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Deploying Proxy services...
-2007-11-05 14:58:56,801 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Synapse initialized successfully...!
-2007-11-05 14:58:56,886 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOSender HTTPS Sender starting
-2007-11-05 14:58:56,887 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOSender HTTP Sender starting
-2007-11-05 14:58:57,039 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOListener HTTPS Listener starting on port : 8443
-2007-11-05 14:58:57,040 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport https on port 8443
-2007-11-05 14:58:57,041 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOListener HTTP Listener starting on port : 8080
-2007-11-05 14:58:57,041 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport http on port 8080
-2007-11-05 14:58:57,085 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport vfs
-2007-11-05 14:58:57,086 [127.0.1.1-asankha] [main]  INFO ServerManager Ready for processing</pre>
-
-<p></p>
-
-<h4>Run the client</h4>
-
-<p>Now the final step, running the client. Go to
-&lt;synapse-home&gt;/samples/axis2Client directory and type the following
-command</p>
-<pre>user@host:/opt/synapse-1.2-SNAPSHOT/samples/axis2Client$ ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080 -Dmode=quote -Dsymbol=IBM
-Buildfile: build.xml
-
-init:
-    [mkdir] Created dir: /opt/synapse-1.2-SNAPSHOT/samples/axis2Client/target/classes
-
-compile:
-    [javac] Compiling 10 source files to /opt/synapse-1.2-SNAPSHOT/samples/axis2Client/target/classes
-
-stockquote:
-     [java] Standard :: Stock price = $91.09641757880443
-
-BUILD SUCCESSFUL</pre>
-
-<p></p>
-
-<p>This sends a request for a stock quote for the symbol IBM and sets the
-transport URL to Synapse (http://localhost:8080) and the WS-Addressing EPR
-set that of the actual server
-(http://localhost:9000/soap/SimpleStockQuoteService). The actual wire level
-http message sent by the client is as follows, and is sent over port 8080 to
-the Synapse instance on localhost.</p>
-<pre>POST / HTTP/1.1
-Content-Type: text/xml; charset=UTF-8
-SOAPAction: "urn:getQuote"
-User-Agent: Axis2
-Host: 127.0.0.1
-Transfer-Encoding: chunked
-
-218
-&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-   &lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-      &lt;soapenv:Header&gt;
-         &lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;
-         &lt;wsa:MessageID&gt;urn:uuid:D538B21E30B32BB8291177589283717&lt;/wsa:MessageID&gt;
-         &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-      &lt;/soapenv:Header&gt;
-      &lt;soapenv:Body&gt;
-         &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-            &lt;m0:request&gt;
-               &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-            &lt;/m0:request&gt;
-         &lt;/m0:getQuote&gt;
-      &lt;/soapenv:Body&gt;
-   &lt;/soapenv:Envelope&gt;0</pre>
-
-<p></p>
-
-<p>Now take a look at the console running Synapse. You will see that all the
-details of the mediation are logged along with all the SOAP messages passed
-through Synapse. If you execute Synapse in debug mode by editing the
-lib/log4j.properties "log4j.category.org.apache.synapse" as "DEBUG" instead
-of INFO, you will see more information as follows after a restart and replay
-of the above scenario again.</p>
-<pre>2007-11-05 15:03:51,082 [127.0.1.1-asankha] [I/O dispatcher 3]  INFO PipeImpl Using native OS Pipes for event-driven to stream IO bridging
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver Synapse received a new message for message mediation...
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver Received To: http://localhost:9000/soap/SimpleStockQuoteService
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver SOAPAction: urn:getQuote
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver WSA-Action: urn:getQuote
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2SynapseEnvironment Injecting MessageContext
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2SynapseEnvironment Using Main Sequence for injected message
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator Start : Sequence &lt;main&gt;
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator Sequence &lt;SequenceMediator&gt; :: mediate()
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG LogMediator Start : Log mediator
-2007-11-05 15:03:51,231 [127.0.1.1-asankha] [HttpServerWorker-1]  INFO LogMediator To: http://localhost:9000/soap/SimpleStockQuoteService, WSAction: urn:getQuote, SOAPAction: urn:getQuote, ReplyTo: http://www.w3.org/2005/08/addressing/anonymous, MessageID: urn:uuid:DB76240DF26CE9AF1D1194253430879, Direction: request, Envelope: &lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;&lt;soapenv:Header&gt;&lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;&lt;wsa:MessageID&gt;urn:uuid:DB76240DF26CE9AF1D1194253430879&lt;/wsa:MessageID&gt;&lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;&lt;m0:request&gt;&lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;&lt;/m0:request&gt;&lt;/m0:getQuote&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG LogMediator End : Log mediator
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator Start : Send mediator
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator Sending request message using implicit message properties..
-Sending To: http://localhost:9000/soap/SimpleStockQuoteService
-SOAPAction: urn:getQuote
-2007-11-05 15:03:51,254 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2FlexibleMEPClient Sending [add = false] [sec = false] [rm = false] [ to Address: http://localhost:9000/soap/SimpleStockQuoteService]
-2007-11-05 15:03:51,302 [127.0.1.1-asankha] [HttpServerWorker-1]  INFO TimeoutHandler This engine will expire all callbacks after : 86400 seconds, irrespective of the timeout action, after the specified or optional timeout
-2007-11-05 15:03:51,356 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator End : Send mediator
-2007-11-05 15:03:51,356 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator End : Sequence &lt;main&gt;
-2007-11-05 15:03:51,398 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Synapse received an asynchronous response message
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Received To: null
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver SOAPAction: null
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver WSA-Action: null
-2007-11-05 15:03:51,402 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;&lt;ns:return type="samples.services.GetQuoteResponse"&gt;&lt;ns:change&gt;4.03627430702446&lt;/ns:change&gt;&lt;ns:earnings&gt;-9.467701672785129&lt;/ns:earnings&gt;&lt;ns:high&gt;191.83014686803938&lt;/ns:high&gt;&lt;ns:last&gt;185.42637586281398&lt;/ns:last&gt;&lt;ns:lastTradeTimestamp&gt;Mon Nov 05 15:03:51 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;193.2690208751758&lt;/ns:low&gt;&lt;ns:marketCap&gt;-1737393.107878862&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-183.2632780777984&lt;/ns:open&gt;&lt;ns:peRatio&gt;-17.430497030284027&lt;/ns:peRatio&gt;&lt;ns:percentageChange&gt;1.9749680728382655&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;204.37162314344914&lt;/ns:prevClose&gt;&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;6695&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG Axis2SynapseEnvironment Injecting MessageContext
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG Axis2SynapseEnvironment Using Main Sequence for injected message
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator Start : Sequence &lt;main&gt;
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator Sequence &lt;SequenceMediator&gt; :: mediate()
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG LogMediator Start : Log mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1]  INFO LogMediator To: http://www.w3.org/2005/08/addressing/anonymous, MessageID: urn:uuid:A6510AF6BD288D8DFB1194253431259544001-942151716, Direction: response, Envelope: &lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;&lt;ns:return type="samples.services.GetQuoteResponse"&gt;&lt;ns:change&gt;4.03627430702446&lt;/ns:change&gt;&lt;ns:earnings&gt;-9.467701672785129&lt;/ns:earnings&gt;&lt;ns:high&gt;191.83014686803938&lt;/ns:high&gt;&lt;ns:last&gt;185.42637586281398&lt;/ns:last&gt;&lt;ns:lastTradeTimestamp&gt;Mon Nov 05 15:03:51 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;193.2690208751758&lt;/ns:low&gt;&lt;ns:marketCap&gt;-1737393.107878862&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-183.2632780777984&lt;/ns:open&gt;&lt;ns:peRatio&gt;-17.430497030284027&lt;/ns:peRatio&gt;&lt;ns:percentageChange&gt;1.9749680728382655&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;204.37162314344914&lt;/ns:prevClose&gt;&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;6695&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG LogMediator End : Log mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator Start : Send mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator Sending response message using implicit message properties..
-Sending To: http://www.w3.org/2005/08/addressing/anonymous
-SOAPAction: null
-2007-11-05 15:03:51,408 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator End : Send mediator
-2007-11-05 15:03:51,408 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator End : Sequence &lt;main&gt;</pre>
-
-<p>You have successfully completed the first part of this guide. Now let's
-look at the next scenario, proxy services.</p>
-
-<p></p>
-
-<h2>Proxy Services</h2>
-
-<p>As the name implies, a proxy service acts as a service hosted in Synapse,
-and typically fronts an existing service endpoint. A proxy service can be
-created and exposed on a different transport, schema, WSDL, or QoS (such as
-WS-Security, WS-Reliable Messaging) aspect than the real service and could
-mediate the messages before being delivered to the actual endpoint, and the
-responses before they reach the client.</p>
-
-<p>Clients can send requests for proxy services directly to Synapse, as the
-client sees as if they are hosted on it, and for example can perform ?wsdl
-and view the WSDL of the virtual proxy service. But in the Synapse
-configuration, such requests can be handled in anyway you like. Most obvious
-thing would be to do some processing to the message and send it to the actual
-service, probably running on a different computer. But it is not necessary to
-always send the message to the actual service. You may list any combination
-of tasks to be performed on the messages received for the proxy service and
-terminate the flow or send some java back to the client even without sending
-it to an actual service. Let's explore a simple proxy services scenario step
-by step to get a better feeling. As you have downloaded and installed Synapse
-in the previous section, now you can start directly on the sample.</p>
-
-<p></p>
-
-<h3>Running the sample</h3>
-
-<p>As in the previous section, there should be three entities running to
-demonstrate proxy services, the server, client and Synapse. Let's start with
-the server. </p>
-
-<p></p>
-
-<h4>Starting the sample Axis2 server</h4>
-
-<p>As you have built and deployed the SimpleStockQuote service in the
-previous section, you can simply start the server by switching to the
-&lt;synapse-home&gt;/samples/axis2Server directory and running the following
-command.</p>
-
-<div class="command">
-<p>Linux / Unix: . axis2server.sh </p>
-
-<p>Windows: axis2server.bat </p>
-</div>
-
-<p>You can see the console messages as in the previous section. </p>
-
-<h4>Starting Synapse</h4>
-
-<p>We have to start Synapse with a configuration containing a proxy service
-definition. In this case we are using the synapse_sample_150.xml, so that you
-don't have to write the configuration your self.</p>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<p></p>
-
-<p>The above configuration will expose a proxy service named StockQuoteProxy
-and specifies an endpoint
-(http://localhost:9000/soap/SimpleStockQuoteService) as the target for the
-proxy service. Therefore, messages coming to the proxy service will be
-directed to the address http://localhost:9000/soap/SimpleStockQuoteService
-specified in the endpoint. There is also an out sequence for the proxy
-service, which is applicable for response messages. In the out sequence, we
-just send the messages back to the client. The publishWSDL tag specifies an
-WSDL to be published for this proxy service. Let's start Synapse with this
-sample configuration by running the below command from the
-&lt;synapse-home&gt;/bin directory. It is possible to specify a sequence of
-mediation for incoming messages instead of a target endpoint, and many other
-possibilities and options are available to configure proxy services. These
-are explained in the samples and configuration guides.</p>
-
-<p></p>
-
-<div class="command">
-<p>Linux / Unix: . synapse.sh -sample 150</p>
-
-<p>Windows: synapse.bat -sample 150</p>
-</div>
-
-<p></p>
-
-<p>Synapse will display a set of messages as in the previous section
-describing the steps of starting procedure. Before running the client, it is
-time to observe another feature of proxy services. That is displaying the
-published WSDL. Just open a web browser and point it to the address
-http://localhost:8080/soap/StockQuoteProxy?wsdl. You will see the
-sample_proxy_1.wsdl specified in the configuration but containing the correct
-EPR for the service over http/s.</p>
-
-<p></p>
-
-<h4>Run the client</h4>
-
-<p>Now it is time to see it in action. Go to the
-&lt;synapse-home&gt;/samples/axis2Clients directory and type the following
-command:</p>
-
-<div class="command">
-ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy
--Dmode=quote -Dsymbol=IBM</div>
-
-<p>The above command sends a stockquote request directly to the provided
-transport endpoint at: http://localhost:8080/soap/StockQuoteProxy. You will
-see the response from the server displayed on the console as follows:</p>
-
-<div class="consoleOutput">
-Standard :: Stock price = $165.32687331383468 </div>
-
-<p></p>
-
-<p>This quick guide illustrates the simple use case of proxy services. Please
-refer to samples #150 and above in the Samples guide, for in depth coverage
-of more advanced use cases.</p>
-
-<p></p>
-
-<p>Yes, you are done with a quick look at Synapse. Now it is time to go
-deeper and reveal the advanced features of Synapse. You can browse through
-the samples for your interested areas. If you have any issue regarding
-Synapse as a user, feel free ask it in the Synapse user mailing list
-(http://ws.apache.org/synapse/mail-lists.html).</p>
-
-<p></p>
-
-<p></p>
-
-<p></p>
-</body>
-</html>
-
-

Property changes on: java/modules/documentation/src/site/xdoc/1_1_1/quickstart.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1_1/samples.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1_1/samples.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1_1/samples.xml	(nonexistent)
@@ -1,4491 +0,0 @@
-<!--
-~ Licensed to the Apache Software Foundation (ASF) under one
-~ or more contributor license agreements. See the NOTICE file
-~ distributed with this work for additional information
-~ regarding copyright ownership. The ASF licenses this file
-~ to you under the Apache License, Version 2.0 (the
-~ "License"); you may not use this file except in compliance
-~ with the License. You may obtain a copy of the License at
-~
-~ http://www.apache.org/licenses/LICENSE-2.0
-~
-~ Unless required by applicable law or agreed to in writing,
-~ software distributed under the License is distributed on an
-~ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-~ KIND, either express or implied. See the License for the
-~ specific language governing permissions and limitations
-~ under the License.
--->
-<html>
-<head>
-  <meta http-equiv="content-type" content=""/>
-  <title>Synapse Samples</title>
-  <style type="text/css">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-</head>
-
-<body>
-<h1>Running the Synapse Samples</h1>
-
-<h2><a name="TOC">Contents</a></h2>
-
-<div class="section-content">
-<ul>
-  <li><a href="samples_setup.html#Overview">Overview</a></li>
-  <li><a href="#MediationSamples">Message mediation samples</a>
-    <ul>
-      <li><a href="#Sample0">Sample 0: Introduction to Synapse</a></li>
-      <li><a href="#Sample1">Sample 1: Simple content based routing (CBR) of
-        messages</a></li>
-      <li><a href="#Sample2">Sample 2: CBR with the Switch-case mediator,
-        using message properties</a></li>
-      <li><a href="#Sample3">Sample 3: Local Registry entry definitions,
-        reusable endpoints and sequences</a></li>
-      <li><a href="#Sample4">Sample 4: Introduction to error handling</a></li>
-      <li><a href="#Sample5">Sample 5: Creating SOAP fault messages and
-        changing the direction of a message</a></li>
-      <li><a href="#Sample6">Sample 6: Manipulating SOAP headers, and
-        filtering incoming and outgoing messages</a></li>
-      <li><a href="#Sample7">Sample 7: Introduction to local Registry entries
-        and using Schema validation</a></li>
-      <li><a href="#Sample8">Sample 8: Introduction to static and dynamic
-        registry resources, and using XSLT transformations</a></li>
-      <li><a href="#Sample9">Sample 9: Introduction to dynamic sequences with
-        the Registry</a></li>
-      <li><a href="#Sample10">Sample 10: Introduction to dynamic endpoints
-        with the Registry</a></li>
-      <li><a href="#Sample11">Sample 11: A full registry based configuration,
-        and sharing a configuration between multiple instances</a></li>
-      <li><a href="#Sample12">Sample 12: One way messaging / fireAndForget
-        through synapse</a></li>
-    </ul>
-  </li>
-  <li><a href="#Endpoints">Advanced mediations with endpoints</a>
-    <ul>
-      <li><a href="#Sample50">Sample 50: POX to SOAP conversion</a></li>
-      <li><a href="#Sample51">Sample 51: MTOM and SwA optimizations and
-        request/response correlation</a></li>
-      <li><a href="#Sample52">Sample 52: Session less load balancing between
-        3 endpoints</a></li>
-      <li><a href="#Sample53">Sample 53: Failover sending among 3
-        endpoints</a></li>
-      <li><a href="#Sample54">Sample 54: Session affinity load balancing
-        between 3 endpoints</a></li>
-      <li><a href="#Sample55">Sample 55: Session affinity load balancing
-        between fail over endpoints</a></li>
-      <li><a href="#Sample56">Sample 56: WSDL endpoint</a></li>
-    </ul>
-  </li>
-  <li><a href="#MessageMediationQoS">Quality of Service addition or deduction
-    samples in message mediation</a>
-    <ul>
-      <li><a href="#Sample100">Sample 100: Using WS-Security for outgoing
-        messages</a></li>
-      <li><a href="#Sample101">Sample 101: Reliable message exchange between
-        Synapse and the back-end server using WS-ReliableMessaging</a></li>
-    </ul>
-  </li>
-  <li><a href="#ProxyServices">Synapse Proxy service samples</a>
-    <ul>
-      <li><a href="#Sample150">Sample 150: Introduction to proxy
-      services</a></li>
-      <li><a href="#Sample151">Sample 151: Custom sequences and endpoints
-        with proxy services</a></li>
-      <li><a href="#Sample152">Sample 152: Switching transports and message
-        format from SOAP to REST/POX</a></li>
-      <li><a href="#Sample153">Sample 153: Routing the messages arrived to a
-        proxy service without processing the security headers</a></li>
-      <li><a href="#Sample154">Sample 154: Load Balancing with Proxy Service
-        </a></li>
-    </ul>
-  </li>
-  <li><a href="#ProxyServiceQoS">QoS addition and deduction for service
-    mediation (proxy) samples</a>
-    <ul>
-      <li><a href="#Sample200">Sample 200: Using WS-Security with policy
-        attachments for proxy services</a></li>
-      <li><a href="#Sample201">Sample 201: Reliable message exchange between
-        the client and proxy services using WS-ReliableMessaging</a></li>
-    </ul>
-  </li>
-  <li><a href="#Transport">Transport samples and switching transports</a>
-    <ul>
-      <li><a href="#Sample250">Sample 250: Introduction to switching
-        transports - JMS to http/s</a></li>
-      <li><a href="#Sample251">Sample 251: Switching from http/s to
-      JMS</a></li>
-      <li><a href="#Sample252">Sample 252: Pure text/binary and POX message
-        support with JMS</a></li>
-      <li><a href="#Sample253">Sample 253: One way bridging from JMS to http
-        and replying with a 202 Accepted response</a></li>
-      <li><a href="#Sample254">Sample 254: Using the file system as transport
-        medium using VFS transport listener and sender</a></li>
-      <li><a href="#Sample255">Sample 255: Switching from ftp transport
-        listener to mail transport sender</a></li>
-      <li><a href="#Sample256">Sample 256: Proxy services with the mail
-        transport</a></li>
-    </ul>
-  </li>
-  <li><a href="#Task">Introduction to synapse tasks</a>
-    <ul>
-      <li><a href="#Sample300">Sample 300: Introduction to tasks with simple
-        trigger</a></li>
-    </ul>
-  </li>
-  <li><a href="#AdvancedMediation">Advanced mediations with advanced
-    mediators</a>
-    <ul>
-      <li><a href="#ScriptMediator">Using scripts in mediation (Script
-        Mediator)</a>
-        <ul>
-          <li><a href="#Sample350">Sample 350: Introduction to the script
-            mediator using js scripts</a></li>
-          <li><a href="#Sample351">Sample 351: In-line script mediation with
-            JavaScript</a></li>
-          <li><a href="#Sample352">Sample 352: Accessing Synapse message
-            context API methods using scripting language</a></li>
-          <li><a href="#Sample353">Sample 353: Using Ruby scripts for
-            mediation</a></li>
-          <li><a href="#Sample354">Sample 354: Using In-lined Ruby scripts
-            for mediation</a></li>
-        </ul>
-      </li>
-      <li><a href="#DBMediators">Database interactions in mediation (DBLookup
-        / DBReport)</a>
-        <ul>
-          <li><a href="#Sample360">Sample 360: Introduction to dblookp
-            mediator</a></li>
-          <li><a href="#Sample361">Sample 361: Introduction to dbreport
-            mediator</a></li>
-          <li><a href="#Sample362">Sample 362: Action of dbreport and
-            dblookup mediators together</a></li>
-        </ul>
-      </li>
-      <li><a href="#Throttle">Throtteling messages (Throttle Mediator)</a>
-        <ul>
-          <li><a href="#Sample370">Sample 370: Introduction to throttle
-            mediator and concurrency throttling</a></li>
-          <li><a href="#Sample371">Sample 371: Restricting requests based on
-            policies</a></li>
-          <li><a href="#Sample372">Sample 372: Use of both concurrency
-            throttling and request rate based throttling </a></li>
-        </ul>
-      </li>
-      <li><a href="#Class">Extending the mediation in java (Class
-        Mediator)</a>
-        <ul>
-          <li><a href="#Sample380">Sample 380: Writing your own custom
-            mediation in Java</a></li>
-        </ul>
-      </li>
-      <li><a href="#XQuery">Evaluating XQuery for mediation (XQuery
-        Mediator)</a>
-        <ul>
-          <li><a href="#Sample390">Sample 390: Introduction to the XQuery
-            mediator</a></li>
-          <li><a href="#Sample391">Sample 391: How to use the data from an
-            external XML document with in XQuery </a></li>
-        </ul>
-      </li>
-      <li><a href="#Splitter">Splitting messages in to parts and process in
-        parallel (Iterate / Clone)</a>
-        <ul>
-          <li><a href="#Sample400">Sample 400: Message splitting and
-            aggregating the responses</a></li>
-        </ul>
-      </li>
-      <!--<li><a href="#Aggregator">Aggregating messages and process in batch</a> -->
-      <!--<ul>-->
-      <!--<li><a href="#Sample410">Sample 410: Message splitting and-->
-      <!--aggregating the responses</a></li>-->
-      <!--</ul>-->
-      <!--</li>-->
-      <li><a href="#Cache">Caching the responses over the requests</a>
-        <ul>
-          <li><a href="#Sample420">Sample 420: Simple cache implemented on
-            synapse for the actual service</a></li>
-        </ul>
-      </li>
-      <li><a href="#Callout">Synchronize web service invocation with Callout
-        mediator </a>
-        <ul>
-          <li><a href="#Sample430">Sample 430: Simple Callout Mediator for
-            Synchronize web service invocation</a></li>
-        </ul>
-      </li>
-    </ul>
-  </li>
-</ul>
-</div>
-
-<h1><a name="MediationSamples">Message Mediation Samples</a></h1>
-
-<h2><a name="Sample0">Sample 0: Introduction to Synapse</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- log all attributes of messages passing through --&gt;
-    &lt;log level="full"/&gt;
-
-    &lt;!-- Send the messageto implicit destination --&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Introduction to Synapse. Shows how a message could be
-made to pass through Synapse </strong><strong>and logged before it is
-delivered to its ultimate receiver.</strong></p>
-
-<p>The Stock quote client can operate in the following modes for this
-example.</p>
-<ol>
-  <li>Smart Client mode</li>
-  <pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ </pre>
-  <li>Using Synapse as a HTTP Proxy</li>
-  <pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dprxurl=http://localhost:8080/</pre>
-  <li>Gateway Mode / Dumb Client</li>
-
-  <p>See sample # 1</p>
-</ol>
-
-<p><strong>Prerequisites:<br/>
-</strong>Start the Synapse configuration numbered 0: e.g. synapse -sample
-0<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-deployed</p>
-
-<p><strong>Execute the Smart Client </strong></p>
-
-<p>By tracing the execution of Synapse with the log output level set to
-DEBUG, you will see the client request arriving at Synapse with a
-WS-Addressing 'To' set to EPR
-http://localhost:9000/soap/SimpleStockQuoteService. The Synapse engine logs
-the message at the "full" log level (i.e. all the message headers and the
-body) then sends the message to its implicit 'To' address which is
-http://localhost:9000/soap/SimpleStockQuoteService. You will see a message in
-the Axis2 server console confirming that the message got routed to the sample
-server and the sample service hosted at the sample server generating a stock
-quote for the requested symbol.</p>
-<pre>Sat Nov 18 21:01:23 IST 2006 SimpleStockQuoteService :: Generating quote for : IBM</pre>
-
-<p>The response message generated by the service is again received by
-Synapse, and flows through the same mediation rules, which logs the response
-message and then sends it back. This time to the client. On the client
-console you should see an output similar to the following based on the
-message received by the client.</p>
-<pre>Standard :: Stock price = $95.26454380258552</pre>
-
-<p><strong>Execute the Proxy Client </strong></p>
-
-<p>You will see the exact same behaviour as per the previous example when you
-run this scenario. However this time the difference is at the client, as it
-sends the message to the WS-Addressing 'To' address
-http://localhost:9000/soap/SimpleStockQuoteService, but the transport
-specifies Synapse as the http proxy. </p>
-
-<h2><a name="Sample1">Sample 1: Simple content based routing (CBR) of
-messages</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- filtering of messages with XPath and regex matches --&gt;
-    &lt;filter source="get-property('To')" regex=".*/StockQuote.*"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-        &lt;drop/&gt;
-    &lt;/filter&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Introduction to simple content based routing. Shows how
-a message could be made to pass through Synapse using the Dumb Client mode,
-where Synapse acts as a gateway to accept all messages and then perform
-mediation and routing based on message properties or content.</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 1: i.e. synapse -sample 1<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-deployed<br/>
-</p>
-
-<p>Execute the Dumb Client as: </p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuote<br/></pre>
-
-<p>This time you will see Synapse receiving a message for which Synapse was
-set as the ultimate receiver of the message. Based on the 'To' EPR of
-http://localhost:8080/soap/StockQuote, Synapse performs a match to the path
-'/StockQuote' and as the request matches the XPath expression of the filter
-mediator, the filter mediator's child mediators execute. This sends the
-message to a different endpoint as specified by the endpoint definition. The
-'drop' mediator terminates further processing of the current message in a
-configuration. During response processing, the filter condition fails, and
-thus the implicit 'send' mediator forwards the response back to the
-client.</p>
-
-<h2><a name="Sample2">Sample 2: CBR with the Switch-case mediator, using
-message properties</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;switch source="//m0:getQuote/m0:request/m0:symbol" xmlns:m0="http://services.samples/xsd"&gt;
-        &lt;case regex="IBM"&gt;
-            &lt;!-- the property mediator sets a local property on the *current* message --&gt;
-            &lt;property name="symbol" value="Great stock - IBM"/&gt;
-        &lt;/case&gt;
-        &lt;case regex="MSFT"&gt;
-            &lt;property name="symbol" value="Are you sure? - MSFT"/&gt;
-        &lt;/case&gt;
-        &lt;default&gt;
-            &lt;!-- it is possible to assign the result of an XPath expression as well --&gt;
-            &lt;property name="symbol"
-                  expression="fn:concat('Normal Stock - ', //m0:getQuote/m0:request/m0:symbol)"
-                  xmlns:m0="http://services.samples/xsd"/&gt;
-        &lt;/default&gt;
-    &lt;/switch&gt;
-
-    &lt;log level="custom"&gt;
-        &lt;!-- the get-property() XPath extension function allows the lookup of local message properties
-            as well as properties from the Axis2 or Transport contexts (i.e. transport headers) --&gt;
-        &lt;property name="symbol" expression="get-property('symbol')"/&gt;
-        &lt;!-- the get-property() function supports the implicit message headers To/From/Action/FaultTo/ReplyTo --&gt;
-        &lt;property name="epr" expression="get-property('To')"/&gt;
-    &lt;/log&gt;
-
-    &lt;!-- Send the messages where they are destined to (i.e. the 'To' EPR of the message) --&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Introduce switch-case mediator and writing and reading
-of local properties set on a message instance</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 2: i.e. synapse -sample 2<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done.</p>
-
-<p>Execute the 'ant stockquote ..' request again in the smart client mode,
-specifying 'IBM', 'MSFT' and 'SUN' as the stock symbols. When the symbol IBM
-is requested, viewing the mediation logs you will see that the case
-statements' first case for 'IBM' is executed and a local property named
-'symbol' was set to 'Great stock - IBM'. Subsequently this local property
-value is looked up by the log mediator and logged using the 'get-property()'
-XPath extension function.</p>
-
-<p>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService
--Dtrpurl=http://localhost:8080/ -Dsymbol=IBM</p>
-<pre>INFO LogMediator - symbol = Great stock - IBM, epr = http://localhost:9000/axis2/services/SimpleStockQuoteService </pre>
-
-<p>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService
--Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</p>
-<pre>INFO LogMediator - symbol = Are you sure? - MSFT, epr = http://localhost:9000/axis2/services/SimpleStockQuoteService</pre>
-
-<h2><a name="Sample3">Sample 3: Local Registry entry definitions, reusable
-endpoints and sequences</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- define a string resource entry to the local registry --&gt;
-    &lt;localEntry key="version"&gt;0.1&lt;/localEntry&gt;
-    &lt;!-- define a reuseable endpoint definition --&gt;
-    &lt;endpoint name="simple"&gt;
-        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/endpoint&gt;
-
-    &lt;!-- define a reusable sequence --&gt;
-    &lt;sequence name="stockquote"&gt;
-        &lt;!-- log the message using the custom log level. illustrates custom properties for log --&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="Text" value="Sending quote request"/&gt;
-            &lt;property name="version" expression="get-property('version')"/&gt;
-            &lt;property name="direction" expression="get-property('direction')"/&gt;
-        &lt;/log&gt;
-        &lt;!-- send message to real endpoint referenced by key "simple" endpoint definition --&gt;
-        &lt;send&gt;
-            &lt;endpoint key="simple"/&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;property name="direction" value="incoming"/&gt;
-            &lt;sequence key="stockquote"/&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Illustrates local registry entry definitions, reusable
-endpoints and sequences</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 3: i.e. synapse -sample 3<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>This example uses a sequence named as "main" that specifies the main
-mediation rules to be executed. This is equivalent to directly specifying the
-mediators of the main sequence within the &lt;definitions&gt; tags. This is
-the recommended and also a better approach for non-trivial configurations.
-Execute the 'ant stockquote ..' request again, and following through the
-mediation logs you will now notice that the sequence named "main" is
-executed. Then for the incoming message flow the &lt;in&gt; mediator
-executes, and it calls into the sequence named "stockquote".</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre>DEBUG SequenceMediator - Sequence mediator &lt;main&gt; :: mediate()<br/>DEBUG InMediator - In mediator mediate()<br/>DEBUG SequenceMediator - Sequence mediator &lt;stockquote&gt; :: mediate()</pre>
-
-<p>As the "stockquote" sequence executes, the log mediator dumps a simple
-text/string property, result of an XPath evaluation, that picks up the key
-named "version", and a second result of an XPath evaluation that picks up a
-local message property set previously by the &lt;property&gt; mediator. The
-get-property() XPath extension function is able to read message properties
-local to the current message, local or remote registry entries, Axis2 message
-context properties as well as transport headers. The local entry definition
-for "version" defines a simple text/string registry entry for that which is
-visible to all messages that pass through Synapse.</p>
-<pre>[HttpServerWorker-1] INFO  LogMediator - Text = Sending quote request, version = 0.1, direction = incoming
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] DEBUG AddressEndpoint - Sending To: http://localhost:9000/soap/SimpleStockQuoteService </pre>
-
-<h2><a name="Sample4">Sample 4: Introduction to error handling</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the default fault handling sequence used by Synapse - named 'fault' --&gt;
-    &lt;sequence name="fault"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="An unexpected error occured"/&gt;
-            &lt;property name="message" expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/log&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="sunErrorHandler"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="An unexpected error occured for stock SUN"/&gt;
-            &lt;property name="message" expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/log&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;!-- default message handling sequence used by Synapse - named 'main' --&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;switch source="//m0:getQuote/m0:request/m0:symbol" xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;case regex="IBM"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="MSFT"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint key="bogus"/&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="SUN"&gt;
-                    &lt;sequence key="sunSequence"/&gt;
-                &lt;/case&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;sequence name="sunSequence" onError="sunErrorHandler"&gt;
-        &lt;send&gt;
-            &lt;endpoint key="sunPort"/&gt;
-        &lt;/send&gt;
-&lt;/sequence&gt;
-
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Introduction to error handling with the 'fault'
-sequence</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 4: i.e. synapse -sample 4<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>When the IBM stock quote is requested, the configuration routes it to the
-defined inline endpoint, which routes the message to the
-SimpleStockQuoteService on the local Axis2 instance. Hence a valid response
-message is shown at the client.</p>
-
-<p>If you lookup a stock quote for 'MSFT', Synapse is instructed to route the
-message to the endpoint defined as the 'bogus' endpoint, which does not
-exist. Synapse executes the specified error handler sequence closest to the
-point where the error was encountered. In this case, the currently executing
-sequence is 'main' and it does not specify an 'onError' attribute. Whenever
-Synapse cannot find an error handler, it looks for a sequence named 'fault'.
-Thus the 'fault' sequence can be seen executing, and writing the generic
-error message to the logs. </p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</pre>
-<pre>[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] ERROR IndirectEndpoint - Reference to non-existent endpoint for key : bogus
-[HttpServerWorker-1] DEBUG MediatorFaultHandler - MediatorFaultHandler :: handleFault
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;fault&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - text = An unexpected error occured, message = Reference to non-existent endpoint for key : bogus</pre>
-
-<p>When the 'SUN' quote is requested, a custom sequence 'sunSequence' is
-invoked, and it specifies 'sunErrorHandler' as its error handler. Hence when
-the send fails, you could see the proper error handler invocation and the
-custom error message printed as follows.</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=SUN</pre>
-<pre>[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;sunSequence&gt; :: mediate()
-[HttpServerWorker-1] DEBUG SequenceMediator - Setting the onError handler for the sequence
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] ERROR IndirectEndpoint - Reference to non-existent endpoint for key : sunPort
-[HttpServerWorker-1] DEBUG MediatorFaultHandler - MediatorFaultHandler :: handleFault
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;sunErrorHandler&gt; :: mediate()
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - text = An unexpected error occured for stock SUN, message = Reference to non-existent endpoint for key : sunPort</pre>
-
-<h2><a name="Sample5">Sample 5: Creating SOAP fault messages and changing the
-direction of a message</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="myFaultHandler"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/makefault&gt;
-
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="myFaultHandler"&gt;
-        &lt;in&gt;
-            &lt;switch source="//m0:getQuote/m0:request/m0:symbol"
-                    xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;case regex="MSFT"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://bogus:9000/soap/NonExistentStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="SUN"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://localhost:9009/soap/NonExistentStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Makefault mediator and sending back error responses
-</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 5: i.e. synapse -sample 5<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>When the MSFT stock quote is requested, an unknown host exception would be
-generated. A connection refused exception would be generated for the SUN
-stock request. This error message is captured and returned to the original
-client as a SOAP fault in this example.</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</pre>
-
-<p>returns,</p>
-<pre>&lt;soapenv:Fault xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;faultcode&gt;soapenv:Client&lt;/faultcode&gt;
-    &lt;faultstring&gt;java.net.UnknownHostException: bogus&lt;/faultstring&gt;&lt;detail /&gt;&lt;/soapenv:Fault&gt;</pre>
-
-<p>And</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=SUN</pre>
-
-<p>returns,</p>
-<pre>&lt;soapenv:Fault xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;faultcode&gt;soapenv:Client&lt;/faultcode&gt;
-    &lt;faultstring&gt;java.net.ConnectException: Connection refused&lt;/faultstring&gt;&lt;detail /&gt;&lt;/soapenv:Fault&gt;</pre>
-
-<h2><a name="Sample6">Sample 6: Manipulating SOAP headers, and filtering
-incoming and outgoing messages</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;header name="To" value="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Introduction to header, in (out) mediators</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 6: i.e. synapse -sample 6<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>In this example we use the stockquote client in the dumb client mode,
-setting the 'To' EPR of the message to Synapse. Then the 'in' mediator
-processes the incoming messages, and manipulates the 'To' header to refer to
-the stock quote service on the sample Axis2 server. Thus it is now possible
-to request for a stock quote as follows.</p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-
-<h2><a name="Sample7">Sample 7: Introduction to local Registry entries and
-using Schema validation</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;localEntry key="validate_schema"&gt;
-        &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
-                    xmlns="http://www.apache-synapse.org/test" elementFormDefault="qualified"
-                    attributeFormDefault="unqualified"
-                    targetNamespace="http://services.samples/xsd"&gt;
-            &lt;xs:element name="getQuote"&gt;
-                &lt;xs:complexType&gt;
-                    &lt;xs:sequence&gt;
-                        &lt;xs:element name="request"&gt;
-                            &lt;xs:complexType&gt;
-                                &lt;xs:sequence&gt;
-                                    &lt;xs:element name="stocksymbol" type="xs:string"/&gt;
-                                &lt;/xs:sequence&gt;
-                            &lt;/xs:complexType&gt;
-                        &lt;/xs:element&gt;
-                    &lt;/xs:sequence&gt;
-                &lt;/xs:complexType&gt;
-            &lt;/xs:element&gt;
-        &lt;/xs:schema&gt;
-    &lt;/localEntry&gt;
-
-    &lt;in&gt;
-        &lt;validate&gt;
-            &lt;schema key="validate_schema"/&gt;
-            &lt;on-fail&gt;
-                &lt;!-- if the request does not validate againt schema throw a fault --&gt;
-                &lt;makefault&gt;
-                    &lt;code value="tns:Receiver"
-                            xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                    &lt;reason value="Invalid custom quote request"/&gt;
-                &lt;/makefault&gt;
-                &lt;property name="RESPONSE" value="true"/&gt;
-                &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-            &lt;/on-fail&gt;
-        &lt;/validate&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Introduction to local (static) registry entries and the
-validate mediator</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 7: i.e. synapse -sample 7<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>This example shows how a static XML fragment could be made available to
-the Synapse local registry. Resources defined in the local registry are
-static (i.e. never changes over the lifetime of the configuration) and may be
-specified as a source URL, inline text or inline xml. In this example the
-schema is made available under the key 'validate_schema'.</p>
-
-<p>The validate mediator by default operates on the first child element of
-the SOAP body. You may specify an XPath expression using the 'source'
-attribute to override this behaviour. The validate mediator now uses the
-'validate_schema' resource to validate the incoming message, and if the
-message validatation fails it invokes the 'on-fail' sequence of mediators.</p>
-
-<p>If you send a stockquote request using 'ant stockquote ...' you will get a
-fault back with the message 'Invalid custom quote request' as the schema
-validation failed. This is because the schema used in the example expects a
-slightly different message than what is created by the stock quote client.
-(i.e. expects a 'stocksymbol' element instead of 'symbol' to specify thestock
-symbol)</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-
-<h2><a name="Sample8">Sample 8: Introduction to static and dynamic registry
-resources, and using XSLT transformations</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to a URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;!-- define the request processing XSLT resource as a static URL source --&gt;
-    &lt;localEntry key="xslt-key-req" src="file:repository/conf/sample/resources/transform/transform.xslt"/&gt;
-
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote requst expected by the service --&gt;
-        &lt;xslt key="xslt-key-req"/&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;!-- the key is looked up in the remote registry and loaded as a 'dynamic' registry resource --&gt;
-        &lt;xslt key="transform/transform_back.xslt"/&gt;
-    &lt;/out&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Introduction to static and dynamic registry resources
-and the XSLT mediator</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 8: i.e. synapse -sample 8<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>This example uses the XSLT mediator to perform transformations, and the
-xslt tranformations are specified as registry resources. The first resource
-'xslt-key-req' is specified as a 'local' registry entry. Local entries do not
-place the resource on the registry, but simply make it available to the local
-configuration. If a local entry is defined with a key that already exists in
-the remote registry, the local entry will have higher preference and override
-the remote resource.</p>
-
-<p>In this example you will notice the new 'registry' definition. Synapse
-comes with a simple URL based registry implementation SimpleURLRegistry.
-During initialization of the registry, the SimpleURLRegistry expects to find
-a property named 'root', which specifies a prefix for the registry keys used
-later. When the SimpleURLRegistry is used, this root is prefixed to the entry
-keys to form the complete URL for the resource being looked up. The registry
-caches a resource once requested, and caches it internally for a specified
-duration. Once this period expires, it will reload the meta information about
-the resource and reload its cached copy if necessary, the next time the
-resource is requested.</p>
-
-<p>Hence the second XSLT resource key 'transform/transform_back.xslt'
-concatenated with the 'root' of the SimpleURLRegistry
-'file:repository/conf/sample/resources/' forms the complete URL of the
-resource as
-'file:repository/conf/sample/resources/transform/transform_back.xslt' and
-caches its value for a period of 15000 ms.</p>
-
-<p>Execute the custom quote client as 'ant stockquote -Dmode=customquote ...'
-and analyze the the Synapse debug log output</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=customquote</pre>
-
-<p>The incoming message is now transformed into a standard stock quote
-request as expected by the SimpleStockQuoteService deployed on the local
-Axis2 instance, by the XSLT mediator. The XSLT mediator uses Xalan-J to
-perform the transformations. It is possible to configure the underlying
-transformation engine using properties where necessary. The response from the
-SimpleStockQuoteService is converted back into the custom format as expected
-by the client during the out message processing.</p>
-
-<p>During the response processing you could see the SimpleURLRegistry
-fetching the resource as shown by the log message below</p>
-<pre>[HttpClientWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : transform/transform_back.xslt</pre>
-
-<p>If you run the client again immediately (i.e within 15 seconds of the
-first request) you will not see the resource being reloaded by the registry
-as the cached value would be still valid.</p>
-
-<p>However if you leave the system idle for 15 seconds or more and then retry
-the same request, you will now notice that the registry noticed the cached
-resource has expired and will check the meta information about the resource
-to check if the resource itself has changed and will require a fresh fetch
-from the source URL. If the meta data / version number indicates that a
-reload of the cached resource is not necessary (i.e. unless the resource
-itself actually changed) the updated meta information is used and the cache
-lease extended as appropriate.</p>
-<pre>[HttpClientWorker-1] DEBUG AbstractRegistry - Cached object has expired for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG SimpleURLRegistry - Perform RegistryEntry lookup for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG AbstractRegistry - Expired version number is same as current version in registry
-[HttpClientWorker-1] DEBUG AbstractRegistry - Renew cache lease for another 15s </pre>
-
-<p>Now edit the
-repository/conf/sample/resources/transform/transform_back.xslt file and add a
-blank line at the end. Now when you run the client again, and if the cache is
-expired, the resource would be re-fetched from its URL by the registry and
-this can be seen by the following debug log messages</p>
-<pre>[HttpClientWorker-1] DEBUG AbstractRegistry - Cached object has expired for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG SimpleURLRegistry - Perform RegistryEntry lookup for key : transform/transform_back.xslt
-[HttpClientWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : transform/transform_back.xslt </pre>
-
-<p>Thus the SimpleURLRegistry allows resource to be cached, and updates
-detected so that the changes could be reloaded without restarting the Synapse
-instance.</p>
-
-<h2><a name="Sample9">Sample 9: Introduction to dynamic sequences with the
-Registry</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;sequence key="sequence/dynamic_seq_1.xml"/&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Introduction to dynamic sequences with a
-Registry</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 9: i.e. synapse -sample 9<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>This example introduces the dynamic behaviour of Synapse through the use
-of a Registry. Synapse supports dynamic definitions for sequences and
-endpoints, and as seen before, for resources. In this example we define a
-Synapse configuration which references a sequence definition specified as a
-registry key. The registry key resolves to the actual content of the sequence
-which would be loaded dynamically by Synapse at runtime, and cached
-appropriately as per its definition in the registry. Once the cache expires,
-Synapse would recheck the meta information for the definition and re-load the
-sequence definition if necessary and re-cache it again.</p>
-
-<p>Once Synapse is started, execute the stock quote client as 'ant
-stockquote..'. You will notice that that Synapse fetches the definition of
-the sequence from the registry and executes its rules as follows:</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre>[HttpServerWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : sequence/dynamic_seq_1.xml
-...
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;dynamic_sequence&gt; :: mediate()
-...
-[HttpServerWorker-1] INFO  LogMediator - message = *** Test Message 1 ***</pre>
-
-<p>Now if you execute the client immediately (i.e. within 15 seconds of the
-last execution) you will notice that the sequence was not reloaded. If you
-edit the sequence definition in
-repository/conf/sample/resources/sequence/dynamic_seq_1.xml (i.e. edit the
-log message to read as "*** Test Message 2 ***") and execute the client
-again, you will notice that the new message is not yet visible (i.e. if you
-execute this within 15 seconds of loading the resource for the first time)
-However, after 15 seconds elapsed since the original caching of the sequence,
-you will notice that the new sequence is loaded and executed by Synapse from
-the following log messages.</p>
-<pre>[HttpServerWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : sequence/dynamic_seq_1.xml
-...
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;dynamic_sequence&gt; :: mediate()
-...
-[HttpServerWorker-1] INFO  LogMediator - message = *** Test Message 2 ***</pre>
-
-<p>The cache timeout could be tuned appropriately by configuring the URL
-registry to suite the environment and the needs.</p>
-
-<h2><a name="Sample10">Sample 10: Introduction to dynamic endpoints with the
-Registry</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;in&gt;
-        &lt;send&gt;
-            &lt;endpoint key="endpoint/dynamic_endpt_1.xml"/&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Introduction to dynamic endpoints with the
-Registry</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 10: i.e. synapse -sample 10<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done<br/>
-Start a second Axis2 server on http port 9001 and https port 9003 as
-follows:</p>
-<pre>./axis2server.sh -http 9001 -https 9003</pre>
-
-<p>This example introduces dynamic endpoints, where the definition of an
-endpoint is stored in the Registry. To follow this example execute the stock
-quote client as 'ant stockquote..' and see that the message is routed to the
-SimpleStockQuoteService on the default Axis2 instance on http port 9000.
-Repeat the above example immediately again, and notice that the endpoint is
-cached and reused by Synapse - similarly to example # 8.</p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-
-<p>Now edit the repository/conf/sample/resources/endpoint/dynamic_endpt_1.xml
-definition and update the address to
-"http://localhost:9001/soap/SimpleStockQuoteService". After the cached
-expires, the Registry loads the new definition of the endpoint, and then the
-messages can be seen being routed to the second sample Axis2 server on http
-port 9001.</p>
-
-<h2><a name="Sample11">Sample 11: A full registry based configuration, and
-sharing a configuration between multiple instances</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: A full registry based configuration</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 11: i.e. synapse -sample 11<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>This example shows a full registry based Synapse configuration. Thus it is
-possible to start a remote configuration from multiple instances of Synapse
-in a clustered environment easily. The Synapse configuration held on a node
-hosting Synapse simply points to the registry and looks up the actual
-configuration by requesting the key 'synapse.xml'. </p>
-
-<p>(Note: Full registry based configuration is not dynamic atleast for the
-moment. i.e. it is not reloading itself) </p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-<pre>[HttpServerWorker-1] INFO LogMediator - message = This is a dynamic Synapse configuration</pre>
-
-<p>The actual synapse.xml loaded is:</p>
-<pre>&lt;!-- a registry based Synapse configuration --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;log level="custom"&gt;
-        &lt;property name="message" value="This is a dynamic Synapse configuration $$$"/&gt;
-    &lt;/log&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-
-<h2><a name="Sample12">Sample 12: One way messaging / fireAndForget through
-synapse</a></h2>
-
-<p><strong>Objective: Demonstrate one way messaging / fireAndForget through
-synapse</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService (Refer steps
-above)<br/>
-Start the Synapse configuration numbered 1: i.e. synapse -sample 1</p>
-
-<p>This example invokes the one-way 'placeOrder' operation on the
-SimpleStockQuoteService using the custom client which uses the Axis2
-ServiceClient.fireAndForget() API. To test this, use 'ant
--Dmode=placeorder...' and you will notice the one way message flowing through
-Synapse into the sample Axis2 server instance, which reports the acceptance
-of the order as follows:</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=placeorder</pre>
-<pre>SimpleStockQuoteService :: Accepted order for : 7482 stocks of IBM at $ 169.27205579038733</pre>
-
-<p>If you send your client request through TCPmon, you will notice that the
-SimpleStockQuoteService replies to Synapse with a HTTP 202 reply, and that
-Synapse in-turn replies to the client with a HTTP 202 acknowledgement</p>
-
-<h1><a name="Endpoints">Advanced mediations with endpoints</a></h1>
-
-<h2><a name="Sample50">Sample 50: POX to SOAP conversion</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- filtering of messages with XPath and regex matches --&gt;
-    &lt;filter source="get-property('To')" regex=".*/StockQuote.*"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="soap11"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-        &lt;drop/&gt;
-    &lt;/filter&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: POX to SOAP conversion</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 50: i.e. synapse -sample 50</p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done</p>
-
-<p>Execute the 'ant stockquote' specifying that the request should be a REST
-request as follows:</p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuote -Drest=true</pre>
-
-<p>This example shows a http REST request (as shown below) being transformed
-into a SOAP request and forwarded to the stock quote service. </p>
-<pre>POST /soap/StockQuote HTTP/1.1
-Content-Type: application/xml; charset=UTF-8;action="urn:getQuote";
-SOAPAction: urn:getQuote
-User-Agent: Axis2
-Host: 127.0.0.1
-Transfer-Encoding: chunked
-
-75
-&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-   &lt;m0:request&gt;
-      &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-   &lt;/m0:request&gt;
-&lt;/m0:getQuote&gt;0</pre>
-
-<h2><a name="Sample51">Sample 51: MTOM and SwA optimizations and
-request/response correlation</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;filter source="get-property('Action')" regex="urn:uploadFileUsingMTOM"&gt;
-            &lt;property name="example" value="mtom"/&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="mtom"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/filter&gt;
-        &lt;filter source="get-property('Action')" regex="urn:uploadFileUsingSwA"&gt;
-            &lt;property name="example" value="swa"/&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="swa"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/filter&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;filter source="get-property('example')" regex="mtom"&gt;
-            &lt;property name="enableMTOM" value="true" scope="axis2"/&gt;
-        &lt;/filter&gt;
-        &lt;filter source="get-property('example')" regex="swa"&gt;
-            &lt;property name="enableSwA" value="true" scope="axis2"/&gt;
-        &lt;/filter&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: MTOM and SwA optimizations and request/response
-correlation</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 51: i.e. synapse -sample 51<br/>
-Start the Axis2 server and deploy the MTOMSwASampleService if not already
-done</p>
-
-<p>Execute the 'ant optimizeclient' specifying MTOM optimization as
-follows:</p>
-<pre>ant optimizeclient -Dopt_mode=mtom</pre>
-
-<p>The configuration now sets a local message context property, and forwards
-the message to 'http://localhost:9000/soap/MTOMSwASampleService' optimizing
-binary content as MTOM. By sending this message through TCPMon you would be
-able to see the actual message sent over the http transport if required. Thus
-during response processing, by checking the local message property Synapse
-could identify the past information about the current message context, and
-uses this knowledge to transform the response back to the client in the same
-format as the original request.</p>
-
-<p>When the client executes successfully, it will upload a file containing
-the ASF logo and receive its response back again and save it into a temporary
-file.</p>
-<pre>[java] Sending file : ./../../repository/conf/sample/resources/mtom/asf-logo.gif as MTOM</pre>
-<pre>[java] Saved response to file : /tmp/mtom-36877.gif</pre>
-
-<p>Next try SwA as:</p>
-<pre>ant optimizeclient -Dopt_mode=swa</pre>
-<pre>[java] Sending file : ./../../repository/conf/sample/resources/mtom/asf-logo.gif as SwA
-[java] Saved response to file : /tmp/swa-47549.gif</pre>
-
-<p>By using TCPMon and sending the message through it, one can inspect that
-the requests and responses sent are indeed MTOM optimized or sent as http
-attachments as follows:</p>
-<pre>POST http://localhost:9000/soap/MTOMSwASampleService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:uploadFileUsingMTOM
-Content-Type: multipart/related; boundary=MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353; type="application/xop+xml";
-start="&lt;0.urn:uuid:B94996494E1DD5F9B51177413845354@apache.org&gt;"; start-info="text/xml"; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353241
-Content-Type: application/xop+xml; charset=UTF-8; type="text/xml"
-Content-Transfer-Encoding: binary
-Content-ID:
-   &lt;0.urn:uuid:B94996494E1DD5F9B51177413845354@apache.org&gt;221b1
-      &lt;?xml version='1.0' encoding='UTF-8'?&gt;
-         &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-            &lt;soapenv:Body&gt;
-               &lt;m0:uploadFileUsingMTOM xmlns:m0="http://www.apache-synapse.org/test"&gt;
-                  &lt;m0:request&gt;
-                     &lt;m0:image&gt;
-                        &lt;xop:Include href="cid:1.urn:uuid:78F94BC50B68D76FB41177413845003@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include" /&gt;
-                     &lt;/m0:image&gt;
-                  &lt;/m0:request&gt;
-               &lt;/m0:uploadFileUsingMTOM&gt;
-            &lt;/soapenv:Body&gt;
-         &lt;/soapenv:Envelope&gt;
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353217
-Content-Type: image/gif
-Content-Transfer-Encoding: binary
-Content-ID:
-         &lt;1.urn:uuid:78F94BC50B68D76FB41177413845003@apache.org&gt;22800GIF89a... &lt;&lt; binary content &gt;&gt;</pre>
-<pre>POST http://localhost:9000/soap/MTOMSwASampleService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:uploadFileUsingSwA
-Content-Type: multipart/related; boundary=MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177414170491; type="text/xml";
-start="&lt;0.urn:uuid:B94996494E1DD5F9B51177414170492@apache.org&gt;"; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177414170491225
-Content-Type: text/xml; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-Content-ID:
-   &lt;0.urn:uuid:B94996494E1DD5F9B51177414170492@apache.org&gt;22159
-      &lt;?xml version='1.0' encoding='UTF-8'?&gt;
-         &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-            &lt;soapenv:Body&gt;
-               &lt;m0:uploadFileUsingSwA xmlns:m0="http://www.apache-synapse.org/test"&gt;
-                  &lt;m0:request&gt;
-                     &lt;m0:imageId&gt;urn:uuid:15FD2DA2584A32BF7C1177414169826&lt;/m0:imageId&gt;
-                  &lt;/m0:request&gt;
-               &lt;/m0:uploadFileUsingSwA&gt;
-            &lt;/soapenv:Body&gt;
-         &lt;/soapenv:Envelope&gt;22--34MIMEBoundaryurn_uuid_B94996494E1DD5F9B511774141704912
-17
-Content-Type: image/gif
-Content-Transfer-Encoding: binary
-Content-ID:
-         &lt;urn:uuid:15FD2DA2584A32BF7C1177414169826&gt;22800GIF89a... &lt;&lt; binary content &gt;&gt;</pre>
-
-<h2><a name="Sample52">Sample 52: Session less load balancing between 3
-endpoints</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-&lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate the simple load balancing among set of
-endpoints</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Start Synapse with sample configuration 52. (i.e. synapse -sample 52)</p>
-
-<p>Deploy the LoadbalanceFailoverService by switching to &lt;synapse
-installation directory&gt;/samples/axis2Server/src/LoadbalanceFailoverService
-directory and running ant.</p>
-
-<p>Start three instances of sample Axis2 server on HTTP ports 9001, 9002 and
-9003 and give some unique names to each server.</p>
-
-<p>Example commands to run sample Axis2 servers from the &lt;synapse
-installation directory&gt;/samples/axis2Server directory in Linux are listed
-below:</p>
-<pre>./axis2server.sh -http 9001 -https 9005 -name MyServer1
-./axis2server.sh -http 9002 -https 9006 -name MyServer2
-./axis2server.sh -http 9003 -https 9007 -name MyServer3</pre>
-
-<p>Now we are done with setting up the environment for load balance sample.
-Start the load balance and failover client using the following command:</p>
-<pre>ant loadbalancefailover -Di=100</pre>
-
-<p>This client sends 100 requests to the LoadbalanceFailoverService through
-Synapse. Synapse will distribute the load among the three endpoints mentioned
-in the configuration in round-robin manner. LoadbalanceFailoverService
-appends the name of the server to the response, so that client can determine
-which server has processed the message. If you examine the console output of
-the client, you can see that requests are processed by three servers as
-follows:</p>
-<pre>[java] Request: 1 ==&gt; Response from server: MyServer1
-[java] Request: 2 ==&gt; Response from server: MyServer2
-[java] Request: 3 ==&gt; Response from server: MyServer3
-[java] Request: 4 ==&gt; Response from server: MyServer1
-[java] Request: 5 ==&gt; Response from server: MyServer2
-[java] Request: 6 ==&gt; Response from server: MyServer3
-[java] Request: 7 ==&gt; Response from server: MyServer1
-...</pre>
-
-<p>Now run the client without the -Di=100 parameter to send infinite
-requests. While running the client shutdown the server named MyServer1. You
-can observe that requests are only distributed among MyServer2 and MyServer3
-after shutting down MyServer1. Console output before and after shutting down
-MyServer1 is listed below (MyServer1 was shutdown after request 63):</p>
-<pre>...
-[java] Request: 61 ==&gt; Response from server: MyServer1
-[java] Request: 62 ==&gt; Response from server: MyServer2
-[java] Request: 63 ==&gt; Response from server: MyServer3
-[java] Request: 64 ==&gt; Response from server: MyServer2
-[java] Request: 65 ==&gt; Response from server: MyServer3
-[java] Request: 66 ==&gt; Response from server: MyServer2
-[java] Request: 67 ==&gt; Response from server: MyServer3
-...</pre>
-
-<p>Now restart MyServer1. You can observe that requets will be again sent to
-all three servers roughly after 60 seconds. This is because we have specified
-&lt;suspendDurationOnFailure&gt; as 60 seconds in the configuration.
-Therefore, load balance endpoint will suspend any failed child endpoint only
-for 60 seconds after detecting the failure. </p>
-
-<h2><a name="Sample53">Sample 53: Failover sending among 3 endpoints</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;failover&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/failover&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-&lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate the failover sending</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Start Synapse with sample configuration 53 (i.e. synapse -sample 53)</p>
-
-<p>Deploy the LoadbalanceFailoverService and start three instances of sample
-Axis2 server as mentioned in sample 52.</p>
-
-<p></p>
-
-<p>Above configuration sends messages with the failover behavior. Initially
-the server at port 9001 is treated as primary and other two are treated as
-back ups. Messages are always directed only to the primary server. If the
-primary server has failed, next listed server is selected as the primary.
-Thus, messages are sent successfully as long as there is at least one active
-server. To test this, run the loadbalancefailover client to send infinite
-requests as follows:</p>
-<pre>ant loadbalancefailover</pre>
-
-<p>You can see that all requests are processed by MyServer1. Now shutdown
-MyServer1 and inspect the console output of the client. You will observe that
-all subsequent requests are processed by MyServer2.</p>
-
-<p>The console output with MyServer1 shutdown after request 127 is listed
-below:</p>
-<pre>...
-[java] Request: 125 ==&gt; Response from server: MyServer1
-[java] Request: 126 ==&gt; Response from server: MyServer1
-[java] Request: 127 ==&gt; Response from server: MyServer1
-[java] Request: 128 ==&gt; Response from server: MyServer2
-[java] Request: 129 ==&gt; Response from server: MyServer2
-[java] Request: 130 ==&gt; Response from server: MyServer2
-...</pre>
-
-<p>You can keep on shutting down servers like this. Client will get a
-response till you shutdown all listed servers. Once all servers are shutdown,
-the error sequence is activated and a fault message is sent to the client as
-follows.</p>
-<pre>[java] COULDN'T SEND THE MESSAGE TO THE SERVER.</pre>
-
-<p>Once a server is detected as failed, it will be added to the active
-servers list again after 60 seconds (specified in
-&lt;suspendDurationOnFailure&gt; in the configuration). Therefore, if you
-have restarted any of the stopped servers and have shutdown all other
-servers, messages will be directed to the newly started server.</p>
-
-<h2><a name="Sample54">Sample 54: Session affinity load balancing between 3
-endpoints</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;!-- specify the session as the simple client session provided by Synapse for
-                    testing purpose --&gt;
-                    <strong>&lt;session type="simpleClientSession"/&gt;</strong>
-
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-&lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate the load balancing with session affinity
-using client initiated sessions</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Start Synapse with sample configuration 54 (i.e. synapse -sample 54).</p>
-
-<p>Deploy the LoadbalanceFailoverService and start three instances of the
-sample Axis2 server as in sample 52. </p>
-
-<p></p>
-
-<p>Above configuration is same as the load balancing configuration in sample
-52, except that the session type is specified as "simpleClientSession". This
-is a client initiated session, which means that the client generates the
-session identifier and send it to with each request. In this sample session
-type, client adds a SOAP header named ClientID containing the identifier of
-the client. Synapse binds this ID with a server on the first request and
-sends all seccessive requests containing that ID to the same server. Now
-switch to samples/axis2Client directory and run the client using the
-following command to check this in action.</p>
-<pre>ant loadbalancefailover -Dmode=session</pre>
-
-<p>In the session mode, client continuesly sends requests with three diferent
-client (session) IDs. One ID is selected among these three IDs for each
-request randomly. Then client prints the session ID with the responded server
-for each request. Client output for the first 10 requests are shown below.</p>
-<pre>[java] Request: 1 Session number: 1 Response from server: MyServer3
-[java] Request: 2 Session number: 2 Response from server: MyServer2
-[java] Request: 3 Session number: 0 Response from server: MyServer1
-[java] Request: 4 Session number: 2 Response from server: MyServer2
-[java] Request: 5 Session number: 1 Response from server: MyServer3
-[java] Request: 6 Session number: 2 Response from server: MyServer2
-[java] Request: 7 Session number: 2 Response from server: MyServer2
-[java] Request: 8 Session number: 1 Response from server: MyServer3
-[java] Request: 9 Session number: 0 Response from server: MyServer1
-[java] Request: 10 Session number: 0 Response from server: MyServer1
-... </pre>
-
-<p>You can see that session number 0 is always directed to the server named
-MyServer1. That means session number 0 is bound to MyServer1. Similarly
-session 1 and 2 are bound to MyServer3 and MyServer2 respectively. </p>
-
-<h2><a name="Sample55">Sample 55: Session affinity load balancing between
-fail over endpoints</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;!-- specify the session as the simple client session provided by Synapse for
-                    testing purpose --&gt;
-                    <strong>&lt;session type="simpleClientSession"/&gt;</strong>
-
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;failover&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/failover&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;failover&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9004/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/failover&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-&lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate the session affinity based load balancing
-with failover capability</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Start Synapse with sample configuration 55 (i.e. synapse -sample 55).</p>
-
-<p>Deploy the LoadbalanceFailoverService and start four sample Axis2 servers
-on http ports 9001, 9002, 9003 and 9004 respectively (make sure to specify
-unconflicting https ports).</p>
-
-<p></p>
-
-<p>This configuration also uses "simpleClientSession" to bind sessions as in
-the previous sample. But failover endpoints are specified as the child
-endpoints of the load balance endpoint. Therefore sessions are bound to the
-failover endpoints. Session information has to be replicated among the
-servers listed under each failover endpoint using some clustering mechanism.
-Therefore, if one endpoint bound to a session failed, successive requets for
-that session will be directed to the next endpoint in that failover group.
-Run the client using the following command to observe this behavoir.</p>
-<pre>ant loadbalancefailover -Dmode=session</pre>
-
-<p>You can see a client output as shown below.</p>
-<pre>...
-[java] Request: 222 Session number: 0 Response from server: MyServer1
-[java] Request: 223 Session number: 0 Response from server: MyServer1
-[java] Request: 224 Session number: 1 Response from server: MyServer1
-[java] Request: 225 Session number: 2 Response from server: MyServer3
-[java] Request: 226 Session number: 0 Response from server: MyServer1
-[java] Request: 227 Session number: 1 Response from server: MyServer1
-[java] Request: 228 Session number: 2 Response from server: MyServer3
-[java] Request: 229 Session number: 1 Response from server: MyServer1
-[java] Request: 230 Session number: 1 Response from server: MyServer1
-[java] Request: 231 Session number: 2 Response from server: MyServer3
-...</pre>
-
-<p>Note that session 0 is always directed to MyServer1 and session 1 is
-directed to MyServer3. No requests are directed to MyServer2 and MyServer4 as
-they are kept as backups by failover endpoints. Now shutdown the server named
-MyServer1 while running the sample. You will observer that all successive
-requests for session 0 is now directed to MyServer2, which is the backup
-server for MyServer1's group. This is shown below, where MyServer1 was
-shutdown after the request 534.</p>
-<pre>...
-[java] Request: 529 Session number: 2 Response from server: MyServer3
-[java] Request: 530 Session number: 1 Response from server: MyServer1
-[java] Request: 531 Session number: 0 Response from server: MyServer1
-[java] Request: 532 Session number: 1 Response from server: MyServer1
-[java] Request: 533 Session number: 1 Response from server: MyServer1
-[java] Request: 534 Session number: 1 Response from server: MyServer1
-[java] Request: 535 Session number: 0 Response from server: MyServer2
-[java] Request: 536 Session number: 0 Response from server: MyServer2
-[java] Request: 537 Session number: 0 Response from server: MyServer2
-[java] Request: 538 Session number: 2 Response from server: MyServer3
-[java] Request: 539 Session number: 0 Response from server: MyServer2
-...</pre>
-
-<h2><a name="Sample56">Sample 56: WSDL endpoint</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;!-- get epr from the given wsdl --&gt;
-                &lt;endpoint&gt;
-                    &lt;wsdl uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl" service="SimpleStockQuoteService" port="SimpleStockQuoteServiceSOAP11port_http"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate the use of WSDL endpoints</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Start the Synapse configuration numbered 56 (i.e. synapse -sample 56).</p>
-
-<p>Deploy the SimpleStockQuoteService and start the sample Axis2 server.</p>
-
-<p>This sample uses a WSDL endpoint inside the send mediator. WSDL endpoints
-can extract endpoint's address from the given WSDL. As WSDL documents can
-have many services and many ports inside each service, the service and port
-of the required endpoint has to be specified. As with address endpoints, QoS
-parameters for the endpoint can be specified inline in the configuration. An
-excerpt taken from the sample_proxy_1.wsdl containing the specified service
-and port is listed below.</p>
-<pre>&lt;wsdl:service name="SimpleStockQuoteService"&gt;
-    &lt;wsdl:port name="SimpleStockQuoteServiceSOAP11port_http"
-               binding="axis2:SimpleStockQuoteServiceSOAP11Binding"&gt;
-        &lt;soap:address location="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/wsdl:port&gt;
-    &lt;wsdl:port name="SimpleStockQuoteServiceSOAP12port_http"
-               binding="axis2:SimpleStockQuoteServiceSOAP12Binding"&gt;
-        &lt;soap12:address location="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/wsdl:port&gt;
-&lt;/wsdl:service&gt;</pre>
-
-<p>Specified service and port refers to the endpoint address
-"http://localhost:9000/soap/SimpleStockQuoteService" according to the above
-WSDL. Now run the client using the following command.</p>
-<pre>ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-
-<p>Client will print the quote price for IBM received from the server running
-on port 9000. Observe the Axis2 console and the Synapse console to verify
-this behavior.</p>
-
-<h1><a name="MessageMediationQoS">Quality of Service addition or deduction
-samples in message mediation</a></h1>
-
-<h2><a name="Sample100">Sample 100: Using WS-Security for outgoing
-messages</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="sec_policy" src="file:repository/conf/sample/resources/policy/policy_3.xml"/&gt;
-
-    &lt;in&gt;
-        &lt;send&gt;
-            &lt;endpoint name="secure"&gt;
-                &lt;address uri="http://localhost:9000/soap/SecureStockQuoteService"&gt;
-                    &lt;enableSec policy="sec_policy"/&gt;
-                    &lt;enableAddressing/&gt;
-                &lt;/address&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;header name="wsse:Security" action="remove"
-                xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Connecting to endpoints with WS-Security for outgoing
-messages</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-</p>
-
-<p>You may also need to download and install the unlimited strength policy
-files for your JDK before using Apache Rampart (e.g. see
-http://java.sun.com/javase/downloads/index_jdk5.jsp)</p>
-
-<p>Start the Synapse configuration numbered 100: i.e. synapse -sample 100<br/>
-Start the Axis2 server and deploy the SecureStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>Use the stock quote client to send a request without WS-Security. Synapse
-is configured to enable WS-Security as per the policy specified by
-'policy_3.xml' for the outgoing messages to the SecureStockQuoteService
-endpoint hosted on the Axis2 instance. The debug log messages on Synapse
-shows the encrypted message flowing to the service and the encrypted response
-being received by Synapse. The wsse:Security header is then removed from the
-decrypted message and the response is delivered back to the client, as
-expected. You may execute the client as follows:</p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-
-<p>The message sent by Synapse to the secure service can be seen as follows,
-when TCPMon is used.</p>
-<pre>POST http://localhost:9001/soap/SecureStockQuoteService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:getQuote
-Content-Type: text/xml; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
-800
-&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-   &lt;soapenv:Envelope xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:wsa="http://www.w3.org/2005/08/addressing" ..&gt;
-      &lt;soapenv:Header&gt;
-         &lt;wsse:Security ..&gt;
-            &lt;wsu:Timestamp ..&gt;
-               ...
-            &lt;/wsu:Timestamp&gt;
-            &lt;xenc:EncryptedKey..&gt;
-               ...
-            &lt;/xenc:EncryptedKey&gt;
-            &lt;wsse:BinarySecurityToken ...&gt;
-               &lt;ds:SignedInfo&gt;
-               ...
-               &lt;/ds:SignedInfo&gt;
-               &lt;ds:SignatureValue&gt;
-               ...
-               &lt;/ds:SignatureValue&gt;
-               &lt;ds:KeyInfo Id="KeyId-29551621"&gt;
-                  ...
-               &lt;/ds:KeyInfo&gt;
-            &lt;/ds:Signature&gt;
-         &lt;/wsse:Security&gt;
-         &lt;wsa:To&gt;http://localhost:9001/soap/SecureStockQuoteService&lt;/wsa:To&gt;
-         &lt;wsa:MessageID&gt;urn:uuid:1C4CE88B8A1A9C09D91177500753443&lt;/wsa:MessageID&gt;
-         &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-      &lt;/soapenv:Header&gt;
-      &lt;soapenv:Body xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="Id-3789605"&gt;
-         &lt;xenc:EncryptedData Id="EncDataId-3789605" Type="http://www.w3.org/2001/04/xmlenc#Content"&gt;
-            &lt;xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc" /&gt;
-            &lt;xenc:CipherData&gt;
-                &lt;xenc:CipherValue&gt;Layg0xQcnH....6UKm5nKU6Qqr&lt;/xenc:CipherValue&gt;
-            &lt;/xenc:CipherData&gt;
-         &lt;/xenc:EncryptedData&gt;
-      &lt;/soapenv:Body&gt;
-   &lt;/soapenv:Envelope&gt;0</pre>
-
-<h2><a name="Sample101">Sample 101: Reliable message exchange between Synapse
-and the back-end server using WS-ReliableMessaging</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;in&gt;
-        &lt;RMSequence single="true" version="1.0"/&gt;
-        &lt;send&gt;
-           &lt;endpoint name="reliable"&gt;
-              &lt;address uri="http://localhost:9000/soap/ReliableStockQuoteService"&gt;
-                 &lt;enableRM/&gt;
-                 &lt;enableAddressing/&gt;
-              &lt;/address&gt;
-           &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;header name="wsrm:SequenceAcknowledgement" action="remove"
-                xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-        &lt;header name="wsrm:Sequence" action="remove"
-                xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-
-&lt;/definitions&gt;</pre>
-<strong>Objective: Demonstrate the message exchange between Synapse and the
-server using WS-ReliableMessaging (WS-RM)</strong>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Deploy the ReliableStockQuoteService in the sample Axis2 server by
-switching to the samples/axis2Server/src/ReliableStockQuoteService directory
-and running ant.</p>
-
-<p>Start the sample Axis2 server on port 9000.</p>
-
-<p>Start Synapse with the sample configuration 101 (i.e. synapse -sample
-101).</p>
-
-<p></p>
-
-<p>In the above configuration, WS-RM is engaged to the endpoint using the
-&lt;enableRM/&gt; tag. It is possible to engage WS-RM to both Address and
-WSDL endpoints using this tag. In addition to the RM enabled endpoint,
-RMSequence mediator is specified before the send mediator. This mediator is
-used to specify the set of messages to be sent using a single RM sequence. In
-this sample it is specified as single message per sequence. It also specifies
-the version of the WS-RM to be used. Refer to the Synapse configuration
-language documentation for more information about the RMSequence mediator. RM
-related SOAP headers are removed form the message in the out mediator as
-WS-RM message exchange happens only between the Synapse and the server. Now
-run the sample client using the following command.</p>
-<pre>ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-
-<p>You can observer the client output displaying the quote price for IBM as
-follows:</p>
-<pre>[java] Standard :: Stock price = $189.2521262517493</pre>
-
-<p>There is no difference to be observed between the normal message exchange
-and WS-RM enabled message exchange as far as client and server outputs are
-considered. But if you look at the wire level messages, you would observe
-additional WS-RM messages and WS-RM elements. Synapse, the initiator of the
-RM sequence, first try to create a sequence by sending a message with
-CreateSequence element.</p>
-<pre>...
-&lt;soapenv:Body&gt;
-   &lt;wsrm:CreateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-      &lt;wsrm:AcksTo&gt;
-         &lt;wsa:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/wsa:Address&gt;
-      &lt;/wsrm:AcksTo&gt;
-      &lt;wsrm:Offer&gt;
-         &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-      &lt;/wsrm:Offer&gt;
-   &lt;/wsrm:CreateSequence&gt;
-&lt;/soapenv:Body&gt;
-...</pre>
-
-<p>Sample Axis2 server responds to CreateSequence request with the following
-message:</p>
-<pre>...
-&lt;soapenv:Body&gt;
-   &lt;wsrm:CreateSequenceResponse xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-      &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-      &lt;wsrm:Accept&gt;
-         &lt;wsrm:AcksTo&gt;
-            &lt;wsa:Address&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:Address&gt;
-         &lt;/wsrm:AcksTo&gt;
-      &lt;/wsrm:Accept&gt;
-   &lt;/wsrm:CreateSequenceResponse&gt;
-&lt;/soapenv:Body&gt;
-...</pre>
-
-<p>Once the sequence is established, Synapse sends the request to the server
-with the pre-negotiated sequence ID.</p>
-<pre>&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:To&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:To&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:DB9A5257B637DDA38B1179807372560712002-1515891720&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-        &lt;wsrm:Sequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                       soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
-            &lt;wsrm:LastMessage/&gt;
-        &lt;/wsrm:Sequence&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-            &lt;m0:request&gt;
-                &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-            &lt;/m0:request&gt;
-        &lt;/m0:getQuote&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-
-<p>Synapse keeps on sending above message till the server responds with a
-valid response message with 200 OK HTTP header. If the server is not ready
-with a response, it will respond with 202 Accepted HTTP header for all
-requests. Once the server is ready with a response it will send the response
-message with sequence ID as follows.</p>
-<pre>&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:879853A6871A66641C1179807373804&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://services.samples/ReliableStockQuoteServicePortType/getQuoteResponse
-        &lt;/wsa:Action&gt;
-        &lt;wsa:RelatesTo&gt;urn:uuid:DB9A5257B637DDA38B1179807372560712002-1515891720&lt;/wsa:RelatesTo&gt;
-        &lt;wsrm:Sequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                       soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
-            &lt;wsrm:LastMessage/&gt;
-        &lt;/wsrm:Sequence&gt;
-        &lt;wsrm:SequenceAcknowledgement xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                                      soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:AcknowledgementRange Lower="1" Upper="1"/&gt;
-        &lt;/wsrm:SequenceAcknowledgement&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-...</pre>
-
-<p>Now both Synapse and the server are done with the actual message exchange.
-Then Synapse sends a request to terminate the sequence as follows:</p>
-<pre>&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:To&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:To&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:546F6F33FB7D8BBE351179807379591&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence&lt;/wsa:Action&gt;
-        &lt;wsrm:SequenceAcknowledgement xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                                      soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:AcknowledgementRange Lower="1" Upper="1"/&gt;
-        &lt;/wsrm:SequenceAcknowledgement&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;wsrm:TerminateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-        &lt;/wsrm:TerminateSequence&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-
-<p>Server responds to the sequence termination message, accepting to
-terminate the sequence as follows.</p>
-<pre>&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:ReplyTo&gt;
-            &lt;wsa:Address&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:Address&gt;
-        &lt;/wsa:ReplyTo&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:879853A6871A66641C1179807380190&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence&lt;/wsa:Action&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;wsrm:TerminateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-        &lt;/wsrm:TerminateSequence&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-
-<p>Note that although each of above messages are separate SOAP messages, in
-most cases they will be exchanged in a single socket connection as HTTP
-Keep-Alive header is used.</p>
-
-<h1><a name="ProxyServices">Synapse Proxy service samples</a></h1>
-
-<h2><a name="Sample150">Sample 150: Introduction to proxy services</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Introduction to Synapse proxy services</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 150: i.e. synapse -sample 150<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>Once Synapse starts, you could go to
-http://localhost:8080/soap/StockQuoteProxy?wsdl and view the WSDL generated
-for the proxy service defined in the configuration. This WSDL is based on the
-source WSDL supplied in the proxy service definition, and is updated to
-reflect the proxy service EPR.</p>
-
-<p>Execute the stock quote client by requesting for a stock quote on the
-proxy service as follows:</p>
-<pre>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy</pre>
-
-<p>An 'inSequence' or 'endpoint' or both of these would decide how the
-message would be handled after the proxy service receives the message. In the
-above example, the request received is forwarded to the sample service hosted
-on Axis2. The 'outSequence' defines how the response is handled before it is
-sent back to the client. By default, a proxy service is exposed over all
-transports configured for Synapse, unless these are specifically mentioned
-through the 'transports' attribute.</p>
-
-<h2><a name="Sample151">Sample 151: Custom sequences and endpoints with proxy
-services</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="proxy_1"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;&lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;&lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-    &lt;sequence name="out"&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-    &lt;endpoint name="proxy_2_endpoint"&gt;
-        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/endpoint&gt;
-    &lt;localEntry key="proxy_wsdl" src="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-
-    &lt;proxy name="StockQuoteProxy1"&gt;
-        &lt;publishWSDL key="proxy_wsdl"/&gt;
-        &lt;target inSequence="proxy_1" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-
-    &lt;proxy name="StockQuoteProxy2"&gt;
-        &lt;publishWSDL key="proxy_wsdl"/&gt;
-        &lt;target endpoint="proxy_2_endpoint" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Using custom sequences and endpoints for message
-mediation with proxy services</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 151: i.e. synapse -sample 151<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>This configuration creates two proxy services.. The first proxy service
-'StockQuoteProxy1' uses the sequence named 'proxy_1' to process incoming
-messages and the sequence named "out" to process outgoing responses. The
-second proxy service 'StockQuoteProxy2' is set to directly forward messages
-that are received to the endpoint named 'proxy_2_endpoint' without any
-mediation.</p>
-
-<p>You could send a stock quote request to each of these proxy services and
-receive the reply generated by the actual service hosted on the Axis2
-instance. </p>
-<pre>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy1<br/>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy2</pre>
-
-<h2><a name="Sample152">Sample 152: Switching transports and message format
-from SOAP to REST/POX</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy" transports="https"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="pox"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Switching transports and from SOAP to
-REST/POX</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Synapse configuration numbered 152: i.e. synapse -sample 152</p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done</p>
-
-<p></p>
-
-<p>This configuration demonstrates how a proxy service could be exposed on a
-subset of available transports, and how it could switch from one transport to
-another. This example exposes the created proxy service only on https, and
-thus if the user tries to access it over http, would result in a fault.</p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy
-...
-     [java] org.apache.axis2.AxisFault: The service cannot be found for the endpoint reference (EPR) /soap/StockQuoteProxy</pre>
-
-<p></p>
-
-<p>Accessing this over https (ant stockquote
--Dtrpurl=https://localhost:8443/soap/StockQuoteProxy) causes the proxy
-service to access the SimpleStockQuoteService on the sample Axis2 server
-using REST/POX. This could be seen if the message exchange was captured using
-TCPMon as follows. The REST/POX response is now transformed back into a SOAP
-message and returned to the client.</p>
-<pre>POST http://localhost:9000/soap/SimpleStockQuoteService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:getQuote
-Content-Type: application/xml; charset=UTF-8;action="urn:getQuote";
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
-75
-&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-   &lt;m0:request&gt;
-      &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-   &lt;/m0:request&gt;
-&lt;/m0:getQuote&gt;</pre>
-<pre>HTTP/1.1 200 OK
-Content-Type: application/xml; charset=UTF-8;action="http://services.samples/SimpleStockQuoteServicePortType/getQuoteResponse";
-Date: Tue, 24 Apr 2007 14:42:11 GMT
-Server: Synapse-HttpComponents-NIO
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-
-2b3
-&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-   &lt;ns:return&gt;
-      &lt;ns:change&gt;3.7730036841862384&lt;/ns:change&gt;
-      &lt;ns:earnings&gt;-9.950236235550818&lt;/ns:earnings&gt;
-      &lt;ns:high&gt;-80.23868444613285&lt;/ns:high&gt;
-      &lt;ns:last&gt;80.50750970812187&lt;/ns:last&gt;
-      &lt;ns:lastTradeTimestamp&gt;Tue Apr 24 20:42:11 LKT 2007&lt;/ns:lastTradeTimestamp&gt;
-      &lt;ns:low&gt;-79.67368355714606&lt;/ns:low&gt;
-      &lt;ns:marketCap&gt;4.502043663670823E7&lt;/ns:marketCap&gt;
-      &lt;ns:name&gt;IBM Company&lt;/ns:name&gt;
-      &lt;ns:open&gt;-80.02229531286982&lt;/ns:open&gt;
-      &lt;ns:peRatio&gt;25.089295161182022&lt;/ns:peRatio&gt;
-      &lt;ns:percentageChange&gt;4.28842665653824&lt;/ns:percentageChange&gt;
-      &lt;ns:prevClose&gt;87.98107059692451&lt;/ns:prevClose&gt;
-      &lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;
-      &lt;ns:volume&gt;19941&lt;/ns:volume&gt;
-   &lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;</pre>
-
-<p></p>
-
-<h2><a name="Sample153">Sample 153: Routing the messages arrived to a proxy
-service without processing the security headers</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SecureStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Routing the messages arrived to a proxy service without
-processing the MustUnderstand headers (Security header)</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-You may also need to download and install the unlimited strength policy files
-for your JDK before using Apache Rampart (e.g. see
-http://java.sun.com/javase/downloads/index_jdk5.jsp)</p>
-
-<p>Start the Synapse configuration numbered 153: i.e. synapse -sample 153<br/>
-Start the Axis2 server and deploy the SecureStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>The proxy service will recieve secure messages with security headers which
-are MustUnderstand. But hence element 'engageSec' is not present in the proxy
-configuration synapse will not engage that Apache Rampart on this proxy
-service. It is expected that an MustUnderstand failure exception on the
-AxisEngine would occur before the message arrives Synapse. But Synapse
-handles this message and gets it in by setting all the headers which are
-MustUnderstand and not processed to processed state. This will enable synapse
-to route the messages without reading the Security headers (just routing the
-messages from client to service, both of which are secure). To execute the
-client, send a stock quote request to the proxy service, and sign and encrypt
-the request by specifying the client side security policy as follows:</p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy -Dpolicy=./../../repository/conf/sample/resources/policy/client_policy_3.xml</pre>
-
-<p>By following through the debug logs or TCPMon output, you could see that
-the request received by the proxy service was signed and encrypted. Also,
-looking up the WSDL of the proxy service by requesting the URL
-http://localhost:8080/soap/StockQuoteProxy?wsdl reveals the security policy
-attachments are not there and security is not engaged. When sending the
-message to the backend service, you could verify that the security headers
-were there as in the original message to synapse from client, and that the
-response received does use WS-Security, and forwarded back to the client
-without any modification. You should note that this wont be a security hole
-because the message inside synapse is signed and encrypted and can only be
-forwarded to a secure service to be useful.</p>
-
-<h2><a name="Sample154">Sample 154: Load Balancing with Proxy Service
-</a></h2>
-
-<div>
-<pre>   &lt;!-- A proxy service with a loadbalace endpoint --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="LBProxy" transports="https http" startOnLoad="true"&gt;
-        &lt;target faultSequence="errorHandler"&gt;
-            &lt;inSequence&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;session type="simpleClientSession"/&gt;
-                        &lt;loadbalance algorithm="roundRobin"&gt;
-                            &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                    &lt;enableAddressing/&gt;
-                                    &lt;suspendDurationOnFailure&gt;20&lt;/suspendDurationOnFailure&gt;
-                                &lt;/address&gt;
-                            &lt;/endpoint&gt;
-                            &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                    &lt;enableAddressing/&gt;
-                                    &lt;suspendDurationOnFailure&gt;20&lt;/suspendDurationOnFailure&gt;
-                                &lt;/address&gt;
-                            &lt;/endpoint&gt;
-                            &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                    &lt;enableAddressing/&gt;
-                                    &lt;suspendDurationOnFailure&gt;20&lt;/suspendDurationOnFailure&gt;
-                                &lt;/address&gt;
-                            &lt;/endpoint&gt;
-                        &lt;/loadbalance&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-                &lt;drop/&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_2.wsdl"/&gt;
-    &lt;/proxy&gt;
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Load Balancing with Proxy Service </strong></p>
-
-<p><strong>Prerequisites:</strong> Sample setup is same as LoadBalance
-endpoints (#53 to #54).</p>
-
-<p>Start the Synapse configuration numbered 154: i.e. synapse -sample 154<br/>
-Start the Axis2 server and deploy the SecureStockQuoteService if not already
-done</p>
-
-<p>Runs the client with </p>
-<pre>  ant loadbalancefailover -Dmode=session -Dtrpurl=http://localhost:8080/soap/LBProxy </pre>
-
-<p>Functionality is similar to the sample #54. </p>
-</div>
-
-<h1><a name="ProxyServiceQoS">QoS addition and deduction for service
-mediation (proxy) samples</a></h1>
-
-<h2><a name="Sample200">Sample 200: Using WS-Security with policy attachments
-for proxy services</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="sec_policy" src="file:repository/conf/sample/resources/policy/policy_3.xml"/&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;header name="wsse:Security" action="remove"
-                        xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;policy key="sec_policy"/&gt;
-        &lt;enableSec/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Using WS-Security signing and encryption with proxy
-services through WS-Policy</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-You may also need to download and install the unlimited strength policy files
-for your JDK before using Apache Rampart (e.g. see
-http://java.sun.com/javase/downloads/index_jdk5.jsp)</p>
-
-<p>Start the Synapse configuration numbered 200: i.e. synapse -sample 200<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>The proxy service expects to receive a signed and encrypted message as
-specified by the security policy. Please see Apache Rampart and Axis2
-documentation on the format of the policy file. The element 'engageSec'
-specifies that Apache Rampart should be engaged on this proxy service. Hence
-if Rampart rejects any request messages that does not conform to the
-specified policy, those messages will never reach the 'inSequence' to be
-processed. Since the proxy service is forwarding the received request to the
-simple stock quote service that does not use WS-Security, we are instructing
-Synapse to remove the wsse:Security header from the outgoing message. To
-execute the client, send a stock quote request to the proxy service, and sign
-and encrypt the request by specifying the client side security policy as
-follows:</p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/soap/StockQuoteProxy -Dpolicy=./../../repository/conf/sample/resources/policy/client_policy_3.xml</pre>
-
-<p>By following through the debug logs or TCPMon output, you could see that
-the request received by the proxy service was signed and encrypted. Also,
-looking up the WSDL of the proxy service by requesting the
-URLhttp://localhost:8080/soap/StockQuoteProxy?wsdl reveals the security
-policy attachment to the supplied base WSDL. When sending the message to the
-backend service, you could verify that the security headers were removed, and
-that the response received does not use WS-Security, but that the response
-being forwarded back to the client is signed and encrypted as expected by the
-client.</p>
-
-<h2><a name="Sample201">Sample 201: Reliable message exchange between the
-client and proxy services using WS-ReliableMessaging</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;header name="wsrm:SequenceAcknowledgement" action="remove"
-                        xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-                &lt;header name="wsrm:Sequence" action="remove"
-                        xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;enableRM/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-<strong>Objective: Demonstrate the reliable message exchange between the
-client and Synapse using WS-ReliableMessaging (WS-RM)</strong>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Deploy the SimpleStockQuoteService in the sample Axis2 server and start it
-on port 9000.</p>
-
-<p>Start Synapse with the sample configuration number 201 (i.e. synapse
--sample 201).</p>
-
-<p></p>
-
-<p>In the above configuration, a proxy service is created with WS-RM enabled
-using the &lt;enableRM/&gt; tag. Therefore, this proxy service is capable of
-communicating with a WS-RM client. It also removes the WS-RM headers in the
-In Sequence before the message is sent to the back end server. This is
-required as the reliable messaging is applicable only between the client and
-Synapse. Now start the client with WS-RM as follows:</p>
-<pre>ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080/soap/StockQuoteProxy -Dwsrm=true</pre>
-
-<p>In this case, client sends WS-RM enabled request to Synapse where Synapse
-sends normal request to the server. This can be observed by examining the
-wire level messages between the client and Synapse. These messages would be
-similar to the wire level messages shown in sample 53. Each message would
-perform a similar function to the messages discussed in sample 53.</p>
-
-<p></p>
-
-<h1><a name="Transport">Transport samples and switching transports</a></h1>
-
-<h2><a name="Sample250">Sample 250: Introduction to switching transports -
-JMS to http/s</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="StockQuoteProxy" transports="jms"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Introduction to switching transports with proxy
-services</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService (Refer steps
-above)<br/>
-Download, install and start a JMS server, and configure Synapse to listen on
-JMS (refer notes below)<br/>
-Start the Synapse configuration numbered 250: i.e. synapse -sample 250<br/>
-For this example we would use ActiveMQ as the JMS provider. Once ActiveMQ is
-installed and started you should get a message as follows:</p>
-<pre>INFO BrokerService - ActiveMQ JMS Message Broker (localhost) started</pre>
-
-<p>You will now need to configure the Axis2 instance used by Synapse (not the
-sample Axis2 server) to enable JMS support using the above provider. Refer to
-the Axis2 documentation on setting up JMS for more details
-(http://ws.apache.org/axis2/1_1/jms-transport.html). You will also need to
-copy the ActiveMQ client jar files activeio-core-3.0-beta1.jar,
-activemq-core-4.0-RC2.jar and geronimo-j2ee-management_1.0_spec-1.0.jar into
-the lib directory to allow Synapse to connect to the JMS provider.</p>
-
-<p>For a default ActiveMQ v4.0 installation, you may uncomment the Axis2
-transport listener configuration found at repository/conf/axis2.xml as</p>
-<pre>&lt;transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener"&gt; ...</pre>
-
-<p>Once you start the Synapse configuration and request for the WSDL of the
-proxy service (http://localhost:8080/soap/StockQuoteProxy?wsdl) you will
-notice that its exposed only on the JMS transport. This is because the
-configuration specified this requirement in the proxy service definition.</p>
-
-<p>Now lets send a stock quote request on JMS, using the dumb stock quote
-client as follows:</p>
-<pre>ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/StockQuoteProxy -Djms_payload=MSFT</pre>
-
-<p>On the Synapse debug log you will notice that the JMS listener received
-the request message as:</p>
-<pre>[JMSWorker-1] DEBUG ProxyServiceMessageReceiver -Proxy Service StockQuoteProxy received a new message...</pre>
-
-<p>Now if you examine the console running the sample Axis2 server, you will
-see a message indicating that the server has accepted an order as follows:</p>
-<pre>Accepted order for : 16517 stocks of MSFT at $ 169.14622538721846</pre>
-
-<p>In this sample, client sends the request message to the proxy service
-exposed in JMS in Synsape. Synapse forwards this message to the HTTP EPR of
-the simple stock quote service hosted on the sample Axis2 server, and returns
-the reply back to the client through a JMS temporary queue.</p>
-
-<p>Note: It is possible to instruct a JMS proxy service to listen to an
-already existing destination without creating a new one. To do this, use the
-property elements on the proxy service definition to specify the destination
-and connection factory etc.</p>
-
-<p>e.g.</p>
-<pre>&lt;property name="transport.jms.Destination" value="dynamicTopics/something.TestTopic"/&gt;</pre>
-
-<h2><a name="Sample251">Sample 251: Switching from http/s to JMS</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="StockQuoteProxy" transports="http"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;amp;
-                   java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;amp;java.naming.provider.url=tcp://localhost:61616&amp;transport.jms.DestinationType=queue"/&gt;
-            &lt;/endpoint&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate switching from HTTP to JMS</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Download, install and start a JMS server</p>
-
-<p>Configure sample Axis2 server for JMS (refer notes above)<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService (see below)<br/>
-Configure the Synase JMS transport (refer notes above - sample 250)<br/>
-Start the Synapse configuration numbered 251: i.e. synapse -sample 251</p>
-
-<p>To switch from HTTP to JMS, edit the
-samples/axis2Server/repository/conf/axis2.xml for the sample Axis2 server and
-enable JMS (refer notes above), and restart the server. Now you can see that
-the simple stock quote service is available in both JMS and HTTP in the
-sample Axis2 server. To see this, point your browser to the WSDL of the
-service at http://localhost:9000/soap/SimpleStockQuoteService?wsdl. JMS URL
-for the service is mentioned as below:</p>
-<pre>jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=
-QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;
-java.naming.provider.url=tcp://localhost:61616&amp;transport.jms.DestinationType=queue</pre>
-
-<p>You may also notice that the simple stock quote proxy service exposed in
-Synapse is now available only in HTTP as we have specified transport for that
-service as HTTP. To observe this, access the WSDL of stock quote proxy
-service at http://localhost:8080/soap/StockQuoteProxy?wsdl.</p>
-
-<p>This Synapse configuration creates a proxy service over HTTP and forwards
-received messages to the above EPR using JMS, and sends back the response to
-the client over HTTP once the simple stock quote service responds with the
-stock quote reply over JMS to the Synapse server. To test this, send a place
-order request to Synapse using HTTP as follows:</p>
-<pre>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy -Dmode=placeorder -Dsymbol=MSFT</pre>
-
-<p>The sample Axis2 server console will print a message indicating that it
-has accepted the order as follows:</p>
-<pre>Accepted order for : 18406 stocks of MSFT at $ 83.58806051152119</pre>
-
-<h2><a name="Sample252">Sample 252: Pure text/binary and POX message support
-with JMS</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="text_proxy"&gt;
-        &lt;header name="Action" value="urn:placeOrder"/&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-            var args = mc.getPayloadXML().toString().split(" ");
-            mc.setPayloadXML(
-            &lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-                &lt;m:order&gt;
-                    &lt;m:price&gt;{args[0]}&lt;/m:price&gt;
-                    &lt;m:quantity&gt;{args[1]}&lt;/m:quantity&gt;
-                    &lt;m:symbol&gt;{args[2]}&lt;/m:symbol&gt;
-                &lt;/m:order&gt;
-            &lt;/m:placeOrder&gt;);
-        ]]&gt;&lt;/script&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="mtom_proxy"&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;header name="Action" value="urn:oneWayUploadUsingMTOM"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="mtom"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="pox_proxy"&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;header name="Action" value="urn:placeOrder"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="soap11"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="out"&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;proxy name="JMSFileUploadProxy" transports="jms"&gt;
-        &lt;target inSequence="mtom_proxy" outSequence="out"/&gt;
-        &lt;parameter name="transport.jms.Wrapper"&gt;{http://services.samples/xsd}element&lt;/parameter&gt;
-    &lt;/proxy&gt;
-    &lt;proxy name="JMSTextProxy" transports="jms"&gt;
-        &lt;target inSequence="text_proxy" outSequence="out"/&gt;
-        &lt;parameter name="transport.jms.Wrapper"&gt;{http://services.samples/xsd}text&lt;/parameter&gt;
-    &lt;/proxy&gt;
-    &lt;proxy name="JMSPoxProxy" transports="jms"&gt;
-        &lt;target inSequence="pox_proxy" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Pure POX/Text and Binary JMS Proxy services - including
-MTOM</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Configure JMS for Synapse (Refer notes)<br/>
-Start the Synapse configuration numbered 252: i.e. synapse -sample 252<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService and the
-MTOMSwASampleService if not already done</p>
-
-<p></p>
-
-<p>This configuration creates three JMS proxy services named
-JMSFileUploadProxy, JMSTextProxy and JMSPoxProxy exposed over JMS queues with
-the same names as the services. The first part of this example demonstrates
-the pure text message support with JMS, where a user sends a space separated
-text JMS message of the form "&lt;price&gt; &lt;qty&gt; &lt;symbol&gt;".
-Synapse converts this message into a SOAP message and sends this to the
-SimpleStockQuoteServices' placeOrder operation. Synapse uses the script
-mediator to transform the text message into a XML payload using the
-JavaScript support available to tokenize the string. The proxy service
-property named "transport.jms.Wrapper" defines a custom wrapper element
-QName, to be used when wrapping text/binary content into a SOAP envelope.</p>
-
-<p></p>
-
-<p>Execute JMS client as follows. This will post a pure text JMS message with
-the content defined (e.g. "12.33 1000 ACP") to the specified JMS destination
-- dynamicQueues/JMSTextProxy</p>
-<pre>ant jmsclient -Djms_type=text -Djms_payload="12.33 1000 ACP" -Djms_dest=dynamicQueues/JMSTextProxy</pre>
-
-<p>Following the debug logs, you could notice that Synapse received the JMS
-text message and transformed it into a SOAP payload as follows. Notice that
-the wrapper element "{http://services.samples/xsd}text" has been used to hold
-the text message content.</p>
-<pre>[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-  &lt;soapenv:Body&gt;&lt;axis2ns1:text xmlns:axis2ns1="http://services.samples/xsd"&gt;12.33 1000 ACP&lt;/axis2ns1:text&gt;&lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-
-<p>Now, you could see how the script mediator created a stock quote request
-by tokenizing the text as follows, and sent the message to the placeOrder
-operation of the SimpleStockQuoteService.</p>
-<pre>[JMSWorker-1] DEBUG AddressEndpoint - Sending message to endpoint :: name = AnonymousEndpoints resolved address = http://localhost:9000/soap/SimpleStockQuoteService
-[JMSWorker-1] DEBUG AddressEndpoint - SOAPAction: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - WSA-Action: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;
-  &lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;&lt;m:order&gt;&lt;m:price&gt;12.33&lt;/m:price&gt;&lt;m:quantity&gt;1000&lt;/m:quantity&gt;&lt;m:symbol&gt;ACP&lt;/m:symbol&gt;&lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</pre>
-
-<p>The sample Axis2 server would now accept the one way message and issue the
-following message:</p>
-<pre>Wed Apr 25 19:50:56 LKT 2007 samples.services.SimpleStockQuoteService :: Accepted order for : 1000 stocks of ACP at $ 12.33</pre>
-
-<p></p>
-
-<p>The next section of this example demonstrates how a pure binary JMS
-message could be received and processed through Synapse. The configuration
-creates a proxy service named 'JMSFileUploadProxy' that accepts binary
-messages and wraps them into a custom element
-'{http://services.samples/xsd}element'. The received message is then
-forwarded to the MTOMSwASampleService using the SOAP action
-'urn:oneWayUploadUsingMTOM' and optimizing binary conent using MTOM. To
-execute this sample, use the JMS client to publish a pure binary JMS message
-containing the file
-'./../../repository/conf/sample/resources/mtom/asf-logo.gif' to the JMS
-destination 'dynamicQueues/JMSFileUploadProxy' as follows:</p>
-<pre>ant jmsclient -Djms_type=binary -Djms_dest=dynamicQueues/JMSFileUploadProxy -Djms_payload=./../../repository/conf/sample/resources/mtom/asf-logo.gif</pre>
-
-<p>Examining the Synapse debug logs reveals that the binary content was
-received over JMS and wrapped with the specified element into a SOAP infoset
-as follows:</p>
-<pre>[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Proxy Service JMSFileUploadProxy received a new message...
-...
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-&lt;soapenv:Body&gt;&lt;axis2ns1:element xmlns:axis2ns1="http://services.samples/xsd"&gt;R0lGODlhgw...AAOw==&lt;/axis2ns1:element&gt;&lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-
-<p>Thereafter the message was sent as a MTOM optimized message as specified
-by the 'format=mtom' attribute of the endpoint, to the MTOMSwASampleService
-using the SOAP action 'urn:oneWayUploadUsingMTOM'. Once received by the
-sample service, it is saved into a temporary file and could be verified for
-correctness.</p>
-<pre>Wrote to file : /tmp/mtom-60319.gif</pre>
-
-<p></p>
-
-<p>The final section of this example shows how a POX JMS message received by
-Synapse is sent to the SimpleStockQuoteService as a SOAP message. Use the JMS
-client as follows to create a POX (Plain Old XML) message with a stock quote
-request payload (without a SOAP envelope), and send it to the JMS destination
-'dynamicQueues/JMSPoxProxy' as follows:</p>
-<pre>ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/JMSPoxProxy -Djms_payload=MSFT</pre>
-
-<p>You can see that Synapse received the POX message and displays it as
-follows in the debug logs, and then converts it into a SOAP payload and sends
-to the SimpleStockQuoteService after setting the SOAP action as
-'urn:placeOrder'.</p>
-
-<p></p>
-<pre>[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Proxy Service JMSPoxProxy received a new message...
-...
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-    &lt;m:order&gt;
-        &lt;m:price&gt;172.39703010684752&lt;/m:price&gt;
-        &lt;m:quantity&gt;19211&lt;/m:quantity&gt;
-        &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-    &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Using the sequence named pox_proxy for message mediation
-...
-[JMSWorker-1] DEBUG HeaderMediator - Setting header : Action to : urn:placeOrder
-...
-[JMSWorker-1] DEBUG AddressEndpoint - Sending message to endpoint :: name = AnonymousEndpoints resolved address = http://localhost:9000/soap/SimpleStockQuoteService
-[JMSWorker-1] DEBUG AddressEndpoint - SOAPAction: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-    &lt;m:order&gt;
-        &lt;m:price&gt;172.39703010684752&lt;/m:price&gt;
-        &lt;m:quantity&gt;19211&lt;/m:quantity&gt;
-        &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-    &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[JMSWorker-1] DEBUG Axis2FlexibleMEPClient - sending [add = false] [sec = false] [rm = false] [ mtom = false] [ swa = false] [ force soap=true; pox=false] [ to null] </pre>
-
-<p>The sample Axis2 server displays a successful message on the receipt of
-the message as:</p>
-<pre>Wed Apr 25 20:24:50 LKT 2007 samples.services.SimpleStockQuoteService :: Accepted order for : 19211 stocks of MSFT at $ 172.39703010684752</pre>
-
-<h2><a name="Sample253">Sample 253: One way bridging from JMS to http and
-replying with a 202 Accepted response</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="JMStoHTTPStockQuoteProxy" transports="jms"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-    &lt;proxy name="OneWayProxy" transports="http"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;log level="full"/&gt;
-                &lt;property name="RESPONSE" value="true"/&gt;
-                &lt;header name="To" value="http://www.w3.org/2005/08/addressing/anonymous"/&gt;
-                &lt;property name="SC_ACCEPTED" value="true" scope="axis2"/&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-                &lt;send/&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate one way message bridging from JMS to http
-and replying with a http 202 Accepted response</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p>Start the Synapse configuration numbered 253: i.e. synapse -sample 253</p>
-
-<p></p>
-
-<p>This example invokes the one-way 'placeOrder' operation on the
-SimpleStockQuoteService using the Axis2 ServiceClient.fireAndForget() API at
-the client. To test this, use 'ant -Dmode=placeorder...' and you will notice
-the one way JMS message flowing through Synapse into the sample Axis2 server
-instance over http, and Axis2 acknowledging it with a http 202 Accepted
-response.</p>
-<pre>ant stockquote -Dmode=placeorder -Dtrpurl="jms:/JMStoHTTPStockQuoteProxy?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61616&amp;transport.jms.DestinationType=queue"</pre>
-<pre>SimpleStockQuoteService :: Accepted order for : 7482 stocks of IBM at $ 169.27205579038733</pre>
-
-<p>The second example shows how Synapse could be made to respond with a http
-202 Accepted response to a request received. The proxy service simply logs
-the message received and acknowledges it. On the Synapse console you could
-see the logged message, and if TCPMon was used at the client, you would see
-the 202 Accepted response sent back to the client from Synapse</p>
-<pre>ant stockquote -Dmode=placeorder -Dtrpurl=http://localhost:8080/soap/OneWayProxy</pre>
-<pre>HTTP/1.1 202 Accepted
-Content-Type: text/xml; charset=UTF-8
-Host: 127.0.0.1
-SOAPAction: "urn:placeOrder"
-Date: Sun, 06 May 2007 17:20:19 GMT
-Server: Synapse-HttpComponents-NIO
-Transfer-Encoding: chunked
-
-0</pre>
-
-<h2><a name="Sample254">Sample 254: Using the file system as transport medium
-using VFS transport listener and sender</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-        &lt;proxy name="StockQuoteProxy" transports="vfs"&gt;
-                &lt;parameter name="transport.vfs.FileURI"&gt;file:///home/user/test/in&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ContentType"&gt;text/xml&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.FileNamePattern"&gt;.*\.xml&lt;/parameter&gt;
-                &lt;parameter name="transport.PollInterval"&gt;15&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.MoveAfterProcess"&gt;file:///home/user/test/original&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.MoveAfterFailure"&gt;file:///home/user/test/original&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ActionAfterProcess"&gt;MOVE&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.ActionAfterFailure"&gt;MOVE&lt;/parameter&gt;
-
-                &lt;target&gt;
-                        &lt;endpoint&gt;
-                                &lt;address format="soap12" uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                        &lt;outSequence&gt;
-                                &lt;property name="transport.vfs.ReplyFileName"
-                                          expression="fn:concat(fn:substring-after(get-property('MessageID'), 'urn:uuid:'), '.xml')" scope="transport"/&gt;
-                                &lt;send&gt;
-                                        &lt;endpoint&gt;
-                                                &lt;address uri="vfs:file:///home/user/test/out"/&gt; &lt;!--CHANGE--&gt;
-                                        &lt;/endpoint&gt;
-                                &lt;/send&gt;
-                        &lt;/outSequence&gt;
-                &lt;/target&gt;
-                &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Using the file system as transport medium using VFS
-transport listener and sender</strong></p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done</p>
-
-<p>Create three new directories in a test directory. e.g. in, out, original
-in /home/user/test. Open
-SYNAPSE_HOME/repository/conf/sample/synapse_sample_115.xml and edit the
-following values. Change transport.vfs.FileURI,
-transport.vfs.MoveAfterProcess, transport.vfs.MoveAfterFailure parameter
-values to the above in, original, original directories respectively. Change
-outSequence endpoint address uri to out directory with the prefeix
-<em>vfs:</em>. Values you have to change are marked with &lt;!--CHANGE--&gt;.
-</p>
-
-<p>Start the Synapse configuration numbered 254: i.e. synapse -sample 254</p>
-
-<p>Copy SYNAPSE_HOME/repository/conf/sample/resources/vfs/test.xml to the
-directory given in transport.vfs.FileURI above.</p>
-
-<p>test.xml file content is as follows</p>
-<pre>&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-        &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
-        &lt;soapenv:Body&gt;
-                &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-                        &lt;m0:request&gt;
-                                &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-                        &lt;/m0:request&gt;
-                &lt;/m0:getQuote&gt;
-        &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-
-<p>VFS transport listener will pick the file from <em>in</em> directory and
-send it to the Axis2 service. The request XML file will be moved to
-<em>original</em> directory. The response from the Axis2 server will be saved
-to <em>out</em> directory.</p>
-
-<h2><a name="Sample255">Sample 255: Switching from ftp transport listener to
-mail transport sender</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-        &lt;proxy name="StockQuoteProxy" transports="vfs"&gt;
-                &lt;parameter name="transport.vfs.FileURI"&gt;vfs:ftp://guest:guest@localhost/test?vfs.passive=true&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ContentType"&gt;text/xml&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.FileNamePattern"&gt;.*\.xml&lt;/parameter&gt;
-                &lt;parameter name="transport.PollInterval"&gt;15&lt;/parameter&gt;
-
-                &lt;target&gt;
-                        &lt;inSequence&gt;
-                                &lt;header name="Action" value="urn:getQuote"/&gt;
-                        &lt;/inSequence&gt;
-                        &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                        &lt;outSequence&gt;
-                                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-                                &lt;send&gt;
-                                        &lt;endpoint&gt;
-                                                &lt;address uri="mailto:user@host"/&gt; &lt;!--CHANGE--&gt;
-                                        &lt;/endpoint&gt;
-                                &lt;/send&gt;
-                        &lt;/outSequence&gt;
-                &lt;/target&gt;
-                &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Switching from ftp transport listener to mail transport
-sender</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-You will need access to an FTP server and an SMTP server to try this
-sample.</p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done</p>
-
-<p>Enable mail transport sender in the Synapse axis2.xml. See <a
-href="samples_setup.html#mailsender">Setting up mail transport
-sender</a> </p>
-
-<p>Create a new test directory in the FTP server. Open
-SYNAPSE_HOME/repository/conf/sample/synapse_sample_116.xml and edit the
-following values. Change transport.vfs.FileURI parameter value point to the
-test directory at the FTP server. Change outSequence endpoint address uri
-email address to a working email address. Values you have to change are
-marked with &lt;!--CHANGE--&gt;.</p>
-
-<p>Start the Synapse configuration numbered 255: i.e. synapse -sample 255</p>
-
-<p>Copy SYNAPSE_HOME/repository/conf/sample/resources/vfs/test.xml to the ftp
-directory given in transport.vfs.FileURI above.</p>
-
-<p>VFS transport listener will pick the file from the directory in the ftp
-server and send it to the Axis2 service. The file in the ftp directory will
-be deleted. The response will be sent to the given email address.</p>
-
-<h2><a name="Sample256">Sample 256: Proxy services with the mail transport
-</a></h2>
-<pre>&lt;!-- Using the mail transport --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy" transports="mailto"&gt;
-
-        &lt;parameter name="transport.mail.Address"&gt;synapse.demo.1@gmail.com&lt;/parameter&gt;
-        &lt;parameter name="transport.mail.Protocol"&gt;pop3&lt;/parameter&gt;
-        &lt;parameter name="transport.PollInterval"&gt;5&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.host"&gt;pop.gmail.com&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.port"&gt;995&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.user"&gt;synapse.demo.1&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.password"&gt;mailpassword&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.socketFactory.class"&gt;javax.net.ssl.SSLSocketFactory&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.socketFactory.fallback"&gt;false&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.socketFactory.port"&gt;995&lt;/parameter&gt;
-
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;property name="senderAddress" expression="get-property('transport', 'From')"/&gt;
-                &lt;log level="full"&gt;
-                    &lt;property name="Sender Address" expression="get-property('senderAddress')"/&gt;
-                &lt;/log&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;property name="Subject" value="Custom Subject for Response" scope="transport"/&gt;
-                &lt;header name="To" expression="fn:concat('mailto:', get-property('senderAddress'))"/&gt;
-                &lt;log level="full"&gt;
-                    &lt;property name="message" value="Response message"/&gt;
-                    &lt;property name="Sender Address" expression="get-property('senderAddress')"/&gt;
-                &lt;/log&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Using the mail transport with Proxy
-services</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-You will need access to an email account</p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done</p>
-
-<p>Enable mail transport sender in the Synapse axis2.xml. See <a
-href="samples_setup.html#mailsender">Setting up mail transport
-sender</a> </p>
-
-<p>Start the Synapse configuration numbered 256: i.e. synapse -sample 256</p>
-
-<p>Send a plain/text email with the following body and any custom Subject
-from your mail account.</p>
-<pre>&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;&lt;m0:request&gt;&lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;&lt;/m0:request&gt;&lt;/m0:getQuote&gt; </pre>
-
-<p>After a few seconds (e.g. 30s), you should receive a POX response in your email
-account with the stock quote reply.</p>
-
-<h1><a name="Task">Introduction to synapse tasks</a></h1>
-
-<h2><a name="Sample300">Sample 300: Introduction to tasks with simple
-trigger</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;task class="org.apache.synapse.startup.tasks.MessageInjector" name="CheckPrice"&gt;
-        &lt;property name="to" value="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-        &lt;property name="soapAction" value="urn:getQuote"/&gt;
-        &lt;property name="message"&gt;
-            &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;m0:request&gt;
-                    &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-                &lt;/m0:request&gt;
-            &lt;/m0:getQuote&gt;
-        &lt;/property&gt;
-        &lt;trigger interval="5000"/&gt;
-    &lt;/task&gt;
-
-    &lt;in&gt;
-        &lt;send/&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="Stock_Quote_on" expression="//ns:return/ns:lastTradeTimestamp/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-            &lt;property name="For_the_organization" expression="//ns:return/ns:name/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-            &lt;property name="Last_Value" expression="//ns:return/ns:last/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-        &lt;/log&gt;
-    &lt;/out&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Introduce the concept of tasks and how simple trigger
-works</strong></p>
-
-<p><strong>Prerequisites:</strong><br/>
-You will need access to build the SimpleStockQuoteService as mentioned in the
-above and start the sample axis2 server before staring synapse.</p>
-
-<p>When ever synapse gets started and initialized, this task will run
-periodically in 5 second intervals. You could limit the number of times that
-you want to run this task by adding a count attribute with an integer as the
-value, if the count is not present as in this sample this task will run
-forever.</p>
-
-<p>One can write his own task class implementing the
-org.apache.synapse.startup.Task interface and implementing the execute method
-to do the task. For this particular sample we have used the MessageInjector
-which just injects a message specified in to the synapse environment.</p>
-
-<h1><a name="AdvancedMediation">Advanced mediations with advanced
-mediators</a></h1>
-
-<h2><a name="ScriptMediator">Using scripts in mediation (Script
-Mediator)</a></h2>
-
-<p>The Synapse Script Mediator is a Synapse extension, and thus all
-prerequisites are not bundled by default with the Synapse distribution.
-Before you use some script mediators you may need to manually add the
-required jar files to the Synapse lib directory, and optionally perform other
-installation tasks as may be required by the individual scripting language.
-This is explained in the <a href="samples_setup.html#script">Samples
-Setup guide</a>.</p>
-
-<h2><a name="Sample350">Sample 350: Introduction to the script mediator using
-js scripts</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="stockquoteScript" src="file:repository/conf/sample/resources/script/stockquoteTransform.js"/&gt;
-
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote request expected by the service --&gt;
-        &lt;script language="js" key="stockquoteScript" function="transformRequest"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="js" key="stockquoteScript" function="transformResponse"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-
-<p></p>
-<pre>&lt;x&gt;&lt;![CDATA[
-  function transformRequest(mc) {
-     var symbol = mc.getPayloadXML()..*::Code.toString();
-     mc.setPayloadXML(
-        &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-           &lt;m:request&gt;
-              &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
-           &lt;/m:request&gt;
-        &lt;/m:getQuote&gt;);
-  }
-
-  function transformResponse(mc) {
-     var symbol = mc.getPayloadXML()..*::symbol.toString();
-     var price = mc.getPayloadXML()..*::last.toString();
-     mc.setPayloadXML(
-        &lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;
-   &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
-   &lt;m:Price&gt;{price}&lt;/m:Price&gt;
-        &lt;/m:CheckPriceResponse&gt;);
-  }
-]]&gt;&lt;/x&gt;</pre>
-
-<p><strong>Objective: Introduction to script mediators</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Start the Synapse configuration numbered 350: i.e. synapse -sample 350<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>This sample is similar to sample 8 but instead of using XSLT the
-transformation is done with JavaScript and E4X. Note that the script source
-loaded from a resource must be specified within a CDATA tag within an XML
-element. The script used in this example has two functions,
-'transformRequest' and 'transformResponse', and the Synapse configuration
-uses the function attribute to specify which function should be invoked. Use
-the stock quote client to issue a custom quote client as follows.:</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=customquote</pre>
-
-<p>Synapse uses the script mediator and the specified JavaScript function to
-convert the custom request to a standard quote request. Subsequently the
-response received is transformed and sent back to the client.</p>
-
-<h2><a name="Sample351">Sample 351: In-line script mediation with
-JavaScript</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote requst expected by the service --&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-               var symbol = mc.getPayloadXML()..*::Code.toString();
-               mc.setPayloadXML(
-                  &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-                     &lt;m:request&gt;
-                        &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
-                     &lt;/m:request&gt;
-                  &lt;/m:getQuote&gt;);
-        ]]&gt;&lt;/script&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-               var symbol = mc.getPayloadXML()..*::symbol.toString();
-               var price = mc.getPayloadXML()..*::last.toString();
-               mc.setPayloadXML(
-                  &lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;
-               &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
-               &lt;m:Price&gt;{price}&lt;/m:Price&gt;
-                  &lt;/m:CheckPriceResponse&gt;);
-            ]]&gt;&lt;/script&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Introduction to in-line script mediation</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Start the Synapse configuration numbered 351: i.e. synapse -sample 351<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>This example is functionally equivalent to sample # 350 and sample # 8,
-and demonstrates in-line script mediation in Synapse. Use the stock quote
-client to send a custom quote as in example # 500 to test this example.</p>
-
-<p></p>
-
-<h2><a name="Sample352">Sample 352: Accessing Synapse message context API
-methods using scripting language</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-       &lt;!-- change the MessageContext into a response and set a response payload --&gt;
-       &lt;script language="js"&gt;&lt;![CDATA[
-          mc.setTo(mc.getReplyTo());
-          mc.setProperty("RESPONSE", "true");
-          mc.setPayloadXML(
-             &lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-                &lt;ns:return&gt;
-                   &lt;ns:last&gt;99.9&lt;/ns:last&gt;
-                &lt;/ns:return&gt;
-             &lt;/ns:getQuoteResponse&gt;);
-       ]]&gt;&lt;/script&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Accessing the Synapse APIs from scripting
-languages</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Start the Synapse configuration numbered 352: i.e. bin/synapse -sample
-352<br/>
-</p>
-
-<p></p>
-
-<p>This example shows how an inline JavaScript mediator script could access
-the Synapse message context API to set its 'To' EPR and to set a custom
-property to mark it as a response. Execute the stock quote client, and you
-will receive the response "99.9" as the last sale price as per the above
-script.</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/
-...
-stockquote:
-     [java] Standard :: Stock price = $99.9</pre>
-
-<h2><a name="Sample353">Sample 353: Using Ruby scripts for mediation</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;localEntry key="stockquoteScript" src="file:repository/conf/sample/resources/script/stockquoteTransform.rb"/&gt;
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote request expected by the service --&gt;
-        &lt;script language="rb" key="stockquoteScript" function="transformRequest"/&gt;
-
-        &lt;!-- send message to real endpoint referenced by name "stockquote" and stop --&gt;
-        &lt;send&gt;
-            &lt;endpoint name="stockquote"&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="rb" key="stockquoteScript" function="transformResponse"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-<pre>&lt;x&gt;&lt;![CDATA[
-require 'rexml/document'
-include REXML
-
-def transformRequest(mc)
-   newRequest= Document.new '&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;'&lt;&lt;
-      '&lt;m:request&gt;&lt;m:symbol&gt;&lt;/m:symbol&gt;&lt;/m:request&gt;&lt;/m:getQuote&gt;'
-   newRequest.root.elements[1].elements[1].text = mc.getPayloadXML().root.elements[1].get_text
-   mc.setPayloadXML(newRequest)
-end
-
-def transformResponse(mc)
-   newResponse = Document.new '&lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;&lt;m:Code&gt;' &lt;&lt;
-      '&lt;/m:Code&gt;&lt;m:Price&gt;&lt;/m:Price&gt;&lt;/m:CheckPriceResponse&gt;'
-   newResponse.root.elements[1].text = mc.getPayloadXML().root.elements[1].elements[1].get_text
-   newResponse.root.elements[2].text = mc.getPayloadXML().root.elements[1].elements[2].get_text
-   mc.setPayloadXML(newResponse)
-end
-]]&gt;&lt;/x&gt;</pre>
-
-<p><strong>Objective: Script mediators using Ruby</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>This sample uses Ruby so first setup support for this in Synapse as
-described at <a href="samples_setup.html#script">Configuring
-JRuby</a>. </p>
-
-<p>Start the Synapse configuration numbered 353: i.e. bin/synapse -sample
-353<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>This sample is functionally equivalent to sample # 500 (#501 and #8) but
-instead uses a Ruby script using the JRuby interpreter. The script has two
-functions, 'transformRequest' and 'transformResponse', and the Synapse
-configuration specifies which function is to be invoked when used. Execute
-the stock quote client to send a custom stock quote as per example #500 and
-check the received stock quote response.</p>
-
-<h2><a name="Sample354">Sample 354: Using In-lined Ruby scripts for
-mediation</a></h2>
-
-<div>
-<pre>      &lt;!-- Using In-lined Ruby scripts for mediation --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;script language="rb"&gt;
-            &lt;![CDATA[
-                require 'rexml/document'
-                include REXML
-                newRequest= Document.new '&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;&lt;m:request&gt;&lt;m:symbol&gt;...test...&lt;/m:symbol&gt;&lt;/m:request&gt;&lt;/m:getQuote&gt;'
-                newRequest.root.elements[1].elements[1].text = $mc.getPayloadXML().root.elements[1].get_text
-                $mc.setPayloadXML(newRequest)
-            ]]&gt;
-        &lt;/script&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;script language="rb"&gt;
-            &lt;![CDATA[
-                require 'rexml/document'
-                include REXML
-                newResponse = Document.new '&lt;m:CheckPriceResponse xmlns:m="http://services.samples/xsd"&gt;&lt;m:Code&gt;&lt;/m:Code&gt;&lt;m:Price&gt;&lt;/m:Price&gt;&lt;/m:CheckPriceResponse&gt;'
-                newResponse.root.elements[1].text = $mc.getPayloadXML().root.elements[1].elements[1].get_text
-                newResponse.root.elements[2].text = $mc.getPayloadXML().root.elements[1].elements[2].get_text
-                $mc.setPayloadXML(newResponse)
-            ]]&gt;
-        &lt;/script&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-
-<p><strong>Objective: Script mediators using Ruby(In-line Ruby
-Script)</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>This sample uses Ruby so first setup support for this in Synapse as
-described at <a href="samples_setup.html#script">Configuring
-JRuby</a>. </p>
-
-<p>Start the Synapse configuration numbered 354: i.e. bin/synapse -sample
-354<br/>
-Start the Axis2 server and deploy the SimpleStockQuoteService if not already
-done</p>
-
-<p></p>
-
-<p>This sample is functionally equivalent to the sample 353. </p>
-
-<p>Run the client with </p>
-<pre> ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dmode=customquote</pre>
-</div>
-
-<h2><a name="DBMediators">Database interactions in mediation (DBLookup /
-DBReport)</a></h2>
-
-<p>Following database mediators use Derby in a client/server configuration by
-using the network server. Therefore, to proceed with the following samples,
-you need a working Derby database server and you have to follow the steps in
-<a href="samples_setup.html#derby">Sample Setup Guide</a> before
-going through the samples.</p>
-
-<p></p>
-
-<h2><a name="Sample360">Sample 360: Introduction to dblookp mediator</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="myFaultHandler"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/makefault&gt;
-
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-        &lt;send/&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="myFaultHandler"&gt;
-        &lt;in&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Looking up from the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dblookup xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;select * from company where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:getQuote/m0:request/m0:symbol"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                    &lt;result name="company_id" column="id"/&gt;
-                &lt;/statement&gt;
-            &lt;/dblookup&gt;
-
-            &lt;switch source="get-property('company_id')"&gt;
-                &lt;case regex="c1"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="c2"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="c3"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;default&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="** Unrecognized Company ID **"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="** Unrecognized Company ID **"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/default&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p></p>
-
-<p></p>
-
-<p><strong>Objective:</strong> I<strong>ntroduction to the dblookup
-mediator</strong></p>
-
-<p><strong>Prerequisites:</strong> Setting up Derby database as explained
-above.</p>
-
-<p>Start the Synapse configuration numbered 360: i.e. synapse -sample 360</p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done</p>
-
-<p></p>
-
-<p>This sample demonstrates simple database read operations through Synapse.
-When a message arrives at dblookup mediator, it opens a connection to the
-database and executes the SQL query. The SQL query use '?' character for
-attributes that will be filled at runtime. The parameters define how to
-calculate the value of those attributes at runtime. In this sample a dblookup
-mediator has been used to extract 'id' of the company from the company
-database using the symbol which is evaluated using an xpath against the SOAP
-envelope. Then 'id' base switching will be done by a switch mediator.</p>
-
-<p></p>
-
-<p>When the IBM stock quote is requested,</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=IBM</pre>
-
-<p>Synapse console shows</p>
-<pre>INFO LogMediator text = ** Looking up from the Database **INFO LogMediator text = Company ID &#x2013; c1<br/></pre>
-
-<p></p>
-
-<p>For the SUN stock quote,</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=SUN</pre>
-
-<p></p>
-
-<p>Synapse console shows</p>
-<pre>INFO LogMediator text = ** Looking up from the Database **INFO LogMediator text = Company ID &#x2013; c2<br/></pre>
-
-<p>and for the MSFT stock quote,</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=MSFT</pre>
-<pre>INFO LogMediator text = ** Looking up from the Database **<br/>INFO LogMediator text = Company ID &#x2013; c2</pre>
-
-<p>For any other symbols, Synapse console shows</p>
-<pre>INFO LogMediator text = ** Unrecognized Company ID **</pre>
-
-<p></p>
-
-<p>and the client gets a response which has following message.</p>
-<pre>** Unrecognized Company ID **</pre>
-
-<div>
-</div>
-
-<h2><a name="Sample361">Sample 361: Introduction to dbreport mediator</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Reporting to the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dbreport xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;update company set price=? where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:last/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="DOUBLE"/&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                &lt;/statement&gt;
-            &lt;/dbreport&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<div>
-<p><strong>Objective: I<strong>ntroduction to the dbreport
-mediator</strong></strong></p>
-
-<p><strong>Prerequisites:</strong> Setting up Derby database as above.</p>
-
-<p>Start the Synapse configuration numbered 361: i.e. synapse -sample 361</p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done</p>
-</div>
-
-<p>This sample demonstrate simple database write operations. The dbreport
-mediator writes (i.e. inserts one row) to a table using the message details.
-It works the same as the dblookup mediator. In this sample , dbreport
-mediator is used for updating the stock price of the company using the last
-quote value which is calculated by evaluating an XPath against the response
-message. After running this sample, user can check the company table using
-the Derby client tool. It will show the inserted value by the dbreport
-mediator.</p>
-
-<p></p>
-
-<p>Run the client using,</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=IBM</pre>
-
-<p>and then execute the following query using database client tool against
-synapsedb.</p>
-<pre>select price from company where name='IBM';</pre>
-
-<p>It will show some value as follows.</p>
-<pre>96.39535981018865</pre>
-
-<div>
-</div>
-
-<h2><a name="Sample362">Sample 362: Action of dbreport and dblookup mediators
-together</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Reporting to the Database **"/&gt;
-            &lt;/log&gt;
-
-            &lt;dbreport xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;update company set price=? where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:last/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="DOUBLE"/&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                &lt;/statement&gt;
-            &lt;/dbreport&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Looking up from the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dblookup xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;select * from company where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                    &lt;result name="stock_price" column="price"/&gt;
-                &lt;/statement&gt;
-            &lt;/dblookup&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          expression="fn:concat('Stock price - ',get-property('stock_price'))"/&gt;
-            &lt;/log&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate the use of dbreport and dblookup
-mediators</strong></p>
-
-<p><strong>Prerequisites:</strong> Setting up Derby database as above.</p>
-
-<p>Start the Synapse configuration numbered 362: i.e. synapse -sample 362</p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done</p>
-
-<p></p>
-
-<p>In this sample ,the dbreport mediator works the same as the above sample.
-It updates the price for the given company using the response messages
-content. Then the dblookup mediator reads the last updated value from the
-company database and logs it.</p>
-
-<p>When running client,</p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/ -Dsymbol=IBM</pre>
-
-<p>Synapse console shows,</p>
-<pre>INFO LogMediator text = ** Reporting to the Database **<br/><br/>...<br/><br/>INFO LogMediator text = ** Looking up from the Database **<br/><br/>...<br/><br/>INFO LogMediator text = Stock price - 153.47886496064808</pre>
-
-<p></p>
-
-<h2><a name="Throttle">Throttling messages (Throttle Mediator)</a></h2>
-
-<h2><a name="Sample370">Sample 370: Introduction to throttle mediator and
-concurrency throttling</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;throttle id="A"&gt;
-                &lt;policy&gt;
-                    &lt;!-- define throttle policy --&gt;
-                    &lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
-                                xmlns:throttle="http://www.wso2.org/products/wso2commons/throttle"&gt;
-                        &lt;throttle:ThrottleAssertion&gt;
-                            &lt;throttle:MaximumConcurrentAccess&gt;10&lt;/throttle:MaximumConcurrentAccess&gt;
-                        &lt;/throttle:ThrottleAssertion&gt;
-                    &lt;/wsp:Policy&gt;
-                &lt;/policy&gt;
-                &lt;onAccept&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Accept**"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/onAccept&gt;
-                &lt;onReject&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Denied**"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="**Access Denied**"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/onReject&gt;
-            &lt;/throttle&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;throttle id="A"/&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-
-<p><b>Objective: Demonstrate the use of throttle mediator for concurrency
-throttling </b></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Deploy the SimpleStockQuoteService in sample Axis2 server and start it on
-port 9000.</p>
-
-<p>Start Synapse with the sample configuration 370 (i.e. synapse -sample
-370).</p>
-
-<p></p>
-
-<p>Above configuration specifies a throttle mediator inside the in mediator.
-Therefore, all request messages directed to the main sequence will be
-subjected to throttling. Throttle mediator has policy, onAccept and onReject
-tags at top level. Policy tag specifies the throttling policy to be applied
-for messages. In this sample policy contains only component called
-"MaximumConcurrentAccess" .This indicates the maximum number of concurrent
-request that may have passed through the synapse on a single unit of time. To
-test concurrency throttling ,it is required to send concurrent request to
-synapse. For synapse with above configuration ,if client send 20 request
-concurrently ,then approximately half of those will success. The client
-command is as follows.</p>
-<pre>ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080/</pre>
-
-<p></p>
-
-<h2><a name="Sample371">Sample 371: Restricting requests based on policies
-</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;throttle id="A"&gt;
-                &lt;policy&gt;
-                    &lt;!-- define throttle policy --&gt;
-                    &lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
-                                xmlns:throttle="http://www.wso2.org/products/wso2commons/throttle"&gt;
-                        &lt;throttle:ThrottleAssertion&gt;   <br/>                                   &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;Other&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;4&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;800000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;10000&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.200-192.168.8.222&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;8&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;800000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;10&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.201&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;200&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;600000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.198&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;50&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;500000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                        &lt;/throttle:ThrottleAssertion&gt;
-                    &lt;/wsp:Policy&gt;
-                &lt;/policy&gt;
-                &lt;onAccept&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Accept**"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/onAccept&gt;
-                &lt;onReject&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Denied**"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="**Access Denied**"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/onReject&gt;
-            &lt;/throttle&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;throttle id="A"/&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-
-<p><strong>Objective: Demonstrate the use of throttle mediator for
-restricting request counts</strong> </p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Deploy the SimpleStockQuoteService in sample Axis2 server and start it on
-port 9000.</p>
-
-<p>Start Synapse with the sample configuration 371 (i.e. synapse -sample
-371).</p>
-
-<p></p>
-
-<p>Above configuration specifies a throttle mediator inside the in mediator.
-Therefore, all request messages directed to the main sequence will be
-subjected to throttling. Throttle mediator has policy, onAccept and onReject
-tags at the top level. Policy tag specifies the throttling policy to be
-applied for messages. It contains some IP address ranges and the maximum
-number of messages to be allowed for those ranges within a time period given
-in "UnitTime" tag. "ProhibitTimePeriod" tag specifies the time period to
-prohibit further requests after the received request count exceeds the
-specified time. Now run the client 5 times repetitively using the following
-command to see how throttling works.</p>
-<pre>ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080/</pre>
-
-<p>For the first four requests you will get the quote prices for IBM as
-follows.</p>
-<pre>[java] Standard :: Stock price = $177.20143371883802</pre>
-
-<p>You will receive the following response for the fifth request.</p>
-<pre>[java] org.apache.axis2.AxisFault: **Access Denied**</pre>
-
-<p>Maximum number of requests within 800000 milliseconds is specified as 4
-for any server (including localhost) other than the explicitly specified
-ones. Therefore, our fifth request is denied by the throttle mediator. You
-can verify this by looking at the Synapse console.</p>
-<pre>[HttpServerWorker-1] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-2] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-3] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-4] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-5] INFO  LogMediator - text = **Access Denied** </pre>
-
-<h2><a name="Sample372">Sample 372: Use of both concurrency throttling and
-request rate based throttling </a></h2>
-<pre>&lt;!-- Use of both concurrency throttling and request rate based throttling --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;150000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;sequence name="onAcceptSequence"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="**Access Accept**"/&gt;
-        &lt;/log&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-    &lt;sequence name="onRejectSequence" trace="enable"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="**Access Denied**"/&gt;
-        &lt;/log&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver"
-                  xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="**Access Denied**"/&gt;
-        &lt;/makefault&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" action="remove"/&gt;
-        &lt;send/&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-             &lt;inSequence&gt;
-                &lt;throttle onReject="onRejectSequence" onAccept="onAcceptSequence" id="A"&gt;
-                    &lt;policy key="conf/sample/resources/policy/throttle_policy.xml"/&gt;
-                &lt;/throttle&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;throttle id="A"/&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<div>
-</div>
-
-<p><strong>Objective: Use of both concurrency throttling and request rate
-based throttling </strong></p>
-
-<p><strong>Prerequisites:</strong> Deploy the SimpleStockQuoteService in
-sample Axis2 server and start it on port 9000.</p>
-
-<p>Start Synapse with the sample configuration 372 (i.e. synapse -sample
-372).</p>
-
-<p></p>
-
-<p>Throttle policy is loaded from the &#x201c;throttle_policy. xml&#x201d;
-.That policy contains merging policy from sample 370 and 371. To check the
-functionality , it is need to run load test.The all enabled request from the
-concurrency throttling will be controlled by the access rate base throttling
-according to the policy.</p>
-
-<p>Run the client as follows </p>
-<pre>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy</pre>
-
-<div>
-<p>You will get results same as sample 371.if you run the load test, results
-will be different due to affect of concurrency throttling.</p>
-</div>
-
-<h2><a name="Class">Extending the mediation in java (Class Mediator)</a></h2>
-
-<p>Class mediator can be used to write your own custom mediation in Java and
-you have access to the SynapseMessageContext and all the Synapse API in
-there. This is a useful extension mechanism within Synapse to extend its
-functionality. This class can contain fields for which you can assign values
-at runtime through the configuration.</p>
-
-<h2><a name="Sample380">Sample 380: Writing your own custom mediation in
-Java</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="fault"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="Mediation failed."/&gt;
-        &lt;/makefault&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="fault"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint name="stockquote"&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;class name="samples.mediators.DiscountQuoteMediator"&gt;
-                &lt;property name="discountFactor" value="10"/&gt;
-                &lt;property name="bonusFor" value="5"/&gt;
-            &lt;/class&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-
-<p></p>
-
-<p><strong>Objective: Demonstrate the use of Class mediator to extend the
-mediation functionality</strong></p>
-
-<p><strong>Prerequisites:</strong></p>
-
-<p>Make sure the synapse-samples-1.0.jar is in your class path (by default
-this jar is placed in the lib directory when installing Synapse).</p>
-
-<p>Start Synapse with the sample configuration 380 (i.e. synapse -sample
-380)</p>
-
-<p>Start the sample Axis2 server and deploy the SimpleStockQuoteService.</p>
-
-<p></p>
-
-<p>In this configuration, Synapse hands over the request message to the
-specified endpoint, which sends it to the Axis2 server running on port
-9000.</p>
-
-<p>But the response message is passed through the class mediator before
-sending it back to the client. Two parameters named "discountFactor"</p>
-
-<p>and "bonusFor" are passed to the instance mediator implementation class
-(i.e. samples.mediators.DiscountQuoteMediator) before each</p>
-
-<p>invocation. Code of the mediator implementation class is shown below.</p>
-<pre>package samples.mediators;
-
-import org.apache.synapse.MessageContext;
-import org.apache.synapse.Mediator;
-import org.apache.axiom.om.OMElement;
-import org.apache.axiom.om.OMAbstractFactory;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.soap.SOAPFactory;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import javax.xml.namespace.QName;
-
-public class DiscountQuoteMediator implements Mediator {
-
-    private static final Log log = LogFactory.getLog(DiscountQuoteMediator.class);
-
-    private String discountFactor="10";
-
-    private String bonusFor="10";
-
-    private int bonusCount=0;
-
-    public DiscountQuoteMediator(){}
-
-    public boolean mediate(MessageContext mc) {
-
-        String price= mc.getEnvelope().getBody().getFirstElement().getFirstElement().
-                getFirstChildWithName(new QName("http://services.samples/xsd","last")).getText();
-
-        //converting String properties into integers
-        int discount=Integer.parseInt(discountFactor);
-        int bonusNo=Integer.parseInt(bonusFor);
-        double currentPrice=Double.parseDouble(price);
-
-        //discounting factor is deducted from current price form every response
-        Double lastPrice = new Double(currentPrice - currentPrice * discount / 100);
-
-        //Special discount of 5% offers for the first responses as set in the bonusFor property
-        if (bonusCount &lt;= bonusNo) {
-            lastPrice = new Double(lastPrice.doubleValue() - lastPrice.doubleValue() * 0.05);
-            bonusCount++;
-        }
-
-        String discountedPrice = lastPrice.toString();
-
-        mc.getEnvelope().getBody().getFirstElement().getFirstElement().getFirstChildWithName
-                (new QName("http://services.samples/xsd","last")).setText(discountedPrice);
-
-        System.out.println("Quote value discounted.");
-        System.out.println("Original price: " + price);
-        System.out.println("Discounted price: " + discountedPrice);
-
-        return true;
-    }
-
-    public String getType() {
-        return null;
-    }
-
-    public void setTraceState(int traceState) {
-        traceState = 0;
-    }
-
-    public int getTraceState() {
-        return 0;
-    }
-
-    public void setDiscountFactor(String discount) {
-        discountFactor=discount;
-    }
-
-    public String getDiscountFactor() {
-        return discountFactor;
-    }
-
-    public void setBonusFor(String bonus){
-        bonusFor=bonus;
-    }
-
-    public String getBonusFor(){
-        return bonusFor;
-    }
-}</pre>
-
-<p>All classes developed for class mediation should implement the Mediator
-interface, which contains the mediate(...) method. mediate(...) method of the
-above class is invoked for each response message mediated through the main
-sequence, with the message context of the current message as the parameter.
-All the details of the message including the SOAP headers, SOAP body and
-properties of the context hierarchy can be accessed from the message context.
-In this sample, the body of the message is retrieved and the discount
-percentage is subtracted from the quote price. If the quote request number is
-less than the number specified in the "bonusFor" property in the
-configuration, a special discount is given.</p>
-
-<p></p>
-
-<p>Now run the client using the following command.</p>
-<pre>ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8080</pre>
-
-<p>You will see the below output in the client console with the discounted
-quote value.</p>
-<pre>[java] Standard :: Stock price = $138.77458254967408</pre>
-
-<p>Now check the console running Synapse. You will see the original value and
-the discounted value for the requested quote as follows.</p>
-<pre>Quote value discounted.
-Original price: 162.30945327447262
-Discounted price: 138.77458254967408</pre>
-
-<p></p>
-
-<h2><a name="XQuery">Evaluating XQuery for mediation (XQuery
-Mediator)</a></h2>
-
-<h2><a name="Sample390">Sample 390: Introduction to the XQuery
-mediator</a></h2>
-<pre>    &lt;!-- Introduction to the XQuery mediator --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to a URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;localEntry key="xquery-key-req"
-                src="file:repository/conf/sample/resources/xquery/xquery_req.xq"/&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;xquery key="xquery-key-req"&gt;
-                    &lt;variable name="payload" type="ELEMENT"/&gt;
-                &lt;/xquery&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;out&gt;
-                    &lt;xquery key="xquery/xquery_res.xq"&gt;
-                        &lt;variable name="payload" type="ELEMENT"/&gt;
-                        &lt;variable name="code" type="STRING"
-                                  expression="self::node()//m0:return/m0:symbol/child::text()"
-                                  xmlns:m0="http://services.samples/xsd"/&gt;
-                        &lt;variable name="price" type="DOUBLE"
-                                  expression="self::node()//m0:return/m0:last/child::text()"
-                                  xmlns:m0="http://services.samples/xsd"/&gt;
-                    &lt;/xquery&gt;
-                    &lt;send/&gt;
-                &lt;/out&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt; </pre>
-
-<p><b>Objective: Introduction transformation using XQuery mediator</b></p>
-
-<p><b>Prerequisites</b>:Start the Synapse configuration numbered 390: i.e.
-synapse -sample 390 </p>
-
-<p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-already done.</p>
-
-<p></p>
-
-<p>This example uses the XQuery mediator to perform transformations. This
-sample behaves the same as sample number 8 and the only difference is that
-this sample uses XQuery instead of XSLT for transformation.</p>
-
-<p></p>
-
-<p>Execute the custom quote client as 'ant stockquote -Dmode=customquote ...'
-</p>
-<pre>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy -Dmode=customquote </pre>
-
-<p></p>
-
-<h2><a name="Sample391">Sample 391: How to use data from an external XML
-document with in XQuery </a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to  URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;out&gt;
-                    &lt;xquery key="xquery/xquery_commisson.xq"&gt;
-                        &lt;variable name="payload" type="ELEMENT"&gt;&lt;/variable&gt;
-                            &lt;variable name="commission" type="ELEMENT" key="misc/commission.xml"&gt;&lt;/variable&gt;
-                    &lt;/xquery&gt;
-                    &lt;send/&gt;
-                &lt;/out&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;&lt;/proxy&gt;&lt;/definitions&gt;   ns&gt;</pre>
-
-<p><b></b></p>
-
-<p><b><strong>Objective: Demonstrate the use of XQuery mediator to import
-external XML documents to the XQuery engine</strong></b></p>
-
-<p><strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService in
-sample Axis2 server and start it on port 9000.</p>
-
-<p>Start Synapse with the sample configuration 391 (i.e. synapse -sample
-391).</p>
-
-<p>In this sample, data from commission.xml document is used inside XQUERY
-document. The stock quote price from the response and commission from the
-commission.xml document will be added and given as a new price .</p>
-
-<p>Invoke the client as follows. </p>
-<pre>ant stockquote -Daddurl=http://localhost:8080/soap/StockQuoteProxy</pre>
-
-<h2><a name="Splitter">Splitting messages in to parts and process in parallel
-(Iterate / Clone)</a></h2>
-
-<h2><a name="Sample400">Sample 400: Message splitting and aggregating the
-responses</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="SplitAggregateProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;iterate expression="//m0:getQuote/m0:request" preservePayload="true"
-                         attachPath="//m0:getQuote"
-                         xmlns:m0="http://services.samples/xsd"&gt;
-                    &lt;target&gt;
-                        &lt;sequence&gt;
-                            &lt;send&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address
-                                        uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/send&gt;
-                        &lt;/sequence&gt;
-                    &lt;/target&gt;
-                &lt;/iterate&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;aggregate&gt;
-                    &lt;onComplete expression="//m0:getQuoteResponse"
-                                xmlns:m0="http://services.samples/xsd"&gt;
-                        &lt;send/&gt;
-                    &lt;/onComplete&gt;
-                    &lt;invalidate&gt;
-                        &lt;log level="full"/&gt;
-                        &lt;drop/&gt;
-                    &lt;/invalidate&gt;
-                &lt;/aggregate&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-
-<p><b><strong>Objective: Demonstrate the use of Iterate mediator to split the
-messages in to parts and process them asynchronously and then aggregate the
-responses coming in to synapse</strong></b></p>
-
-<p><strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService in
-sample Axis2 server and start it on port 9000.</p>
-
-<p>Start Synapse with the sample configuration 400 (i.e. synapse -sample
-400).</p>
-
-<p>In this sample, the message sent to synapse has embedded with a number of
-elements of the same type in one message. When synapse received this message
-it will iterate through those elements and then sent to the specified
-endpoint. When all the responses appear in to synapse then those messages
-will be aggregated to form the resultant response and sent back to the
-client.</p>
-
-<p>Invoke the client as follows. </p>
-<pre>ant stockquote -Daddurl=http://localhost:8080/soap/SplitAggregateProxy -Ditr=4</pre>
-<!--<h2><a name="Aggregator">Aggregating messages and process in batch (Aggregate-->
-<!--Mediator)</a></h2>-->
-<!---->
-<!--<h2><a name="Sample410">Sample 410: Message aggregation for batch-->
-<!--processing</a></h2>-->
-<!---->
-
-<h2><a name="Cache">Caching the responses over the requests (Cache
-Mediator)</a></h2>
-
-<p>Cached mediator can be used to utilize the network bandwidth, to protect
-the backend service from being loaded with the same type of requests like
-browser refresh actions and also to speed up the execution of the web
-service. This mediator should be used with sence, because it is not
-applicable for each and every service (for example services with dynamic
-responses for a particular release)</p>
-
-<h2><a name="Sample420">Sample 420: Simple cache implemented on synapse for
-the actual service</a></h2>
-<pre>&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;cache timeout="20000" scope="per-host" collector="false"
-               hashGenerator="org.wso2.caching.digest.DOMHASHGenerator"&gt;
-            &lt;implementation type="memory" maxSize="100"/&gt;
-        &lt;/cache&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;cache collector="true"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-
-<p><b><strong>Objective: Demonstrate the use of Cache mediator in order to
-cache the response and use that cached response as the response for an
-identical xml request</strong></b></p>
-
-<p><strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService in
-sample Axis2 server and start it on port 9000.</p>
-
-<p>Start Synapse with the sample configuration 420 (i.e. synapse -sample
-420).</p>
-
-<p>In this sample, the message sent to synapse is checked for an existing
-cached response by calculating the hash value of the request. If there is a
-cache hit in synapse then this request will not be forwarded to the actual
-service, rather synapse respond to the client with the cached response. In
-case of a cache miss that particular message will be forwarded to the actual
-service and cached that response in the out path for the use of consecutive
-requests of the same type.</p>
-
-<p>To observe this behaviour, invoke the client as follows. </p>
-<pre>ant stockquote -Dtrpurl=http://localhost:8080/</pre>
-
-<p>You could notice that if you send more than one requests within 20 seconds
-only the first request is forwarded to the actual service, and the rest of
-the requests will be served by the cache inside Synapse. You could observe
-this by looking at the printed line of the axis2 server, as well as by
-observing a constant rate as the response to the client instead of the random
-rate, which changes by each and every 20 seconds.<br/>
-</p>
-
-<h2><a name="Callout">Synchronize web service invocation with Callout
-mediator </a></h2>
-
-<p>The Callout mediator calls the given service URL with the request message
-which is given by the source attribute, waits for the response and attaches
-the received response to the destination which is given by the target
-attribute. Both the source and the target can be a key or an XPath. In the
-case of the source, this key refers to either a message context property or
-to a local entry. For the target, this key refers to a message context
-property only. </p>
-
-<h2><a name="Sample430">Sample 430: Simple Callout Mediator
-for synchronizing web service invocation</a></h2>
-
-<p>&#xa0;</p>
-<pre>
-    &lt;!-- Simple callout  mediator --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;callout serviceURL="http://localhost:9000/soap/SimpleStockQuoteService"
-             action="urn:getQuote"&gt;
-        &lt;source xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
-                xmlns:s12="http://www.w3.org/2003/05/soap-envelope"
-                xpath="s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]"/&gt;
-        &lt;target xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
-                xmlns:s12="http://www.w3.org/2003/05/soap-envelope"
-                xpath="s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]"/&gt;
-    &lt;/callout&gt;
-    &lt;property name="RESPONSE" value="true"/&gt;
-    &lt;header name="To" action="remove"/&gt;
-    &lt;send/&gt;
-    &lt;drop/&gt;
-&lt;/definitions&gt; </pre>
-
-<div>
-<p><strong>Objective:</strong> Demonstrate the use of the Callout mediator
-for the synchronized web service invocation</p>
-
-<p><strong>Prerequisites:</strong> Deploy the SimpleStockQuoteService in
-sample Axis2 server and start it on port 9000.</p>
-
-<p>Start Synapse with the sample configuration 430 (i.e. synapse -sample
-430).</p>
-
-<p>In this sample, Callout mediator does the direct service invocation to the
-StockQuoteService using the client request, get the response and set it as
-the first child of the SOAP message body. Then using the send mediator, the
-message is sent back to the client. </p>
-
-<p>Invoke the client as follows. </p>
-<pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8080/</pre>
-</div>
-</body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_1_1/samples.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1_1/samples_setup.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1_1/samples_setup.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1_1/samples_setup.xml	(nonexistent)
@@ -1,519 +0,0 @@
-<html>
-<head>
-  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
-  <title>Apache Synapse Samples</title>
-  <style type="text/css">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-</head>
-
-<body>
-<h1>Overview</h1>
-
-<p></p>
-
-<p>Synapse ships with a set of working examples that demonstrate some of the
-basic features and capabilities of Synapse. A set of sample clients and
-services are provided in addition to the sample configurations. Scripts are
-provided to execute the sample scenarios as explained below. </p>
-
-<h4>Prerequisites</h4>
-
-<p>To try out the samples you will need Java development kit version 1.5.x or
-later and Apache Ant version 1.6.5 or later. Ant can be downloaded from
-http://ant.apache.org. The JMS examples can be executed against an ActiveMQ
-installation by default (or another JMS provider with relevant configuration
-changes.)</p>
-
-<p></p>
-
-<p>Note*: The samples and the documentation assume that you are running
-Synapse in DEBUG mode. You can switch from the default INFO log messages to
-DEBUG log messages by changing the line
-"log4j.category.org.apache.synapse=INFO" as
-"log4j.category.org.apache.synapse=DEBUG" in the lib/log4j.properties
-file.</p>
-
-<h2>Understanding the Samples</h2>
-
-<table border="1" style="width: 100%">
-  <caption></caption>
-  <tbody>
-    <tr>
-      <td>Client</td>
-      <td>Synapse</td>
-      <td>Service</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td></td>
-      <td></td>
-    </tr>
-    <tr>
-      <td>ant stockquote</td>
-      <td>./synapse.sh -sample &lt;n&gt;</td>
-      <td>SimpleStockQuoteService</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td></td>
-      <td>SecureStockQuoteService etc.</td>
-    </tr>
-  </tbody>
-</table>
-
-<p>The above diagram depicts the interactions between the clients, Synapse
-and the services at a higher level. The Clients are able to send SOAP/REST or
-POX messages over transports such as http/s or JMS with WS-Addressing,
-WS-Security or WS-Reliable messaging. They can send binary optimized content
-using MTOM or SwA or binary or plain text JMS messages. After mediation
-through Synapse, the requests are passed over to the sample services. The
-sample clients and services are explained below.</p>
-
-<p></p>
-
-<h2>Using the Sample Clients</h2>
-
-<p></p>
-
-<p>The sample clients can be executed from the samples/axis2Client directory
-through the provided ant script. Simply executing 'ant' displays the
-available clients and some of the sample options used to configure them. The
-sample clients available are listed below:</p>
-
-<h3>1. Stock Quote Client</h3>
-
-<p></p>
-
-<p>This is a simple SOAP client that can send stock quote requests, and
-receive and display the last sale price for a stock symbol. </p>
-<pre>ant stockquote [-Dsymbol=IBM|MSFT|SUN|..]
-  [-Dmode=quote | customquote | fullquote | placeorder | marketactivity]
-  [-Daddurl=http://localhost:9000/soap/SimpleStockQuoteService]
-  [-Dtrpurl=http://localhost:8080] [-Dprxurl=http://localhost:8080]
-  [-Dpolicy=../../repository/conf/sample/resources/policy/policy_1.xml]</pre>
-
-<p>The client is able to operate in the following modes, and send the
-payloads listed below as SOAP messages:</p>
-<ul>
-  <li>quote - send a quote request for a single stock as follows. The
-    response contains the last sales price for the stock which will be
-    displayed
-    <pre>&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getQuote&gt;</pre>
-  </li>
-  <li>customquote - send a quote request in a custom format. Synapse will
-    transform this custom request to the standard stock quote request format
-    and send it to the service. Upon receipt of the response, it will be
-    transformed again to a custom response format and returned to the client,
-    which will then display the last sales price.
-    <pre>&lt;m0:checkPriceRequest xmlns:m0="http://www.apache-synapse.org/test"&gt;
-  &lt;m0:Code&gt;symbol&lt;/m0:Code&gt;
-&lt;/m0:checkPriceRequest&gt;</pre>
-  </li>
-  <li>fullquote - get quote reports for the stock over a number of days (i.e.
-    last 100 days of the year).
-    <pre>&lt;m:getFullQuote xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getFullQuote&gt;</pre>
-  </li>
-  <li>placeorder - place an order for stocks using a one way request
-    <pre>&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:order&gt;
-    &lt;m:price&gt;3.141593E0&lt;/m:price&gt;
-    &lt;m:quantity&gt;4&lt;/m:quantity&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;</pre>
-  </li>
-  <li>marketactivity - get a market activity report for the day (i.e. quotes
-    for multiple symbols)
-    <pre>&lt;m:getMarketActivity xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-    ...
-    &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getMarketActivity&gt;</pre>
-  </li>
-</ul>
-
-<p>Note : See samples/axis2Client/src/samples/common/StockQuoteHandler.java
-for sample responses expected by the clients.</p>
-
-<h4>Smart Client Mode:</h4>
-
-<p>The 'addurl' property sets the WS-Addressing EPR, and the 'trpurl' sets a
-transport URL for a message. Thus by specifying both of these properties, the
-client can operate in the 'smart client' mode, where the addressing EPR can
-specify the ultimate receiver, while the transport URL set to Synapse will
-ensure that any necessary mediation takes place before the message is
-delivered to the ultimate receiver. </p>
-<pre>e.g: ant stockquote -Daddurl=&lt;addressingEPR&gt; -Dtrpurl=&lt;synapse&gt;</pre>
-
-<h4>Gateway / Dumb Client Mode:</h4>
-
-<p>By specifying only a transport URL, the client operates in the 'dumb
-client' mode, where it sends the message to Synapse and depends on the
-Synapse rules for proper mediation and routing of the message to the ultimate
-destination.</p>
-<pre>e.g: ant stockquote -Dtrpurl=&lt;synapse&gt;</pre>
-
-<h4>Proxy Client Mode:</h4>
-
-<p>In this mode, the client uses the 'prxurl' as a http proxy to send the
-request. Thus by setting the 'prxurl' to Synapse, the client can ensure that
-the message will reach Synapse for mediation. The client can optionally set a
-WS-Addressing EPR if required.</p>
-<pre>e.g: ant stockquote -Dprxurl=&lt;synapse&gt; [-Daddurl=&lt;addressingEPR&gt;]</pre>
-
-<p></p>
-
-<p>Specifying a policy</p>
-
-<p>By specifying a WS-Policy using the 'policy' property, QoS aspects such as
-WS-Security can be enforced on the request. The policy can specify details
-such as timestamps, signatures and encryption. See Apache Axis2 and Apache
-Rampart documentation for more information.</p>
-
-<p></p>
-
-<h3>2. Generic JMS Client</h3>
-
-<p></p>
-
-<p>The JMS client is able to send plain text, plain binary content or POX
-content by directly publishing a JMS message to the specified destination.
-The JMS destination name should be specified with the 'jms_dest' property.
-The 'jms_type' property can specify 'text', 'binary' or 'pox' to specify the
-type of message payload. </p>
-
-<p></p>
-
-<p>The plain text payload for a 'text' message can be specified through the
-'payload' property. For binary messages, the 'payload' property will contain
-the path to the binary file. For POX messages, the 'payload' property will
-hold a stock symbol name to be used within the POX request for stock order
-placement request.</p>
-
-<p>e.g: </p>
-<pre>ant jmsclient -Djms_type=text -Djms_dest=dynamicQueues/JMSTextProxy -Djms_payload="24.34 100 IBM"
-ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/JMSPoxProxy -Djms_payload=MSFT
-ant jmsclient -Djms_type=binary -Djms_dest=dynamicQueues/JMSFileUploadProxy
-                     -Djms_payload=./../../repository/conf/sample/resources/mtom/asf-logo.gif</pre>
-
-<p>Note: The JMS client assumes the existence of a default ActiveMQ (4.1.0 or
-above) installation on the local machine.</p>
-
-<p></p>
-
-<h3>3. MTOM / SwA Client</h3>
-
-<p></p>
-
-<p>The MTOM / SwA client is able to send a binary image file as a MTOM or SwA
-optimized message, and receive the same file again through the response and
-save it as a temporary file. The 'opt_mode' can specify 'mtom' or 'swa'
-respectively for the above mentioned optimizations. Optionally the path to a
-custom file can be specified through the 'opt_file' property, and the
-destination address can be changed through the 'opt_url' property if
-required.</p>
-<pre>e.g. ant optimizeclient -Dopt_mode=[mtom | swa]</pre>
-
-<p></p>
-
-<h2>Starting the Sample Services</h2>
-
-<p></p>
-
-<p>The sample services ship with a pre-configured Axis2 server and
-demonstrates in-only and in-out SOAP/REST or POX messaging over http/s and
-JMS transports, using WS-Addressing, WS-Security and WS-Reliable Messaging
-and handling of binary content using MTOM and SwA.</p>
-
-<p>The sample services can be found in the samples/axis2Server/src directory
-and can be built and deployed using ant from within each service directory</p>
-<pre>user@host:/tmp/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService$ ant
-Buildfile: build.xml
-...
-build-service:
-   ....
-      [jar] Building jar: /tmp/synapse-1.1/samples/axis2Server/repository/services/SimpleStockQuoteService.aar
-
-BUILD SUCCESSFUL
-Total time: 3 seconds</pre>
-
-<p></p>
-
-<p>To start the Axis2 server, go to the samples/axis2Server directory and
-execute the axis2server.sh or axis2server.bat script. This starts the Axis2
-server with the http transport listener on port 9000 and https on 9002
-respectively. To enable JMS transport, you will need to setup and start a JMS
-provider. An ActiveMQ 4.0.1 or later JMS server on the local machine is
-supported by default, and can be easily enabled by uncommenting the JMS
-transport from the repository/conf/axis2.xml</p>
-
-<p></p>
-
-<h3>Sample services</h3>
-
-<h4>1. SimpleStockQuoteService</h4>
-
-<p>This service has four operations, getQuote (in-out), getFullQuote(in-out),
-getMarketActivity(in-out) and placeOrder (in-only). The getQuote operation
-will generate a sample stock quote for a given symbol. The getFullQuote
-operation will generate a history of stock quotes for the symbol for a number
-of days, and the getMarketActivity operation returns stock quotes for a list
-of given symbols. The placeOrder operation will accept a one way message for
-an order.</p>
-
-<h4>2. SecureStockQuoteService </h4>
-
-<p>This service is a clone of the SimpleStockQuoteService, but has
-WS-Security enabled and an attached security policy for signing and
-encryption of messages.</p>
-
-<h4>3. MTOMSwASampleService</h4>
-
-<p>This service has three operations uploadFileUsingMTOM(in-out),
-uploadFileUsingSwA(in-out) and oneWayUploadUsingMTOM(in-only) and
-demonstrates the use of MTOM and SwA. The uploadFileUsingMTOM and
-uploadFileUsingSwA operations accept a binary image from the SOAP request as
-MTOM and SwA, and returns this image back again as the response, while the
-oneWayUploadUsingMTOM saves the request message to disk.</p>
-
-<p></p>
-
-<h3>Starting Sample Synapse Configurations</h3>
-
-<p>To start Synapse with the sample default configuration, execute the
-synapse.bat or synapse.sh script found in the /bin directory. This starts up
-an instance of Synapse using the Synapse and Axis2 configuration files
-located in the repository/conf directory. The repository/conf/samples
-directory contains the sample configurations available as
-synapse_sample_&lt;n&gt;.xml files. To start a specific sample configuration
-of Synapse, use the '-sample &lt;n&gt;' switch as follows:</p>
-<pre>synapse.bat -sample &lt;n&gt;
-synapse.sh -sample &lt;n&gt;</pre>
-
-<p></p>
-
-<h2>Setting up the JMS Listener</h2>
-
-<p></p>
-
-<p>The samples used in this guide assumes the existence of a local ActiveMQ
-(4.1.0 or higher) installation properly installed and started up. You also
-need to copy the following client JAR files into the Synapse 'lib' folder to
-support ActiveMQ. These files are found in the 'lib' directory of the
-ActiveMQ installation.</p>
-<ul>
-  <li>activeio-core-3.0.0-incubator.jar</li>
-  <li>activemq-core-4.1.0-incubator.jar</li>
-  <li>geronimo-j2ee-management_1.0_spec-1.0.jar</li>
-</ul>
-
-<p>To enable the JMS transport, you need to uncomment the JMS transport
-listener configuration. If you are using a JMS provider other than ActiveMQ
-this configuration should be updated to reflect your environment. Once
-uncommented, the default configuration should be as follows. To enable JMS
-for synapse, the repository/conf/axis2.xml must be updated, while to enable
-JMS support for the sample Axis2 server the
-samples/axis2Server/repository/conf/axis2.xml file must be updated.</p>
-<pre>    &lt;!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)--&gt;
-    &lt;transportReceiver name="jms" class="org.apache.synapse.transport.jms.JMSListener"&gt;
-        &lt;parameter name="myTopicConnectionFactory" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;TopicConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-
-        &lt;parameter name="myQueueConnectionFactory" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-
-        &lt;parameter name="default" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-    &lt;/transportReceiver&gt;</pre>
-
-<p></p>
-
-<h2 id="mailsender">Setting up Mail Transport Sender</h2>
-
-<p>To enable the mail transport for samples, you need to uncomment the mail transport
-sender configuration in the repository/conf/axis2.xml. Uncomment the
-MailTransportSender sample configuration and make sure it points to a valid
-SMTP configuration for any actual scenarios.</p>
-<pre>    &lt;transportSender name="mailto" class="org.apache.synapse.transport.mail.MailTransportSender"&gt;
-        &lt;parameter name="mail.smtp.host"&gt;smtp.gmail.com&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.port"&gt;587&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.starttls.enable"&gt;true&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.auth"&gt;true&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.user"&gt;synapse.demo.0&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.password"&gt;mailpassword&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.from"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;
-    &lt;/transportSender&gt;</pre>
-
-<p></p>
-
-<h2 id="script">Configuring Synapse for Script Mediator Support</h2>
-
-<p></p>
-
-<p>The Synapse Script Mediator is a Synapse extension, and thus all
-prerequisites are not bundled by default with the Synapse distribution.
-Before you use some script mediators you may need to manually add the
-required jar files to the Synapse lib directory, and optionally perform other
-installation tasks as may be required by the individual scripting language.
-This is explained in the following sections.</p>
-
-<h4>JavaScript Support</h4>
-
-<p>The JavaScript/E4X support is enabled by default and comes ready-to-use
-with the Synapse distribution.</p>
-
-<h4>Ruby Support</h4>
-
-<p>For Ruby support you need to download the 'jruby-complete.jar' from the
-Maven repository for JRuby, and copy it into the 'lib' folder of Synapse .
-The JRuby JAR can be downloaded from <a
-href="http://repo1.maven.org/maven2/org/jruby/jruby-complete/">here</a>.</p>
-
-<p></p>
-
-<h2 id="derby">Setting up Derby database server</h2>
-
-<p>You can download Apache Derby distribution from <a
-href="http://db.apache.org/derby/">http://db.apache.org/derby/</a></p>
-<ol>
-  <li>Set up and start the Derby network server</li>
-  <li>Create and open a connection to the database using the Derby client
-    driver
-    <p>CONNECT
-    'jdbc:derby://localhost:1527/synapsedb;user=synapse;password=synapse;create=true';</p>
-  </li>
-  <li>Create a table using the following statement
-    <p>create table company(name varchar(10), id varchar(10), price
-    double);</p>
-  </li>
-  <li>Inserts some data using following statements
-    <p>insert into company values ('IBM','c1',0.0);</p>
-    <p>insert into company values ('SUN','c2',0.0);</p>
-    <p>insert into company values ('MSFT','c3',0.0);</p>
-  </li>
-</ol>
-
-<p>When using Derby, you need to add derby.jar, derbyclient.jar and
-derbynet.jar to the classpath. This can be done by putting the above three
-jars into the Synapse lib directory. For testing these samples Derby 10.3.2.1
-binary distribution was used.</p>
-
-<p>You can use any other database product instead of Derby. Then you have to
-change the database connection details accordingly. Also you have to copy the
-required database driver jars to the Synapse classpath.</p>
-
-<p></p>
-</body>
-</html>
\ No newline at end of file

Property changes on: java/modules/documentation/src/site/xdoc/1_1_1/samples_setup.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1_1/extending.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1_1/extending.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1_1/extending.xml	(nonexistent)
@@ -1,473 +0,0 @@
-<!--
-~ Licensed to the Apache Software Foundation (ASF) under one
-~ or more contributor license agreements. See the NOTICE file
-~ distributed with this work for additional information
-~ regarding copyright ownership. The ASF licenses this file
-~ to you under the Apache License, Version 2.0 (the
-~ "License"); you may not use this file except in compliance
-~ with the License. You may obtain a copy of the License at
-~
-~ http://www.apache.org/licenses/LICENSE-2.0
-~
-~ Unless required by applicable law or agreed to in writing,
-~ software distributed under the License is distributed on an
-~ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-~ KIND, either express or implied. See the License for the
-~ specific language governing permissions and limitations
-~ under the License.
--->
-<html>
-<head>
-  <meta content="text/html; charset=iso-8859-1" http-equiv="content-type"/>
-  <title>Extending Synapse</title>
-  <style type="text/css">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-</head>
-
-<body>
-<h1>Extending Synapse<br/>
-</h1>
-
-<h2>Writing custom Mediator implementations</h2>
-
-<p>The primary interface of the Synapse API is the MessageContext interface
-defined below. This essentially defines the per-message context passed
-through the chain of mediators, for each and every message received and
-processed by Synapse. Each message instance is wrapped within a
-MessageContext instance, and the message context is set with the references
-to the SynapseConfiguration and SynapseEnvironments. The SynapseConfiguration
-holds the global configuration model that defines mediation rules, local
-registry entries and other and configuration, while the environment gives
-access to the underlying SOAP implementation used - Axis2. A typical mediator
-would need to manipulate the MessageContext by referring to the
-SynapseConfiguration. However it is strongly recommended that the
-SynapseConfiguration is not updated by mediator instances as it is shared by
-all messages, and may be updated by Synapse administration or configuration
-modules. Mediator instances may store local message properties into the
-MessageContext for later retrieval by successive mediators.<br/>
-</p>
-
-<h4><a
-href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/MessageContext.java?view=markup">MessageContext
-Interface</a></h4>
-
-<p></p>
-<pre>package org.apache.synapse;
-
-import ...
-
-public interface MessageContext {
-
-    /**
-     * Get a reference to the current SynapseConfiguration
-     *
-     * @return the current synapse configuration
-     */
-    public SynapseConfiguration getConfiguration();
-
-    /**
-     * Set or replace the Synapse Configuration instance to be used. May be used to
-     * programatically change the configuration at runtime etc.
-     *
-     * @param cfg The new synapse configuration instance
-     */
-    public void setConfiguration(SynapseConfiguration cfg);
-
-    /**
-     * Returns a reference to the host Synapse Environment
-     * @return the Synapse Environment
-     */
-    public SynapseEnvironment getEnvironment();
-
-    /**
-     * Sets the SynapseEnvironment reference to this context
-     * @param se the reference to the Synapse Environment
-     */
-    public void setEnvironment(SynapseEnvironment se);
-
-    /**
-     * Get the value of a custom (local) property set on the message instance
-     * @param key key to look up property
-     * @return value for the given key
-     */
-    public Object getProperty(String key);
-
-    /**
-     * Set a custom (local) property with the given name on the message instance
-     * @param key key to be used
-     * @param value value to be saved
-     */
-    public void setProperty(String key, Object value);
-
-    /**
-     * Returns the Set of keys over the properties on this message context
-     * @return a Set of keys over message properties
-     */
-    public Set getPropertyKeySet();
-
-    /**
-     * Get the SOAP envelope of this message
-     * @return the SOAP envelope of the message
-     */
-    public SOAPEnvelope getEnvelope();
-
-    /**
-     * Sets the given envelope as the current SOAPEnvelope for this message
-     * @param envelope the envelope to be set
-     * @throws org.apache.axis2.AxisFault on exception
-     */
-    public void setEnvelope(SOAPEnvelope envelope) throws AxisFault;
-
-    /**
-     * SOAP message related getters and setters
-     */
-    public ....get/set()...
-
-}</pre>
-
-<p>The MessageContext interface is based on the Axis2 <a>MessageContext</a>
-interface, and uses the Axis2 <a>EndpointReference</a> and SOAPEnvelope
-classes/interfaces. The purpose of this interface is to capture a message as
-it flows through the system. As you will see the message payload is
-represented using the SOAP infoset. Binary messages can be embedded in the
-Envelope using MTOM or SwA attachments using the AXIOM object model.</p>
-
-<h4><a
-href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/Mediator.java?view=markup">Mediator
-interface</a></h4>
-
-<p>The second key interface for mediator writers is the Mediator
-interface:</p>
-<pre>package org.apache.synapse;
-
-import org.apache.synapse.MessageContext;
-
-/**
- * All Synapse mediators must implement this Mediator interface. As a message passes
- * through the synapse system, each mediator's mediate() method is invoked in the
- * sequence/order defined in the SynapseConfiguration.
- */
-public interface <span style="font-weight: bold;">Mediator </span>{
-
-    /**
-     * Invokes the mediator passing the current message for mediation. Each
-     * mediator performs its mediation action, and returns true if mediation
-     * should continue, or false if further mediation should be aborted.
-     *
-     * @param synCtx the current message for mediation
-     * @return true if further mediation should continue
-     */
-    public boolean mediate(MessageContext synCtx);
-
-    /**
-     * This is used for debugging purposes and exposes the type of the current
-     * mediator for logging and debugging purposes
-     * @return a String representation of the mediator type
-     */
-    public String getType();
-}</pre>
-
-<p>A mediator can read and/or modify the <a>SynapseMessage</a> in any
-suitable manner - adjusting the routing headers or changing the message body.
-If the mediate() method returns false, it signals to the Synapse processing
-model to stop further processing of the message. For example, if the mediator
-is a security agent it may decide that this message is dangerous and should
-not be processed further. This is generally the exception as mediators are
-usually designed to co-operate to process the message onwards.</p>
-
-<h3>Leaf and Node Mediators, List mediators and Filter mediators</h3>
-
-<p>Mediators may be Node mediators (i.e. these that can contain child
-mediators) or Leaf mediators (mediators that does not hold any other child
-mediators). A Node mediator� must implement the
-org.apache.synapse.api.ListMediator interface listed below, or extend from
-the org.apache.synapse.mediators.AbstractListMediator. </p>
-
-<h4><a
-href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/ListMediator.java?view=markup">The
-ListMediator interface</a></h4>
-<pre>package org.apache.synapse.mediators;
-
-import java.util.List;
-
-/**
-* The List mediator executes a given sequence/list of child mediators
-*/
-public interface ListMediator extends Mediator {
-    /**
-    * Appends the specified mediator to the end of this mediator's (children) list
-    * @param m the mediator to be added
-    * @return true (as per the general contract of the Collection.add method)
-    */
-    public boolean addChild(Mediator m);
-
-    /**
-    * Appends all of the mediators in the specified collection to the end of this mediator's (children)
-    * list, in the order that they are returned by the specified collection's iterator
-    * @param c the list of mediators to be added
-    * @return true if this list changed as a result of the call
-    */
-    public boolean addAll(List c);
-
-    /**
-    * Returns the mediator at the specified position
-    * @param pos index of mediator to return
-    * @return the mediator at the specified position in this list
-    */
-    public Mediator getChild(int pos);
-
-    /**
-    * Removes the first occurrence in this list of the specified mediator
-    * @param m mediator to be removed from this list, if present
-    * @return true if this list contained the specified mediator
-    */
-    public boolean removeChild(Mediator m);
-
-    /**
-    * Removes the mediator at the specified position in this list
-    * @param pos the index of the mediator to remove
-    * @return the mediator previously at the specified position
-    */
-    public Mediator removeChild(int pos);
-
-    /**
-    * Return the list of mediators of this List mediator instance
-    * @return the child/sub mediator list
-    */
-    public List getList();
-}</pre>
-
-<p>A ListMediator implementation should call super.mediate(synCtx) to process
-its sub mediator sequence. A FilterMediator is a ListMediator which executes
-its sequence of sub mediators on successful outcome of a test condition. The
-Mediator instance which performs filtering should implement the
-FilterMediator interface. </p>
-
-<h4><a
-href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/FilterMediator.java?view=markup">FilterMediator
-interface</a></h4>
-<pre>package org.apache.synapse.mediators;
-
-import org.apache.synapse.MessageContext;
-
-/**
- * The filter mediator is a list mediator, which executes the given (sub) list of mediators
- * if the specified condition is satisfied
- *
- * @see FilterMediator#test(org.apache.synapse.MessageContext)
- */
-public interface <span style="font-weight: bold;">FilterMediator </span>extends ListMediator {
-
-    /**
-     * Should return true if the sub/child mediators should execute. i.e. if the filter
-     * condition is satisfied
-     * @param synCtx
-     * @return true if the configured filter condition evaluates to true
-     */
-    public boolean test(MessageContext synCtx);
-}</pre>
-
-<h2>Writing custom Configuration implementations for mediators</h2>
-
-<p>You may write your own custom configurator for the Mediator implementation
-you write without relying on the Class mediator or Spring extension for its
-initialization. You could thus write a MediatorFactory implementation which
-defines how to digest a custom XML configuration element to be used to create
-and configure the custom mediator instance. A MediatorSerializer
-implementation defines how a configuration should be serialized back into an
-XML configuration. The custom MediatorFactory &amp; MediatorSerializer
-implementations and the mediator class/es must be bundled in a JAR file
-conforming to the J2SE Service Provider model (See the description for
-Extensions below for more details and examples) and placed into the
-SYNAPSE_HOME/lib folder, so that the Synapse runtime could find and load the
-definition. Essentially this means that a custom JAR file must bundle your
-class implementing the Mediator interface, and the MediatorFactory
-implementation class and contain two text files named
-"org.apache.synapse.config.xml.MediatorFactory" and
-"org.apache.synapse.config.xml.MediatorSerializer" which will contain the
-fully qualified name(s) of your MediatorFactory and MediatorSerializer
-implementation classes. You should also place any dependency JARs into the
-same lib folder so that the correct classpath references could be made. The
-MediatorFactory interface listing is given below, which you should implement,
-and its getTagQName() method must define the fully qualified element of
-interest for custom configuration. The Synapse initialization will call back
-to this MediatorFactory instance through the createMediator(OMElement elem)
-method passing in this XML element, so that an instance of the mediator could
-be created utilizing the custom XML specification and returned. See the
-ValidateMediator and the ValidateMediatorFactory classes under
-modules/extensions in the Synapse source distribution for examples. </p>
-
-<h4><a
-href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorFactory.java?view=markup">The
-MediatorFactory interface</a></h4>
-<pre>package org.apache.synapse.config.xml;
-
-import ...
-
-/**
- * A mediator factory capable of creating an instance of a mediator through a given
- * XML should implement this interface
- */
-public interface MediatorFactory {
-    /**
-     * Creates an instance of the mediator using the OMElement
-     * @param elem
-     * @return the created mediator
-     */
-    public Mediator createMediator(OMElement elem);
-
-    /**
-     * The QName of this mediator element in the XML config
-     * @return QName of the mediator element
-     */
-    public QName getTagQName();
-}</pre>
-
-<p></p>
-
-<h4><a
-href="http://svn.apache.org/viewvc/webservices/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorSerializer.java?view=markup">The
-MediatorSerializer interface</a></h4>
-<pre>package org.apache.synapse.config.xml;
-
-import ...
-
-/**
- * Interface which should be implemented by mediator serializers. Does the
- * reverse of the MediatorFactory
- */
-public interface MediatorSerializer {
-
-    /**
-     * Return the XML representation of this mediator
-     * @param m mediator to be serialized
-     * @param parent the OMElement to which the serialization should be attached
-     * @return the serialized mediator XML
-     */
-    public OMElement serializeMediator(OMElement parent, Mediator m);
-
-    /**
-     * Return the class name of the mediator which can be serialized
-     * @return the class name
-     */
-    public String getMediatorClassName();
-}</pre>
-
-<h2>Configuring mediators</h2>
-
-<p>Mediators could access the Synapse registry to load resources and
-configure the local behaviour. Refer to the Spring mediator and Script
-mediator implementations for examples on how this could be achieved. </p>
-
-<h4>Loading of Extensions by the Synapse runtime</h4>
-
-<p>Synapse loads available extensions from the runtime classpath using the <a
-href="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service%20Provider">J2SE
-Service Provider model</a>. This essentially iterates over the available JAR
-files, for� a META-INF/services directory within each file,� and looks for a
-text file with the name org.apache.synapse.config.xml.MediatorFactory which
-contains a list of fully qualified classname that implement the above
-interface, listing each class in a separate line. e.g. The built-in
-synapse-extensions.jar contains the following structure</p>
-<pre>synapse-extensions.jar
-    /META-INF/services
-        org.apache.synapse.config.xml.MediatorFactory
-        org.apache.synapse.config.xml.MediatorSerializer
-    /... the implementation classes as usual...</pre>
-</body>
-</html>
-
-

Property changes on: java/modules/documentation/src/site/xdoc/1_1_1/extending.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_1_1/configuration.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_1_1/configuration.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_1_1/configuration.xml	(nonexistent)
@@ -1,1540 +0,0 @@
-<!--
-~ Licensed to the Apache Software Foundation (ASF) under one
-~ or more contributor license agreements. See the NOTICE file
-~ distributed with this work for additional information
-~ regarding copyright ownership. The ASF licenses this file
-~ to you under the Apache License, Version 2.0 (the
-~ "License"); you may not use this file except in compliance
-~ with the License. You may obtain a copy of the License at
-~
-~ http://www.apache.org/licenses/LICENSE-2.0
-~
-~ Unless required by applicable law or agreed to in writing,
-~ software distributed under the License is distributed on an
-~ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-~ KIND, either express or implied. See the License for the
-~ specific language governing permissions and limitations
-~ under the License.
--->
-<html>
-<head>
-  <meta content="text/html; charset=iso-8859-1" http-equiv="content-type"/>
-  <title>Synapse Configuration Language</title>
-  <style type="text/css">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }
-    .data-table{
-        font-family:Verdana,Arial,Helvetica,sans-serif;
-        font-size:11px;
-        border:0px;
-        margin:0px;
-        border:solid 1px #cdcdcd;
-    }
-    .data-table th{
-        background-color:#eeeeee;
-        border-bottom:solid 1px #8d8d8d;
-        padding-top:5px;
-        padding-left:3px;
-        text-align:left;
-    }
-    .data-table td{
-        padding-top:4px;
-        padding-left:3px;
-        border-bottom:solid 1px #e1e1e1;
-    }</style>
-</head>
-
-<body>
-
-<table border="0" style="width: 100%">
-  <caption></caption>
-  <tbody>
-    <tr>
-      <td><h1>Apache Synapse ESB - Configuration</h1>
-      </td>
-      <td><img alt="Synapse logo" src="../images/synapse-logo-web2.png"
-        width="197" height="82"/></td>
-    </tr>
-  </tbody>
-</table>
-
-<h3>Overview</h3>
-
-<p>An Apache Synapse Enterprise Service Bus (ESB) engine is driven off a set
-of simple text/xml configuration files. This allows the configuration to be
-easily hand edited, backed up from the file system, or even included into
-version control for easier management and control (e.g. moving a
-configuration from development, through QA, staging and into production). The
-configuration files that drives the Synapse ESB are as follows:</p>
-<ul>
-  <li>The Synapse configuration file - synapse.xml</li>
-  <li>The underlying Axis2 engine configuration file - axis2.xml</li>
-  <li>Resources referenced from the Registry</li>
-</ul>
-
-<p>While the axis2.xml configures the underlying transport and Web services
-support, the synapse.xml configures the mediation rules and configuration for
-the ESB. While any changes performed on the axis2.xml requires a restart
-(e.g. for enabling a transport such as JMS), the synapse.xml could be made to
-reference different configuration elements off a set of multiple files - that
-are served through the built-in Registry. When using the Registry to hold
-pieces of the configuration, certain elements such as endpoint definitions,
-sequences and local entries could be updated dynamically while the Synapse
-ESB executes, the the Registry could trigger a re-load as configured. </p>
-
-<h2>The Synapse Configuration (synapse.xml)</h2>
-
-<p>As the diagram below depicts, the Synapse configuration defines the Proxy
-services, Endpoints, Sequences and Startup jobs managed by the Synapse ESB.
-It also defines the interface to the Registry/Repository being used by the
-engine. Typically the Synapse ESB is deployed between the actual client and a
-backend service implementation to mediate the message flow in between. Thus
-the Synapse ESB can accept a message on behalf of the actual service, perform
-authentication, validation, transformation, logging, routing based on the
-content etc. and then decide the destination target endpoint for the message
-and direct it to an actual service implementation. The Synapse ESB can also
-detect timeouts, transport failures during communication or introduce load
-balancing, throttling or caching where necessary. For fault scenarios such as
-authentication failure, or schema validation failure, the Synapse ESB can be
-configured to return a custom message or a fault to the requesting client
-without forwarding the request to the actual service.</p>
-
-<p><img alt="Synapse message flow" src="../images/synapse-flow.png" width="400"
-height="300"/></p>
-
-<p></p>
-
-<p>The Synapse ESB can operate in two modes:</p>
-
-<h3><a href="#service_mediation">Service mediation</a> / <a
-href="#proxy">Proxy services</a></h3>
-
-<p>In Service mediation, the Synapse ESB exposes a service endpoint on the
-ESB, that accepts messages from clients. Typically these services acts as
-proxies for existing (external) services, and the role of Synapse would be to
-"mediate" these messages before they are proxied to the actual service. In
-this mode, Synapse could expose a service already available in one transport,
-over a different transport; or expose a service that uses one schema or WSDL
-as a service that uses a different schema or WSDL etc. A Proxy service could
-define the transports over which the service is exposed, and point to the
-mediation sequences that should be used to process request and response
-messages through the proxy service. A proxy service maybe a SOAP or REST/POX
-service over http/s or SOAP, POX, Plain Text or Binary / Legacy service for
-other transports such as JMS and VFS file systems - e.g. CSV content being
-the payload</p>
-
-<h3><a name="#message_mediation">Message mediation</a></h3>
-
-<p>In Message mediation, Synapse can act as a transparent proxy for clients -
-if they are directed to point to the Synapse ESB as a http proxy. This way,
-Synapse could be configured to filter all messages on a network for logging,
-access control etc, and could "mediate" messages without the explicit
-knowledge of the original client. If Synapse receives a message that is not
-accepted by any proxy service, this message is handled through message
-mediation as well. Message mediation always processes messages according to
-the mediation sequence defined as "main".</p>
-
-<h2>Concepts and configuration elements overview</h2>
-
-<h3><a href="#mediator">Mediators</a> and <a href="#sequence">Mediation
-Sequences</a></h3>
-
-<p>The Synapse ESB defines a 'mediator' as a component that is performs some
-mediation action on a message during the process flow. Thus a mediator gets
-full access to a message at the point where it is defined to gain control,
-and could inspect the message, modify it or take an external action depending
-on some attributes or values of the current message. A mediation sequence,
-commonly called a 'sequence' is a list of such mediators. A sequence may be
-named for re-use, or defined in-line or anonymously within a configuration.
-Sequences may be defined within the synapse.xml configuration or within the
-Registry. Writing a custom mediator in Java is easy and the supplementary
-documentation provides more details on this. The 'Class' and 'POJO (command)"
-mediators allows one to plugin a Java class easily into the Synapse engine
-with minimal effort. In addition, the Script mediator allows one to provide
-an Apache BSF script (e.g. Javascript, Ruby, Groovy etc) for mediation.</p>
-
-<p>A Synapse configuration holds two special sequences named as "main" and
-"fault". These may be defined within the synapse.xml, or externally via the
-Registry. If either is not found, a suitable default is generated at runtime
-by the ESB. The default "main" sequence will simple send a message without
-mediation, while the default "fault" sequence would log the message including
-the payload and any error/exception encountered and stop further processing.
-The 'fault' sequence executes whenever Synapse itself encounters an error
-while processing a message - or when a fault handler has not been defined to
-handle exceptions. A sequence can assign another named sequence as its
-"fault" handler sequence, and control branches to the fault handler if an
-error is encountered during the execution of the initial sequence.</p>
-
-<h3><a href="#endpoint">Endpoints</a></h3>
-
-<p>An Endpoint definition within Synapse defines an external service endpoint
-and any attributes or semantics that should be followed when communicating
-with that endpoint. An endpoint definition can be named for re-use, or
-defined in-line or anonymously within a configuration. Typically an endpoint
-would be based on a service Address or a WSDL. Additionally the Synapse ESB
-supports Failover and Load-balance endpoints - which are defined over a group
-of endpoints. Endpoints may be defined within the synapse.xml configuration
-or within the Registry.</p>
-
-<h3><a href="#task">Tasks</a></h3>
-
-<p>A Task is a custom Java class that implements the
-org.apache.synapse.startup.Task interface that defines a single "public void
-execute()" method. Such a task can be scheduled and managed via the Synapse
-ESB. The scheduling information for a task can be specified in the cron
-format or a simple format by the user. A task may also be specified as a
-one-time task where required, and can be used to trigger a callout or inject
-a message into the Synapse ESB.</p>
-
-<h3><a href="#registry">Remote Registry</a> and <a name="Local" id="Local"
-href="#localEntry">Local Registry (Local Entries)</a></h3>
-
-<p>A Synapse configuration can refer to an external Registry / Repository for
-resources used such as WSDL's, Schemas, Scripts, XSLT or XQuery
-transformations etc. One or more remote registries may be hidden or merged
-behind a local Registry interface defined to a Synapse configuration.
-Resources from an external registry are looked up using "keys" - which are
-known to the external registry. The Synapse ESB ships with a simple URL based
-registry implementation that uses the file system for storage of resources,
-and URL's or fragments as "keys". </p>
-
-<p>A Registry may define a duration for which a resource served may be cached
-by the Synapse runtime. If such a duration is specified, the Synapse ESB is
-capable of refreshing the resource after cache expiry to support dynamic
-re-loading of resource at runtime. Optionally, a configuration could define
-certain "keys" to map to locally defined entities. These entities may refer
-to a source URL or file, or defined as in-line XML or text within the
-configuration itself. If a Registry contains a resource whose "key" matches
-the key of a locally defined entry, the local entry shadows the resource
-available in the Registry. Thus it is possible to override Registry resources
-locally from within a configuration. To integrate Synapse with a custom / new
-Registry or repository, one needs to implement the
-org.apache.synapse.registry.Registry interface to suit the actual Registry
-being used.</p>
-
-<h2>The Axis2 Configuration (axis2.xml)</h2>
-
-<p>The axis2.xml file configures the underlying Axis2 web services engine for
-the Synapse ESB. The axis2.xml thus defines the transports enabled, and other
-configuration parameters associated. A change to the axis2 configuration
-requires a hard re-start of the Synapse ESB. By default the non-blocking
-http/s and the Apache VFS file system based transport are enabled for
-listening of messages, while the non-blocking http/s, VFS and JMS transports
-are enabled for sending messages out. Sample configurations to
-enable/configure the other transports are provided within the default
-axis2.xml file, and can be easily uncommented and modified. The sample JMS
-configuration shipped is for a default ActiveMQ 4.1.x installation.</p>
-
-<h2>The contents of the Synapse.xml configuration</h2>
-
-<p>A Synapse configuration looks like the following at the top level:</p>
-<pre> &lt;definitions&gt;
-   &lt;<a href="#registry">registry</a> provider="string"&gt;...&lt;/registry&gt;?
-   &lt;<a href="#localEntry">localEntry</a> key="string"&gt;...&lt;/localEntry&gt;?
-   &lt;<a href="#sequence">sequence</a> name="string"&gt;...&lt;/sequence&gt;?
-   &lt;<a href="#endpoint">endpoint</a> name="string"&gt;...&lt;/endpoint&gt;?
-   &lt;<a href="#proxy">proxy</a> name="string" ...&gt;...&lt;/proxy&gt;?
-   &lt;<a href="#task">task</a> name="string" ...&gt;...&lt;/task&gt;?
-   <a href="#mediator">mediator</a>*
- &lt;/definitions&gt;</pre>
-
-<p></p>
-
-<p>The &lt;definitions&gt; elements in a synapse.xml holds the Synapse ESB
-configuration. While the &lt;registry&gt;, &lt;sequence&gt;,
-&lt;endpoint&gt;, &lt;proxy&gt;, &lt;task&gt; and &lt;localEntry&gt; elements
-refer to those discussed above, the built-in mediator elements names are
-already registered with the Synapse engine. Custom mediators written by a
-user may be included into the library directory, and would be dynamically
-picked up in a Sun JDK environment. A list of mediators found directly as
-children under the &lt;definitions&gt; element would be treated as the "main"
-sequence, if a named sequence with the name "main" cannot be found.</p>
-
-<h2><a name="registry1" id="registry">Registry</a></h2>
-
-<p>The &lt;registry&gt; element is used to define the remote registry used by
-the configuration. The registry provider specifies an implementation class
-for the registry implementation used, and optionally a number of
-configuration parameters as may be required for the configuration of the
-connection to the registry.</p>
-<pre> &lt;registry provider="string"/&gt;
-   &lt;parameter name="string"&gt;text | xml&lt;/parameter&gt;*
- &lt;/registry&gt;</pre>
-
-<p>Registry entries loaded from a remote registry may be cached as dictated
-by the registry, and reloaded after the cache periods expires if a newer
-version is found. Hence it is possible to define configuration elements such
-as (dynamic) sequences and endpoints, as well as resources such as XSLT's,
-Scripts or XSDs off the registry, and update the configuration as these are
-allowed to dynamically change over time.</p>
-
-<p>Synapse ships with a built-in URL based registry implementation called the
-"SimpleURLRegistry" and this can be configured as follows:</p>
-<pre>e.g.
-&lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-  &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-  &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-&lt;/registry&gt;</pre>
-
-<p>The "root" parameter specifies the root URL of the Registry for loaded
-resources. The SimpleURLRegistry keys are path fragments, that when combined
-with the root prefix would form the full URL for the referenced resource. The
-"cachableDuration" parameter specifies the number of milliseconds for which
-resources loaded from the Registry should be cached. More advanced registry
-implementations allows different cachable durations to be specified for
-different resources, or mark some resources as never expires. (e.g. Check the
-WSO2 ESB implementation built over the Apache Synapse ESB core)</p>
-
-<p></p>
-
-<h3><a name="localEntry">Local Registry / Local Entry</a></h3>
-
-<p>The &lt;localEntry&gt; element is used to declare registry entries that
-are local to the Synapse instance, as shown below</p>
-<pre>  &lt;localEntry key="string" [src="url"]&gt;text | xml&lt;/localEntry&gt;</pre>
-
-<p>These entries are top level entries which are globally visible within the
-entire system. Values of these entries can be retrieved via the extension
-XPath function "synapse:get-property(prop-name)" and the keys of these
-entries could be specified wherever a registry key is expected within the
-configuration.</p>
-
-<p>An entry can be static text specified as inline text or static XML
-specified as an inline XML fragment or specified as a URL (using the src
-attribute). A local entry shadows any entry with the same name from a remote
-Registry.</p>
-<pre>e.g.
-&lt;localEntry key="version"&gt;0.1&lt;/localEntry&gt;
-&lt;localEntry key="validate_schema"&gt;
-        &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
-         ...
-        &lt;/xs:schema&gt;
-    &lt;/localEntry&gt;
-&lt;localEntry key="xslt-key-req" src="file:repository/conf/sample/resources/transform/transform.xslt"/&gt;</pre>
-
-<h2><a name="sequence">Sequences</a></h2>
-
-<p>A &lt;sequence&gt; element is used to define a sequence of mediators that
-can be invoked later by name. The sequences named "main" and "fault" has
-special significance in a Synapse configuration. The "main" sequence handles
-any message that is accepted for '<a href="#message_mediation">Message
-Mediation</a><a>', and the "fault" sequence is invoked if Synapse encounters
-a fault, and a custom fault handler is not specified for the sequence via its
-"onError" attribute. If the "main" or "fault" sequences are not defined
-locally or not found in the Registry, the Synapse ESB defines suitable
-defaults at initialization.</a></p>
-
-<p>A Dynamic Sequence may be defined by specifying a key reference to a
-registry entry. As the remote registry entry changes, the sequence will
-dynamically be updated according to the specified cache duration and
-expiration. If tracing is enabled on a sequence, all messages being processed
-through the sequence would write tracing information through each mediation
-step to the trace.log file configured via the log4j.properties configuration.
-Setting the trace log level to TRACE would additionally dump the message and
-detailed trace information at each mediation step. A tracing enabled sequence
-propagates this setting to invoked sub-sequences.</p>
-<pre> &lt;sequence name="string" [onError="string"] [key="string"] [trace="enable"]&gt;
-   mediator*
- &lt;/sequence&gt;</pre>
-<pre>e.g.
-&lt;sequence name="main" onError="errorHandler"&gt;
-  .. &lt;!-- a 'main' sequence that invokes the sequence named 'errorHandler' on a fault --&gt; ..
-&lt;/sequence&gt;</pre>
-<pre>&lt;sequence key="sequence/dynamic_seq_1.xml"/&gt;
-where "sequence/dynamic_seq_1.xml" refers to the following sequence definition from the registry:
-
-&lt;sequence name="dynamic_sequence" xmlns="http://ws.apache.org/ns/synapse"&gt;
-  ..
-&lt;/sequence&gt;</pre>
-
-<h2><a name="endpoint">Endpoints</a></h2>
-
-<p>An &lt;endpoint&gt; element defines a destination for an outgoing message.
-An endpoint may be specified as an address endpoint, WSDL based endpoint, a
-load balancing endpoint or a fail-over endpoint as follows:</p>
-<pre>&lt;endpoint [name="string"] [key="string"] [trace="enable"]&gt;
-  <a href="#address-endpoint">address-endpoint</a> | <a href="#wsdl-endpoint">wsdl-endpoint</a> | <a href="#load-balanced-endpoint">load-balanced-endpoint</a> | <a href="#fail-over-endpoint">fail-over-endpoint</a>
-&lt;/endpoint&gt; </pre>
-
-<p>All above endpoint types can have a name attribute, and such named
-endpoints can be reffered by other endpoints, through the key attribute. For
-example if there is an endpoint named as "foo", the following endpoint can be
-used in any place, where "foo" has to be used.</p>
-<pre>&lt;endpoint key="foo"/&gt;</pre>
-
-<p>The "trace" attribute turns on detailed trace information for messages
-being sent to the endpoint. These are available in the trace.log configured
-via the log4j.properties file. Setting the trace log level to TRACE will dump
-detailed trace information including message payloads. </p>
-
-<h4><a name="address-endpoint">Address Endpoint</a></h4>
-
-<p>Address endpoint is an endpoint defined by specifying the EPR and other
-attributes of the endpoint directly in the configuration.The 'uri' attribute
-of the address element contains the EPR of the target endpoint. Message
-format for the endpoint and the method to optimize attachments can be
-specified in the format and optimize attributes respectively. Reliable
-messaging and security policies for the endpoint can be specified in the
-policy attribute of the enableRM and enableSec elements respectively.
-WS-Addressing can be engaged for the messaging going to the endpoint by the
-enableAddressing element. suspendDurationOnFailure attribute specifies the
-time duration in seconds to suspend this endpoint, if it is detected as
-failed. If this attribute is not specified, endpoint will never be recovered
-after a failure.</p>
-
-<p>Address endpoints can timeout if responses fail to arrive at Synapse by a
-predefined timeout-duration specified in seconds. The timeout action
-specifies whether to discard responses that arrives late, or to trigger a
-fault. Synapse has a periodic timeout handler that triggers itself at each 15
-second interval. Thus endpoint timeouts will have a +/- error on actual
-trigger time. Though this can be minimized by setting a System property
-"synapse.timeout_handler_interval" to a millisecond duration below the
-desired endpoint timeout, care must be taken as a lesser value may have a
-higher overhead on the system. </p>
-
-<p>An endpoint that fails may be suspended for a specified duration after
-such a failure, during which new messages will not be processed through the
-endpoint. The 'suspendDurationOnFailure' could specify an optional value in
-seconds for which this endpoint should be suspended.</p>
-
-<p>QoS aspects such as WS-RM and WS-Security and WS-Addressing may be enabled
-on messages sent to an endpoint using the enableRM, enableSec and
-enableAddressing elements. Optionally, the WS-RM and WS-Security policies
-could be specified using the 'policy' attributes.</p>
-<pre>&lt;address uri="endpoint-address" [format="soap11|soap12|pox|get"] [optimize="mtom|swa"]&gt;
-  &lt;enableRM [policy="key"]/&gt;?
-  &lt;enableSec [policy="key"]/&gt;?
-  &lt;enableAddressing/&gt;?
-  &lt;suspendDurationOnFailure&gt;suspend-duration&lt;/suspendDurationOnFailure&gt;?
-  &lt;timeout&gt;
-    &lt;duration&gt;timeout-duration&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-&lt;/address&gt;</pre>
-
-<p>Following are some sample address URI definitions.</p>
-<pre>e.g.
-HTTP   http://localhost:9000/soap/SimpleStockQuoteService
-JMS     jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;
-              java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;
-              java.naming.provider.url=tcp://localhost:61616&amp;transport.jms.DestinationType=topic
-Mail    mailto:guest@host
-File     vfs:file:///home/user/directory
-           vfs:file:///home/user/file
-           vfs:ftp://guest:guest@localhost/directory?vfs.passive=true</pre>
-
-<h4><a name="wsdl-endpoint">WSDL Endpoint</a></h4>
-
-<p>WSDL endpoint is an endpoint definition based on a specified WSDL
-document. The WSDL document can be specified either as a URI or as an inlined
-definition within the configuration. The service and port name containing the
-target EPR has to be specified with the 'service' and 'port' (or 'endpoint')
-attributes respectively. enableRM, enableSec, enableAddressing,
-suspendDurationOnFailure and timeout elements are same as for an Address
-endpoint.</p>
-<pre>&lt;wsdl [uri="wsdl-uri"] service="qname" port/endpoint="qname"&gt;
-  &lt;wsdl:definition&gt;...&lt;/wsdl:definition&gt;?
-  &lt;wsdl20:description&gt;...&lt;/wsdl20:description&gt;?
-  &lt;enableRM [policy="key"]/&gt;?
-  &lt;enableSec [policy="key"]/&gt;?
-  &lt;enableAddressing/&gt;?
-  &lt;suspendDurationOnFailure&gt;suspend-duration&lt;/suspendDurationOnFailure&gt;?
-  &lt;timeout&gt;
-    &lt;duration&gt;timeout-duration&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-&lt;/wsdl&gt;</pre>
-
-<h4><a name="load-balanced-endpoint">Load balanced Endpoint</a></h4>
-
-<p>A Load balanced endpoint distributes the messages (load) arriving at it
-among a set of listed endpoints by evaluating the load balancing policy and
-any other relevant parameters. Policy attribute of the load balance element
-specifies the load balance policy (algorithm) to be used for selecting the
-target endpoint. Currently only the roundRobin policy is supported. failover
-attribute determines if the next endpoint should be selected once the
-currently selected endpoint has failed, and defaults to true. The set of
-endpoints among which the load is distributed can be listed under the
-'loadBalance' element. Those endpoints can belong to any endpoint type
-mentioned in this document. For example, failover endpoints can be listed
-inside the load balance endpoint to load balance between failover groups
-etc.</p>
-
-<p>The optional 'session' element makes the endpoint a session affinity based
-load balancing endpoint. If it is specified, sessions are bound to endpoints
-in the first message and all successive messages for those sessions are
-directed to their associated endpoints. Only http sessions are currently
-supported, and identifies sessions based on http cookies. The 'failover'
-attribute mentioned above is not applicable for session affinity based
-endpoints and it is always considered as set to false. If it is required to
-have failover behavior in session affinity based load balance endpoints, list
-failover endpoints as the target endpoints.</p>
-<pre>&lt;session type="http"/&gt;?
-&lt;loadBalance [policy="roundRobin"] [failover="true|false"]&gt;
-  &lt;endpoint .../&gt;+
-&lt;/loadBalance&gt;</pre>
-
-<h4><a name="fail-over-endpoint">Failover Endpoint</a></h4>
-
-<p>Failover endpoints send messages to the listed endpoints with the
-following failover behavior. At the start, the first listed endpoint is
-selected as the primary and all other endpoints are treated as backups.
-Incoming messages are always sent only to the primary endpoint. If the
-primary endpoint fails, next active endpoint is selected as the primary and
-failed endpoint is marked as inactive. Thus it sends messages successfully as
-long as there is at least one active endpoint among the listed endpoints.</p>
-<pre>&lt;failover&gt;
-  &lt;endpoint .../&gt;+
-&lt;/failover&gt;</pre>
-
-<h2><a name="proxy">Proxy service</a></h2>
-
-<p>A &lt;proxy&gt; element is used to define a Synapse Proxy service.</p>
-<pre> &lt;proxy name="string" [transports="(http |https |jms |.. )+|all"] [pinnedServers="(serverName )+"]&gt;
-   &lt;description&gt;...&lt;/description&gt;?
-   &lt;target [inSequence="name"] [outSequence="name"] [faultSequence="name"] [endpoint="name"]&gt;
-      &lt;inSequence&gt;...&lt;/inSequence&gt;?
-      &lt;outSequence&gt;...&lt;/outSequence&gt;?
-      &lt;faultSequence&gt;...&lt;/faultSequence&gt;?
-      &lt;endpoint&gt;...&lt;/endpoint&gt;?
-   &lt;/target&gt;?
-   &lt;publishWSDL key="string" uri="string"&gt;
-      &lt;description&gt;...&lt;/description&gt; | &lt;definitions&gt;...&lt;/definitions&gt;
-   &lt;/publishWSDL&gt;?
-   &lt;enableSec/&gt;?
-   &lt;enableRM/&gt;?
-   &lt;policy key="string"&gt;...&lt;/policy&gt;?       // optional service level policies such as (e.g. WS-Security and/or WS-RM policies)
-   &lt;parameter name="string"&gt;                 // optional service parameters such as (e.g. transport.jms.ConnectionFactory)
-      string | xml
-   &lt;/parameter&gt;
- &lt;/proxy&gt;</pre>
-
-<p>A proxy service is created and exposed on the specified transports through
-the underlying Axis2 engine, exposing service EPR's as per the standard Axis2
-conventions - based on the service name. (Note: that currently Axis2 does not
-allow custom URI's to be set for services on some transports such as http/s)
-The Proxy service could be exposed over all enabled Axis2 transports such as
-http, https, JMS, Mail and File etc. or on a subset of these as specified
-with the optional 'transports' attribute.</p>
-
-<p>You can give a list of synapse server names where this proxy service
-should be deployed using 'pinnedServers' attribute. It takes the server names
-separated by comma or space character. If there is no pinned server list then
-proxy service will be started in all server instances. If a pinned server
-names list is given it will only start in the given named Synapse server
-instances. The Synapse server name picked up from the system property
-'SynapseServerName', failing which the hostname of the machine would be used
-or default to 'localhost'. You can give a name to a Synapse server instance
-as ./synapse.sh -DSynapseServerName=&lt;ServerName&gt; or by editing the
-wrapper.conf where Synapse is started as a service.</p>
-
-<p>Each service could define the target for received messages as a named
-sequence or a direct endpoint. Target inSequence or endpoint is required for
-the proxy configuration, and a target outSequence defines how responses
-should be handled. Any supplied WS-Policies would apply as service level
-policies, and any service parameters could be passed into the proxy services'
-AxisService instance using the parameter elements (e.g. the JMS destination
-etc). If the proxy service should enable WS-Reliable Messaging or Security,
-the appropriate modules could be engaged, and specified service level
-policies will apply.</p>
-
-<p>A Dynamic Proxy may be defined by specifying the properties of the proxy
-as dynamic entries by refering them with the key. (For example one could
-specify the inSequence or endpoint with a remote key, without defining it in
-the local configuration) As the remote registry entry changes, the properties
-of the proxy will dynamically be updated accordingly. (Note: proxy service
-definition itself can not be specified to be dynamic; i.e &lt;proxy
-key="string"/&gt; is wrong)</p>
-
-<p></p>
-
-<p>You can give the following as service parameters:</p>
-
-<table border="0" cellpadding="0" cellspacing="0" style="width: 100%"
-class="data-table">
-  <caption></caption>
-  <tbody>
-    <tr>
-      <th>Parameter</th>
-      <th>Value</th>
-      <th>Default</th>
-      <th>Description</th>
-    </tr>
-    <tr>
-      <td>useOriginalwsdl</td>
-      <td>true|false</td>
-      <td>false</td>
-      <td>Use the given WSDL instead of generating the WSDL.</td>
-    </tr>
-    <tr>
-      <td>modifyUserWSDLPortAddress</td>
-      <td>true|false</td>
-      <td>true</td>
-      <td>(Effective only with useOriginalwsdl=true) If true (default) modify
-        the port addresses to current host.</td>
-    </tr>
-  </tbody>
-</table>
-
-<p></p>
-
-<p>Transport specific parameters that may be set as service parameters:</p>
-
-<table border="0" cellpadding="0" cellspacing="0" style="width: 100%"
-class="data-table">
-  <caption></caption>
-  <tbody>
-    <tr>
-      <th>Transport</th>
-      <th>Require</th>
-      <th>Parameter</th>
-      <th>Description</th>
-    </tr>
-    <tr>
-      <td>JMS</td>
-      <td>Optional</td>
-      <td>transport.jms.ConnectionFactory</td>
-      <td>The JMS connection factory definition (from axis2.xml) to be used
-        to listen for messages for this service</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.jms.Destination</td>
-      <td>The JMS destination name (Defaults to the service name)</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.jms.DestinationType</td>
-      <td>The JMS destination type. Accept values 'queue' or 'topic'</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.jms.ReplyDestination</td>
-      <td>The destination where a reply will be posted</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td></td>
-      <td></td>
-      <td></td>
-    </tr>
-    <tr>
-      <td>VFS</td>
-      <td>Required</td>
-      <td>transport.vfs.FileURI</td>
-      <td>The primary File (or Directory) URI in the vfs* transport format,
-        for this service</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Required</td>
-      <td>transport.vfs.ContentType</td>
-      <td>The content type for messages for this service</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.FileNamePattern</td>
-      <td>A file name regex pattern to match files against a directory
-        specified by the FileURI</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.PollInterval</td>
-      <td>The poll interval (in seconds)</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.ActionAfterProcess</td>
-      <td>DELETE or MOVE</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.MoveAfterProcess</td>
-      <td>The directory to move files after processing (i.e. all files
-        process successfully)</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.ActionAfterErrors</td>
-      <td>DELETE or MOVE</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.MoveAfterErrors</td>
-      <td>The directory to move files after errors (i.e. some of the files
-        succeed but some fail)</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.ActionAfterFailure</td>
-      <td>DELETE or MOVE</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.MoveAfterFailure</td>
-      <td>The directory to move after failure (i.e. all files fail)</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td></td>
-      <td></td>
-      <td></td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.ReplyFileURI</td>
-      <td>Reply file URI</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td>Optional</td>
-      <td>transport.vfs.ReplyFileName</td>
-      <td>Reply file name (defaults to response.xml)</td>
-    </tr>
-    <tr>
-      <td></td>
-      <td></td>
-      <td></td>
-      <td></td>
-    </tr>
-  </tbody>
-</table>
-
-<p>VFS Transport URI examples (See <a
-href="http://commons.apache.org/vfs/filesystems.html">http://commons.apache.org/vfs/filesystems.html
-for more samples</a>)</p>
-<pre>file:///directory/filename.ext
-file:////somehost/someshare/afile.txt
-jar:../lib/classes.jar!/META-INF/manifest.mf
-jar:zip:outer.zip!/nested.jar!/somedir
-ftp://myusername:mypassword@somehost/pub/downloads/somefile.tgz[?vfs.passive=true]</pre>
-
-<h2><a name="task">Tasks</a></h2>
-
-<p>A &lt;task&gt; element is used to define a Synapse Startup Task.</p>
-<pre> &lt;task class="mypackage.MyTask" name="string" [pinnedServers="(serverName)+"]&gt;
-   &lt;property name="stringProp" value="String"/&gt;
-   &lt;property name="xmlProp"&gt;
-     &lt;somexml&gt;config&lt;/somexml&gt;
-   &lt;/property&gt;
-   &lt;trigger ([[count="10"]? interval="1000"] | [cron="0 * 1 * * ?"] | [once=(true | false)])/&gt;
- &lt;/task&gt;</pre>
-
-<p>A task is created and scheduled to run at specified time intervals or as
-specified by the cron expression. The Task class specifies the actual task
-implementation class (which must implement org.apache.synapse.startup.Task
-interface) to be executed at the specified interval/s, and name specifies an
-identifier for the scheduled task. </p>
-
-<p>Fields in the task class can be set using properties provided as string
-literals or as XML fragments. (For example; if the task implementation class
-has a field named "version" with a corresponding setter method, the
-configuration value which will be assigned to this field before running the
-task can be specified using a property with the name 'version')</p>
-
-<p>There are three different trigger mechanisms to schedule tasks. A simple
-trigger is specified specifying a 'count' and an 'interval', implying that
-the task will run a 'count' number of times at specified intervals. A trigger
-may also be specified as a cron trigger using a cron expression. A one-time
-trigger is specified using the 'once' attribute as true in the definition and
-could be specified as true in which case this task will be executed only once
-just after the initialization of Synapse</p>
-
-<p>You can give a list of synapse server names where this task should be
-started using pinnedServers attribute. Refer to the explanation of this
-attribute under proxy services for more information.</p>
-
-<h2><a name="mediator">Mediators</a></h2>
-
-<p>A mediator token refers to any of the following tokens:</p>
-<pre><a href="#send">send</a> | <a href="#drop">drop</a> | <a href="#log">log</a> | <a href="#property">property</a> | <a href="#sequence_ref">sequence</a> | <a href="#validate">validate</a> | <a href="#makefault">makefault</a> | <a href="#xslt">xslt</a> | <a href="#header">header</a> | <a href="#filter">filter</a> | <a href="#switch">switch</a> | <a href="#in">in</a> | <a href="#out">out</a>
-    | <a href="#dblookup">dblookup</a> | <a href="#dbreport">dbreport</a> | <a href="#RMSequence">RMSequence</a> | <a href="#throttle">throttle</a> | <a href="#xquery">xquery</a> | <a href="#cache">cache</a> | <a href="#clone">clone</a> | <a href="#iterate">iterate</a> | <a href="#aggregate">aggregate</a> | <a href="#class">class</a> | <a href="#pojoCommand">pojoCommand</a> | <a href="#script">script</a> | <a href="#spring">spring</a> </pre>
-
-<p>In addition to the above, Synapse will be able to load custom mediators
-via the J2SE Service Provider model. Mediator extensions must implement the
-MediatorFactory interface. The Class and POJO Command mediators allow custom
-Java code to be easily invoked during mediation, while the Script mediator
-allows Apache BSF scripts such as Javascript, Ruby, Groovy etc to be used for
-mediation.</p>
-
-<h3>Core Mediators</h3>
-
-<h4><a name="send">Send</a></h4>
-
-<p>The send token represents a &lt;send&gt; element, used to send messages
-out of Synapse to some endpoint. The send mediator also copies any message
-context properties from the current message context to the reply message
-received on the execution of the send operation so that the response could be
-correlated back to the request. Messages may be correlated by WS-A MessageID,
-or even simple custom text labels (see the property mediator and samples)</p>
-
-<p>In the simplest case shown below, the destination to send a message is
-implicit in the message via the 'To' address. Thus a request message will be
-sent to its 'To' address, and a response message would be sent back to the
-client. Removing the 'To' address of a message targets it back to the client,
-and thus a request message received may be returned to the client after
-changing its direction. (Note: to mark a message as a response set the
-property RESPONSE to true)</p>
-
-<p><strong>Note:</strong> A send operation may be blocking or non-blocking
-depending on the actual transport implementation used. As the default NIO
-based http/s implementation does not block on a send, care must be taken if
-the same message must be sent and then further processed (e.g. transformed).
-In such a scenario, it maybe required to first clone the message into two
-copies and then perform processing to avoid conflicts.</p>
-<pre> &lt;send/&gt;</pre>
-
-<p>If the message is to be sent to one or more endpoints, then the following
-is used:</p>
-<pre> &lt;send&gt;
-   (endpointref | endpoint)+
- &lt;/send&gt;</pre>
-
-<p>where the endpointref token refers to the following:</p>
-<pre> &lt;endpoint key="name"/&gt;</pre>
-
-<p>and the endpoint token refers to an anonymous endpoint definition.</p>
-
-<p></p>
-
-<h4><a name="drop">Drop</a></h4>
-
-<p>The drop token refers to a &lt;drop&gt; element which is used to stop
-further processing of a message:</p>
-<pre> &lt;drop/&gt;</pre>
-
-<p>Once the &lt;drop&gt; mediator executes, further processing of the current
-message stops. A the drop mediator does not necessarily close transports.</p>
-
-<p></p>
-
-<h4><a name="log">Log</a></h4>
-
-<p>The log token refers to a &lt;log&gt; element which may be used to log
-messages being mediated:</p>
-<pre> &lt;log [level="string"] [separator="string"]&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
- &lt;/log&gt;</pre>
-
-<p>The optional level attribute selects a pre-defined subset of properties to
-be logged.</p>
-
-<p>e.g.</p>
-<ul>
-  <li>simple = To, From, WSAction, SOAPAction, ReplyTo, MessageID and any
-    properties</li>
-  <li>headers = All SOAP header blocks and any properties</li>
-  <li>full = all attributes included in log level 'simple' and the SOAP
-    envelope and any properties</li>
-  <li>custom = Only properties specified to the Log mediator</li>
-</ul>
-
-<p>A separator if defined will be used to separate the attributes being
-logged. The default separator is the ',' comma.</p>
-
-<p></p>
-
-<h4><a name="property">Property</a></h4>
-<pre> &lt;property name="string" [action=set|remove] (value="literal" | expression="xpath") [scope=transport|axis2|axis2-client]/&gt;</pre>
-
-<p>The property token refers to a &lt;property&gt; element which is a
-mediator that has no direct impact on the message but rather on the message
-context flowing through Synapse. The properties set on a message can be later
-retrieved through the synapse:get-property(prop-name) XPath extension
-function. If a scope is specified for a property, the property could be set
-as a transport header property or an (underlying) Axis2 message context
-property, or as a Axis2 client option. If a scope is not specified, it will
-default to the Synapse message context scope. Using the property element with
-action specified as "remove" you can remove any existing message context
-properties.</p>
-
-<p>There are some well-defined properties that you can get/set on the Synapse
-message context scope:</p>
-<ul>
-  <li>RESPONSE - 'true' means the message is to be marked as a response
-    message</li>
-  <li>OUT_ONLY - 'true' means the message is to be marked as an out-only
-    message that does not expect a response</li>
-  <li>ERROR_CODE - this is set to any error message code encountered during a
-    fault</li>
-  <li>ERROR_MESSAGE - this is set to any error message text encountered
-    during a fault</li>
-  <li>ERROR_DETAIL - this is set to any error message detail text encountered
-    during a fault</li>
-  <li>ERROR_EXCEPTION - this is set to any Java Exception encountered during
-    a fault</li>
-</ul>
-
-<p>There are some Axis2 and module properties that are useful which are set
-at scope="axis2"</p>
-<ul>
-  <li>Sandesha2RMSpecVersion - can be '1.0' or '1.1'</li>
-  <li>Sandesha2SequenceKey - can be an identifier specifying an Sandesha
-    internal sequence key, and</li>
-  <li>Sandesha2LastMessage - 'true' will make this the last message and
-    terminate the sequence</li>
-</ul>
-
-<p>There are some Axis2 client side properties/options that are useful which
-are set at scope="axis2-client"</p>
-<ul>
-  <li>FORCE_HTTP_1.0 - forces outgoing http/s messages to use HTTP 1.0
-    (instead of the default 1.1)</li>
-</ul>
-
-<h5>The synapse:get-property() XPath extension function</h5>
-
-<p>The get-property() function allows any XPath expression used in a
-configuration to lookup information from the current message context. It is
-possible to retrieve properties previously set with the property mediator,
-and/or information from the Synapse or Axis2 message contexts or transport
-header. The function accepts the scope as an optional parameter as shown
-below:</p>
-
-<p>synapse:get-property( [(axis2 | axis2-client | transport),]
-&lt;property_name&gt; [,&lt;dateformat&gt;] ) </p>
-
-<p></p>
-
-<p>Some useful properties from the Synapse message context follows:</p>
-<ul>
-  <li>SYSTEM_DATE - Returns the current date as a String. Optionally a date
-    format as per standard date format may be supplied. e.g.
-    synapse:get-property(SYSTEM_DATE, "yyyy.MM.dd G 'at' HH:mm:ss z") or
-    get-property(SYSTEM_DATE)</li>
-  <li>SYSTEM_TIME - Returns the current time in milliseconds. (i.e. the
-    difference, measured in milliseconds, between the current time and
-    midnight, January 1, 1970 UTC)</li>
-  <li>To, From, Action, FaultTo, ReplyTo, MessageID the message To and Action
-    and WS-Addressing properties</li>
-  <li>MESSAGE_FORMAT - returns the message format - i.e. returns pox, get,
-    soap11 or soap12</li>
-  <li>OperationName - returns the operation name for the message</li>
-</ul>
-
-<p>In addition to the above, one may use the get-property() function to
-retrieve Axis2 message context properties or transport headers. e.g.
-synapse:get-property('transport', 'USER_AGENT')</p>
-
-<h4><a name="sequence_ref">Sequence</a></h4>
-<pre> &lt;sequence key="name"/&gt;</pre>
-
-<p>A sequence ref token refers to a &lt;sequence&gt; element which is used to
-invoke a named sequence of mediators.</p>
-
-<p></p>
-
-<h4><a name="validate">Validate</a></h4>
-<pre> &lt;validate [source="xpath"]&gt;
-   &lt;property name="validation-feature-id" value="true|false"/&gt;*
-   &lt;schema key="string"/&gt;+
-   &lt;on-fail&gt;
-     mediator+
-   &lt;/on-fail&gt;
- &lt;/validate&gt;</pre>
-
-<p>The &lt;validate&gt; mediator validates the result of the evaluation of
-the source xpath expression, against the schema specified. If the source
-attribute is not specified, the validation is performed against the first
-child of the SOAP body of the current message. If the validation fails, the
-on-fail sequence of mediators is executed. Properties could be used to turn
-on/off some of the underlying features of the validator (See <a
-href="http://xerces.apache.org/xerces2-j/features.html">http://xerces.apache.org/xerces2-j/features.html</a>)</p>
-
-<p></p>
-
-<h3>Transformation Mediators</h3>
-
-<h4><a name="makefault">Makefault</a></h4>
-<pre> &lt;makefault [version="soap11|soap12"]&gt;
-   &lt;code (value="literal" | expression="xpath")/&gt;
-   &lt;reason (value="literal" | expression="xpath")&gt;
-   &lt;node&gt;?
-   &lt;role&gt;?
-   &lt;detail&gt;?
- &lt;/makefault&gt;</pre>
-
-<p>The &lt;makefault&gt; mediator transforms the current message into a fault
-message, but does NOT send it. The &lt;send&gt; mediator needs to be invoked
-to send a fault message created this way. The fault message "to" header is
-set to the "faultTo" of the original message if such a header existed on the
-original message. If a 'version' attribute is specified, the created fault
-message will be created as a selected SOAP 1.1 or SOAP 1.2 fault.</p>
-
-<p></p>
-
-<h4><a name="xslt">XSLT</a></h4>
-<pre> &lt;xslt key="string" [source="xpath"]&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
-   &lt;feature name="string" value="true| false" /&gt;*
- &lt;/xslt&gt;</pre>
-
-<p>The &lt;xslt&gt; mediator applies the specified XSLT transformation to the
-selected element of the current message payload. If the source element is not
-specified, it defaults to the first child of the soap body. Optionally
-parameters (XSLT) could be passed into the transformations through the
-'property' elements.The 'feature' elements defines any features which should
-be set to the TransformerFactory by explicitly. The feature
-'http://ws.apache.org/ns/synapse/transform/feature/dom' turns on DOM based
-transformations instead of serializing elements into Byte streams and/or
-temporary files. Though this would be better in performance than using byte
-streams, sometimes it may not work for all transformations.</p>
-
-<p></p>
-
-<h4><a name="header">Header</a></h4>
-<pre> &lt;header name="qname" (value="literal" | expression="xpath") [action="set"]/&gt;
- &lt;header name="qname" action="remove"/&gt;</pre>
-
-<p>The &lt;header&gt; mediator sets or removes a specified header from the
-current soap infoset. Currently the set header only supports simple valued
-headers. In the future we may extend this to have XML structured headers by
-embedding the XML content within the element itself. The optional action
-attribute specifies whether the mediator should set or remove the header. If
-omitted, it defaults to a set-header.</p>
-
-<p></p>
-
-<h3>Selection Mediators</h3>
-
-<h4><a name="filter">Filter</a></h4>
-<pre> &lt;filter (source="xpath" regex="string") | xpath="xpath"&gt;
-   mediator+
- &lt;/filter&gt;</pre>
-
-<p>The &lt;filter&gt; mediator either test the given xpath expression as a
-boolean expression, or match the evaluation result of a source xpath
-expression as a String against the given regular expression. If the test
-succeeds, the filter mediator will execute the enclosed mediators in
-sequence.</p>
-
-<p></p>
-
-<h4><a name="switch">Switch</a></h4>
-<pre> &lt;switch source="xpath"&gt;
-   &lt;case regex="string"&gt;
-     mediator+
-   &lt;/case&gt;+
-   &lt;default&gt;
-     mediator+
-   &lt;/default&gt;?
- &lt;/switch&gt;</pre>
-
-<p>The &lt;switch&gt; mediator will evaluate the given source xpath
-expression into its string value, and match it against the given regular
-expressions. If the specified cases does not match and a default case exists,
-it will be executed.</p>
-<a name="in"></a>
-
-<h4><a name="out">In / Out</a></h4>
-<pre>&lt;in&gt;<br/>  mediator+
-&lt;/in&gt;<br/></pre>
-<pre>&lt;out&gt;
-  mediator+
-&lt;/out&gt;</pre>
-
-<p><br/>
-</p>
-
-<p>The In and Out mediators will execute the child mediators over the current
-message if the message matches the direction of the mediator. Hence all
-incoming messages would pass through the "&lt;in&gt;" mediators and vice
-versa.</p>
-
-<p></p>
-
-<h3>Database Mediators </h3>
-
-<h4><a name="dblookup">DB-lookup</a></h4>
-<pre>&lt;dblookup&gt;
-   &lt;connection&gt;
-     &lt;pool&gt;
-      (
-       &lt;driver/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     |
-       &lt;dsName/&gt;
-       &lt;icClass/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     )
-       &lt;property name="name" value="value"/&gt;*
-     &lt;/pool&gt;
-   &lt;/connection&gt;
-   &lt;statement&gt;
-     &lt;sql&gt;select something from table where something_else = ?&lt;/sql&gt;
-     &lt;parameter [value="" | expression=""] type="CHAR|VARCHAR|LONGVARCHAR|NUMERIC|DECIMAL|BIT|TINYINT|SMALLINT|INTEGER|BIGINT|REAL|FLOAT|DOUBLE|DATE|TIME|TIMESTAMP"/&gt;*
-     &lt;result name="string" column="int|string"/&gt;*
-   &lt;/statement&gt;+
-&lt;/dblookup&gt;</pre>
-
-<p></p>
-
-<p>The dblookup mediator is capable of executing an arbitrary SQL select
-statement, and then set some resulting values as local message properties on
-the message context. The DB connection used maybe looked up from an external
-DataSource or specified in-line, in which case an Apache DBCP connection pool
-is established and used. Apache DBCP connection pools support the following
-properties:</p>
-<ul>
-  <li>autocommit = true | false</li>
-  <li>isolation = Connection.TRANSACTION_NONE |
-    Connection.TRANSACTION_READ_COMMITTED |
-    Connection.TRANSACTION_READ_UNCOMMITTED |
-    Connection.TRANSACTION_REPEATABLE_READ |
-    Connection.TRANSACTION_SERIALIZABLE</li>
-  <li>initialsize = int</li>
-  <li>maxactive = int</li>
-  <li>maxidle = int</li>
-  <li>maxopenstatements = int</li>
-  <li>maxwait = long</li>
-  <li>minidle = int</li>
-  <li>poolstatements = true | false</li>
-  <li>testonborrow = true | false</li>
-  <li>testonreturn = true | false</li>
-  <li>testwhileidle = true | false</li>
-  <li>validationquery = String</li>
-</ul>
-
-<p>More than one statement may be specified, and the SQL statement may
-specify parameters which could be specified as values or XPath expressions.
-The types of parameters could be any valid SQL types. Only the first row of a
-result set will be considered and any others are ignored. The single
-&lt;result&gt; element contains the 'name' and the column' attributes. The
-'name' attribute defines the name under which the result is stored in the
-Synapse message context, and the column attribute specifies a column number
-or name .</p>
-
-<h4><a name="dbreport">DB-report</a></h4>
-<pre>&lt;dbreport&gt;
-   &lt;connection&gt;
-     &lt;pool&gt;
-      (
-       &lt;driver/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     |
-       &lt;dsName/&gt;
-       &lt;icClass/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     )
-       &lt;property name="name" value="value"/&gt;*
-     &lt;/pool&gt;
-   &lt;/connection&gt;
-   &lt;statement&gt;
-     &lt;sql&gt;insert into something values(?, ?, ?, ?)&lt;/sql&gt;
-     &lt;parameter [value="" | expression=""] type="CHAR|VARCHAR|LONGVARCHAR|NUMERIC|DECIMAL|BIT|TINYINT|SMALLINT|INTEGER|BIGINT|REAL|FLOAT|DOUBLE|DATE|TIME|TIMESTAMP"/&gt;*
-    &lt;/statement&gt;+
-&lt;/dblreport&gt;</pre>
-
-<p></p>
-
-<p>The dbreport mediator is very similar to the dblookup mediator, but writes
-information to a Database, using the specified insert SQL statement.</p>
-
-<p></p>
-
-<h3>Advanced Mediators</h3>
-
-<h4><a name="RMSequence">RMSequence</a></h4>
-<pre> &lt;RMSequence (correlation="xpath" [last-message="xpath"]) | single="true" [version="1.0|1.1"]/&gt;</pre>
-
-<p>The &lt;RMSequence&gt; mediator can be used to create a sequence of
-messages to communicate via WS-Reliable Messaging with an WS-RM enabled
-endpoint (&lt;enableRM&gt;). The simple use case of this mediator is to
-specify a single="true" property, because this means that only one message is
-involved in the same sequence. However if multiple messages should be sent in
-the same sequence, the correlation property should be used with a XPath
-expression that selects an unique element value from the incoming message.
-With the result of the XPath expression, Synapse can group messages together
-that belong to the same sequence. To close the sequence neatly, for the last
-message of the sequence also an XPath expression should be specified. With
-the version attribute the WS-RM specification version to be used can be
-specified, 1.0 or 1.1. </p>
-
-<p></p>
-
-<h4><a name="throttle">Throttle</a></h4>
-<pre>&lt;throttle [onReject="string"] [onAccept="string"] id="string"&gt;
-    (&lt;policy key="string"/&gt; | &lt;policy&gt;..&lt;/policy&gt;)
-    &lt;onReject&gt;..&lt;/onReject&gt;?
-    &lt;onAccept&gt;..&lt;/onAccept&gt;?
-&lt;/throttle&gt;</pre>
-
-<p></p>
-
-<p>The Throttle mediator can be used for rate limiting as well as concurrency
-based limiting. A WS-Policy dictates the throttling configuration and may be
-specified inline or loaded from the registry. Please refer to the samples
-document for sample throttling policies. The Throttle mediator could be added
-in the request path for rate limiting and concurrent access limitation. When
-using for concurrent access limitation, the same throttle mediator 'id' must
-be triggered on the response flow so that completed responses are deducted
-from the available limit. (i.e. two instances of the throttle mediator with
-the same 'id' attribute in the request and response flows). The 'onReject'
-and 'onAccept' sequence references or inline sequences define how accepted
-and rejected messages are to be handled.</p>
-
-<h4><a name="xquery">XQuery</a></h4>
-<pre>&lt;xquery key="string" [target="xpath"]&gt;
-    &lt;variable name="string" type="string" [key="string"] [expression="xpath"] [value="string"]/&gt;?
-&lt;/xquery&gt; </pre>
-
-<p></p>
-
-<p>The XQuery mediator can be used to perform an XQuery transformation. The
-'key' attribute specifies the XQuery transformation, and the optional
-'target' attribute specifies the node of the message that should be
-transformed. This defaults to the first child of the SOAP body of the
-payload. The 'variable' elements define a variable that could be bound to the
-dynamic context of the XQuery engine in order to access those variables
-through the XQuery script .</p>
-
-<p>It is possible to specify just a literal 'value', or an XPath expression
-over the payload, or even specify a registry key or a registry key combined
-with an XPath expression that selects the variable. The name of the variable
-corresponds to the name of variable declaration in the XQuery script. The
-'type' of the variable must be a valid type defined by the JSR-000225 (XQJ
-API). </p>
-
-<p>The supported types are:</p>
-<ul>
-  <li>XQItemType.XQBASETYPE_INT -&gt; INT</li>
-  <li>XQItemType.XQBASETYPE_INTEGER -&gt; INTEGER</li>
-  <li>XQItemType.XQBASETYPE_BOOLEAN -&gt; BOOLEAN</li>
-  <li>XQItemType.XQBASETYPE_BYTE - &gt; BYTE</li>
-  <li>XQItemType.XQBASETYPE_DOUBLE -&gt; DOUBLE</li>
-  <li>XQItemType.XQBASETYPE_SHORT -&gt; SHORT</li>
-  <li>XQItemType.XQBASETYPE_LONG -&gt; LONG</li>
-  <li>XQItemType.XQBASETYPE_FLOAT -&gt; FLOAT</li>
-  <li>XQItemType.XQBASETYPE_STRING -&gt; STRING</li>
-  <li>XQItemType.XQITEMKIND_DOCUMENT -&gt; DOCUMENT</li>
-  <li>XQItemType.XQITEMKIND_DOCUMENT_ELEMENT -&gt; DOCUMENT_ELEMENT</li>
-  <li>XQItemType.XQITEMKIND_ELEMENT -&gt; ELEMENT</li>
-</ul>
-
-<h4><a name="cache">Cache</a></h4>
-<pre> &lt;cache id="string" [hashGenerator="class"] [timeout="seconds"] [scope=(per-host | per-mediator)]
-     collector=(true | false) [maxMessageSize="in-bytes"]&gt;
-   &lt;onCacheHit [sequence="key"]&gt;
-     (mediator)+
-   &lt;/onCacheHit&gt;?
-   &lt;implementation type=(memory | disk) maxSize="int"/&gt;
- &lt;/cache&gt;</pre>
-
-<p>The &lt;cache&gt; mediator will evaluate the hash value of an incoming
-message as described in the optional hash generator implementation (which
-should be a class implementing the org.wso2.caching.digest.DigestGenerator
-interface). The default hash generator is
-'org.wso2.caching.digest.DOMHashGenerator'. If the generated hash value has
-been found in the cache then the cache mediator will execute the onCacheHit
-sequence which can be specified inline or referenced. The cache mediator must
-be specified with an 'id' and two instances with this same 'id' that
-correlates the response message into the cache for the request message hash.
-The optional 'timeout' specifies the valid duration for cached elements, and
-the scope defines if mediator instances share a common cache per every host
-instance, or per every cache mediator pair (i.e. 'id') instance. The
-'collector' attribute 'true' specifies that the mediator instance is a
-response collection instance, and 'false' specifies that its a cache serving
-instance. The maximum size of a message to be cached could be specified with
-the optional 'maxMessageSize' attributes in bytes and defaults to unlimited.
-Finally the 'implementation' element may define if the cache is disk or
-memory based, and the 'maxSize' attribute defines the maximum number of
-elements to be cached.</p>
-
-<h4><a name="clone">Clone</a></h4>
-<pre> &lt;clone [continueParent=(true | false)]&gt;
-   &lt;target [to="uri"] [soapAction="qname"] [sequence="sequence_ref"] [endpoint="endpoint_ref"]&gt;
-     &lt;sequence&gt;
-       (mediator)+
-     &lt;/sequence&gt;?
-     &lt;endpoint&gt;
-       endpoint
-     &lt;/endpoint&gt;?
-   &lt;/target&gt;+
- &lt;/clone&gt;</pre>
-
-<p>The clone mediator closely resembles the Message Splitter EIP and will
-split the message into number of identical messages which will be processed
-in parallel. The original message cloned can be continued or dropped
-depending on the boolean value of the optional 'continueParent' attribute.
-Optionally a custom 'To' address and/or a 'Action' may be specified for
-cloned messages</p>
-
-<h4><a name="iterate">Iterate</a></h4>
-<pre> &lt;iterate [continueParent=(true | false)] [preservePayload=(true | false)] (attachPath="xpath")? expression="xpath"&gt;
-   &lt;target [to="uri"] [soapAction="qname"] [sequence="sequence_ref"] [endpoint="endpoint_ref"]&gt;
-     &lt;sequence&gt;
-       (mediator)+
-     &lt;/sequence&gt;?
-     &lt;endpoint&gt;
-       endpoint
-     &lt;/endpoint&gt;?
-   &lt;/target&gt;+
- &lt;/iterate&gt;</pre>
-
-<p>The iterate mediator implements another EIP and will split the message
-into number of different messages derived from the parent message by finding
-matching elements for the XPath expression specified. New messages will be
-created for each and every matching element and processed in parallel using
-either the specified sequence or endpoint. Parent message can be continued or
-dropped in the same way as in the clone mediator. The 'preservePayload'
-attribute specifies if the original message should be used as a template when
-creating the splitted messages, and defaults to 'false', in which case the
-splitted messages would contain the split elements as the SOAP body.</p>
-
-<h4><a name="aggregate">Aggregate</a></h4>
-<pre> &lt;aggregate&gt;
-   &lt;correlateOn expression="xpath"/&gt;?
-   &lt;completeCondition [timeout="time-in-seconds"]&gt;
-     &lt;messageCount min="int-min" max="int-max"/&gt;?
-   &lt;/completeCondition&gt;?
-   &lt;onComplete expression="xpath" [sequence="sequence-ref"]&gt;
-     (mediator +)?
-   &lt;/onComplete&gt;
- &lt;/aggregate&gt;</pre>
-
-<p>The aggregate mediator implements the Message Aggregator EIP and will
-aggregate the messages or responses for splitted messages using either the
-clone or iterate mediators. At the same time it can aggregate messages on the
-presence of matching elements specified by the correlateOn XPATH expression.
-Aggregate will collect the messages coming into it until the messages
-collected on the aggregation satisfies the complete condition. The completion
-condition can specify a minimum or maximum number of messages to be
-collected, or a timeout value in seconds, after which the aggregation
-terminates. On completion of the aggregation it will merge all of the
-collected messages and invoke the onComplete sequence on it. The merged
-message would be created using the XPath expression specified by the
-attribute 'expression' on the 'onComplete' element.</p>
-
-<h3>Extension mediators</h3>
-
-<h4><a name="class">Class</a></h4>
-<pre> &lt;class name="class-name"&gt;
-   &lt;property name="string" value="literal"&gt;
-     (either literal or XML child)
-   &lt;/property&gt;
- &lt;/class&gt; </pre>
-
-<p>The class mediator creates an instance of a custom specified class and
-sets it as a mediator. The class must implement the
-org.apache.synapse.api.Mediator interface. If any properties are specified,
-the corresponding setter methods are invoked on the class, once, during
-initialization.</p>
-
-<p></p>
-
-<h4><a name="pojoCommand">POJOCommand</a></h4>
-<pre> &lt;pojoCommand name="class-name"&gt;
-   (
-   &lt;property name="string" value="string"/&gt; |
-   &lt;property name="string" context-name="literal" [action=(ReadContext | UpdateContext | ReadAndUpdateContext)]&gt;
-     (either literal or XML child)
-   &lt;/property&gt; |
-   &lt;property name="string" expression="xpath" [action=(ReadMessage | UpdateMessage | ReadAndUpdateMessage)]/&gt;
-   )*
- &lt;/pojoCommand&gt; </pre>
-
-<p>The pojoCommand mediator creates an instance of the specified command
-class - which may implement the org.apache.synapse.Command interface or
-should have a public void method "public void execute()". If any properties
-are specified, the corresponding setter methods are invoked on the class
-before each message is executed. It should be noted that a new instance of
-the POJO Command class is created to process each message processed. After
-execution of the POJO Command mediator, depending on the 'action' attribute
-of the property, the new value returned by a call to the corresponding getter
-method is stored back to the message or to the context. The 'action'
-attribute may specify whether this behaviour is expected or not via the Read,
-Update and ReadAndUpdate properties.</p>
-
-<p></p>
-
-<h3><a name="script">Scripting language mediators</a></h3>
-
-<p></p>
-
-<p>Synapse supports Mediators implemented in a variety of scripting languages
-such as JavaScript, Python or Ruby. There are two ways of defining script
-mediators, either with the script program statements stored in a separate
-file which is referenced via the local or remote registry entry, or with the
-script program statements embedded in-line within the Synapse configuration.
-A script mediator using a script off the registry (local or remote) is
-defined as follows:</p>
-<pre> &lt;script key="string" language="string" [function="script-function-name"]/&gt;</pre>
-
-<p>The property key is the registry key to load the script. The language
-attribute specifies the scripting language of the script code (e.g. "js" for
-Javascript, "rb" for ruby, "groovy" for Groovy, "py" for Python..). The
-function is an optional attribute defining the name of the script function to
-invoke, if not specified it defaults to a function named 'mediate'. The
-function is passed a single parameter - which is the Synapse MessageContext.
-The function may return a boolean, if it does not, then true is assumed, and
-the script mediator returns this value. An inline script mediator has the
-script source embedded in the configuration as follows:</p>
-<pre> &lt;script language="string"&gt;...script source code...&lt;script/&gt;</pre>
-
-<p>The execution context environment of the script has access to the Synapse
-MessageContext predefined in a script variable named 'mc' . An example of an
-inline mediator using JavaScript/E4X which returns false if the SOAP message
-body contains an element named 'symbol' which has a value of 'IBM' would
-be:</p>
-<pre> &lt;script language="js"&gt;mc.getPayloadXML()..symbol != "IBM";&lt;script/&gt;</pre>
-
-<p>Synapse uses the Apache <a href="http://jakarta.apache.org/bsf/">Bean
-Scripting Framework</a> for the scripting language support, any script
-language supported by BSF may be used to implement a Synapse Mediator. </p>
-
-<p>Implementing a Mediator with a script language can have advantages over
-using the built in Synapse Mediator types or implementing a custom Java class
-Mediator. Script Mediators have all the flexibility of a class Mediator with
-access to the Synapse MessageContext and SynapseEnvironment APIs, and the
-ease of use and dynamic nature of scripting languages allows rapid
-development and prototyping of custom mediators. An additional benefit of
-some scripting languages is that they have very simple and elegant XML
-manipulation capabilities, for example JavaScript E4X or Ruby REXML, so this
-makes them well suited for use in the Synapse mediation environment. For both
-types of script mediator definition the MessageContext passed into the script
-has additional methods over the standard Synapse MessageContext to enable
-working with the XML in a way natural to the scripting language. For example
-when using JavaScript getPayloadXML and setPayloadXML, E4X XML objects, and
-when using Ruby, REXML documents.</p>
-
-<h3>Extensibility of Synapse</h3>
-
-<p>The Synapse configuration language could be easily extended, with
-configuration extensions as well as mediation extensions. The Spring mediator
-is such an example.</p>
-
-<h4>Spring Configuration</h4>
-
-<p>A Spring configuration could be created as a localEntry or remote registry
-entry providing a URL or a key reference to a Registry. The configuration is
-then created on first use or as necessary (as per registry lookup semantics)
-by the mediators which reference this configuration.</p>
-<pre> &lt;localEntry key="string"/&gt;
- &lt;localEntry key="string" src="url"/&gt;</pre>
-
-<p>The name attribute specifies a unique name for the configuration, and the
-src, key or inlined XML references to the Spring configuration</p>
-
-<p></p>
-
-<h4><a name="spring">Spring mediator</a></h4>
-<pre> &lt;spring:spring bean="exampleBean1" key="string"/&gt;</pre>
-
-<p>The &lt;spring&gt; element creates an instance of a mediator, which is
-managed by Spring. This Spring bean must implement the Mediator interface for
-it to act as a Mediator. The key will reference the Spring
-ApplicationContext/Configuration used for the bean</p>
-</body>
-</html>

Property changes on: java/modules/documentation/src/site/xdoc/1_1_1/configuration.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_2/Synapse_Extending.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_2/Synapse_Extending.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_2/Synapse_Extending.xml	(nonexistent)
@@ -1,484 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<document>
-    <properties>
-        <title>Apache Synapse - Extending...</title>
-    </properties>
-    <head>
-        <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-    </head>
-  <body>
-    <div style="margin-top:-40px; float:right; _margin-top:0px;">
-      <img alt="Synapse logo"
-           src="images/synapse-logo-web2.png" width="197"
-           height="82"/>
-    </div>
-    <div>
-      <h1>
-        Apache Synapse ESB - Extending...
-      </h1>
-    </div>
-    <h2>
-      Writing custom Mediator implementations
-    </h2>
-    <p>
-      The primary interface of the Synapse API is the MessageContext interface
-      defined below. This essentially defines the per-message context passed
-      through the chain of mediators, for each and every message received and
-      processed by Synapse. Each message instance is wrapped within a
-      MessageContext instance, and the message context is set with the
-      references to the SynapseConfiguration and SynapseEnvironments. The
-      SynapseConfiguration holds the global configuration model that defines
-      mediation rules, local registry entries and other and configuration, while
-      the environment gives access to the underlying SOAP implementation used -
-      Axis2. A typical mediator would need to manipulate the MessageContext by
-      referring to the SynapseConfiguration. However it is strongly recommended
-      that the SynapseConfiguration is not updated by mediator instances as it
-      is shared by all messages, and may be updated by Synapse administration or
-      configuration modules. Mediator instances may store local message
-      properties into the MessageContext for later retrieval by successive
-      mediators.<br/>
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/MessageContext.java?view=markup">MessageContext
-      Interface</a>
-    </h4>
-    <p/>
-<pre xml:space="preserve">package org.apache.synapse;
-
-import ...
-
-public interface MessageContext {
-
-    /**
-     * Get a reference to the current SynapseConfiguration
-     *
-     * @return the current synapse configuration
-     */
-    public SynapseConfiguration getConfiguration();
-
-    /**
-     * Set or replace the Synapse Configuration instance to be used. May be used to
-     * programatically change the configuration at runtime etc.
-     *
-     * @param cfg The new synapse configuration instance
-     */
-    public void setConfiguration(SynapseConfiguration cfg);
-
-    /**
-     * Returns a reference to the host Synapse Environment
-     * @return the Synapse Environment
-     */
-    public SynapseEnvironment getEnvironment();
-
-    /**
-     * Sets the SynapseEnvironment reference to this context
-     * @param se the reference to the Synapse Environment
-     */
-    public void setEnvironment(SynapseEnvironment se);
-
-    /**
-     * Get the value of a custom (local) property set on the message instance
-     * @param key key to look up property
-     * @return value for the given key
-     */
-    public Object getProperty(String key);
-
-    /**
-     * Set a custom (local) property with the given name on the message instance
-     * @param key key to be used
-     * @param value value to be saved
-     */
-    public void setProperty(String key, Object value);
-
-    /**
-     * Returns the Set of keys over the properties on this message context
-     * @return a Set of keys over message properties
-     */
-    public Set getPropertyKeySet();
-
-    /**
-     * Get the SOAP envelope of this message
-     * @return the SOAP envelope of the message
-     */
-    public SOAPEnvelope getEnvelope();
-
-    /**
-     * Sets the given envelope as the current SOAPEnvelope for this message
-     * @param envelope the envelope to be set
-     * @throws org.apache.axis2.AxisFault on exception
-     */
-    public void setEnvelope(SOAPEnvelope envelope) throws AxisFault;
-
-    /**
-     * SOAP message related getters and setters
-     */
-    public ....get/set()...
-
-}</pre>
-    <p>
-      The MessageContext interface is based on the Axis2 <a>MessageContext</a>
-      interface, and uses the Axis2 <a>EndpointReference</a> and
-      SOAPEnvelope classes/interfaces. The purpose of this interface is to
-      capture a message as it flows through the system. As you will see the
-      message payload is represented using the SOAP infoset. Binary messages can
-      be embedded in the Envelope using MTOM or SwA attachments using the AXIOM
-      object model.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/Mediator.java?view=markup">Mediator
-      interface</a>
-    </h4>
-    <p>
-      The second key interface for mediator writers is the Mediator interface:
-    </p>
-<pre xml:space="preserve">package org.apache.synapse;
-
-import org.apache.synapse.MessageContext;
-
-/**
- * All Synapse mediators must implement this Mediator interface. As a message passes
- * through the synapse system, each mediator's mediate() method is invoked in the
- * sequence/order defined in the SynapseConfiguration.
- */
-public interface <span style="font-weight: bold;">Mediator </span>{
-
-    /**
-     * Invokes the mediator passing the current message for mediation. Each
-     * mediator performs its mediation action, and returns true if mediation
-     * should continue, or false if further mediation should be aborted.
-     *
-     * @param synCtx the current message for mediation
-     * @return true if further mediation should continue
-     */
-    public boolean mediate(MessageContext synCtx);
-
-    /**
-     * This is used for debugging purposes and exposes the type of the current
-     * mediator for logging and debugging purposes
-     * @return a String representation of the mediator type
-     */
-    public String getType();
-}</pre>
-    <p>
-      A mediator can read and/or modify the <a>SynapseMessage</a> in
-      any suitable manner - adjusting the routing headers or changing the
-      message body. If the mediate() method returns false, it signals to the
-      Synapse processing model to stop further processing of the message. For
-      example, if the mediator is a security agent it may decide that this
-      message is dangerous and should not be processed further. This is
-      generally the exception as mediators are usually designed to co-operate to
-      process the message onwards.
-    </p>
-    <h3>
-      Leaf and Node Mediators, List mediators and Filter mediators
-    </h3>
-    <p>
-      Mediators may be Node mediators (i.e. these that can contain child
-      mediators) or Leaf mediators (mediators that does not hold any other child
-      mediators). A Node mediator  must implement the
-      org.apache.synapse.api.ListMediator interface listed below, or extend from
-      the org.apache.synapse.mediators.AbstractListMediator.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/ListMediator.java?view=markup">The
-      ListMediator interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.mediators;
-
-import java.util.List;
-
-/**
-* The List mediator executes a given sequence/list of child mediators
-*/
-public interface ListMediator extends Mediator {
-    /**
-    * Appends the specified mediator to the end of this mediator's (children) list
-    * @param m the mediator to be added
-    * @return true (as per the general contract of the Collection.add method)
-    */
-    public boolean addChild(Mediator m);
-
-    /**
-    * Appends all of the mediators in the specified collection to the end of this mediator's (children)
-    * list, in the order that they are returned by the specified collection's iterator
-    * @param c the list of mediators to be added
-    * @return true if this list changed as a result of the call
-    */
-    public boolean addAll(List c);
-
-    /**
-    * Returns the mediator at the specified position
-    * @param pos index of mediator to return
-    * @return the mediator at the specified position in this list
-    */
-    public Mediator getChild(int pos);
-
-    /**
-    * Removes the first occurrence in this list of the specified mediator
-    * @param m mediator to be removed from this list, if present
-    * @return true if this list contained the specified mediator
-    */
-    public boolean removeChild(Mediator m);
-
-    /**
-    * Removes the mediator at the specified position in this list
-    * @param pos the index of the mediator to remove
-    * @return the mediator previously at the specified position
-    */
-    public Mediator removeChild(int pos);
-
-    /**
-    * Return the list of mediators of this List mediator instance
-    * @return the child/sub mediator list
-    */
-    public List getList();
-}</pre>
-    <p>
-      A ListMediator implementation should call super.mediate(synCtx) to process
-      its sub mediator sequence. A FilterMediator is a ListMediator which
-      executes its sequence of sub mediators on successful outcome of a test
-      condition. The Mediator instance which performs filtering should implement
-      the FilterMediator interface.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/mediators/FilterMediator.java?view=markup">FilterMediator
-      interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.mediators;
-
-import org.apache.synapse.MessageContext;
-
-/**
- * The filter mediator is a list mediator, which executes the given (sub) list of mediators
- * if the specified condition is satisfied
- *
- * @see FilterMediator#test(org.apache.synapse.MessageContext)
- */
-public interface <span style="font-weight: bold;">FilterMediator </span>extends ListMediator {
-
-    /**
-     * Should return true if the sub/child mediators should execute. i.e. if the filter
-     * condition is satisfied
-     * @param synCtx
-     * @return true if the configured filter condition evaluates to true
-     */
-    public boolean test(MessageContext synCtx);
-}</pre>
-    <h2>
-      Writing custom Configuration implementations for mediators
-    </h2>
-    <p>
-      You may write your own custom configurator for the Mediator implementation
-      you write without relying on the Class mediator or Spring extension for
-      its initialization. You could thus write a MediatorFactory implementation
-      which defines how to digest a custom XML configuration element to be used
-      to create and configure the custom mediator instance. A MediatorSerializer
-      implementation defines how a configuration should be serialized back into
-      an XML configuration. The custom MediatorFactory &amp; MediatorSerializer
-      implementations and the mediator class/es must be bundled in a JAR file
-      conforming to the J2SE Service Provider model (See the description for
-      Extensions below for more details and examples) and placed into the
-      SYNAPSE_HOME/lib folder, so that the Synapse runtime could find and load
-      the definition. Essentially this means that a custom JAR file must bundle
-      your class implementing the Mediator interface, and the MediatorFactory
-      implementation class and contain two text files named
-      "org.apache.synapse.config.xml.MediatorFactory" and
-      "org.apache.synapse.config.xml.MediatorSerializer" which will contain the
-      fully qualified name(s) of your MediatorFactory and MediatorSerializer
-      implementation classes. You should also place any dependency JARs into the
-      same lib folder so that the correct classpath references could be made.
-      The MediatorFactory interface listing is given below, which you should
-      implement, and its getTagQName() method must define the fully qualified
-      element of interest for custom configuration. The Synapse initialization
-      will call back to this MediatorFactory instance through the
-      createMediator(OMElement elem) method passing in this XML element, so that
-      an instance of the mediator could be created utilizing the custom XML
-      specification and returned. See the ValidateMediator and the
-      ValidateMediatorFactory classes under modules/extensions in the Synapse
-      source distribution for examples.
-    </p>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorFactory.java?view=markup">The
-      MediatorFactory interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.config.xml;
-
-import ...
-
-/**
- * A mediator factory capable of creating an instance of a mediator through a given
- * XML should implement this interface
- */
-public interface MediatorFactory {
-    /**
-     * Creates an instance of the mediator using the OMElement
-     * @param elem
-     * @return the created mediator
-     */
-    public Mediator createMediator(OMElement elem);
-
-    /**
-     * The QName of this mediator element in the XML config
-     * @return QName of the mediator element
-     */
-    public QName getTagQName();
-}</pre>
-    <p/>
-    <h4>
-      <a
-      href="http://svn.apache.org/viewvc/synapse/trunk/java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorSerializer.java?view=markup">The
-      MediatorSerializer interface</a>
-    </h4>
-<pre xml:space="preserve">package org.apache.synapse.config.xml;
-
-import ...
-
-/**
- * Interface which should be implemented by mediator serializers. Does the
- * reverse of the MediatorFactory
- */
-public interface MediatorSerializer {
-
-    /**
-     * Return the XML representation of this mediator
-     * @param m mediator to be serialized
-     * @param parent the OMElement to which the serialization should be attached
-     * @return the serialized mediator XML
-     */
-    public OMElement serializeMediator(OMElement parent, Mediator m);
-
-    /**
-     * Return the class name of the mediator which can be serialized
-     * @return the class name
-     */
-    public String getMediatorClassName();
-}</pre>
-    <h2>
-      Configuring mediators
-    </h2>
-    <p>
-      Mediators could access the Synapse registry to load resources and
-      configure the local behaviour. Refer to the Spring mediator and Script
-      mediator implementations for examples on how this could be achieved.
-    </p>
-    <h4>
-      Loading of Extensions by the Synapse runtime
-    </h4>
-    <p>
-      Synapse loads available extensions from the runtime classpath using the <a
-      href="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service%20Provider">J2SE
-      Service Provider model</a>. This essentially iterates over the
-      available JAR files, for  a META-INF/services directory within each file,
-      and looks for a text file with the name
-      org.apache.synapse.config.xml.MediatorFactory which contains a list of
-      fully qualified classname that implement the above interface, listing each
-      class in a separate line. e.g. The built-in synapse-extensions.jar
-      contains the following structure
-    </p>
-<pre xml:space="preserve">synapse-extensions.jar
-    /META-INF/services
-        org.apache.synapse.config.xml.MediatorFactory
-        org.apache.synapse.config.xml.MediatorSerializer
-    /... the implementation classes as usual...</pre>
-  </body>
-</document>
\ No newline at end of file
Index: java/modules/documentation/src/site/xdoc/1_2/Synapse_Configuration_Language.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_2/Synapse_Configuration_Language.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_2/Synapse_Configuration_Language.xml	(nonexistent)
@@ -1,2048 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-<document>
-    <properties>
-        <title>Apache Synapse - Configuration Language</title>
-    </properties>
-    <head>
-        <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-    </head>
-    <body>
-    <div style="margin-top:-40px; float:right; _margin-top:0px;">
-      <img alt="Synapse logo"
-           src="images/synapse-logo-web2.png" width="197"
-           height="82"/>
-    </div>
-    <div>
-      <h1>
-        Apache Synapse ESB - Configuration
-      </h1>
-    </div>
-    <h3>
-      Overview
-    </h3>
-    <p>
-      An Apache Synapse Enterprise Service Bus (ESB) engine is driven off a set
-      of simple text/xml configuration files. This allows the configuration to
-      be easily hand edited, backed up from the file system, or even included
-      into version control for easier management and control (e.g. moving a
-      configuration from development, through QA, staging and into production).
-      The configuration files that drives the Synapse ESB are as follows:
-    </p>
-    <ul>
-      <li>
-        The Synapse configuration file - synapse.xml
-      </li>
-      <li>
-        The underlying Axis2 engine configuration file - axis2.xml
-      </li>
-      <li>
-        Resources referenced from the Registry
-      </li>
-    </ul>
-    <p>
-      While the axis2.xml configures the underlying transport and Web services
-      support, the synapse.xml configures the mediation rules and configuration
-      for the ESB. While any changes performed on the axis2.xml requires a
-      restart (e.g. for enabling a transport such as JMS), the synapse.xml could
-      be made to reference different configuration elements off a set of
-      multiple files - that are served through the built-in Registry. When using
-      the Registry to hold pieces of the configuration, certain elements such as
-      endpoint definitions, sequences and local entries could be updated
-      dynamically while the Synapse ESB executes, the the Registry could trigger
-      a re-load as configured.
-    </p>
-    <h2>
-      The Synapse Configuration (synapse.xml)
-    </h2>
-    <p>
-      As the diagram below depicts, the Synapse configuration defines the Proxy
-      services, Endpoints, Sequences and Startup jobs managed by the Synapse
-      ESB. It also defines the interface to the Registry/Repository being used
-      by the engine. Typically the Synapse ESB is deployed between the actual
-      client and a backend service implementation to mediate the message flow in
-      between. Thus the Synapse ESB can accept a message on behalf of the actual
-      service, perform authentication, validation, transformation, logging,
-      routing based on the content etc. and then decide the destination target
-      endpoint for the message and direct it to an actual service
-      implementation. The Synapse ESB can also detect timeouts, transport
-      failures during communication or introduce load balancing, throttling or
-      caching where necessary. For fault scenarios such as authentication
-      failure, or schema validation failure, the Synapse ESB can be configured
-      to return a custom message or a fault to the requesting client without
-      forwarding the request to the actual service.
-    </p>
-    <p>
-      <img alt="Synapse message flow"
-      src="images/synapse-flow.png" width="400" height="300"/>
-    </p>
-    <p/>
-    <p>
-      The Synapse ESB can operate in two modes:
-    </p>
-    <h3>
-      <a href="#service_mediation">Service mediation</a> / <a
-      href="#proxy">Proxy services</a>
-    </h3>
-    <p>
-      In Service mediation, the Synapse ESB exposes a service endpoint on the
-      ESB, that accepts messages from clients. Typically these services acts as
-      proxies for existing (external) services, and the role of Synapse would be
-      to "mediate" these messages before they are proxied to the actual service.
-      In this mode, Synapse could expose a service already available in one
-      transport, over a different transport; or expose a service that uses one
-      schema or WSDL as a service that uses a different schema or WSDL etc. A
-      Proxy service could define the transports over which the service is
-      exposed, and point to the mediation sequences that should be used to
-      process request and response messages through the proxy service. A proxy
-      service maybe a SOAP or REST/POX service over http/s or SOAP, POX, Plain
-      Text or Binary / Legacy service for other transports such as JMS and VFS
-      file systems - e.g. CSV content being the payload
-    </p>
-    <h3>
-      <a name="_message_mediation" id="_message_mediation">Message mediation</a>
-    </h3>
-    <p>
-      In Message mediation, Synapse can act as a transparent proxy for clients -
-      if they are directed to point to the Synapse ESB as a http proxy. This
-      way, Synapse could be configured to filter all messages on a network for
-      logging, access control etc, and could "mediate" messages without the
-      explicit knowledge of the original client. If Synapse receives a message
-      that is not accepted by any proxy service, this message is handled through
-      message mediation as well. Message mediation always processes messages
-      according to the mediation sequence defined as "main".
-    </p>
-    <h2>
-      Concepts and configuration elements overview
-    </h2>
-    <h3>
-      <a href="#mediator">Mediators</a> and <a href="#sequence">Mediation
-      Sequences</a>
-    </h3>
-    <p>
-      The Synapse ESB defines a 'mediator' as a component that is performs some
-      mediation action on a message during the process flow. Thus a mediator
-      gets full access to a message at the point where it is defined to gain
-      control, and could inspect the message, modify it or take an external
-      action depending on some attributes or values of the current message. A
-      mediation sequence, commonly called a 'sequence' is a list of such
-      mediators. A sequence may be named for re-use, or defined in-line or
-      anonymously within a configuration. Sequences may be defined within the
-      synapse.xml configuration or within the Registry. Writing a custom
-      mediator in Java is easy and the supplementary documentation provides more
-      details on this. The 'Class' and 'POJO (command)" mediators allows one to
-      plugin a Java class easily into the Synapse engine with minimal effort. In
-      addition, the Script mediator allows one to provide an Apache BSF script
-      (e.g. Javascript, Ruby, Groovy etc) for mediation.
-    </p>
-    <p>
-      A Synapse configuration holds two special sequences named as "main" and
-      "fault". These may be defined within the synapse.xml, or externally via
-      the Registry. If either is not found, a suitable default is generated at
-      runtime by the ESB. The default "main" sequence will simply send a message
-      without mediation, while the default "fault" sequence would log the
-      message including the payload and any error/exception encountered and stop
-      further processing. The 'fault' sequence executes whenever Synapse itself
-      encounters an error while processing a message - or when a fault handler
-      has not been defined to handle exceptions. A sequence can assign another
-      named sequence as its "fault" handler sequence, and control branches to
-      the fault handler if an error is encountered during the execution of the
-      initial sequence.
-    </p>
-    <h3>
-      <a href="#endpoint">Endpoints</a>
-    </h3>
-    <p>
-      An Endpoint definition within Synapse defines an external service endpoint
-      and any attributes or semantics that should be followed when communicating
-      with that endpoint. An endpoint definition can be named for re-use, or
-      defined in-line or anonymously within a configuration. Typically an
-      endpoint would be based on a service Address or a WSDL. Additionally the
-      Synapse ESB supports Failover and Load-balance endpoints - which are
-      defined over a group of endpoints. Endpoints may be defined within the
-      synapse.xml configuration or within the Registry.
-    </p>
-    <h3>
-      <a href="#task">Tasks</a>
-    </h3>
-    <p>
-      A Task is a custom Java class that implements the
-      org.apache.synapse.startup.Task interface that defines a single "public
-      void execute()" method. Such a task can be scheduled and managed via the
-      Synapse ESB. The scheduling information for a task can be specified in the
-      cron format or a simple format by the user. A task may also be specified
-      as a one-time task where required, and can be used to trigger a callout or
-      inject a message into the Synapse ESB.
-    </p>
-    <h3>
-      <a href="#registry">Remote Registry</a> and <a name="Local"
-      id="Local" href="#localEntry">Local Registry (Local Entries)</a>
-    </h3>
-    <p>
-      A Synapse configuration can refer to an external Registry / Repository for
-      resources used such as WSDL's, Schemas, Scripts, XSLT or XQuery
-      transformations etc. One or more remote registries may be hidden or merged
-      behind a local Registry interface defined to a Synapse configuration.
-      Resources from an external registry are looked up using "keys" - which are
-      known to the external registry. The Synapse ESB ships with a simple URL
-      based registry implementation that uses the file system for storage of
-      resources, and URL's or fragments as "keys".
-    </p>
-    <p>
-      A Registry may define a duration for which a resource served may be cached
-      by the Synapse runtime. If such a duration is specified, the Synapse ESB
-      is capable of refreshing the resource after cache expiry to support
-      dynamic re-loading of resource at runtime. Optionally, a configuration
-      could define certain "keys" to map to locally defined entities. These
-      entities may refer to a source URL or file, or defined as in-line XML or
-      text within the configuration itself. If a Registry contains a resource
-      whose "key" matches the key of a locally defined entry, the local entry
-      shadows the resource available in the Registry. Thus it is possible to
-      override Registry resources locally from within a configuration. To
-      integrate Synapse with a custom / new Registry or repository, one needs to
-      implement the org.apache.synapse.registry.Registry interface to suit the
-      actual Registry being used.
-    </p>
-    <h2>
-      The Axis2 Configuration (axis2.xml)
-    </h2>
-    <p>
-      The axis2.xml file configures the underlying Axis2 web services engine for
-      the Synapse ESB. The axis2.xml thus defines the transports enabled, and
-      other configuration parameters associated. A change to the axis2
-      configuration requires a hard re-start of the Synapse ESB. By default the
-      non-blocking http/s and the Apache VFS file system based transport are
-      enabled for listening of messages, while the non-blocking http/s, VFS and
-      JMS transports are enabled for sending messages out. Sample configurations
-      to enable/configure the other transports are provided within the default
-      axis2.xml file, and can be easily uncommented and modified. The sample JMS
-      configuration shipped is for a default ActiveMQ 4.1.x installation.
-    </p>
-    <h2>
-      The contents of the Synapse.xml configuration
-    </h2>
-    <p>
-      A Synapse configuration looks like the following at the top level:
-    </p>
-<pre xml:space="preserve"> &lt;definitions&gt;
-   &lt;<a href="#registry">registry</a> provider="string"&gt;...&lt;/registry&gt;?
-   &lt;<a href="#localEntry">localEntry</a> key="string"&gt;...&lt;/localEntry&gt;?
-   &lt;<a href="#sequence">sequence</a> name="string"&gt;...&lt;/sequence&gt;?
-   &lt;<a href="#endpoint">endpoint</a> name="string"&gt;...&lt;/endpoint&gt;?
-   &lt;<a href="#proxy">proxy</a> name="string" ...&gt;...&lt;/proxy&gt;?
-   &lt;<a href="#task">task</a> name="string" ...&gt;...&lt;/task&gt;?
-   <a href="#mediator">mediator</a>*
- &lt;/definitions&gt;</pre>
-    <p/>
-    <p>
-      The &lt;definitions&gt; elements in a synapse.xml holds the Synapse ESB
-      configuration. While the &lt;registry&gt;, &lt;sequence&gt;, &lt;endpoint&gt;,
-      &lt;proxy&gt;, &lt;task&gt; and &lt;localEntry&gt; elements refer to those
-      discussed above, the built-in mediator elements names are already
-      registered with the Synapse engine. Custom mediators written by a user may
-      be included into the library directory, and would be dynamically picked up
-      in a Sun JDK environment. A list of mediators found directly as children
-      under the &lt;definitions&gt; element would be treated as the "main"
-      sequence, if a named sequence with the name "main" cannot be found.
-    </p>
-    <h2>
-      <a name="registry1" id="registry">Registry</a>
-    </h2>
-    <p>
-      The &lt;registry&gt; element is used to define the remote registry used by
-      the configuration. The registry provider specifies an implementation class
-      for the registry implementation used, and optionally a number of
-      configuration parameters as may be required for the configuration of the
-      connection to the registry.
-    </p>
-<pre xml:space="preserve"> &lt;registry provider="string"/&gt;
-   &lt;parameter name="string"&gt;text | xml&lt;/parameter&gt;*
- &lt;/registry&gt;</pre>
-    <p>
-      Registry entries loaded from a remote registry may be cached as dictated
-      by the registry, and reloaded after the cache periods expires if a newer
-      version is found. Hence it is possible to define configuration elements
-      such as (dynamic) sequences and endpoints, as well as resources such as
-      XSLT's, Scripts or XSDs off the registry, and update the configuration as
-      these are allowed to dynamically change over time.
-    </p>
-    <p>
-      Synapse ships with a built-in URL based registry implementation called the
-      "SimpleURLRegistry" and this can be configured as follows:
-    </p>
-<pre xml:space="preserve">e.g.
-&lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-  &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-  &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-&lt;/registry&gt;</pre>
-    <p>
-      The "root" parameter specifies the root URL of the Registry for loaded
-      resources. The SimpleURLRegistry keys are path fragments, that when
-      combined with the root prefix would form the full URL for the referenced
-      resource. The "cachableDuration" parameter specifies the number of
-      milliseconds for which resources loaded from the Registry should be
-      cached. More advanced registry implementations allows different cachable
-      durations to be specified for different resources, or mark some resources
-      as never expires. (e.g. Check the WSO2 ESB implementation built over the
-      Apache Synapse ESB core)
-    </p>
-    <p/>
-    <h3>
-      <a name="localEntry" id="localEntry">Local Registry / Local Entry</a>
-    </h3>
-    <p>
-      The &lt;localEntry&gt; element is used to declare registry entries that
-      are local to the Synapse instance, as shown below
-    </p>
-<pre xml:space="preserve">  &lt;localEntry key="string" [src="url"]&gt;text | xml&lt;/localEntry&gt;</pre>
-    <p>
-      These entries are top level entries which are globally visible within the
-      entire system. Values of these entries can be retrieved via the extension
-      XPath function "synapse:get-property(prop-name)" and the keys of these
-      entries could be specified wherever a registry key is expected within the
-      configuration.
-    </p>
-    <p>
-      An entry can be static text specified as inline text or static XML
-      specified as an inline XML fragment or specified as a URL (using the src
-      attribute). A local entry shadows any entry with the same name from a
-      remote Registry.
-    </p>
-<pre xml:space="preserve">e.g.
-&lt;localEntry key="version"&gt;0.1&lt;/localEntry&gt;
-&lt;localEntry key="validate_schema"&gt;
-        &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
-         ...
-        &lt;/xs:schema&gt;
-    &lt;/localEntry&gt;
-&lt;localEntry key="xslt-key-req" src="file:repository/conf/sample/resources/transform/transform.xslt"/&gt;</pre>
-    <h2>
-      <a name="sequence" id="sequence">Sequences</a>
-    </h2>
-    <p>
-      A &lt;sequence&gt; element is used to define a sequence of mediators that
-      can be invoked later by name. The sequences named "main" and "fault" has
-      special significance in a Synapse configuration. The "main" sequence
-      handles any message that is accepted for '<a href="#message_mediation">Message
-      Mediation</a>', and the "fault" sequence is invoked if Synapse
-      encounters a fault, and a custom fault handler is not specified for the
-      sequence via its "onError" attribute. If the "main" or "fault" sequences
-      are not defined locally or not found in the Registry, the Synapse ESB
-      defines suitable defaults at initialization.
-    </p>
-    <p>
-      A Dynamic Sequence may be defined by specifying a key reference to a
-      registry entry. As the remote registry entry changes, the sequence will
-      dynamically be updated according to the specified cache duration and
-      expiration. If tracing is enabled on a sequence, all messages being
-      processed through the sequence would write tracing information through
-      each mediation step to the trace.log file configured via the
-      log4j.properties configuration. Setting the trace log level to TRACE would
-      additionally dump the message and detailed trace information at each
-      mediation step. A tracing enabled sequence propagates this setting to
-      invoked sub-sequences.
-    </p>
-<pre xml:space="preserve"> &lt;sequence name="string" [onError="string"] [key="string"] [trace="enable"]&gt;
-   mediator*
- &lt;/sequence&gt;</pre>
-<pre xml:space="preserve">e.g.
-&lt;sequence name="main" onError="errorHandler"&gt;
-  .. &lt;!-- a 'main' sequence that invokes the sequence named 'errorHandler' on a fault --&gt; ..
-&lt;/sequence&gt;</pre>
-<pre xml:space="preserve">&lt;sequence key="sequence/dynamic_seq_1.xml"/&gt;
-where "sequence/dynamic_seq_1.xml" refers to the following sequence definition from the registry:
-
-&lt;sequence name="dynamic_sequence" xmlns="http://ws.apache.org/ns/synapse"&gt;
-  ..
-&lt;/sequence&gt;</pre>
-    <h2>
-      <a name="endpoint" id="endpoint">Endpoints</a>
-    </h2>
-    <p>
-      An &lt;endpoint&gt; element defines a destination for an outgoing message.
-      An endpoint may be specified as an address endpoint, WSDL based endpoint,
-      a load balancing endpoint or a fail-over endpoint as follows:
-    </p>
-<pre xml:space="preserve">&lt;endpoint [name="string"] [key="string"]&gt;
-  <a href="#address-endpoint">address-endpoint</a> | <a href="#default-endpoint">default-endpoint</a> | <a href="#wsdl-endpoint">wsdl-endpoint</a> | <a href="#load-balanced-endpoint">load-balanced-endpoint</a> | <a href="#fail-over-endpoint">fail-over-endpoint</a>
-&lt;/endpoint&gt; </pre>
-    <p>
-      All above endpoint types can have a name attribute, and such named
-      endpoints can be reffered by other endpoints, through the key attribute.
-      For example if there is an endpoint named as "foo", the following endpoint
-      can be used in any place, where "foo" has to be used.
-    </p>
-<pre xml:space="preserve">&lt;endpoint key="foo"/&gt;</pre>
-    <p>
-      The "trace" attribute turns on detailed trace information for messages
-      being sent to the endpoint. These are available in the trace.log
-      configured via the log4j.properties file. Setting the trace log level to
-      TRACE will dump detailed trace information including message payloads.
-    </p>
-    <h4>
-      <a name="address-endpoint" id="address-endpoint">Address Endpoint</a>
-    </h4>
-    <p>
-      Address endpoint is an endpoint defined by specifying the EPR and other
-      attributes of the endpoint directly in the configuration. The 'uri'
-      attribute of the address element contains the EPR of the target endpoint.
-      Message format for the endpoint and the method to optimize attachments can
-      be specified in the format and optimize attributes respectively. Reliable
-      messaging and security policies for the endpoint can be specified in the
-      policy attribute of the enableRM and enableSec elements respectively.
-      WS-Addressing can be engaged for the messaging going to the endpoint by
-      the enableAddressing element. suspendDurationOnFailure attribute specifies
-      the time duration in seconds to suspend this endpoint, if it is detected
-      as failed. If this attribute is not specified, endpoint will never be
-      recovered after a failure.
-    </p>
-    <p>
-      Address endpoints can timeout if responses fail to arrive at Synapse by a
-      predefined timeout-duration specified in seconds. The timeout action
-      specifies whether to discard responses that arrives late, or to trigger a
-      fault. Synapse has a periodic timeout handler that triggers itself at each
-      15 second interval. Thus endpoint timeouts will have a +/- error on actual
-      trigger time. Though this can be minimized by setting a System property
-      "synapse.timeout_handler_interval" to a millisecond duration below the
-      desired endpoint timeout, care must be taken as a lesser value may have a
-      higher overhead on the system.
-    </p>
-    <p>
-      An endpoint that fails may be suspended for a specified duration after
-      such a failure, during which new messages will not be processed through
-      the endpoint. The 'suspendDurationOnFailure' could specify an optional
-      value in seconds for which this endpoint should be suspended.
-    </p>
-    <p>
-      QoS aspects such as WS-RM and WS-Security and WS-Addressing may be enabled
-      on messages sent to an endpoint using the enableRM, enableSec and
-      enableAddressing elements. Optionally, the WS-RM and WS-Security policies
-      could be specified using the 'policy' attributes.
-    </p>
-<pre xml:space="preserve">&lt;address uri="<em>endpoint address</em>" [format="soap11|soap12|pox|get"] [optimize="mtom|swa"]
-         [encoding="<em>charset encoding</em>"]
-         [statistics="enable|disable"] [trace="enable|disable"]&gt;
-  &lt;enableRM [policy="<em>key</em>"]/&gt;?
-  &lt;enableSec [policy="<em>key</em>"]/&gt;?
-  &lt;enableAddressing [version="final|submission"] [separateListener="true|false"]/&gt;?
-  
-  &lt;timeout&gt;
-    &lt;duration&gt;<em>timeout duration in seconds</em>&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-  
-  &lt;suspendDurationOnFailure&gt;
-    <em>suspend duration in seconds</em>
-  &lt;/suspendDurationOnFailure&gt;?
-&lt;/address&gt;</pre>
-    <p>
-      Following are some sample address URI definitions.
-    </p>
-    <table border="1" cellpadding="0" cellspacing="0" style="width: 100%; font-size:small" class="data-table">
-      <tbody>
-        <tr><th>Transport</th><th>Sample address</th></tr>
-        <tr><td>HTTP</td><td><tt>http://localhost:9000/soap/SimpleStockQuoteService</tt></td></tr>
-        <tr><td>JMS</td><td><tt>jms:/SimpleStockQuoteService?<br/>
-              &#160;&#160;&#160;transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;<br/>
-              &#160;&#160;&#160;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;<br/>
-              &#160;&#160;&#160;java.naming.provider.url=tcp://localhost:61616&amp;<br/>
-              &#160;&#160;&#160;transport.jms.DestinationType=topic</tt></td></tr>
-        <tr><td>Mail</td><td><tt>mailto:guest@host</tt></td></tr>
-        <tr><td>VFS</td><td><tt>vfs:file:///home/user/directory</tt></td></tr>
-        <tr><td/><td><tt>vfs:file:///home/user/file</tt></td></tr>
-        <tr><td/><td><tt>vfs:ftp://guest:guest@localhost/directory?vfs.passive=true</tt></td></tr>
-      </tbody>
-    </table>
-    <h4>
-      <a name="default-endpoint" id="default-endpoint">Default Endpoint</a>
-    </h4>
-    <p>
-      Default endpoint is an endpoint defined for adding QoS and other configurations
-      to the endpoint which is resolved from the 'To' address of the message context.
-      All the configurations such as message format for the endpoint, the method
-      to optimize attachments, reliable messaging, security policies for the endpoint
-      can be specified as in the Address Endpoint. This endpoint differs from the address
-      endpoint only in the uri attribute which will not be present in this endpoint.
-      Following section describes the configuration of a default endpoint
-    </p>
-    <pre xml:space="preserve">&lt;default [format="soap11|soap12|pox|get"] [optimize="mtom|swa"]
-         [encoding="<em>charset encoding</em>"]
-         [statistics="enable|disable"] [trace="enable|disable"]&gt;
-  &lt;enableRM [policy="<em>key</em>"]/&gt;?
-  &lt;enableSec [policy="<em>key</em>"]/&gt;?
-  &lt;enableAddressing [version="final|submission"] [separateListener="true|false"]/&gt;?
-
-  &lt;timeout&gt;
-    &lt;duration&gt;<em>timeout duration in seconds</em>&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-
-  &lt;suspendDurationOnFailure&gt;
-    <em>suspend duration in seconds</em>
-  &lt;/suspendDurationOnFailure&gt;?
-&lt;/default&gt;</pre>
-    <h4>
-      <a name="wsdl-endpoint" id="wsdl-endpoint">WSDL Endpoint</a>
-    </h4>
-    <p>
-      WSDL endpoint is an endpoint definition based on a specified WSDL
-      document. The WSDL document can be specified either as a URI or as an
-      inlined definition within the configuration. The service and port name
-      containing the target EPR has to be specified with the 'service' and
-      'port' (or 'endpoint') attributes respectively. enableRM, enableSec,
-      enableAddressing, suspendDurationOnFailure and timeout elements are same
-      as for an Address endpoint.
-    </p>
-<pre xml:space="preserve">&lt;wsdl [uri="wsdl-uri"] service="qname" port/endpoint="qname"&gt;
-  &lt;wsdl:definition&gt;...&lt;/wsdl:definition&gt;?
-  &lt;wsdl20:description&gt;...&lt;/wsdl20:description&gt;?
-  &lt;enableRM [policy="key"]/&gt;?
-  &lt;enableSec [policy="key"]/&gt;?
-  &lt;enableAddressing/&gt;?
-  &lt;suspendDurationOnFailure&gt;suspend-duration&lt;/suspendDurationOnFailure&gt;?
-  &lt;timeout&gt;
-    &lt;duration&gt;timeout-duration&lt;/duration&gt;
-    &lt;action&gt;discard|fault&lt;/action&gt;
-  &lt;/timeout&gt;?
-&lt;/wsdl&gt;</pre>
-    <h4>
-      <a name="load-balanced-endpoint" id="load-balanced-endpoint">Load
-      balanced Endpoint</a>
-    </h4>
-    <p>
-      A Load balanced endpoint distributes the messages (load) arriving at it
-      among a set of listed endpoints by evaluating the load balancing policy
-      and any other relevant parameters. Policy attribute of the load balance
-      element specifies the load balance policy (algorithm) to be used for
-      selecting the target endpoint. Currently only the roundRobin policy is
-      supported. failover attribute determines if the next endpoint should be
-      selected once the currently selected endpoint has failed, and defaults to
-      true. The set of endpoints among which the load is distributed can be
-      listed under the 'loadBalance' element. Those endpoints can belong to any
-      endpoint type mentioned in this document. For example, failover endpoints
-      can be listed inside the load balance endpoint to load balance between
-      failover groups etc.
-    </p>
-    <p>
-      The optional 'session' element makes the endpoint a session affinity based
-      load balancing endpoint. If it is specified, sessions are bound to
-      endpoints in the first message and all successive messages for those
-      sessions are directed to their associated endpoints. Currently there are two types
-      of sessions supported in SAL endpoints. Namely HTTP transport based session
-      which identifies the sessions based on http cookies and the client session which
-      identifies the session by looking at a SOAP header sent by the client with the QName
-      '{http://ws.apache.org/ns/synapse}ClientID'. The 'failover' attribute mentioned above
-      is not applicable for session affinity based endpoints and it is always
-      considered as set to false. If it is required to have failover behavior in session
-      affinity based load balance endpoints, list failover endpoints as the target endpoints.
-    </p>
-<pre xml:space="preserve">&lt;session type="http|simpleClientSession"/&gt;?
-&lt;loadBalance [policy="roundRobin"] [failover="true|false"]&gt;
-  &lt;endpoint .../&gt;+
-&lt;/loadBalance&gt;</pre>
-    <h4>
-      <a name="fail-over-endpoint" id="fail-over-endpoint">Failover Endpoint</a>
-    </h4>
-    <p>
-      Failover endpoints send messages to the listed endpoints with the
-      following failover behavior. At the start, the first listed endpoint is
-      selected as the primary and all other endpoints are treated as backups.
-      Incoming messages are always sent only to the primary endpoint. If the
-      primary endpoint fails, next active endpoint is selected as the primary
-      and failed endpoint is marked as inactive. Thus it sends messages
-      successfully as long as there is at least one active endpoint among the
-      listed endpoints.
-    </p>
-<pre xml:space="preserve">&lt;failover&gt;
-  &lt;endpoint .../&gt;+
-&lt;/failover&gt;</pre>
-    <h2>
-      <a name="proxy" id="proxy">Proxy service</a>
-    </h2>
-    <p>
-      A &lt;proxy&gt; element is used to define a Synapse Proxy service.
-    </p>
-<pre xml:space="preserve"> &lt;proxy name="string" [transports="(http |https |jms |.. )+|all"] [pinnedServers="(serverName )+"]&gt;
-   &lt;description&gt;...&lt;/description&gt;?
-   &lt;target [inSequence="name"] [outSequence="name"] [faultSequence="name"] [endpoint="name"]&gt;
-      &lt;inSequence&gt;...&lt;/inSequence&gt;?
-      &lt;outSequence&gt;...&lt;/outSequence&gt;?
-      &lt;faultSequence&gt;...&lt;/faultSequence&gt;?
-      &lt;endpoint&gt;...&lt;/endpoint&gt;?
-   &lt;/target&gt;?
-   &lt;publishWSDL key="string" uri="string"&gt;
-      ( &lt;wsdl:definition&gt;...&lt;/wsdl:definition&gt; | &lt;wsdl20:description&gt;...&lt;/wsdl20:description&gt; )?
-      &lt;resource location="..." key="..."/&gt;*
-   &lt;/publishWSDL&gt;?
-   &lt;enableSec/&gt;?
-   &lt;enableRM/&gt;?
-   &lt;policy key="string" [type="(in | out)"]/&gt;?       // optional service or message level policies such as (e.g. WS-Security and/or WS-RM policies)
-   &lt;parameter name="string"&gt;                 // optional service parameters such as (e.g. transport.jms.ConnectionFactory)
-      string | xml
-   &lt;/parameter&gt;
- &lt;/proxy&gt;</pre>
-    <p>
-      A proxy service is created and exposed on the specified transports through
-      the underlying Axis2 engine, exposing service EPR's as per the standard
-      Axis2 conventions - based on the service name. (Note: that currently Axis2
-      does not allow custom URI's to be set for services on some transports such
-      as http/s) The Proxy service could be exposed over all enabled Axis2
-      transports such as http, https, JMS, Mail and File etc. or on a subset of
-      these as specified with the optional 'transports' attribute.
-    </p>
-    <p>
-      You can give a list of Synapse server names where this proxy service
-      should be deployed using 'pinnedServers' attribute. It takes the server
-      names separated by comma or space character. If there is no pinned server
-      list then proxy service will be started in all server instances. If a
-      pinned server names list is given it will only start in the given named
-      Synapse server instances. The Synapse server name is picked up from the
-      system property 'SynapseServerName', failing which the hostname of the
-      machine would be used or default to 'localhost'. You can give a name to a
-      Synapse server instance as ./synapse.sh -DSynapseServerName=&lt;ServerName&gt;
-      or by editing the wrapper.conf where Synapse is started as a service.
-    </p>
-    <p>
-      Each service could define the target for received messages as a named
-      sequence or a direct endpoint. Target inSequence or endpoint is required
-      for the proxy configuration, and a target outSequence defines how
-      responses should be handled. Any supplied WS-Policies would apply as
-      service level policies, and any service parameters could be passed into
-      the proxy services' AxisService instance using the parameter elements
-      (e.g. the JMS destination etc). If the proxy service should enable
-      WS-Reliable Messaging or Security, the appropriate modules could be
-      engaged, and specified service level policies will apply.
-    </p>
-    <p>
-      A Dynamic Proxy may be defined by specifying the properties of the proxy
-      as dynamic entries by refering them with the key. (For example one could
-      specify the inSequence or endpoint with a remote key, without defining it
-      in the local configuration) As the remote registry entry changes, the
-      properties of the proxy will dynamically be updated accordingly. (Note:
-      proxy service definition itself can not be specified to be dynamic; i.e
-      &lt;proxy key="string"/&gt; is wrong)
-    </p>
-    <p>
-      A WSDL for the proxy service can be published using the &lt;publishWSDL&gt;
-      element. The WSDL document can be loaded from the registry by
-      specifying the 'key' attribute or from any other location by specifying the
-      'uri' attribute. Alternatively the WSDL can be provided inline as a child
-      element of &lt;publishWSDL&gt;. Artifacts (schemas or other WSDL documents)
-      imported by the WSDL can be resolved from the registry by specifying
-      appropriate &lt;resource&gt; elements:
-    </p>
-<pre> &lt;publishWSDL key="my.wsdl"&gt;
-   &lt;resource location="http://www.standards.org/standard.wsdl" key="standard.wsdl"/&gt;
- &lt;/publishWSDL&gt;
-</pre>
-    <p>
-      In this example the WSDL is retrieved from the registry using the key 'my.wsdl'. It
-      imports another WSDL from location 'http://www.standards.org/standard.wsdl'. Instead
-      of loading it from this location, Synapse will retrieve the imported WSDL from the
-      registry entry 'standard.wsdl'.
-    </p>
-    <p>
-      You can give the following as service parameters:
-    </p>
-    <table border="1" cellpadding="0" cellspacing="0" style="width: 100%; font-size:small" class="data-table">
-      <caption/>
-      <tbody>
-        <tr>
-          <th>
-            Parameter
-          </th>
-          <th>
-            Value
-          </th>
-          <th>
-            Default
-          </th>
-          <th>
-            Description
-          </th>
-        </tr>
-        <tr>
-          <td>
-            useOriginalwsdl
-          </td>
-          <td>
-            true|false
-          </td>
-          <td>
-            false
-          </td>
-          <td>
-            Use the given WSDL instead of generating the WSDL.
-          </td>
-        </tr>
-        <tr>
-          <td>
-            modifyUserWSDLPortAddress
-          </td>
-          <td>
-            true|false
-          </td>
-          <td>
-            true
-          </td>
-          <td>
-            (Effective only with useOriginalwsdl=true) If true (default) modify
-            the port addresses to current host.
-          </td>
-        </tr>
-      </tbody>
-    </table>
-    <p/>
-    <p>
-      Transport specific parameters that may be set as service parameters:
-    </p>
-    <table border="1" cellpadding="0" cellspacing="0" style="width: 100%; font-size:small" class="data-table">
-      <caption/>
-      <tbody>
-        <tr>
-          <th>
-            Transport
-          </th>
-          <th>
-            Require
-          </th>
-          <th>
-            Parameter
-          </th>
-          <th>
-            Description
-          </th>
-        </tr>
-        <tr>
-          <td>
-            JMS
-          </td>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.jms.ConnectionFactory
-          </td>
-          <td>
-            The JMS connection factory definition (from axis2.xml) to be used to
-            listen for messages for this service
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.jms.Destination
-          </td>
-          <td>
-            The JMS destination name (Defaults to a Queue with the service name)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.jms.DestinationType
-          </td>
-          <td>
-            The JMS destination type. Accept values 'queue' or 'topic' (default:
-            queue)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.jms.ReplyDestination
-          </td>
-          <td>
-            The destination where a reply will be posted
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.jms.Wrapper
-          </td>
-          <td>
-            The wrapper element for the JMS message
-          </td>
-        </tr>
-        <tr>
-          <td>
-            VFS
-          </td>
-          <td>
-            Required
-          </td>
-          <td>
-            transport.vfs.FileURI
-          </td>
-          <td>
-            The primary File (or Directory) URI in the vfs* transport format,
-            for this service
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Required
-          </td>
-          <td>
-            transport.vfs.ContentType
-          </td>
-          <td>
-            The expected content type for files retrieved for this service. The
-            VFS transport uses this information to select the appropriate
-            message builder.
-            <br/>
-            Examples:
-            <ul>
-              <li><tt>text/xml</tt> for plain XML or SOAP</li>
-              <li><tt>text/plain; charset=ISO-8859-1</tt> for text files</li>
-              <li><tt>application/octet-stream</tt> for binary data</li>
-            </ul>
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.FileNamePattern
-          </td>
-          <td>
-            A file name regex pattern to match files against a directory
-            specified by the FileURI
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.PollInterval
-          </td>
-          <td>
-            The poll interval (in seconds)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ActionAfterProcess
-          </td>
-          <td>
-            DELETE or MOVE
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.MoveAfterProcess
-          </td>
-          <td>
-            The directory to move files after processing (i.e. all files process
-            successfully)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ActionAfterErrors
-          </td>
-          <td>
-            DELETE or MOVE
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.MoveAfterErrors
-          </td>
-          <td>
-            The directory to move files after errors (i.e. some of the files
-            succeed but some fail)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ActionAfterFailure
-          </td>
-          <td>
-            DELETE or MOVE
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.MoveAfterFailure
-          </td>
-          <td>
-            The directory to move after failure (i.e. all files fail)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ReplyFileURI
-          </td>
-          <td>
-            Reply file URI
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.ReplyFileName
-          </td>
-          <td>
-            Reply file name (defaults to response.xml)
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td>
-            Optional
-          </td>
-          <td>
-            transport.vfs.MoveTimestampFormat
-          </td>
-          <td>
-            Timestamp prefix format for processed file name. java.text.SimpleDateFormat compatible string. e.g. yyMMddHHmmss&apos;-&apos;
-          </td>
-        </tr>
-      </tbody>
-    </table>
-    <p>
-      VFS Transport URI examples (See <a
-      href="http://commons.apache.org/vfs/filesystems.html">http://commons.apache.org/vfs/filesystems.html</a>
-      for more samples)
-    </p>
-<pre xml:space="preserve">file:///directory/filename.ext
-file:////somehost/someshare/afile.txt
-jar:../lib/classes.jar!/META-INF/manifest.mf
-jar:zip:outer.zip!/nested.jar!/somedir
-ftp://myusername:mypassword@somehost/pub/downloads/somefile.tgz[?vfs.passive=true]</pre>
-
-    <h2>
-      <a name="task" id="task">Tasks</a>
-    </h2>
-    <p>
-      A &lt;task&gt; element is used to define a Synapse Startup Task.
-    </p>
-<pre xml:space="preserve"> &lt;task class="mypackage.MyTask" name="string" [pinnedServers="(serverName)+"]&gt;
-   &lt;property name="stringProp" value="String"/&gt;
-   &lt;property name="xmlProp"&gt;
-     &lt;somexml&gt;config&lt;/somexml&gt;
-   &lt;/property&gt;
-   &lt;trigger ([[count="10"]? interval="1000"] | [cron="0 * 1 * * ?"] | [once=(true | false)])/&gt;
- &lt;/task&gt;</pre>
-    <p>
-      A task is created and scheduled to run at specified time intervals or as
-      specified by the cron expression. The Task class specifies the actual task
-      implementation class (which must implement org.apache.synapse.startup.Task
-      interface) to be executed at the specified interval/s, and name specifies
-      an identifier for the scheduled task.
-    </p>
-    <p>
-      Fields in the task class can be set using properties provided as string
-      literals or as XML fragments. (For example; if the task implementation
-      class has a field named "version" with a corresponding setter method, the
-      configuration value which will be assigned to this field before running
-      the task can be specified using a property with the name 'version')
-    </p>
-    <p>
-      There are three different trigger mechanisms to schedule tasks. A simple
-      trigger is specified specifying a 'count' and an 'interval', implying that
-      the task will run a 'count' number of times at specified intervals. A
-      trigger may also be specified as a cron trigger using a cron expression. A
-      one-time trigger is specified using the 'once' attribute as true in the
-      definition and could be specified as true in which case this task will be
-      executed only once just after the initialization of Synapse
-    </p>
-    <p>
-      You can give a list of Synapse server names where this task should be
-      started using pinnedServers attribute. Refer to the explanation of this
-      attribute under proxy services for more information.
-    </p>
-    <h2>
-      <a name="mediator" id="mediator">Mediators</a>
-    </h2>
-    <p>
-      A mediator token refers to any of the following tokens:
-    </p>
-<pre xml:space="preserve">
-    <a href="#send">send</a> | <a href="#drop">drop</a> | <a href="#log">log</a> | <a href="#property">property</a>  | <a href="#sequence_ref">sequence</a> | <a href="#validate">validate</a> | <a href="#Callout">Callout</a> | <a href="#makefault">makefault</a> | <a href="#xslt">xslt</a> | <a href="#xquery">xquery</a> | <a href="#header">header</a>  | <a href="#filter">filter</a> | <a href="#switch">switch</a> | <a href="#in">in</a> | <a href="#out">out</a>
-    | <a href="#dblookup">dblookup</a> | <a href="#dbreport">dbreport</a> | <a href="#throttle">throttle</a> | <a href="#cache">cache</a> | <a href="#clone">clone</a> | <a href="#iterate">iterate</a> | <a href="#aggregate">aggregate</a> | <a href="#class">class</a> | <a href="#pojoCommand">pojoCommand</a> | <a href="#spring">spring</a> | <a href="#script">script</a> | <a href="#RMSequence">RMSequence</a>
-    </pre>
-    <p>
-      In addition to the above, Synapse will be able to load custom mediators
-      via the J2SE Service Provider model. Mediator extensions must implement
-      the MediatorFactory interface. The Class and POJO Command mediators allow
-      custom Java code to be easily invoked during mediation, while the Script
-      mediator allows Apache BSF scripts such as Javascript, Ruby, Groovy etc to
-      be used for mediation.
-    </p>
-    <h3>
-      Core Mediators
-    </h3>
-    <h4>
-      <a name="send" id="send">Send</a>
-    </h4>
-    <p>
-      The send token represents a &lt;send&gt; element, used to send messages
-      out of Synapse to some endpoint. The send mediator also copies any message
-      context properties from the current message context to the reply message
-      received on the execution of the send operation so that the response could
-      be correlated back to the request. Messages may be correlated by WS-A
-      MessageID, or even simple custom text labels (see the property mediator
-      and samples)
-    </p>
-    <p>
-      In the simplest case shown below, the destination to send a message is
-      implicit in the message via the 'To' address. Thus a request message will
-      be sent to its 'To' address, and a response message would be sent back to
-      the client. Removing the 'To' address of a message targets it back to the
-      client, and thus a request message received may be returned to the client
-      after changing its direction. (Note: to mark a message as a response set
-      the property RESPONSE to true)
-    </p>
-    <p>
-      <strong>Note:</strong> A send operation may be blocking or
-      non-blocking depending on the actual transport implementation used. As the
-      default NIO based http/s implementation does not block on a send, care
-      must be taken if the same message must be sent and then further processed
-      (e.g. transformed). In such a scenario, it maybe required to first clone
-      the message into two copies and then perform processing to avoid
-      conflicts.
-    </p>
-<pre xml:space="preserve"> &lt;send/&gt;</pre>
-    <p>
-      If the message is to be sent to one or more endpoints, then the following
-      is used:
-    </p>
-<pre xml:space="preserve"> &lt;send&gt;
-   (endpointref | endpoint)+
- &lt;/send&gt;</pre>
-    <p>
-      where the endpointref token refers to the following:
-    </p>
-<pre xml:space="preserve"> &lt;endpoint key="name"/&gt;</pre>
-    <p>
-      and the endpoint token refers to an anonymous endpoint definition.
-    </p>
-    <p/>
-    <h4>
-      <a name="drop" id="drop">Drop</a>
-    </h4>
-    <p>
-      The drop token refers to a &lt;drop&gt; element which is used to stop
-      further processing of a message:
-    </p>
-<pre xml:space="preserve"> &lt;drop/&gt;</pre>
-    <p>
-      Once the &lt;drop&gt; mediator executes, further processing of the current
-      message stops. A the drop mediator does not necessarily close transports.
-    </p>
-    <p/>
-    <h4>
-      <a name="log" id="log">Log</a>
-    </h4>
-    <p>
-      The log token refers to a &lt;log&gt; element which may be used to log
-      messages being mediated:
-    </p>
-<pre xml:space="preserve"> &lt;log [level="string"] [separator="string"]&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
- &lt;/log&gt;</pre>
-    <p>
-      The optional level attribute selects a pre-defined subset of properties to
-      be logged.
-    </p>
-    <p>
-      e.g.
-    </p>
-    <ul>
-      <li>
-        simple = To, From, WSAction, SOAPAction, ReplyTo, MessageID and any
-        properties
-      </li>
-      <li>
-        headers = All SOAP header blocks and any properties
-      </li>
-      <li>
-        full = all attributes included in log level 'simple' and the SOAP
-        envelope and any properties
-      </li>
-      <li>
-        custom = Only properties specified to the Log mediator
-      </li>
-    </ul>
-    <p>
-      A separator if defined will be used to separate the attributes being
-      logged. The default separator is the ',' comma.
-    </p>
-    <p/>
-    <h4>
-      <a name="property" id="property">Property</a>
-    </h4>
-<pre xml:space="preserve"> &lt;property name="string" [action=set|remove] (value="literal" | expression="xpath") [scope=transport|axis2|axis2-client]/&gt;</pre>
-    <p>
-      The property token refers to a &lt;property&gt; element which is a
-      mediator that has no direct impact on the message but rather on the
-      message context flowing through Synapse. The properties set on a message
-      can be later retrieved through the synapse:get-property(prop-name) XPath
-      extension function. If a scope is specified for a property, the property
-      could be set as a transport header property or an (underlying) Axis2
-      message context property, or as a Axis2 client option. If a scope is not
-      specified, it will default to the Synapse message context scope. Using the
-      property element with action specified as "remove" you can remove any
-      existing message context properties.
-    </p>
-    <p>
-      There are some well-defined properties that you can get/set on the Synapse
-      message context scope:
-    </p>
-    <ul>
-      <li>
-        RESPONSE - 'true' means the message is to be marked as a response
-        message
-      </li>
-      <li>
-        OUT_ONLY - 'true' means the message is to be marked as an out-only
-        message that does not expect a response
-      </li>
-      <li>
-        ERROR_CODE - this is set to any error message code encountered during a
-        fault
-      </li>
-      <li>
-        ERROR_MESSAGE - this is set to any error message text encountered during
-        a fault
-      </li>
-      <li>
-        ERROR_DETAIL - this is set to any error message detail text encountered
-        during a fault
-      </li>
-      <li>
-        ERROR_EXCEPTION - this is set to any Java Exception encountered during a
-        fault
-      </li>
-    </ul>
-    <p>
-      There are some Axis2 and module properties that are useful which are set
-      at scope="axis2"
-    </p>
-    <ul>
-      <li>
-        Mercury2SequenceKey - can be an identifier specifying a Mercury
-        internal sequence key, and
-      </li>
-      <li>
-        Mercury2LastMessage - 'true' will make this the last message and
-        terminate the sequence
-      </li>
-    </ul>
-    <p>
-      There are some Axis2 client side properties/options that are useful which
-      are set at scope="axis2-client"
-    </p>
-    <ul>
-      <li>
-        FORCE_HTTP_1.0 - forces outgoing http/s messages to use HTTP 1.0
-        (instead of the default 1.1)
-      </li>
-    </ul>
-    <h5>
-      The synapse:get-property() XPath extension function
-    </h5>
-    <p>
-      The get-property() function allows any XPath expression used in a
-      configuration to lookup information from the current message context. It
-      is possible to retrieve properties previously set with the property
-      mediator, and/or information from the Synapse or Axis2 message contexts or
-      transport header. The function accepts the scope as an optional parameter
-      as shown below:
-    </p>
-    <p>
-      synapse:get-property( [(axis2 | axis2-client | transport),] &lt;property_name&gt;
-      [,&lt;dateformat&gt;] )
-    </p>
-    <p/>
-    <p>
-      Some useful properties from the Synapse message context follows:
-    </p>
-    <ul>
-      <li>
-        SYSTEM_DATE - Returns the current date as a String. Optionally a date
-        format as per standard date format may be supplied. e.g.
-        synapse:get-property("SYSTEM_DATE", "yyyy.MM.dd G 'at' HH:mm:ss z") or
-        get-property('SYSTEM_DATE')
-      </li>
-      <li>
-        SYSTEM_TIME - Returns the current time in milliseconds. (i.e. the
-        difference, measured in milliseconds, between the current time and
-        midnight, January 1, 1970 UTC)
-      </li>
-      <li>
-        To, From, Action, FaultTo, ReplyTo, MessageID the message To and Action
-        and WS-Addressing properties
-      </li>
-      <li>
-        MESSAGE_FORMAT - returns the message format - i.e. returns pox, get,
-        soap11 or soap12
-      </li>
-      <li>
-        OperationName - returns the operation name for the message
-      </li>
-    </ul>
-    <p>
-      In addition to the above, one may use the get-property() function to
-      retrieve Axis2 message context properties or transport headers. e.g.
-      synapse:get-property('transport', 'USER_AGENT')
-    </p>
-    <h5>
-      SynapseXpath variables
-    </h5>
-    <p>
-      There are a set of predefined XPath variables when writing XPaths in
-      the Synapse Configuration. Those are as follows;
-    </p>
-    <ul>
-        <li>
-            body - The SOAP 1.1 or 1.2 body element
-        </li>
-        <p>
-            For example; expression="$body/getQuote" refers to the first
-            getQuote element in the SOAP body regardless of whether the message
-            is SOAP-11 or SOAP-12
-        </p>
-        <li>
-            header - The SOAP 1.1 or 1.2 header element
-        </li>
-        <p>
-            For example; expression="$header/wsa:To" refers to the addressing
-            To header regardless of whether this message is SOAP-11 or SOAP-12
-        </p>
-    </ul>
-    <p>
-      Further there are some variable prefixes defined in Synapse XPaths
-      which can be usefull in writing the configurations;
-    </p>
-    <ul>
-        <li>
-            ctx - Prefix for Synapse MessageContext properties
-        </li>
-        <p>
-            For example; expression="$ctx:RESPONSE" gives the value of the
-            Synapse message context property with name 'RESPONSE'
-        </p>
-        <li>
-            axis2 - Prefix for Axis2 MessageContext properties
-        </li>
-        <p>
-            For example; expression="$axis2:messageType" gives the value of the
-            axis2 message context property with name 'messageType'
-        </p>
-        <li>
-            trp - Prefix for the transport headers
-        </li>
-        <p>
-            For example; expression="$trp:Content-Type" gives the value of the
-            'Content-Type' transport header, which is going to be the
-            Content-Type of the current message
-        </p>
-    </ul>
-    <h4>
-      <a name="sequence_ref" id="sequence_ref">Sequence</a>
-    </h4>
-<pre xml:space="preserve"> &lt;sequence key="name"/&gt;</pre>
-    <p>
-      A sequence ref token refers to a &lt;sequence&gt; element which is used to
-      invoke a named sequence of mediators.
-    </p>
-    <p/>
-    <h4>
-      <a name="validate" id="validate">Validate</a>
-    </h4>
-<pre xml:space="preserve"> &lt;validate [source="xpath"]&gt;
-   &lt;property name="validation-feature-id" value="true|false"/&gt;*
-   &lt;schema key="string"/&gt;+
-   &lt;on-fail&gt;
-     mediator+
-   &lt;/on-fail&gt;
- &lt;/validate&gt;</pre>
-    <p>
-      The &lt;validate&gt; mediator validates the result of the evaluation of
-      the source xpath expression, against the schema specified. If the source
-      attribute is not specified, the validation is performed against the first
-      child of the SOAP body of the current message. If the validation fails,
-      the on-fail sequence of mediators is executed. Properties could be used to
-      turn on/off some of the underlying features of the validator (See <a
-      href="http://xerces.apache.org/xerces2-j/features.html">http://xerces.apache.org/xerces2-j/features.html</a>)
-    </p>
-    <p/>
-    <h4>
-      <a name="Callout" id="Callout">Callout</a>
-    </h4>
-<pre xml:space="preserve"> &lt;callout serviceURL="string" [action="string"]&gt;
-   &lt;configuration [axis2xml="string"] [repository="string"]/&gt;?
-   &lt;source xpath="expression" | key="string"&gt;
-   &lt;target xpath="expression" | key="string"/&gt;
- &lt;/callout&gt;
-</pre>
-    <p>
-      The &lt;callout&gt; mediator performs a blocking external service invocation during 
-      mediation. The serviceURL and the optional action specifies the parameters for this external
-      call. The source element specifies the payload for the request message using an XPath expression;
-      or a registry key that will be used. The target element specifies a node, at which the resulting
-      payload will be attached into the current message, or the name of a key/property using which
-      the response would be attached to the current message context as a property.
-    </p>
-    <p>As the callout mediator performs a blocking call, it cannot use the default non-blocking http/s
-      transports based on Java NIO, and thus defaults to using the samples/axis2Client/client_repo/conf/axis2.xml
-      as the Axis2 configuration, and samples/axis2Client/client_repo as the client repository unless
-      these are specified separately
-    </p>
-    <h3>
-      Transformation Mediators
-    </h3>
-    <h4>
-      <a name="makefault" id="makefault">Makefault</a>
-    </h4>
-<pre xml:space="preserve"> &lt;makefault [version="soap11|soap12|pox"]&gt;
-   &lt;code (value="literal" | expression="xpath")/&gt;
-   &lt;reason (value="literal" | expression="xpath")&gt;
-   &lt;node&gt;?
-   &lt;role&gt;?
-   &lt;detail&gt;?
- &lt;/makefault&gt;</pre>
-    <p>
-      The &lt;makefault&gt; mediator transforms the current message into a fault
-      message, but does NOT send it. The &lt;send&gt; mediator needs to be
-      invoked to send a fault message created this way. The fault message "To"
-      header is set to the "Fault-To" of the original message if such a header
-      exists on the original message. If a 'version' attribute is specified,
-      the created fault message will be created as a selected SOAP 1.1, SOAP
-      1.2 or POX fault.
-    </p>
-    <p/>
-    <h4>
-      <a name="xslt" id="xslt">XSLT</a>
-    </h4>
-<pre xml:space="preserve"> &lt;xslt key="string" [source="xpath"]&gt;
-   &lt;property name="string" (value="literal" | expression="xpath")/&gt;*
-   &lt;feature name="string" value="true| false" /&gt;*
- &lt;/xslt&gt;</pre>
-    <p>
-      The &lt;xslt&gt; mediator applies the specified XSLT transformation to the
-      selected element of the current message payload. If the source element is
-      not specified, it defaults to the first child of the soap body. Optionally
-      parameters (XSLT) could be passed into the transformations through the
-      'property' elements. The 'feature' element defines any features which
-      should be explicitly set to the TransformerFactory. The feature
-      'http://ws.apache.org/ns/synapse/transform/feature/dom' turns on DOM based
-      transformations instead of serializing elements into Byte streams and/or
-      temporary files. Though this would be better in performance than using
-      byte streams, sometimes it may not work for all transformations.
-    </p>
-    <h4>
-      <a name="xquery" id="xquery">XQuery</a>
-    </h4>
-<pre xml:space="preserve">&lt;xquery key="string" [target="xpath"]&gt;
-    &lt;variable name="string" type="string" [key="string"] [expression="xpath"] [value="string"]/&gt;?
-&lt;/xquery&gt; </pre>
-    <p/>
-    <p>
-      The XQuery mediator can be used to perform an XQuery transformation. The
-      'key' attribute specifies the XQuery transformation, and the optional
-      'target' attribute specifies the node of the message that should be
-      transformed. This defaults to the first child of the SOAP body of the
-      payload. The 'variable' elements define a variable that could be bound to
-      the dynamic context of the XQuery engine in order to access those
-      variables through the XQuery script .
-    </p>
-    <p>
-      It is possible to specify just a literal 'value', or an XPath expression
-      over the payload, or even specify a registry key or a registry key
-      combined with an XPath expression that selects the variable. The name of
-      the variable corresponds to the name of variable declaration in the XQuery
-      script. The 'type' of the variable must be a valid type defined by the
-      JSR-000225 (XQJ API).
-    </p>
-    <p>
-      The supported types are:
-    </p>
-    <ul>
-      <li>
-        XQItemType.XQBASETYPE_INT -&gt; INT
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_INTEGER -&gt; INTEGER
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_BOOLEAN -&gt; BOOLEAN
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_BYTE - &gt; BYTE
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_DOUBLE -&gt; DOUBLE
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_SHORT -&gt; SHORT
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_LONG -&gt; LONG
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_FLOAT -&gt; FLOAT
-      </li>
-      <li>
-        XQItemType.XQBASETYPE_STRING -&gt; STRING
-      </li>
-      <li>
-        XQItemType.XQITEMKIND_DOCUMENT -&gt; DOCUMENT
-      </li>
-      <li>
-        XQItemType.XQITEMKIND_DOCUMENT_ELEMENT -&gt; DOCUMENT_ELEMENT
-      </li>
-      <li>
-        XQItemType.XQITEMKIND_ELEMENT -&gt; ELEMENT
-      </li>
-    </ul>
-    <p/>
-    <h4>
-      <a name="header" id="header">Header</a>
-    </h4>
-<pre xml:space="preserve"> &lt;header name="qname" (value="literal" | expression="xpath") [action="set"]/&gt;
- &lt;header name="qname" action="remove"/&gt;</pre>
-    <p>
-      The &lt;header&gt; mediator sets or removes a specified header from the
-      current soap infoset. Currently the set header only supports simple valued
-      headers. In the future we may extend this to have XML structured headers
-      by embedding the XML content within the element itself. The optional
-      action attribute specifies whether the mediator should set or remove the
-      header. If omitted, it defaults to a set-header.
-    </p>
-    <p/>
-    <h3>
-      Selection Mediators
-    </h3>
-    <h4>
-      <a name="filter" id="filter">Filter</a>
-    </h4>
-<pre xml:space="preserve"> &lt;filter (source="xpath" regex="string") | xpath="xpath"&gt;
-   mediator+
- &lt;/filter&gt;</pre>
-    <p>
-      The &lt;filter&gt; mediator either test the given xpath expression as a
-      boolean expression, or match the evaluation result of a source xpath
-      expression as a String against the given regular expression. If the test
-      succeeds, the filter mediator will execute the enclosed mediators in
-      sequence.
-    </p>
-    <p>One could also use this mediator to handle the failure case as well, in which case the
-       configuration would be as follows
-    </p>
-<pre xml:space="preserve"> &lt;filter (source="xpath" regex="string") | xpath="xpath"&gt;
-   &lt;then [sequence="string"]&gt;
-     mediator+
-   &lt;/then&gt;
-   &lt;else [sequence="string"]&gt;
-     mediator+
-   &lt;/else&gt;
- &lt;/filter&gt;</pre>
-    <p>In this case the filter condition remains as earlier and the succeeded messages will be
-       mediated using the the set of mediators enclosed in the 'then' element in sequence, while
-       failed messages will be mediated using the set of mediators enclosed in the else element
-       in sequence
-    </p>
-    <p/>
-    <h4>
-      <a name="switch" id="switch">Switch</a>
-    </h4>
-<pre xml:space="preserve"> &lt;switch source="xpath"&gt;
-   &lt;case regex="string"&gt;
-     mediator+
-   &lt;/case&gt;+
-   &lt;default&gt;
-     mediator+
-   &lt;/default&gt;?
- &lt;/switch&gt;</pre>
-    <p>
-      The &lt;switch&gt; mediator will evaluate the given source xpath
-      expression into its string value, and match it against the given regular
-      expressions. If the specified cases does not match and a default case
-      exists, it will be executed.
-    </p>
-    <a name="in" id="in"/>
-    <h4>
-      <a name="out" id="out">In / Out</a>
-    </h4>
-<pre xml:space="preserve">&lt;in&gt;<br/>  mediator+
-&lt;/in&gt;<br/></pre>
-<pre xml:space="preserve">&lt;out&gt;
-  mediator+
-&lt;/out&gt;</pre>
-    <p>
-      <br/>
-    </p>
-    <p>
-      The In and Out mediators will execute the child mediators over the current
-      message if the message matches the direction of the mediator. Hence all
-      incoming messages would pass through the "&lt;in&gt;" mediators and vice
-      versa.
-    </p>
-    <p/>
-    <h3>
-      Database Mediators
-    </h3>
-    <h4>
-      <a name="dblookup" id="dblookup">DB-lookup</a>
-    </h4>
-<pre xml:space="preserve">&lt;dblookup&gt;
-   &lt;connection&gt;
-     &lt;pool&gt;
-      (
-       &lt;driver/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     |
-       &lt;dsName/&gt;
-       &lt;icClass/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     )
-       &lt;property name="name" value="value"/&gt;*
-     &lt;/pool&gt;
-   &lt;/connection&gt;
-   &lt;statement&gt;
-     &lt;sql&gt;select something from table where something_else = ?&lt;/sql&gt;
-     &lt;parameter [value="" | expression=""] type="CHAR|VARCHAR|LONGVARCHAR|NUMERIC|DECIMAL|BIT|TINYINT|SMALLINT|INTEGER|BIGINT|REAL|FLOAT|DOUBLE|DATE|TIME|TIMESTAMP"/&gt;*
-     &lt;result name="string" column="int|string"/&gt;*
-   &lt;/statement&gt;+
-&lt;/dblookup&gt;</pre>
-    <p/>
-    <p>
-      The dblookup mediator is capable of executing an arbitrary SQL select
-      statement, and then set some resulting values as local message properties
-      on the message context. The DB connection used maybe looked up from an
-      external DataSource or specified in-line, in which case an Apache DBCP
-      connection pool is established and used. Apache DBCP connection pools
-      support the following properties:
-    </p>
-    <ul>
-      <li>
-        autocommit = true | false
-      </li>
-      <li>
-        isolation = Connection.TRANSACTION_NONE |
-        Connection.TRANSACTION_READ_COMMITTED |
-        Connection.TRANSACTION_READ_UNCOMMITTED |
-        Connection.TRANSACTION_REPEATABLE_READ |
-        Connection.TRANSACTION_SERIALIZABLE
-      </li>
-      <li>
-        initialsize = int
-      </li>
-      <li>
-        maxactive = int
-      </li>
-      <li>
-        maxidle = int
-      </li>
-      <li>
-        maxopenstatements = int
-      </li>
-      <li>
-        maxwait = long
-      </li>
-      <li>
-        minidle = int
-      </li>
-      <li>
-        poolstatements = true | false
-      </li>
-      <li>
-        testonborrow = true | false
-      </li>
-      <li>
-        testonreturn = true | false
-      </li>
-      <li>
-        testwhileidle = true | false
-      </li>
-      <li>
-        validationquery = String
-      </li>
-    </ul>
-    <p>
-      More than one statement may be specified, and the SQL statement may
-      specify parameters which could be specified as values or XPath
-      expressions. The types of parameters could be any valid SQL types. Only
-      the first row of a result set will be considered and any others are
-      ignored. The single &lt;result&gt; element contains the 'name' and the
-      column' attributes. The 'name' attribute defines the name under which the
-      result is stored in the Synapse message context, and the column attribute
-      specifies a column number or name .
-    </p>
-    <h4>
-      <a name="dbreport" id="dbreport">DB-report</a>
-    </h4>
-<pre xml:space="preserve">&lt;dbreport&gt;
-   &lt;connection&gt;
-     &lt;pool&gt;
-      (
-       &lt;driver/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     |
-       &lt;dsName/&gt;
-       &lt;icClass/&gt;
-       &lt;url/&gt;
-       &lt;user/&gt;
-       &lt;password/&gt;
-     )
-       &lt;property name="name" value="value"/&gt;*
-     &lt;/pool&gt;
-   &lt;/connection&gt;
-   &lt;statement&gt;
-     &lt;sql&gt;insert into something values(?, ?, ?, ?)&lt;/sql&gt;
-     &lt;parameter [value="" | expression=""] type="CHAR|VARCHAR|LONGVARCHAR|NUMERIC|DECIMAL|BIT|TINYINT|SMALLINT|INTEGER|BIGINT|REAL|FLOAT|DOUBLE|DATE|TIME|TIMESTAMP"/&gt;*
-    &lt;/statement&gt;+
-&lt;/dblreport&gt;</pre>
-    <p/>
-    <p>
-      The dbreport mediator is very similar to the dblookup mediator, but writes
-      information to a Database, using the specified insert SQL statement.
-    </p>
-    <p/>
-    <h3>
-      Advanced Mediators
-    </h3>
-    <h4>
-      <a name="throttle" id="throttle">Throttle</a>
-    </h4>
-<pre xml:space="preserve">&lt;throttle [onReject="string"] [onAccept="string"] id="string"&gt;
-    (&lt;policy key="string"/&gt; | &lt;policy&gt;..&lt;/policy&gt;)
-    &lt;onReject&gt;..&lt;/onReject&gt;?
-    &lt;onAccept&gt;..&lt;/onAccept&gt;?
-&lt;/throttle&gt;</pre>
-    <p/>
-    <p>
-      The Throttle mediator can be used for rate limiting as well as concurrency
-      based limiting. A WS-Policy dictates the throttling configuration and may
-      be specified inline or loaded from the registry. Please refer to the
-      samples document for sample throttling policies. The Throttle mediator
-      could be added in the request path for rate limiting and concurrent access
-      limitation. When using for concurrent access limitation, the same throttle
-      mediator 'id' must be triggered on the response flow so that completed
-      responses are deducted from the available limit. (i.e. two instances of
-      the throttle mediator with the same 'id' attribute in the request and
-      response flows). The 'onReject' and 'onAccept' sequence references or
-      inline sequences define how accepted and rejected messages are to be
-      handled.
-    </p>
-    <h4>
-      <a name="cache" id="cache">Cache</a>
-    </h4>
-<pre xml:space="preserve"> &lt;cache [id="string"] [hashGenerator="class"] [timeout="seconds"] [scope=(per-host | per-mediator)]
-     collector=(true | false) [maxMessageSize="in-bytes"]&gt;
-   &lt;onCacheHit [sequence="key"]&gt;
-     (mediator)+
-   &lt;/onCacheHit&gt;?
-   &lt;implementation type=(memory | disk) maxSize="int"/&gt;
- &lt;/cache&gt;</pre>
-    <p>
-      The &lt;cache&gt; mediator will evaluate the hash value of an incoming
-      message as described in the optional hash generator implementation (which
-      should be a class implementing the org.wso2.caching.digest.DigestGenerator
-      interface). The default hash generator is
-      'org.wso2.caching.digest.DOMHashGenerator'. If the generated hash value
-      has been found in the cache then the cache mediator will execute the
-      onCacheHit sequence which can be specified inline or referenced. The cache
-      mediator must be specified with an 'id' and two instances with this same
-      'id' that correlates the response message into the cache for the request
-      message hash. The optional 'timeout' specifies the valid duration for
-      cached elements, and the scope defines if mediator instances share a
-      common cache per every host instance, or per every cache mediator pair
-      (i.e. 'id') instance. The 'collector' attribute 'true' specifies that the
-      mediator instance is a response collection instance, and 'false' specifies
-      that its a cache serving instance. The maximum size of a message to be
-      cached could be specified with the optional 'maxMessageSize' attributes in
-      bytes and defaults to unlimited. Finally the 'implementation' element may
-      define if the cache is disk or memory based, and the 'maxSize' attribute
-      defines the maximum number of elements to be cached.
-    </p>
-    <h3>
-      EIP Mediators
-    </h3>
-    <h4>
-      <a name="clone" id="clone">Clone</a>
-    </h4>
-<pre xml:space="preserve"> &lt;clone [continueParent=(true | false)]&gt;
-   &lt;target [to="uri"] [soapAction="qname"] [sequence="sequence_ref"] [endpoint="endpoint_ref"]&gt;
-     &lt;sequence&gt;
-       (mediator)+
-     &lt;/sequence&gt;?
-     &lt;endpoint&gt;
-       endpoint
-     &lt;/endpoint&gt;?
-   &lt;/target&gt;+
- &lt;/clone&gt;</pre>
-    <p>
-      The clone mediator closely resembles the Message Splitter EIP and will
-      split the message into number of identical messages which will be
-      processed in parallel. The original message cloned can be continued or
-      dropped depending on the boolean value of the optional 'continueParent'
-      attribute. Optionally a custom 'To' address and/or a 'Action' may be
-      specified for cloned messages
-    </p>
-    <h4>
-      <a name="iterate" id="iterate">Iterate</a>
-    </h4>
-<pre xml:space="preserve"> &lt;iterate [continueParent=(true | false)] [preservePayload=(true | false)] (attachPath="xpath")? expression="xpath"&gt;
-   &lt;target [to="uri"] [soapAction="qname"] [sequence="sequence_ref"] [endpoint="endpoint_ref"]&gt;
-     &lt;sequence&gt;
-       (mediator)+
-     &lt;/sequence&gt;?
-     &lt;endpoint&gt;
-       endpoint
-     &lt;/endpoint&gt;?
-   &lt;/target&gt;+
- &lt;/iterate&gt;</pre>
-    <p>
-      The iterate mediator implements another EIP and will split the message
-      into number of different messages derived from the parent message by
-      finding matching elements for the XPath expression specified. New messages
-      will be created for each and every matching element and processed in
-      parallel using either the specified sequence or endpoint. Parent message
-      can be continued or dropped in the same way as in the clone mediator. The
-      'preservePayload' attribute specifies if the original message should be
-      used as a template when creating the splitted messages, and defaults to
-      'false', in which case the splitted messages would contain the split
-      elements as the SOAP body.
-    </p>
-    <h4>
-      <a name="aggregate" id="aggregate">Aggregate</a>
-    </h4>
-<pre xml:space="preserve"> &lt;aggregate&gt;
-   &lt;correlateOn expression="xpath"/&gt;?
-   &lt;completeCondition [timeout="time-in-seconds"]&gt;
-     &lt;messageCount min="int-min" max="int-max"/&gt;?
-   &lt;/completeCondition&gt;?
-   &lt;onComplete expression="xpath" [sequence="sequence-ref"]&gt;
-     (mediator +)?
-   &lt;/onComplete&gt;
- &lt;/aggregate&gt;</pre>
-    <p>
-      The aggregate mediator implements the Message Aggregator EIP and will
-      aggregate the messages or responses for splitted messages using either the
-      clone or iterate mediators. At the same time it can aggregate messages on
-      the presence of matching elements specified by the correlateOn XPATH
-      expression. Aggregate will collect the messages coming into it until the
-      messages collected on the aggregation satisfies the complete condition.
-      The completion condition can specify a minimum or maximum number of
-      messages to be collected, or a timeout value in seconds, after which the
-      aggregation terminates. On completion of the aggregation it will merge all
-      of the collected messages and invoke the onComplete sequence on it. The
-      merged message would be created using the XPath expression specified by
-      the attribute 'expression' on the 'onComplete' element.
-    </p>
-    <h3>
-      Extension mediators
-    </h3>
-    <h4>
-      <a name="class" id="class">Class</a>
-    </h4>
-<pre xml:space="preserve"> &lt;class name="class-name"&gt;
-   &lt;property name="string" value="literal"&gt;
-     (either literal or XML child)
-   &lt;/property&gt;
- &lt;/class&gt; </pre>
-    <p>
-      The class mediator creates an instance of a custom specified class and
-      sets it as a mediator. The class must implement the
-      org.apache.synapse.api.Mediator interface. If any properties are
-      specified, the corresponding setter methods are invoked on the class,
-      once, during initialization.
-    </p>
-    <p/>
-    <h4>
-      <a name="pojoCommand" id="pojoCommand">POJOCommand</a>
-    </h4>
-<pre xml:space="preserve"> &lt;pojoCommand name="class-name"&gt;
-   (
-   &lt;property name="string" value="string"/&gt; |
-   &lt;property name="string" context-name="literal" [action=(ReadContext | UpdateContext | ReadAndUpdateContext)]&gt;
-     (either literal or XML child)
-   &lt;/property&gt; |
-   &lt;property name="string" expression="xpath" [action=(ReadMessage | UpdateMessage | ReadAndUpdateMessage)]/&gt;
-   )*
- &lt;/pojoCommand&gt; </pre>
-    <p>
-      The pojoCommand mediator creates an instance of the specified command
-      class - which may implement the org.apache.synapse.Command interface or
-      should have a public void method "public void execute()". If any
-      properties are specified, the corresponding setter methods are invoked on
-      the class before each message is executed. It should be noted that a new
-      instance of the POJO Command class is created to process each message
-      processed. After execution of the POJO Command mediator, depending on the
-      'action' attribute of the property, the new value returned by a call to
-      the corresponding getter method is stored back to the message or to the
-      context. The 'action' attribute may specify whether this behaviour is
-      expected or not via the Read, Update and ReadAndUpdate properties.
-    </p>
-    <p/>
-    <h3>
-      <a name="script" id="script">Scripting language mediators</a>
-    </h3>
-    <p/>
-    <p>
-      Synapse supports Mediators implemented in a variety of scripting languages
-      such as JavaScript, Python or Ruby. There are two ways of defining script
-      mediators, either with the script program statements stored in a separate
-      file which is referenced via the local or remote registry entry, or with
-      the script program statements embedded in-line within the Synapse
-      configuration. A script mediator using a script off the registry (local or
-      remote) is defined as follows:
-    </p>
-<pre xml:space="preserve"> &lt;script key="string" language="string" [function="script-function-name"]/&gt;</pre>
-    <p>
-      The property key is the registry key to load the script. The language
-      attribute specifies the scripting language of the script code (e.g. "js"
-      for Javascript, "rb" for ruby, "groovy" for Groovy, "py" for Python..).
-      The function is an optional attribute defining the name of the script
-      function to invoke, if not specified it defaults to a function named
-      'mediate'. The function is passed a single parameter - which is the
-      Synapse MessageContext. The function may return a boolean, if it does not,
-      then true is assumed, and the script mediator returns this value. An
-      inline script mediator has the script source embedded in the configuration
-      as follows:
-    </p>
-<pre xml:space="preserve"> &lt;script language="string"&gt;...script source code...&lt;script/&gt;</pre>
-    <p>
-      The execution context environment of the script has access to the Synapse
-      MessageContext predefined in a script variable named 'mc' . An example of
-      an inline mediator using JavaScript/E4X which returns false if the SOAP
-      message body contains an element named 'symbol' which has a value of 'IBM'
-      would be:
-    </p>
-<pre xml:space="preserve"> &lt;script language="js"&gt;mc.getPayloadXML()..symbol != "IBM";&lt;script/&gt;</pre>
-    <p>
-      Synapse uses the Apache <a href="http://jakarta.apache.org/bsf/">Bean
-      Scripting Framework</a> for the scripting language support, any
-      script language supported by BSF may be used to implement a Synapse
-      Mediator.
-    </p>
-    <p>
-      Implementing a Mediator with a script language can have advantages over
-      using the built in Synapse Mediator types or implementing a custom Java
-      class Mediator. Script Mediators have all the flexibility of a class
-      Mediator with access to the Synapse MessageContext and SynapseEnvironment
-      APIs, and the ease of use and dynamic nature of scripting languages allows
-      rapid development and prototyping of custom mediators. An additional
-      benefit of some scripting languages is that they have very simple and
-      elegant XML manipulation capabilities, for example JavaScript E4X or Ruby
-      REXML, so this makes them well suited for use in the Synapse mediation
-      environment. For both types of script mediator definition the
-      MessageContext passed into the script has additional methods over the
-      standard Synapse MessageContext to enable working with the XML in a way
-      natural to the scripting language. For example when using JavaScript
-      getPayloadXML and setPayloadXML, E4X XML objects, and when using Ruby,
-      REXML documents.
-    </p>
-    <h3>
-      Extensibility of Synapse
-    </h3>
-    <p>
-      The Synapse configuration language could be easily extended, with
-      configuration extensions as well as mediation extensions. The Spring
-      mediator is such an example.
-    </p>
-    <h4>
-      Spring Configuration
-    </h4>
-    <p>
-      A Spring configuration could be created as a localEntry or remote registry
-      entry providing a URL or a key reference to a Registry. The configuration
-      is then created on first use or as necessary (as per registry lookup
-      semantics) by the mediators which reference this configuration.
-    </p>
-<pre xml:space="preserve"> &lt;localEntry key="string"/&gt;
- &lt;localEntry key="string" src="url"/&gt;</pre>
-    <p>
-      The name attribute specifies a unique name for the configuration, and the
-      src, key or inlined XML references to the Spring configuration
-    </p>
-    <p/>
-    <h4>
-      <a name="spring" id="spring">Spring mediator</a>
-    </h4>
-<pre xml:space="preserve"> &lt;spring:spring bean="exampleBean1" key="string"/&gt;</pre>
-    <p>
-      The &lt;spring&gt; element creates an instance of a mediator, which is
-      managed by Spring. This Spring bean must implement the Mediator interface
-      for it to act as a Mediator. The key will reference the Spring
-      ApplicationContext/Configuration used for the bean
-    </p>
-
-    <h3>
-      Other Mediators
-    </h3>
-        <h4>
-      <a name="RMSequence" id="RMSequence">RMSequence</a>
-    </h4>
-<pre xml:space="preserve"> &lt;RMSequence (correlation="xpath" [last-message="xpath"]) | single="true" [version="1.0|1.1"]/&gt;</pre>
-    <p>
-      The &lt;RMSequence&gt; mediator can be used to create a sequence of
-      messages to communicate via WS-Reliable Messaging with an WS-RM enabled
-      endpoint (&lt;enableRM&gt;). The simple use case of this mediator is to
-      specify a single="true" property, because this means that only one message
-      is involved in the same sequence. However if multiple messages should be
-      sent in the same sequence, the correlation property should be used with a
-      XPath expression that selects an unique element value from the incoming
-      message. With the result of the XPath expression, Synapse can group
-      messages together that belong to the same sequence. To close the sequence
-      neatly, for the last message of the sequence also an XPath expression
-      should be specified. With the version attribute the WS-RM specification
-      version to be used can be specified, 1.0 or 1.1.
-    </p>
-    <p/>
-    <p/>
-  </body>
-</document>  
\ No newline at end of file
Index: java/modules/documentation/src/site/xdoc/1_2/Synapse_QuickStart.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_2/Synapse_QuickStart.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_2/Synapse_QuickStart.xml	(nonexistent)
@@ -1,559 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-<document>
-    <properties>
-        <title>Apache Synapse - Quick Start Guide</title>
-    </properties>
-    <head>
-        <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-    </head>
-  <body>
-    <div style="margin-top:-40px; float:right; _margin-top:0px;">
-      <img alt="Synapse logo"
-           src="images/synapse-logo-web2.png" width="197"
-           height="82"/>
-    </div>
-    <div>
-      <h1>
-        Apache Synapse ESB - Quick Start Guide
-      </h1>
-    </div>
-    <p>
-      This guide will demonstrate two sample applications covering the basic and
-      the most common usage scenarios of Synapse; which is Message mediation and
-      Service mediation (i.e. using Proxy services). You will be guided through
-      a step by step approach to get a feeling about Synapse from the absolute
-      beginning.
-    </p>
-    <h3>
-      Pre-requisites
-    </h3>
-    <p>
-      You should have following pre-requisites installed on your system to
-      follow through this guide
-    </p>
-    <ul>
-      <li>
-        A Java 2 SE - JDK or JRE of version 1.5.x or higher
-      </li>
-      <li>
-        Apache Ant <a href="http://ant.apache.org">http://ant.apache.org</a>
-      </li>
-    </ul>
-    <h2>
-      Message Mediation
-    </h2>
-    <p>
-      In this example Synapse will be used to simply log all the messages
-      passing through it. Although this simple scenario only performs logging,
-      it demonstrates the basics of message mediation, where the logging
-      functionality could be replaced with any combination of advanced
-      mediations such as transformations, content based routing as well as
-      bridging between different communication protocols etc. So, let's start
-      with the basics.
-    </p>
-    <h3>
-      Download
-    </h3>
-    <p>
-      Our first task is to download Synapse. Open a web browser and access the
-      following URL:
-      <a href="http://synapse.apache.org/download.html">http://synapse.apache.org/download.html</a>.
-      You will then see the list of available releases. Click on the latest version, and you
-      will be directed to the Synapse release download page. Now download the
-      'Standard binary distribution' ZIP or tar.gz archive compatible with your
-      operating system.
-    </p>
-    <h3>
-      Installation
-    </h3>
-    <p>
-      Synapse can be installed just by extracting the downloaded binary
-      archive.. A directory named synapse with the release number will be
-      created in the selected parent directory, containing all the files
-      required for Synapse. We will refer to this directory as &lt;synapse-home&gt;
-      from now on.
-    </p>
-    <h3>
-      Running the sample
-    </h3>
-    <p>
-      Synapse ships with a set of sample clients and services to demonstrate
-      some of its core capabilities. Hence, you will need to run three programs
-      to get an idea of message mediation. The destination server that hosts the
-      ultimate service to be invoked to service the client, the client itself,
-      and Synapse, which acts as the intermediary to bridge between the client
-      and the server.
-    </p>
-    <p/>
-    <h4>
-      Starting the sample Axis2 server
-    </h4>
-    <p>
-      In this case we are using a standalone Axis2 web services engine as the
-      server. You don't have to get it now, it is already bundled with your
-      Synapse distribution. But we have to deploy a sample service for which
-      client can send requests. Go to &lt;synapse-home&gt;/samples/axis2Server/src/SimpleStockQuoteService
-      directory. Run "ant" to build and deploy this service to the sample Axis2
-      server.
-    </p>
-    <p/>
-<pre xml:space="preserve">user@host:/opt/synapse-1.1.1/samples/axis2Server$ cd src/SimpleStockQuoteService/
-user@host:/opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService$ ant
-Buildfile: build.xml
-
-clean:
-
-init:
-    [mkdir] Created dir: /opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService/temp
-    [mkdir] Created dir: /opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/classes
-    [mkdir] Created dir: /opt/synapse-1.1.1/samples/axis2Server/repository/services
-
-compile-all:
-    [javac] Compiling 9 source files to /opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/classes
-
-build-service:
-    [mkdir] Created dir: /opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote
-    [mkdir] Created dir: /opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 1 file to /opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 1 file to /opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote/META-INF
-     [copy] Copying 9 files to /opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService/temp/SimpleStockQuote
-      [jar] Building jar: /opt/synapse-1.1.1/samples/axis2Server/repository/services/SimpleStockQuoteService.aar
-
-BUILD SUCCESSFUL
-Total time: 2 seconds
-user@host:/opt/synapse-1.1.1/samples/axis2Server/src/SimpleStockQuoteService$</pre>
-    <p>
-      Now go to &lt;synapse-home&gt;/samples/axis2Server directory and start the
-      server using the following command. This will start Axis2 server on port
-      9000 (http).
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . axis2server.sh
-      </p>
-      <p>
-        Windows: axis2server.bat
-      </p>
-    </div>
-    <p>
-      You will see the following messages on the console.
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse-1.1.1/samples/axis2Server$ ./axis2server.sh
- Using Bouncy castle JAR for Java 1.5
- Using JAVA_HOME:   /opt/jdk1.5_06
- Using AXIS2 Repository :   /opt/synapse-1.1.1/samples/axis2Server/repository
- Using AXIS2 Configuration :   /opt/synapse-1.1.1/samples/axis2Server/repository/conf/axis2.xml
-2007-11-05 14:36:41,462 [-] [main]  INFO SimpleHTTPServer [SimpleAxisServer] Starting
-[SimpleAxisServer] Using the Axis2 Repository : /opt/synapse-1.1.1/samples/axis2Server/repository
-[SimpleAxisServer] Using the Axis2 Configuration File : /opt/synapse-1.1.1/samples/axis2Server/repository/conf/axis2.xml
-2007-11-05 14:36:43,864 [-] [main]  INFO HttpCoreNIOSender HTTPS Sender starting
-2007-11-05 14:36:43,891 [-] [main]  INFO HttpCoreNIOSender HTTP Sender starting
-2007-11-05 14:36:44,288 [-] [main]  INFO HttpCoreNIOListener HTTPS Listener starting on port : 9002
-2007-11-05 14:36:44,298 [-] [main]  INFO HttpCoreNIOListener HTTP Listener starting on port : 9000
-2007-11-05 14:36:44,350 [-] [main]  INFO SimpleHTTPServer [SimpleAxisServer] Started</pre>
-    <p/>
-    <h4>
-      Starting Synapse
-    </h4>
-    <p>
-      Now it's time to start Synapse. In this scenario we are starting Synapse
-      using the sample configuration found in synapse_sample_0.xml (i.e. in
-      repository/conf/sample) and listed below. It is configured to log and pass
-      through, all the messages.
-    </p>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;<br/>    &lt;log level="full"/&gt; <br/>    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p/>
-    <p>
-      Go to &lt;synapse-home&gt;/bin directory and type the command given below.
-      Synapse will be started on port 8280 (http) and 8243 (https - under JDK
-      1.5)
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . synapse.sh -sample 0
-      </p>
-      <p>
-        Windows: synapse.bat -sample 0
-      </p>
-    </div>
-    <p/>
-    <p>
-      Following messages will be displayed on the console to indicate the
-      successfull startup of Synapse.
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse-1.1.1/bin$ ./synapse.sh -sample 0
- Using Bouncy castle JAR for Java 1.5
-Starting Synapse/Java ...
-Using SYNAPSE_HOME:    /opt/synapse-1.1.1
-Using JAVA_HOME:       /opt/jdk1.5_06
-Using SYNAPSE_XML:     -Dsynapse.xml=/opt/synapse-1.1.1/repository/conf/sample/synapse_sample_0.xml
-2007-11-05 14:58:55,029 [-] [main]  INFO ServerManager Using the Axis2 Repository /opt/synapse-1.1.1/repository
-2007-11-05 14:58:56,617 [-] [main]  INFO SynapseInitializationModule Initializing Synapse at : Mon Nov 05 14:58:56 LKT 2007
-2007-11-05 14:58:56,618 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Loading mediator extensions...
-2007-11-05 14:58:56,619 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Initializing the Synapse configuration ...
-2007-11-05 14:58:56,624 [127.0.1.1-asankha] [main]  INFO XMLConfigurationBuilder Generating the Synapse configuration model by parsing the XML configuration
-2007-11-05 14:58:56,717 [127.0.1.1-asankha] [main]  INFO SynapseConfigurationBuilder Loaded Synapse configuration from : /opt/synapse-1.1/repository/conf/sample/synapse_sample_0.xml
-2007-11-05 14:58:56,724 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Deploying the Synapse service..
-2007-11-05 14:58:56,740 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Initializing Sandesha 2...
-2007-11-05 14:58:56,801 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Deploying Proxy services...
-2007-11-05 14:58:56,801 [127.0.1.1-asankha] [main]  INFO SynapseInitializationModule Synapse initialized successfully...!
-2007-11-05 14:58:56,886 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOSender HTTPS Sender starting
-2007-11-05 14:58:56,887 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOSender HTTP Sender starting
-2007-11-05 14:58:57,039 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOListener HTTPS Listener starting on port : 8243
-2007-11-05 14:58:57,040 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport https on port 8243
-2007-11-05 14:58:57,041 [127.0.1.1-asankha] [main]  INFO HttpCoreNIOListener HTTP Listener starting on port : 8280
-2007-11-05 14:58:57,041 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport http on port 8280
-2007-11-05 14:58:57,085 [127.0.1.1-asankha] [main]  INFO ServerManager Starting transport vfs
-2007-11-05 14:58:57,086 [127.0.1.1-asankha] [main]  INFO ServerManager Ready for processing</pre>
-    <p/>
-    <h4>
-      Run the client
-    </h4>
-    <p>
-      Now the final step, running the client. Go to &lt;synapse-home&gt;/samples/axis2Client
-      directory and type the following command
-    </p>
-<pre xml:space="preserve">user@host:/opt/synapse-1.1.1/samples/axis2Client$ ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280 -Dmode=quote -Dsymbol=IBM
-Buildfile: build.xml
-
-init:
-    [mkdir] Created dir: /opt/synapse-1.1.1/samples/axis2Client/target/classes
-
-compile:
-    [javac] Compiling 10 source files to /opt/synapse-1.1.1/samples/axis2Client/target/classes
-
-stockquote:
-     [java] Standard :: Stock price = $91.09641757880443
-
-BUILD SUCCESSFUL</pre>
-    <p/>
-    <p>
-      This sends a request for a stock quote for the symbol IBM and sets the
-      transport URL to Synapse (http://localhost:8280) and the WS-Addressing EPR
-      set that of the actual server
-      (http://localhost:9000/soap/SimpleStockQuoteService). The actual wire
-      level http message sent by the client is as follows, and is sent over port
-      8280 to the Synapse instance on localhost.
-    </p>
-<pre xml:space="preserve">POST / HTTP/1.1
-Content-Type: text/xml; charset=UTF-8
-SOAPAction: "urn:getQuote"
-User-Agent: Axis2
-Host: 127.0.0.1
-Transfer-Encoding: chunked
-
-218
-&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-   &lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-      &lt;soapenv:Header&gt;
-         &lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;
-         &lt;wsa:MessageID&gt;urn:uuid:D538B21E30B32BB8291177589283717&lt;/wsa:MessageID&gt;
-         &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-      &lt;/soapenv:Header&gt;
-      &lt;soapenv:Body&gt;
-         &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-            &lt;m0:request&gt;
-               &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-            &lt;/m0:request&gt;
-         &lt;/m0:getQuote&gt;
-      &lt;/soapenv:Body&gt;
-   &lt;/soapenv:Envelope&gt;0</pre>
-    <p/>
-    <p>
-      Now take a look at the console running Synapse. You will see that all the
-      details of the mediation are logged along with all the SOAP messages
-      passed through Synapse. If you execute Synapse in debug mode by editing
-      the lib/log4j.properties "log4j.category.org.apache.synapse" as "DEBUG"
-      instead of INFO, you will see more information as follows after a restart
-      and replay of the above scenario again.
-    </p>
-<pre xml:space="preserve">2007-11-05 15:03:51,082 [127.0.1.1-asankha] [I/O dispatcher 3]  INFO PipeImpl Using native OS Pipes for event-driven to stream IO bridging
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver Synapse received a new message for message mediation...
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver Received To: http://localhost:9000/soap/SimpleStockQuoteService
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver SOAPAction: urn:getQuote
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SynapseMessageReceiver WSA-Action: urn:getQuote
-2007-11-05 15:03:51,206 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2SynapseEnvironment Injecting MessageContext
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2SynapseEnvironment Using Main Sequence for injected message
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator Start : Sequence &lt;main&gt;
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator Sequence &lt;SequenceMediator&gt; :: mediate()
-2007-11-05 15:03:51,207 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG LogMediator Start : Log mediator
-2007-11-05 15:03:51,231 [127.0.1.1-asankha] [HttpServerWorker-1]  INFO LogMediator To: http://localhost:9000/soap/SimpleStockQuoteService, WSAction: urn:getQuote, SOAPAction: urn:getQuote, ReplyTo: http://www.w3.org/2005/08/addressing/anonymous, MessageID: urn:uuid:DB76240DF26CE9AF1D1194253430879, Direction: request, Envelope: &lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;&lt;soapenv:Header&gt;&lt;wsa:To&gt;http://localhost:9000/soap/SimpleStockQuoteService&lt;/wsa:To&gt;&lt;wsa:MessageID&gt;urn:uuid:DB76240DF26CE9AF1D1194253430879&lt;/wsa:MessageID&gt;&lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;&lt;m0:request&gt;&lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;&lt;/m0:request&gt;&lt;/m0:getQuote&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG LogMediator End : Log mediator
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator Start : Send mediator
-2007-11-05 15:03:51,250 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator Sending request message using implicit message properties..
-Sending To: http://localhost:9000/soap/SimpleStockQuoteService
-SOAPAction: urn:getQuote
-2007-11-05 15:03:51,254 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG Axis2FlexibleMEPClient Sending [add = false] [sec = false] [rm = false] [ to Address: http://localhost:9000/soap/SimpleStockQuoteService]
-2007-11-05 15:03:51,302 [127.0.1.1-asankha] [HttpServerWorker-1]  INFO TimeoutHandler This engine will expire all callbacks after : 86400 seconds, irrespective of the timeout action, after the specified or optional timeout
-2007-11-05 15:03:51,356 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SendMediator End : Send mediator
-2007-11-05 15:03:51,356 [127.0.1.1-asankha] [HttpServerWorker-1] DEBUG SequenceMediator End : Sequence &lt;main&gt;
-2007-11-05 15:03:51,398 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Synapse received an asynchronous response message
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Received To: null
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver SOAPAction: null
-2007-11-05 15:03:51,400 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver WSA-Action: null
-2007-11-05 15:03:51,402 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SynapseCallbackReceiver Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;&lt;ns:return type="samples.services.GetQuoteResponse"&gt;&lt;ns:change&gt;4.03627430702446&lt;/ns:change&gt;&lt;ns:earnings&gt;-9.467701672785129&lt;/ns:earnings&gt;&lt;ns:high&gt;191.83014686803938&lt;/ns:high&gt;&lt;ns:last&gt;185.42637586281398&lt;/ns:last&gt;&lt;ns:lastTradeTimestamp&gt;Mon Nov 05 15:03:51 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;193.2690208751758&lt;/ns:low&gt;&lt;ns:marketCap&gt;-1737393.107878862&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-183.2632780777984&lt;/ns:open&gt;&lt;ns:peRatio&gt;-17.430497030284027&lt;/ns:peRatio&gt;&lt;ns:percentageChange&gt;1.9749680728382655&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;204.37162314344914&lt;/ns:prevClose&gt;&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;6695&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG Axis2SynapseEnvironment Injecting MessageContext
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG Axis2SynapseEnvironment Using Main Sequence for injected message
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator Start : Sequence &lt;main&gt;
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator Sequence &lt;SequenceMediator&gt; :: mediate()
-2007-11-05 15:03:51,404 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG LogMediator Start : Log mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1]  INFO LogMediator To: http://www.w3.org/2005/08/addressing/anonymous, MessageID: urn:uuid:A6510AF6BD288D8DFB1194253431259544001-942151716, Direction: response, Envelope: &lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;&lt;ns:return type="samples.services.GetQuoteResponse"&gt;&lt;ns:change&gt;4.03627430702446&lt;/ns:change&gt;&lt;ns:earnings&gt;-9.467701672785129&lt;/ns:earnings&gt;&lt;ns:high&gt;191.83014686803938&lt;/ns:high&gt;&lt;ns:last&gt;185.42637586281398&lt;/ns:last&gt;&lt;ns:lastTradeTimestamp&gt;Mon Nov 05 15:03:51 LKT 2007&lt;/ns:lastTradeTimestamp&gt;&lt;ns:low&gt;193.2690208751758&lt;/ns:low&gt;&lt;ns:marketCap&gt;-1737393.107878862&lt;/ns:marketCap&gt;&lt;ns:name&gt;IBM Company&lt;/ns:name&gt;&lt;ns:open&gt;-183.2632780777984&lt;/ns:open&gt;&lt;ns:peRatio&gt;-17.430497030284027&lt;/ns:peRatio&gt;&lt;ns:percentageChange&gt;1.9749680728382655&lt;/ns:percentageChange&gt;&lt;ns:prevClose&gt;204.37162314344914&lt;/ns:prevClose&gt;&lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;&lt;ns:volume&gt;6695&lt;/ns:volume&gt;&lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG LogMediator End : Log mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator Start : Send mediator
-2007-11-05 15:03:51,405 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator Sending response message using implicit message properties..
-Sending To: http://www.w3.org/2005/08/addressing/anonymous
-SOAPAction: null
-2007-11-05 15:03:51,408 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SendMediator End : Send mediator
-2007-11-05 15:03:51,408 [127.0.1.1-asankha] [HttpClientWorker-1] DEBUG SequenceMediator End : Sequence &lt;main&gt;</pre>
-    <p>
-      You have successfully completed the first part of this guide. Now let's
-      look at the next scenario, proxy services.
-    </p>
-    <p/>
-    <h2>
-      Proxy Services
-    </h2>
-    <p>
-      As the name implies, a proxy service acts as a service hosted in Synapse,
-      and typically fronts an existing service endpoint. A proxy service can be
-      created and exposed on a different transport, schema, WSDL, or QoS (such
-      as WS-Security, WS-Reliable Messaging) aspect than the real service and
-      could mediate the messages before being delivered to the actual endpoint,
-      and the responses before they reach the client.
-    </p>
-    <p>
-      Clients can send requests for proxy services directly to Synapse, as the
-      client sees as if they are hosted on it, and for example can perform ?wsdl
-      and view the WSDL of the virtual proxy service. But in the Synapse
-      configuration, such requests can be handled in anyway you like. Most
-      obvious thing would be to do some processing to the message and send it to
-      the actual service, probably running on a different computer. But it is
-      not necessary to always send the message to the actual service. You may
-      list any combination of tasks to be performed on the messages received for
-      the proxy service and terminate the flow or send some java back to the
-      client even without sending it to an actual service. Let's explore a
-      simple proxy services scenario step by step to get a better feeling. As
-      you have downloaded and installed Synapse in the previous section, now you
-      can start directly on the sample.
-    </p>
-    <p/>
-    <h3>
-      Running the sample
-    </h3>
-    <p>
-      As in the previous section, there should be three entities running to
-      demonstrate proxy services, the server, client and Synapse. Let's start
-      with the server.
-    </p>
-    <p/>
-    <h4>
-      Starting the sample Axis2 server
-    </h4>
-    <p>
-      As you have built and deployed the SimpleStockQuote service in the
-      previous section, you can simply start the server by switching to the &lt;synapse-home&gt;/samples/axis2Server
-      directory and running the following command.
-    </p>
-    <div class="command">
-      <p>
-        Linux / Unix: . axis2server.sh
-      </p>
-      <p>
-        Windows: axis2server.bat
-      </p>
-    </div>
-    <p>
-      You can see the console messages as in the previous section.
-    </p>
-    <h4>
-      Starting Synapse
-    </h4>
-    <p>
-      We have to start Synapse with a configuration containing a proxy service
-      definition. In this case we are using the synapse_sample_150.xml, so that
-      you don't have to write the configuration your self.
-    </p>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p/>
-    <p>
-      The above configuration will expose a proxy service named StockQuoteProxy
-      and specifies an endpoint
-      (http://localhost:9000/soap/SimpleStockQuoteService) as the target for the
-      proxy service. Therefore, messages coming to the proxy service will be
-      directed to the address http://localhost:9000/soap/SimpleStockQuoteService
-      specified in the endpoint. There is also an out sequence for the proxy
-      service, which is applicable for response messages. In the out sequence,
-      we just send the messages back to the client. The publishWSDL tag
-      specifies an WSDL to be published for this proxy service. Let's start
-      Synapse with this sample configuration by running the below command from
-      the &lt;synapse-home&gt;/bin directory. It is possible to specify a
-      sequence of mediation for incoming messages instead of a target endpoint,
-      and many other possibilities and options are available to configure proxy
-      services. These are explained in the samples and configuration guides.
-    </p>
-    <p/>
-    <div class="command">
-      <p>
-        Linux / Unix: . synapse.sh -sample 150
-      </p>
-      <p>
-        Windows: synapse.bat -sample 150
-      </p>
-    </div>
-    <p/>
-    <p>
-      Synapse will display a set of messages as in the previous section
-      describing the steps of starting procedure. Before running the client, it
-      is time to observe another feature of proxy services. That is displaying
-      the published WSDL. Just open a web browser and point it to the address
-      http://localhost:8280/soap/StockQuoteProxy?wsdl. You will see the
-      sample_proxy_1.wsdl specified in the configuration but containing the
-      correct EPR for the service over http/s.
-    </p>
-    <p/>
-    <h4>
-      Run the client
-    </h4>
-    <p>
-      Now it is time to see it in action. Go to the &lt;synapse-home&gt;/samples/axis2Clients
-      directory and type the following command:
-    </p>
-    <div class="command">
-      ant stockquote -Dtrpurl=http://localhost:8280/soap/StockQuoteProxy
-      -Dmode=quote -Dsymbol=IBM
-    </div>
-    <p>
-      The above command sends a stockquote request directly to the provided
-      transport endpoint at: http://localhost:8280/soap/StockQuoteProxy. You
-      will see the response from the server displayed on the console as follows:
-    </p>
-    <div class="consoleOutput">
-      Standard :: Stock price = $165.32687331383468
-    </div>
-    <p/>
-    <p>
-      This quick guide illustrates the simple use case of proxy services. Please
-      refer to samples #150 and above in the Samples guide, for in depth
-      coverage of more advanced use cases.
-    </p>
-    <p/>
-    <p>
-      Yes, you are done with a quick look at Synapse. Now it is time to go
-      deeper and reveal the advanced features of Synapse. You can browse through
-      the samples for your interested areas. If you have any issue regarding
-      Synapse as a user, feel free ask it in the Synapse user mailing list
-      (<a href="http://synapse.apache.org/mail-lists.html">http://synapse.apache.org/mail-lists.html</a>).
-    </p>
-    <p/>
-    <p/>
-    <p/>
-  </body>
-</document>
\ No newline at end of file
Index: java/modules/documentation/src/site/xdoc/1_2/docs_index.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_2/docs_index.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_2/docs_index.xml	(nonexistent)
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1" ?>
-<!--
-  ~  Licensed to the Apache Software Foundation (ASF) under one
-  ~  or more contributor license agreements.  See the NOTICE file
-  ~  distributed with this work for additional information
-  ~  regarding copyright ownership.  The ASF licenses this file
-  ~  to you under the Apache License, Version 2.0 (the
-  ~  "License"); you may not use this file except in compliance
-  ~  with the License.  You may obtain a copy of the License at
-  ~
-  ~   http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~  Unless required by applicable law or agreed to in writing,
-  ~  software distributed under the License is distributed on an
-  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  ~  KIND, either express or implied.  See the License for the
-  ~  specific language governing permissions and limitations
-  ~  under the License.
-  -->
-
-<document>
-
-  <properties>
-    <title>Documentation</title>
-  </properties>
-
-<body>
-
-<section name="Apache Synapse - Documentation">
-  <p>
-      Apache Synapse is an extremely lightweight and easy-to-use Open Source Enterprise Service Bus
-      (ESB) available under the Apache Software License v2.0. Apache Synapse graduated from the
-      Apache Incubator on the 2nd of January 2007, and was accepted as a sub-project of the Apache
-      Web Services project. In December 2007, Apache Synapse became a top level project (TLP) of the
-      Apache Software Foundation
-  </p>
-  <p>Documentation for the 1.1.1 release:</p>
-
-  <ul>
-  <li><a href="./Synapse_QuickStart.html">Quick Start Guide</a></li>
-  <li><a href="./Synapse_Configuration_Language.html">The Synapse Configuration Language</a></li>
-  <li><a href="./Synapse_Samples.html">A Quick start with Synapse Samples</a></li>
-  <li><a href="./Synapse_Extending.html">Extending Synapse</a></li>
-  <li>The Synapse Wiki <a href="http://wiki.apache.org/ws/Synapse">http://wiki.apache.org/ws/Synapse</a></li>
-  </ul>
-</section>
-
-</body>
-</document>

Property changes on: java/modules/documentation/src/site/xdoc/1_2/docs_index.xml
___________________________________________________________________
Deleted: svn:executable
## -1 +0,0 ##
-*
\ No newline at end of property
Index: java/modules/documentation/src/site/xdoc/1_2/Synapse_Samples.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_2/Synapse_Samples.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_2/Synapse_Samples.xml	(nonexistent)
@@ -1,5385 +0,0 @@
-<?xml version="1.0"?>
-
-<document>
-    <properties>
-        <title>Apache Synapse - Samples Guide</title>
-    </properties>
-    <head>
-        <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-    </head>
-  <body>
-    <div style="margin-top:-40px; float:right; _margin-top:0px;">
-      <img alt="Synapse logo"
-           src="images/synapse-logo-web2.png" width="197"
-           height="82"/>
-    </div>
-    <div>
-      <h1>
-        Apache Synapse ESB - Running the Samples
-      </h1>
-    </div>
-    <p>
-      This guide will walk you through the built-in samples shipped with the product,
-      which will cover most of the basic functional sceanrios and capabilities of Apache Synapse
-      as an ESB. If you are unable to solve your problem by reading through and
-      running these samples, feel free to raise your problem on the
-      <a href="http://synapse.apache.org/mail-lists.html">mailing lists</a>.</p>
-    <h2>
-      <a name="TOC" id="TOC">Contents</a>
-    </h2>
-    <div class="section-content">
-      <ul>
-        <li>
-          <a href="Synapse_Samples_Setup.html#Overview">Overview</a>
-        </li>
-        <li>
-          <a href="#MediationSamples">Message mediation samples</a>
-          <ul>
-            <li>
-              <a href="#Sample0">Sample 0: Introduction to Synapse</a>
-            </li>
-            <li>
-              <a href="#Sample1">Sample 1: Simple content based routing (CBR)
-              of messages</a>
-            </li>
-            <li>
-              <a href="#Sample2">Sample 2: CBR with the Switch-case mediator,
-              using message properties</a>
-            </li>
-            <li>
-              <a href="#Sample3">Sample 3: Local Registry entry definitions,
-              reusable endpoints and sequences</a>
-            </li>
-            <li>
-              <a href="#Sample4">Sample 4: Introduction to error handling</a>
-            </li>
-            <li>
-              <a href="#Sample5">Sample 5: Creating SOAP fault messages and
-              changing the direction of a message</a>
-            </li>
-            <li>
-              <a href="#Sample6">Sample 6: Manipulating SOAP headers, and
-              filtering incoming and outgoing messages</a>
-            </li>
-            <li>
-              <a href="#Sample7">Sample 7: Introduction to local Registry
-              entries and using Schema validation</a>
-            </li>
-            <li>
-              <a href="#Sample8">Sample 8: Introduction to static and dynamic
-              registry resources, and using XSLT transformations</a>
-            </li>
-            <li>
-              <a href="#Sample9">Sample 9: Introduction to dynamic sequences
-              with the Registry</a>
-            </li>
-            <li>
-              <a href="#Sample10">Sample 10: Introduction to dynamic
-              endpoints with the Registry</a>
-            </li>
-            <li>
-              <a href="#Sample11">Sample 11: A full registry based
-              configuration, and sharing a configuration between multiple
-              instances</a>
-            </li>
-            <li>
-              <a href="#Sample12">Sample 12: One way messaging /
-              fireAndForget through Synapse</a>
-            </li>
-            <li>
-              <a href="#Sample13">Sample 13: Dual channel invocation through Synapse</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#Endpoints">Advanced mediations with endpoints</a>
-          <ul>
-            <li>
-              <a href="#Sample50">Sample 50: POX to SOAP conversion</a>
-            </li>
-            <li>
-              <a href="#Sample51">Sample 51: MTOM and SwA optimizations and
-              request/response correlation</a>
-            </li>
-            <li>
-              <a href="#Sample52">Sample 52: Session less load balancing
-              between 3 endpoints</a>
-            </li>
-            <li>
-              <a href="#Sample53">Sample 53: Failover sending among 3
-              endpoints</a>
-            </li>
-            <li>
-              <a href="#Sample54">Sample 54: Session affinity load balancing
-              between 3 endpoints</a>
-            </li>
-            <li>
-              <a href="#Sample55">Sample 55: Session affinity load balancing
-              between fail over endpoints</a>
-            </li>
-            <li>
-              <a href="#Sample56">Sample 56: WSDL endpoint</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#MessageMediationQoS">Quality of Service addition or
-          deduction samples in message mediation</a>
-          <ul>
-            <li>
-              <a href="#Sample100">Sample 100: Using WS-Security for outgoing
-              messages</a>
-            </li>
-            <li>
-              <a href="#Sample101">Sample 101: Reliable message exchange
-              between Synapse and the back-end server using WS-ReliableMessaging</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#ProxyServices">Synapse Proxy service samples</a>
-          <ul>
-            <li>
-              <a href="#Sample150">Sample 150: Introduction to proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample151">Sample 151: Custom sequences and endpoints
-              with proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample152">Sample 152: Switching transports and
-              message format from SOAP to REST/POX</a>
-            </li>
-            <li>
-              <a href="#Sample153">Sample 153: Routing the messages arrived
-              to a proxy service without processing the security headers</a>
-            </li>
-            <li>
-              <a href="#Sample154">Sample 154: Load Balancing with Proxy
-              Service </a>
-            </li>
-            <li>
-              <a href="#Sample155">Sample 155: Dual channel invocation
-              on both client side and server side of Synapse with Proxy Services</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#ProxyServiceQoS">QoS addition and deduction for service
-          mediation (proxy) samples</a>
-          <ul>
-            <li>
-              <a href="#Sample200">Sample 200: Using WS-Security with policy
-              attachments for proxy services</a>
-            </li>
-            <li>
-              <a href="#Sample201">Sample 201: Reliable message exchange
-              between the client and proxy services using WS-ReliableMessaging</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#Transport">Transport samples and switching transports</a>
-          <ul>
-            <li>
-              <a href="#Sample250">Sample 250: Introduction to switching
-              transports - JMS to http/s</a>
-            </li>
-            <li>
-              <a href="#Sample251">Sample 251: Switching from http/s to JMS</a>
-            </li>
-            <li>
-              <a href="#Sample252">Sample 252: Pure text/binary and POX
-              message support with JMS</a>
-            </li>
-            <li>
-              <a href="#Sample253">Sample 253: One way bridging from JMS to
-              http and replying with a 202 Accepted response</a>
-            </li>
-            <li>
-              <a href="#Sample254">Sample 254: Using the file system as
-              transport medium using VFS transport listener and sender</a>
-            </li>
-            <li>
-              <a href="#Sample255">Sample 255: Switching from ftp transport
-              listener to mail transport sender</a>
-            </li>
-            <li>
-              <a href="#Sample256">Sample 256: Proxy services with the mail
-              transport</a>
-            </li>
-	    <li>
-              <a href="#Sample257">Sample 257: Proxy services with the FIX
-              transport</a>
-            </li>
-	    <li>
-              <a href="#Sample258">Sample 258: Switching from HTTP to FIX
-              </a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#Task">Introduction to Synapse tasks</a>
-          <ul>
-            <li>
-              <a href="#Sample300">Sample 300: Introduction to tasks with
-              simple trigger</a>
-            </li>
-          </ul>
-        </li>
-        <li>
-          <a href="#AdvancedMediation">Advanced mediations with advanced
-          mediators</a>
-          <ul>
-            <li>
-              <a href="#ScriptMediator">Using scripts in mediation (Script
-              Mediator)</a>
-              <ul>
-                <li>
-                  <a href="#Sample350">Sample 350: Introduction to the script
-                  mediator using js scripts</a>
-                </li>
-                <li>
-                  <a href="#Sample351">Sample 351: In-line script mediation
-                  with JavaScript</a>
-                </li>
-                <li>
-                  <a href="#Sample352">Sample 352: Accessing Synapse message
-                  context API methods using scripting language</a>
-                </li>
-                <li>
-                  <a href="#Sample353">Sample 353: Using Ruby scripts for
-                  mediation</a>
-                </li>
-                <li>
-                  <a href="#Sample354">Sample 354: Using In-lined Ruby
-                  scripts for mediation</a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#DBMediators">Database interactions in mediation
-              (DBLookup / DBReport)</a>
-              <ul>
-                <li>
-                  <a href="#Sample360">Sample 360: Introduction to dblookp
-                  mediator</a>
-                </li>
-                <li>
-                  <a href="#Sample361">Sample 361: Introduction to dbreport
-                  mediator</a>
-                </li>
-                <li>
-                  <a href="#Sample362">Sample 362: Action of dbreport and
-                  dblookup mediators together</a>
-                </li>
-                <li><a href="#Sample363">Sample 363: Reusable database connection pools</a></li>
-              </ul>
-            </li>
-            <li>
-              <a href="#Throttle">Throtteling messages (Throttle Mediator)</a>
-              <ul>
-                <li>
-                  <a href="#Sample370">Sample 370: Introduction to throttle
-                  mediator and concurrency throttling</a>
-                </li>
-                <li>
-                  <a href="#Sample371">Sample 371: Restricting requests based
-                  on policies</a>
-                </li>
-                <li>
-                  <a href="#Sample372">Sample 372: Use of both concurrency
-                  throttling and request rate based throttling </a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#Class">Extending the mediation in java (Class
-              Mediator)</a>
-              <ul>
-                <li>
-                  <a href="#Sample380">Sample 380: Writing your own custom
-                  mediation in Java</a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#XQuery">Evaluating XQuery for mediation (XQuery
-              Mediator)</a>
-              <ul>
-                <li>
-                  <a href="#Sample390">Sample 390: Introduction to the XQuery
-                  mediator</a>
-                </li>
-                <li>
-                  <a href="#Sample391">Sample 391: How to use the data from
-                  an external XML document with in XQuery </a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#Splitter">Splitting messages in to parts and process
-              in parallel (Iterate / Clone)</a>
-              <ul>
-                <li>
-                  <a href="#Sample400">Sample 400: Message splitting and
-                  aggregating the responses</a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#Cache">Caching the responses over the requests</a>
-              <ul>
-                <li>
-                  <a href="#Sample420">Sample 420: Simple cache implemented
-                  on Synapse for the actual service</a>
-                </li>
-              </ul>
-            </li>
-            <li>
-              <a href="#Callout">Synchronize web service invocation with
-              Callout mediator </a>
-              <ul>
-                <li>
-                  <a href="#Sample430">Sample 430: Simple Callout Mediator
-                  for synchronize web service invocation</a>
-                </li>
-              </ul>
-            </li>
-          </ul>
-        </li>
-      </ul>
-    </div>
-    <h1>
-      <a name="MediationSamples" id="MediationSamples">Message Mediation
-      Samples</a>
-    </h1>
-    <h2>
-      <a name="Sample0" id="Sample0">Sample 0: Introduction to Synapse</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- log all attributes of messages passing through --&gt;
-    &lt;log level="full"/&gt;
-
-    &lt;!-- Send the messageto implicit destination --&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to Synapse. Shows how a message could
-      be made to pass through Synapse </strong><strong>and logged
-      before it is delivered to its ultimate receiver.</strong>
-    </p>
-    <p>
-      The Stock quote client can operate in the following modes for this
-      example.
-    </p>
-    <ol>
-      <li>
-        Smart Client mode
-      </li>
-        <pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ </pre>
-      <li>
-        Using Synapse as a HTTP Proxy
-      </li>
-        <pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dprxurl=http://localhost:8280/</pre>
-      <li>
-        Gateway Mode / Dumb Client
-      </li>
-        <p>
-          See sample # 1
-        </p>
-    </ol>
-    <p>
-      <strong>Prerequisites:<br/> </strong>Start the Synapse
-      configuration numbered 0: e.g. synapse -sample 0<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already deployed
-    </p>
-    <p>
-      <strong>Execute the Smart Client </strong>
-    </p>
-    <p>
-      By tracing the execution of Synapse with the log output level set to
-      DEBUG, you will see the client request arriving at Synapse with a
-      WS-Addressing 'To' set to EPR
-      http://localhost:9000/soap/SimpleStockQuoteService. The Synapse engine
-      logs the message at the "full" log level (i.e. all the message headers and
-      the body) then sends the message to its implicit 'To' address which is
-      http://localhost:9000/soap/SimpleStockQuoteService. You will see a message
-      in the Axis2 server console confirming that the message got routed to the
-      sample server and the sample service hosted at the sample server
-      generating a stock quote for the requested symbol.
-    </p>
-<pre xml:space="preserve">Sat Nov 18 21:01:23 IST 2006 SimpleStockQuoteService :: Generating quote for : IBM</pre>
-    <p>
-      The response message generated by the service is again received by
-      Synapse, and flows through the same mediation rules, which logs the
-      response message and then sends it back. This time to the client. On the
-      client console you should see an output similar to the following based on
-      the message received by the client.
-    </p>
-<pre xml:space="preserve">Standard :: Stock price = $95.26454380258552</pre>
-    <p>
-      <strong>Execute the Proxy Client </strong>
-    </p>
-    <p>
-      You will see the exact same behaviour as per the previous example when you
-      run this scenario. However this time the difference is at the client, as
-      it sends the message to the WS-Addressing 'To' address
-      http://localhost:9000/soap/SimpleStockQuoteService, but the transport
-      specifies Synapse as the HTTP proxy.
-    </p>
-    <h2>
-      <a name="Sample1" id="Sample1">Sample 1: Simple content based routing
-      (CBR) of messages</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- filtering of messages with XPath and regex matches --&gt;
-    &lt;filter source="get-property('To')" regex=".*/StockQuote.*"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-        &lt;drop/&gt;
-    &lt;/filter&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to simple content based routing. Shows
-      how a message could be made to pass through Synapse using the Dumb Client
-      mode, where Synapse acts as a gateway to accept all messages and then
-      perform mediation and routing based on message properties or content.</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 1: i.e. synapse -sample 1<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already deployed<br/>
-    </p>
-    <p>
-      Execute the Dumb Client as:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/soap/StockQuote<br/></pre>
-    <p>
-      This time you will see Synapse receiving a message for which Synapse was
-      set as the ultimate receiver of the message. Based on the 'To' EPR of
-      http://localhost:8280/soap/StockQuote, Synapse performs a match to the
-      path '/StockQuote' and as the request matches the XPath expression of the
-      filter mediator, the filter mediator's child mediators execute. This sends
-      the message to a different endpoint as specified by the endpoint
-      definition. The 'drop' mediator terminates further processing of the
-      current message in a configuration. During response processing, the filter
-      condition fails, and thus the implicit 'send' mediator forwards the
-      response back to the client.
-    </p>
-    <h2>
-      <a name="Sample2" id="Sample2">Sample 2: CBR with the Switch-case
-      mediator, using message properties</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;switch source="//m0:getQuote/m0:request/m0:symbol" xmlns:m0="http://services.samples/xsd"&gt;
-        &lt;case regex="IBM"&gt;
-            &lt;!-- the property mediator sets a local property on the *current* message --&gt;
-            &lt;property name="symbol" value="Great stock - IBM"/&gt;
-        &lt;/case&gt;
-        &lt;case regex="MSFT"&gt;
-            &lt;property name="symbol" value="Are you sure? - MSFT"/&gt;
-        &lt;/case&gt;
-        &lt;default&gt;
-            &lt;!-- it is possible to assign the result of an XPath expression as well --&gt;
-            &lt;property name="symbol"
-                  expression="fn:concat('Normal Stock - ', //m0:getQuote/m0:request/m0:symbol)"
-                  xmlns:m0="http://services.samples/xsd"/&gt;
-        &lt;/default&gt;
-    &lt;/switch&gt;
-
-    &lt;log level="custom"&gt;
-        &lt;!-- the get-property() XPath extension function allows the lookup of local message properties
-            as well as properties from the Axis2 or Transport contexts (i.e. transport headers) --&gt;
-        &lt;property name="symbol" expression="get-property('symbol')"/&gt;
-        &lt;!-- the get-property() function supports the implicit message headers To/From/Action/FaultTo/ReplyTo --&gt;
-        &lt;property name="epr" expression="get-property('To')"/&gt;
-    &lt;/log&gt;
-
-    &lt;!-- Send the messages where they are destined to (i.e. the 'To' EPR of the message) --&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduce switch-case mediator and writing and
-      reading of local properties set on a message instance</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 2: i.e. synapse -sample 2<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done.
-    </p>
-    <p>
-      Execute the 'ant stockquote ..' request again in the smart client mode,
-      specifying 'IBM', 'MSFT' and 'SUN' as the stock symbols. When the symbol
-      IBM is requested, viewing the mediation logs you will see that the case
-      statements' first case for 'IBM' is executed and a local property named
-      'symbol' was set to 'Great stock - IBM'. Subsequently this local property
-      value is looked up by the log mediator and logged using the
-      'get-property()' XPath extension function.
-    </p>
-    <pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=IBM</pre>
-    <pre xml:space="preserve">      INFO LogMediator - symbol = Great stock - IBM, epr = http://localhost:9000/axis2/services/SimpleStockQuoteService </pre>
-    <pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=MSFT</pre>
-    <pre xml:space="preserve">      INFO LogMediator - symbol = Are you sure? - MSFT, epr = http://localhost:9000/axis2/services/SimpleStockQuoteService</pre>
-    <h2>
-      <a name="Sample3" id="Sample3">Sample 3: Local Registry entry
-      definitions, reusable endpoints and sequences</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- define a string resource entry to the local registry --&gt;
-    &lt;localEntry key="version"&gt;0.1&lt;/localEntry&gt;
-    &lt;!-- define a reuseable endpoint definition --&gt;
-    &lt;endpoint name="simple"&gt;
-        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/endpoint&gt;
-
-    &lt;!-- define a reusable sequence --&gt;
-    &lt;sequence name="stockquote"&gt;
-        &lt;!-- log the message using the custom log level. illustrates custom properties for log --&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="Text" value="Sending quote request"/&gt;
-            &lt;property name="version" expression="get-property('version')"/&gt;
-            &lt;property name="direction" expression="get-property('direction')"/&gt;
-        &lt;/log&gt;
-        &lt;!-- send message to real endpoint referenced by key "simple" endpoint definition --&gt;
-        &lt;send&gt;
-            &lt;endpoint key="simple"/&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;property name="direction" value="incoming"/&gt;
-            &lt;sequence key="stockquote"/&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Illustrates local registry entry definitions,
-      reusable endpoints and sequences</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 3: i.e. synapse -sample 3<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example uses a sequence named as "main" that specifies the main
-      mediation rules to be executed. This is equivalent to directly specifying
-      the mediators of the main sequence within the &lt;definitions&gt; tags.
-      This is the recommended and also a better approach for non-trivial
-      configurations. Execute the 'ant stockquote ..' request again, and
-      following through the mediation logs you will now notice that the sequence
-      named "main" is executed. Then for the incoming message flow the &lt;in&gt;
-      mediator executes, and it calls the sequence named "stockquote".
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/</pre>
-<pre xml:space="preserve">DEBUG SequenceMediator - Sequence mediator &lt;main&gt; :: mediate()<br/>DEBUG InMediator - In mediator mediate()<br/>DEBUG SequenceMediator - Sequence mediator &lt;stockquote&gt; :: mediate()</pre>
-    <p>
-      As the "stockquote" sequence executes, the log mediator dumps a simple
-      text/string property, result of an XPath evaluation, that picks up the key
-      named "version", and a second result of an XPath evaluation that picks up
-      a local message property set previously by the &lt;property&gt; mediator.
-      The get-property() XPath extension function is able to read message
-      properties local to the current message, local or remote registry entries,
-      Axis2 message context properties as well as transport headers. The local
-      entry definition for "version" defines a simple text/string registry entry
-      for that which is visible to all messages that pass through Synapse.
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  LogMediator - Text = Sending quote request, version = 0.1, direction = incoming
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] DEBUG AddressEndpoint - Sending To: http://localhost:9000/soap/SimpleStockQuoteService </pre>
-    <h2>
-      <a name="Sample4" id="Sample4">Sample 4: Introduction to error handling</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the default fault handling sequence used by Synapse - named 'fault' --&gt;
-    &lt;sequence name="fault"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="An unexpected error occured"/&gt;
-            &lt;property name="message" expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/log&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="sunErrorHandler"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="An unexpected error occured for stock SUN"/&gt;
-            &lt;property name="message" expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/log&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;!-- default message handling sequence used by Synapse - named 'main' --&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;switch source="//m0:getQuote/m0:request/m0:symbol" xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;case regex="IBM"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="MSFT"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint key="bogus"/&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="SUN"&gt;
-                    &lt;sequence key="sunSequence"/&gt;
-                &lt;/case&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;sequence name="sunSequence" onError="sunErrorHandler"&gt;
-        &lt;send&gt;
-            &lt;endpoint key="sunPort"/&gt;
-        &lt;/send&gt;
-&lt;/sequence&gt;
-
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to error handling with the 'fault'
-      sequence</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 4: i.e. synapse -sample 4<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      When the IBM stock quote is requested, the configuration routes it to the
-      defined in-line endpoint, which routes the message to the
-      SimpleStockQuoteService on the local Axis2 instance. Hence a valid
-      response message is shown at the client.
-    </p>
-    <p>
-      If you lookup a stock quote for 'MSFT', Synapse is instructed to route the
-      message to the endpoint defined as the 'bogus' endpoint, which does not
-      exist. Synapse executes the specified error handler sequence closest to
-      the point where the error was encountered. In this case, the currently
-      executing sequence is 'main' and it does not specify an 'onError'
-      attribute. Whenever Synapse cannot find an error handler, it looks for a
-      sequence named 'fault'. Thus the 'fault' sequence can be seen executing,
-      and writing the generic error message to the logs.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=MSFT</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] ERROR IndirectEndpoint - Reference to non-existent endpoint for key : bogus
-[HttpServerWorker-1] DEBUG MediatorFaultHandler - MediatorFaultHandler :: handleFault
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;fault&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - text = An unexpected error occured, message = Reference to non-existent endpoint for key : bogus</pre>
-    <p>
-      When the 'SUN' quote is requested, a custom sequence 'sunSequence' is
-      invoked, and it specifies 'sunErrorHandler' as its error handler. Hence
-      when the send fails, you could see the proper error handler invocation and
-      the custom error message printed as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=SUN</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;sunSequence&gt; :: mediate()
-[HttpServerWorker-1] DEBUG SequenceMediator - Setting the onError handler for the sequence
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG SendMediator - Send mediator :: mediate()
-[HttpServerWorker-1] ERROR IndirectEndpoint - Reference to non-existent endpoint for key : sunPort
-[HttpServerWorker-1] DEBUG MediatorFaultHandler - MediatorFaultHandler :: handleFault
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;sunErrorHandler&gt; :: mediate()
-[HttpServerWorker-1] DEBUG AbstractListMediator - Implicit Sequence &lt;SequenceMediator&gt; :: mediate()
-[HttpServerWorker-1] DEBUG LogMediator - Log mediator :: mediate()
-[HttpServerWorker-1] INFO  LogMediator - text = An unexpected error occured for stock SUN, message = Reference to non-existent endpoint for key : sunPort</pre>
-    <h2>
-      <a name="Sample5" id="Sample5">Sample 5: Creating SOAP fault messages
-      and changing the direction of a message</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="myFaultHandler"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/makefault&gt;
-
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="myFaultHandler"&gt;
-        &lt;in&gt;
-            &lt;switch source="//m0:getQuote/m0:request/m0:symbol"
-                    xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;case regex="MSFT"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://bogus:9000/soap/NonExistentStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="SUN"&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;&lt;address uri="http://localhost:9009/soap/NonExistentStockQuoteService"/&gt;&lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Makefault mediator and sending back error responses
-      </strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 5: i.e. synapse -sample 5<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      When the MSFT stock quote is requested, an unknown host exception would be
-      generated. A connection refused exception would be generated for the SUN
-      stock request. This error message is captured and returned to the original
-      client as a SOAP fault in this example.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=MSFT</pre>
-    <p>
-      returns,
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Fault xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;faultcode&gt;soapenv:Client&lt;/faultcode&gt;
-    &lt;faultstring&gt;java.net.UnknownHostException: bogus&lt;/faultstring&gt;&lt;detail /&gt;&lt;/soapenv:Fault&gt;</pre>
-    <p>
-      And
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=SUN</pre>
-    <p>
-      returns,
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Fault xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;faultcode&gt;soapenv:Client&lt;/faultcode&gt;
-    &lt;faultstring&gt;java.net.ConnectException: Connection refused&lt;/faultstring&gt;&lt;detail /&gt;&lt;/soapenv:Fault&gt;</pre>
-    <h2>
-      <a name="Sample6" id="Sample6">Sample 6: Manipulating SOAP headers, and
-      filtering incoming and outgoing messages</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;header name="To" value="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to header, in (out) mediators</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 6: i.e. synapse -sample 6<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      In this example we use the stockquote client in the dumb client mode,
-      setting the 'To' EPR of the message to Synapse. Then the 'in' mediator
-      processes the incoming messages, and manipulates the 'To' header to refer
-      to the stock quote service on the sample Axis2 server. Thus it is now
-      possible to request for a stock quote as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/</pre>
-    <h2>
-      <a name="Sample7" id="Sample7">Sample 7: Introduction to local Registry
-      entries and using Schema validation</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;localEntry key="validate_schema"&gt;
-        &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
-                    xmlns="http://www.apache-synapse.org/test" elementFormDefault="qualified"
-                    attributeFormDefault="unqualified"
-                    targetNamespace="http://services.samples/xsd"&gt;
-            &lt;xs:element name="getQuote"&gt;
-                &lt;xs:complexType&gt;
-                    &lt;xs:sequence&gt;
-                        &lt;xs:element name="request"&gt;
-                            &lt;xs:complexType&gt;
-                                &lt;xs:sequence&gt;
-                                    &lt;xs:element name="stocksymbol" type="xs:string"/&gt;
-                                &lt;/xs:sequence&gt;
-                            &lt;/xs:complexType&gt;
-                        &lt;/xs:element&gt;
-                    &lt;/xs:sequence&gt;
-                &lt;/xs:complexType&gt;
-            &lt;/xs:element&gt;
-        &lt;/xs:schema&gt;
-    &lt;/localEntry&gt;
-
-    &lt;in&gt;
-        &lt;validate&gt;
-            &lt;schema key="validate_schema"/&gt;
-            &lt;on-fail&gt;
-                &lt;!-- if the request does not validate againt schema throw a fault --&gt;
-                &lt;makefault&gt;
-                    &lt;code value="tns:Receiver"
-                            xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                    &lt;reason value="Invalid custom quote request"/&gt;
-                &lt;/makefault&gt;
-                &lt;property name="RESPONSE" value="true"/&gt;
-                &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-            &lt;/on-fail&gt;
-        &lt;/validate&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to local (static) registry entries and
-      the validate mediator</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 7: i.e. synapse -sample 7<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example shows how a static XML fragment could be made available to
-      the Synapse local registry. Resources defined in the local registry are
-      static (i.e. never changes over the lifetime of the configuration) and may
-      be specified as a source URL, in-line text or in-line xml. In this example
-      the schema is made available under the key 'validate_schema'.
-    </p>
-    <p>
-      The validate mediator by default operates on the first child element of
-      the SOAP body. You may specify an XPath expression using the 'source'
-      attribute to override this behaviour. The validate mediator now uses the
-      'validate_schema' resource to validate the incoming message, and if the
-      message validation fails it invokes the 'on-fail' sequence of mediators.
-    </p>
-    <p>
-      If you send a stockquote request using 'ant stockquote ...' you will get a
-      fault back with the message 'Invalid custom quote request' as the schema
-      validation failed. This is because the schema used in the example expects
-      a slightly different message than what is created by the stock quote
-      client. (i.e. expects a 'stocksymbol' element instead of 'symbol' to
-      specify the stock symbol)
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/</pre>
-    <h2>
-      <a name="Sample8" id="Sample8">Sample 8: Introduction to static and
-      dynamic registry resources, and using XSLT transformations</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to a URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;!-- define the request processing XSLT resource as a static URL source --&gt;
-    &lt;localEntry key="xslt-key-req" src="file:repository/conf/sample/resources/transform/transform.xslt"/&gt;
-
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote requst expected by the service --&gt;
-        &lt;xslt key="xslt-key-req"/&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;!-- the key is looked up in the remote registry and loaded as a 'dynamic' registry resource --&gt;
-        &lt;xslt key="transform/transform_back.xslt"/&gt;
-    &lt;/out&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to static and dynamic registry
-      resources and the XSLT mediator</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 8: i.e. synapse -sample 8<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example uses the XSLT mediator to perform transformations, and the
-      xslt transformations are specified as registry resources. The first
-      resource 'xslt-key-req' is specified as a 'local' registry entry. Local
-      entries do not place the resource on the registry, but simply make it
-      available to the local configuration. If a local entry is defined with a
-      key that already exists in the remote registry, the local entry will get
-      higher preference and override the remote resource.
-    </p>
-    <p>
-      In this example you will notice the new 'registry' definition. Synapse
-      comes with a simple URL based registry implementation SimpleURLRegistry.
-      During initialization of the registry, the SimpleURLRegistry expects to
-      find a property named 'root', which specifies a prefix for the registry
-      keys used later. When the SimpleURLRegistry is used, this root is prefixed
-      to the entry keys to form the complete URL for the resource being looked
-      up. The registry caches a resource once requested, and caches it
-      internally for a specified duration. Once this period expires, it will
-      reload the meta information about the resource and reload its cached copy
-      if necessary, the next time the resource is requested.
-    </p>
-    <p>
-      Hence the second XSLT resource key 'transform/transform_back.xslt'
-      concatenated with the 'root' of the SimpleURLRegistry
-      'file:repository/conf/sample/resources/' forms the complete URL of the
-      resource as
-      'file:repository/conf/sample/resources/transform/transform_back.xslt' and
-      caches its value for a period of 15000 ms.
-    </p>
-    <p>
-      Execute the custom quote client as 'ant stockquote -Dmode=customquote ...'
-      and analyze the the Synapse debug log output
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dmode=customquote</pre>
-    <p>
-      The incoming message is now transformed into a standard stock quote
-      request as expected by the SimpleStockQuoteService deployed on the local
-      Axis2 instance, by the XSLT mediator. The XSLT mediator uses Xalan-J to
-      perform the transformations. It is possible to configure the underlying
-      transformation engine using properties where necessary. The response from
-      the SimpleStockQuoteService is converted back into the custom format as
-      expected by the client during the out message processing.
-    </p>
-    <p>
-      During the response processing you could see the SimpleURLRegistry
-      fetching the resource as shown by the log message below
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] DEBUG SimpleURLRegistry ==> Repository fetch of resource with key : transform/transform_back.xslt</pre>
-    <p>
-      If you run the client again immediately (i.e within 15 seconds of the
-      first request) you will not see the resource being reloaded by the
-      registry as the cached value would be still valid.
-    </p>
-    <p>
-      However if you leave the system idle for 15 seconds or more and then retry
-      the same request, you will now notice that the registry noticed the cached
-      resource has expired and will check the meta information about the
-      resource to check if the resource itself has changed and will require a
-      fresh fetch from the source URL. If the meta data / version number
-      indicates that a reload of the cached resource is not necessary (i.e.
-      unless the resource itself actually changed) the updated meta information
-      is used and the cache lease extended as appropriate.
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] DEBUG AbstractRegistry - Cached object has expired for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG SimpleURLRegistry - Perform RegistryEntry lookup for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG AbstractRegistry - Expired version number is same as current version in registry
-[HttpClientWorker-1] DEBUG AbstractRegistry - Renew cache lease for another 15s </pre>
-    <p>
-      Now edit the
-      repository/conf/sample/resources/transform/transform_back.xslt file and
-      add a blank line at the end. Now when you run the client again, and if the
-      cache is expired, the resource would be re-fetched from its URL by the
-      registry and this can be seen by the following debug log messages
-    </p>
-<pre xml:space="preserve">[HttpClientWorker-1] DEBUG AbstractRegistry - Cached object has expired for key : transform/transform_back.xslt
-[HttpClientWorker-1] DEBUG SimpleURLRegistry - Perform RegistryEntry lookup for key : transform/transform_back.xslt
-[HttpClientWorker-1] INFO  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : transform/transform_back.xslt </pre>
-    <p>
-      Thus the SimpleURLRegistry allows resource to be cached, and updates
-      detected so that the changes could be reloaded without restarting the
-      Synapse instance.
-    </p>
-    <h2>
-      <a name="Sample9" id="Sample9">Sample 9: Introduction to dynamic
-      sequences with the Registry</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;sequence key="sequence/dynamic_seq_1.xml"/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to dynamic sequences with a registry</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 9: i.e. synapse -sample 9<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example introduces the dynamic behaviour of Synapse through the use
-      of a registry. Synapse supports dynamic definitions for sequences and
-      endpoints, and as seen before, for resources. In this example we define a
-      Synapse configuration which references a sequence definition specified as
-      a registry key. The registry key resolves to the actual content of the
-      sequence which would be loaded dynamically by Synapse at runtime, and
-      cached appropriately as per its definition in the registry. Once the cache
-      expires, Synapse would re-check the meta information for the definition and
-      re-load the sequence definition if necessary and re-cache it again.
-    </p>
-    <p>
-      Once Synapse is started, execute the stock quote client as 'ant
-      stockquote..'. You will notice that that Synapse fetches the definition of
-      the sequence from the registry and executes its rules as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : sequence/dynamic_seq_1.xml
-...
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;dynamic_sequence&gt; :: mediate()
-...
-[HttpServerWorker-1] INFO  LogMediator - message = *** Test Message 1 ***</pre>
-    <p>
-      Now if you execute the client immediately (i.e. within 15 seconds of the
-      last execution) you will notice that the sequence was not reloaded. If you
-      edit the sequence definition in
-      repository/conf/sample/resources/sequence/dynamic_seq_1.xml (i.e. edit the
-      log message to read as "*** Test Message 2 ***") and execute the client
-      again, you will notice that the new message is not yet visible (i.e. if
-      you execute this within 15 seconds of loading the resource for the first
-      time) However, after 15 seconds elapsed since the original caching of the
-      sequence, you will notice that the new sequence is loaded and executed by
-      Synapse from the following log messages.
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] DEBUG  SimpleURLRegistry - ==&gt; Repository fetch of resource with key : sequence/dynamic_seq_1.xml
-...
-[HttpServerWorker-1] DEBUG SequenceMediator - Sequence mediator &lt;dynamic_sequence&gt; :: mediate()
-...
-[HttpServerWorker-1] INFO  LogMediator - message = *** Test Message 2 ***</pre>
-    <p>
-      The cache timeout could be tuned appropriately by configuring the URL
-      registry to suit the environment and the needs.
-    </p>
-    <h2>
-      <a name="Sample10" id="Sample10">Sample 10: Introduction to dynamic
-      endpoints with the Registry</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;in&gt;
-        &lt;send&gt;
-            &lt;endpoint key="endpoint/dynamic_endpt_1.xml"/&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to dynamic endpoints with the Registry</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 10: i.e. synapse -sample 10<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done<br/>
-      Start a second Axis2 server on HTTP port 9001 and HTTPS port 9003 as
-      follows:
-    </p>
-<pre xml:space="preserve">./axis2server.sh -http 9001 -https 9003</pre>
-    <p>
-      This example introduces dynamic endpoints, where the definition of an
-      endpoint is stored in the registry. To follow this example execute the
-      stock quote client as 'ant stockquote..' and see that the message is
-      routed to the SimpleStockQuoteService on the default Axis2 instance on
-      HTTP port 9000. Repeat the above example immediately again, and notice
-      that the endpoint is cached and reused by Synapse - similarly to example #
-      8.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/</pre>
-    <p>
-      Now edit the repository/conf/sample/resources/endpoint/dynamic_endpt_1.xml
-      definition and update the address to
-      "http://localhost:9001/soap/SimpleStockQuoteService". After the cached value
-      expires, the Registry loads the new definition of the endpoint, and then
-      the messages can be seen being routed to the second sample Axis2 server on
-      HTTP port 9001.
-    </p>
-    <h2>
-      <a name="Sample11" id="Sample11">Sample 11: A full registry based
-      configuration, and sharing a configuration between multiple instances</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: A full registry based configuration</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 11: i.e. synapse -sample 11<br/> Start the Axis2
-      server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      This example shows a full registry based Synapse configuration. Thus it is
-      possible to start a remote configuration from multiple instances of
-      Synapse in a clustered environment easily. The Synapse configuration held
-      on a node hosting Synapse simply points to the registry and looks up the
-      actual configuration by requesting the key 'synapse.xml'.
-    </p>
-    <p>
-      (Note: Full registry based configuration is not dynamic atleast for the
-      moment. i.e. it is not reloading itself)
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/</pre>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO LogMediator - message = This is a dynamic Synapse configuration</pre>
-    <p>
-      The actual synapse.xml loaded is:
-    </p>
-<pre xml:space="preserve">&lt;!-- a registry based Synapse configuration --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;log level="custom"&gt;
-        &lt;property name="message" value="This is a dynamic Synapse configuration $$$"/&gt;
-    &lt;/log&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt;</pre>
-    <h2>
-      <a name="Sample12" id="Sample12">Sample 12: One way messaging /
-      fireAndForget through Synapse</a>
-    </h2>
-    <p>
-      <strong>Objective: Demonstrate one-way messaging / fireAndForget
-      through Synapse</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService (Refer steps above)<br/> Start
-      the Synapse configuration numbered 1: i.e. synapse -sample 1
-    </p>
-    <p>
-      This example invokes the one-way 'placeOrder' operation on the
-      SimpleStockQuoteService using the custom client which uses the Axis2
-      ServiceClient.fireAndForget() API. To test this, use 'ant
-      -Dmode=placeorder...' and you will notice the one-way message flowing
-      through Synapse into the sample Axis2 server instance, which reports the
-      acceptance of the order as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dmode=placeorder</pre>
-<pre xml:space="preserve">SimpleStockQuoteService :: Accepted order for : 7482 stocks of IBM at $ 169.27205579038733</pre>
-    <p>
-      If you send your client request through TCPmon, you will notice that the
-      SimpleStockQuoteService replies to Synapse with a HTTP 202 reply, and that
-      Synapse in turns replies to the client with a HTTP 202 acknowledgment
-    </p>
-    <h2>
-      <a name="Sample13" id="Sample13">Sample 13: Dual channel invocation through Synapse</a>
-    </h2>
-    <p>
-      <strong>Objective: Demonstrate dual channel messaging
-      through Synapse</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService (Refer steps above)<br/> Start
-      the Synapse configuration numbered 0: i.e. synapse -sample 0
-    </p>
-    <p>
-      This example invokes the same 'getQuote' operation on the
-      SimpleStockQuoteService using the custom client which uses the Axis2
-      ServiceClient API with useSeparateListener set to true so that the response is
-      coming through a different channel than the one which is used to send the request
-      to a callback defined in the client.
-      To test this, use 'ant
-      -Dmode=dualquote...' and you will notice the dual channel invocation
-      through Synapse into the sample Axis2 server instance, which reports the response
-      back to the client over a different channel:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dmode=dualquote</pre>
-<pre xml:space="preserve">Response received to the callback
-Standard dual channel :: Stock price = $57.16686934968289</pre>
-    <p>
-      If you send your client request through TCPmon, you will notice that
-      Synapse replies to the client with a HTTP 202 acknowledgment when you send the request and
-      the communication between Synapse and the server happens on a single channel and then you
-      get the response back from Synapse to the clients callback in a different channel (which
-      cannot be observed through TCPmon)
-    </p>
-    <p>
-      Also you could see the wsa:Reply-To header being something like
-      http://localhost:8200/axis2/soap/anonService2 which implies that the reply
-      is being on a different channel listening on the port 8200. Please note that it is
-      required to engage addressing when using the dual channel invocation because it
-      requires the wsa:Reply-To header.
-    </p>
-    <h1>
-      <a name="Endpoints" id="Endpoints">Advanced mediations with endpoints</a>
-    </h1>
-    <h2>
-      <a name="Sample50" id="Sample50">Sample 50: POX to SOAP conversion</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;!-- filtering of messages with XPath and regex matches --&gt;
-    &lt;filter source="get-property('To')" regex=".*/StockQuote.*"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="soap11"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-        &lt;drop/&gt;
-    &lt;/filter&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: POX to SOAP conversion</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 50: i.e. synapse -sample 50
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p>
-      Execute the 'ant stockquote' specifying that the request should be a REST
-      request as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/soap/StockQuote -Drest=true</pre>
-    <p>
-      This example shows a HTTP REST request (as shown below) being transformed
-      into a SOAP request and forwarded to the stock quote service.
-    </p>
-<pre xml:space="preserve">POST /soap/StockQuote HTTP/1.1
-Content-Type: application/xml; charset=UTF-8;action="urn:getQuote";
-SOAPAction: urn:getQuote
-User-Agent: Axis2
-Host: 127.0.0.1
-Transfer-Encoding: chunked
-
-75
-&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-   &lt;m0:request&gt;
-      &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-   &lt;/m0:request&gt;
-&lt;/m0:getQuote&gt;0</pre>
-    <h2>
-      <a name="Sample51" id="Sample51">Sample 51: MTOM and SwA optimizations
-      and request/response correlation</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;filter source="get-property('Action')" regex="urn:uploadFileUsingMTOM"&gt;
-            &lt;property name="example" value="mtom"/&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="mtom"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/filter&gt;
-        &lt;filter source="get-property('Action')" regex="urn:uploadFileUsingSwA"&gt;
-            &lt;property name="example" value="swa"/&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="swa"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/filter&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;filter source="get-property('example')" regex="mtom"&gt;
-            &lt;property name="enableMTOM" value="true" scope="axis2"/&gt;
-        &lt;/filter&gt;
-        &lt;filter source="get-property('example')" regex="swa"&gt;
-            &lt;property name="enableSwA" value="true" scope="axis2"/&gt;
-        &lt;/filter&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: MTOM and SwA optimizations and request/response
-      correlation</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 51: i.e. synapse -sample 51<br/> Start the Axis2
-      server and deploy the MTOMSwASampleService if not already done
-    </p>
-    <p>
-      Execute the 'ant optimizeclient' specifying MTOM optimization as follows:
-    </p>
-<pre xml:space="preserve">ant optimizeclient -Dopt_mode=mtom</pre>
-    <p>
-      The configuration now sets a local message context property, and forwards
-      the message to 'http://localhost:9000/soap/MTOMSwASampleService'
-      optimizing binary content as MTOM. By sending this message through TCPMon
-      you would be able to see the actual message sent over the HTTP transport
-      if required. Thus during response processing, by checking the local
-      message property Synapse could identify the past information about the
-      current message context, and uses this knowledge to transform the response
-      back to the client in the same format as the original request.
-    </p>
-    <p>
-      When the client executes successfully, it will upload a file containing
-      the ASF logo and receive its response back again and saves it into a
-      temporary file.
-    </p>
-<pre xml:space="preserve">[java] Sending file : ./../../repository/conf/sample/resources/mtom/asf-logo.gif as MTOM
-[java] Saved response to file : ./../../work/temp/sampleClient/mtom-4417.gif</pre>
-    <p>
-      Next try SwA as:
-    </p>
-<pre xml:space="preserve">ant optimizeclient -Dopt_mode=swa</pre>
-<pre xml:space="preserve">[java] Sending file : ./../../repository/conf/sample/resources/mtom/asf-logo.gif as SwA
-[java] Saved response to file : ./../../work/temp/sampleClient/swa-30391.gif</pre>
-    <p>
-      By using TCPMon and sending the message through it, one can inspect that
-      the requests and responses sent are indeed MTOM optimized or sent as HTTP
-      attachments as follows:
-    </p>
-<pre xml:space="preserve">POST http://localhost:9000/soap/MTOMSwASampleService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:uploadFileUsingMTOM
-Content-Type: multipart/related; boundary=MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353; type="application/xop+xml";
-start="&lt;0.urn:uuid:B94996494E1DD5F9B51177413845354@apache.org&gt;"; start-info="text/xml"; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353241
-Content-Type: application/xop+xml; charset=UTF-8; type="text/xml"
-Content-Transfer-Encoding: binary
-Content-ID:
-   &lt;0.urn:uuid:B94996494E1DD5F9B51177413845354@apache.org&gt;221b1
-      &lt;?xml version='1.0' encoding='UTF-8'?&gt;
-         &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-            &lt;soapenv:Body&gt;
-               &lt;m0:uploadFileUsingMTOM xmlns:m0="http://www.apache-synapse.org/test"&gt;
-                  &lt;m0:request&gt;
-                     &lt;m0:image&gt;
-                        &lt;xop:Include href="cid:1.urn:uuid:78F94BC50B68D76FB41177413845003@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include" /&gt;
-                     &lt;/m0:image&gt;
-                  &lt;/m0:request&gt;
-               &lt;/m0:uploadFileUsingMTOM&gt;
-            &lt;/soapenv:Body&gt;
-         &lt;/soapenv:Envelope&gt;
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177413845353217
-Content-Type: image/gif
-Content-Transfer-Encoding: binary
-Content-ID:
-         &lt;1.urn:uuid:78F94BC50B68D76FB41177413845003@apache.org&gt;22800GIF89a... &lt;&lt; binary content &gt;&gt;</pre>
-<pre xml:space="preserve">POST http://localhost:9000/soap/MTOMSwASampleService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:uploadFileUsingSwA
-Content-Type: multipart/related; boundary=MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177414170491; type="text/xml";
-start="&lt;0.urn:uuid:B94996494E1DD5F9B51177414170492@apache.org&gt;"; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
---MIMEBoundaryurn_uuid_B94996494E1DD5F9B51177414170491225
-Content-Type: text/xml; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-Content-ID:
-   &lt;0.urn:uuid:B94996494E1DD5F9B51177414170492@apache.org&gt;22159
-      &lt;?xml version='1.0' encoding='UTF-8'?&gt;
-         &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-            &lt;soapenv:Body&gt;
-               &lt;m0:uploadFileUsingSwA xmlns:m0="http://www.apache-synapse.org/test"&gt;
-                  &lt;m0:request&gt;
-                     &lt;m0:imageId&gt;urn:uuid:15FD2DA2584A32BF7C1177414169826&lt;/m0:imageId&gt;
-                  &lt;/m0:request&gt;
-               &lt;/m0:uploadFileUsingSwA&gt;
-            &lt;/soapenv:Body&gt;
-         &lt;/soapenv:Envelope&gt;22--34MIMEBoundaryurn_uuid_B94996494E1DD5F9B511774141704912
-17
-Content-Type: image/gif
-Content-Transfer-Encoding: binary
-Content-ID:
-         &lt;urn:uuid:15FD2DA2584A32BF7C1177414169826&gt;22800GIF89a... &lt;&lt; binary content &gt;&gt;</pre>
-    <h2>
-      <a name="Sample52" id="Sample52">Sample 52: Session less load balancing
-      between 3 endpoints</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-&lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the simple load balancing among a set of
-      endpoints</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 52. (i.e. synapse -sample 52)
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService by switching to &lt;Synapse
-      installation directory&gt;/samples/axis2Server/src/LoadbalanceFailoverService
-      directory and running ant.
-    </p>
-    <p>
-      Start three instances of sample Axis2 server on HTTP ports 9001, 9002 and
-      9003 and give some unique names to each server.
-    </p>
-    <p>
-      Example commands to run sample Axis2 servers from the &lt;Synapse
-      installation directory&gt;/samples/axis2Server directory in Linux are
-      listed below:
-    </p>
-<pre xml:space="preserve">./axis2server.sh -http 9001 -https 9005 -name MyServer1
-./axis2server.sh -http 9002 -https 9006 -name MyServer2
-./axis2server.sh -http 9003 -https 9007 -name MyServer3</pre>
-    <p>
-      Now we are done with setting up the environment for load balance sample.
-      Start the load balance and failover client using the following command:
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Di=100</pre>
-    <p>
-      This client sends 100 requests to the LoadbalanceFailoverService through
-      Synapse. Synapse will distribute the load among the three endpoints
-      mentioned in the configuration in round-robin manner.
-      LoadbalanceFailoverService appends the name of the server to the response,
-      so that client can determine which server has processed the message. If
-      you examine the console output of the client, you can see that requests
-      are processed by three servers as follows:
-    </p>
-<pre xml:space="preserve">[java] Request: 1 ==&gt; Response from server: MyServer1
-[java] Request: 2 ==&gt; Response from server: MyServer2
-[java] Request: 3 ==&gt; Response from server: MyServer3
-[java] Request: 4 ==&gt; Response from server: MyServer1
-[java] Request: 5 ==&gt; Response from server: MyServer2
-[java] Request: 6 ==&gt; Response from server: MyServer3
-[java] Request: 7 ==&gt; Response from server: MyServer1
-...</pre>
-    <p>
-      Now run the client without the -Di=100 parameter to send infinite
-      requests. While running the client shutdown the server named MyServer1.
-      You can observe that requests are only distributed among MyServer2 and
-      MyServer3 after shutting down MyServer1. Console output before and after
-      shutting down MyServer1 is listed below (MyServer1 was shutdown after
-      request 63):
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 61 ==&gt; Response from server: MyServer1
-[java] Request: 62 ==&gt; Response from server: MyServer2
-[java] Request: 63 ==&gt; Response from server: MyServer3
-[java] Request: 64 ==&gt; Response from server: MyServer2
-[java] Request: 65 ==&gt; Response from server: MyServer3
-[java] Request: 66 ==&gt; Response from server: MyServer2
-[java] Request: 67 ==&gt; Response from server: MyServer3
-...</pre>
-    <p>
-      Now restart MyServer1. You can observe that requests will be again sent to
-      all three servers roughly after 60 seconds. This is because we have
-      specified &lt;suspendDurationOnFailure&gt; as 60 seconds in the
-      configuration. Therefore, load balance endpoint will suspend any failed
-      child endpoint only for 60 seconds after detecting the failure.
-    </p>
-    <h2>
-      <a name="Sample53" id="Sample53">Sample 53: Failover sending among 3
-      endpoints</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;failover&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                                &lt;suspendDurationOnFailure&gt;60&lt;/suspendDurationOnFailure&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/failover&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-&lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the failover sending</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 53 (i.e. synapse -sample 53)
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start three instances of sample
-      Axis2 server as mentioned in sample 52.
-    </p>
-    <p/>
-    <p>
-      Above configuration sends messages with the failover behavior. Initially
-      the server at port 9001 is treated as primary and other two are treated as
-      backups. Messages are always directed only to the primary server. If the
-      primary server has failed, next listed server is selected as the primary.
-      Thus, messages are sent successfully as long as there is at least one
-      active server. To test this, run the loadbalancefailover client to send
-      infinite requests as follows:
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover</pre>
-    <p>
-      You can see that all requests are processed by MyServer1. Now shutdown
-      MyServer1 and inspect the console output of the client. You will observe
-      that all subsequent requests are processed by MyServer2.
-    </p>
-    <p>
-      The console output with MyServer1 shutdown after request 127 is listed
-      below:
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 125 ==&gt; Response from server: MyServer1
-[java] Request: 126 ==&gt; Response from server: MyServer1
-[java] Request: 127 ==&gt; Response from server: MyServer1
-[java] Request: 128 ==&gt; Response from server: MyServer2
-[java] Request: 129 ==&gt; Response from server: MyServer2
-[java] Request: 130 ==&gt; Response from server: MyServer2
-...</pre>
-    <p>
-      You can keep on shutting down servers like this. Client will get a
-      response till you shutdown all listed servers. Once all servers are
-      shutdown, the error sequence is activated and a fault message is sent to
-      the client as follows.
-    </p>
-<pre xml:space="preserve">[java] COULDN'T SEND THE MESSAGE TO THE SERVER.</pre>
-    <p>
-      Once a server is detected as failed, it will be added to the active
-      servers list again after 60 seconds (specified in &lt;suspendDurationOnFailure&gt;
-      in the configuration). Therefore, if you have restarted any of the stopped
-      servers and have shutdown all other servers, messages will be directed to
-      the newly started server.
-    </p>
-    <h2>
-      <a name="Sample54" id="Sample54">Sample 54: Session affinity load
-      balancing between 3 endpoints</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;!-- specify the session as the simple client session provided by Synapse for
-                    testing purpose --&gt;
-                    <strong>&lt;session type="simpleClientSession"/&gt;</strong>
-
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                &lt;enableAddressing/&gt;
-                            &lt;/address&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-&lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the loadbalancing with session affinity
-      using client initiated sessions</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 54 (i.e. synapse -sample 54).
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start three instances of the
-      sample Axis2 server as in sample 52.
-    </p>
-    <p/>
-    <p>
-      Above configuration is same as the load balancing configuration in sample
-      52, except that the session type is specified as "simpleClientSession".
-      This is a client initiated session, which means that the client generates
-      the session identifier and sends it with each request. In this sample
-      session type, client adds a SOAP header named ClientID containing the
-      identifier of the client. Synapse binds this ID with a server on the first
-      request and sends all successive requests containing that ID to the same
-      server. Now switch to samples/axis2Client directory and run the client
-      using the following command to check this in action.
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Dmode=session</pre>
-    <p>
-      In the session mode, client continuously sends requests with three different
-      client (session) IDs. One ID is selected among these three IDs for each
-      request randomly. Then client prints the session ID with the responded
-      server for each request. Client output for the first 10 requests are shown
-      below.
-    </p>
-<pre xml:space="preserve">[java] Request: 1 Session number: 1 Response from server: MyServer3
-[java] Request: 2 Session number: 2 Response from server: MyServer2
-[java] Request: 3 Session number: 0 Response from server: MyServer1
-[java] Request: 4 Session number: 2 Response from server: MyServer2
-[java] Request: 5 Session number: 1 Response from server: MyServer3
-[java] Request: 6 Session number: 2 Response from server: MyServer2
-[java] Request: 7 Session number: 2 Response from server: MyServer2
-[java] Request: 8 Session number: 1 Response from server: MyServer3
-[java] Request: 9 Session number: 0 Response from server: MyServer1
-[java] Request: 10 Session number: 0 Response from server: MyServer1
-... </pre>
-    <p>
-      You can see that session number 0 is always directed to the server named
-      MyServer1. That means session number 0 is bound to MyServer1. Similarly
-      session 1 and 2 are bound to MyServer3 and MyServer2 respectively.
-    </p>
-    <h2>
-      <a name="Sample55" id="Sample55">Sample 55: Session affinity load
-      balancing between fail over endpoints</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main" onError="errorHandler"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;!-- specify the session as the simple client session provided by Synapse for
-                    testing purpose --&gt;
-                    <strong>&lt;session type="simpleClientSession"/&gt;</strong>
-
-                    &lt;loadbalance&gt;
-                        &lt;endpoint&gt;
-                            &lt;failover&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/failover&gt;
-                        &lt;/endpoint&gt;
-                        &lt;endpoint&gt;
-                            &lt;failover&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address uri="http://localhost:9004/soap/LBService1"&gt;
-                                        &lt;enableAddressing/&gt;
-                                    &lt;/address&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/failover&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/loadbalance&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-&lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;!-- Send the messages where they have been sent (i.e. implicit To EPR) --&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the session affinity based load
-      balancing with failover capability</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start Synapse with sample configuration 55 (i.e. synapse -sample 55).
-    </p>
-    <p>
-      Deploy the LoadbalanceFailoverService and start four sample Axis2 servers
-      on HTTP ports 9001, 9002, 9003 and 9004 respectively (make sure to specify
-      non-conflicting HTTPS ports).
-    </p>
-    <p/>
-    <p>
-      This configuration also uses "simpleClientSession" to bind sessions as in
-      the previous sample. But failover endpoints are specified as the child
-      endpoints of the load balance endpoint. Therefore sessions are bound to
-      the failover endpoints. Session information has to be replicated among the
-      servers listed under each failover endpoint using some clustering
-      mechanism. Therefore, if one endpoint bound to a session failed,
-      successive requets for that session will be directed to the next endpoint
-      in that failover group. Run the client using the following command to
-      observe this behaviour.
-    </p>
-<pre xml:space="preserve">ant loadbalancefailover -Dmode=session</pre>
-    <p>
-      You can see a client output as shown below.
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 222 Session number: 0 Response from server: MyServer1
-[java] Request: 223 Session number: 0 Response from server: MyServer1
-[java] Request: 224 Session number: 1 Response from server: MyServer1
-[java] Request: 225 Session number: 2 Response from server: MyServer3
-[java] Request: 226 Session number: 0 Response from server: MyServer1
-[java] Request: 227 Session number: 1 Response from server: MyServer1
-[java] Request: 228 Session number: 2 Response from server: MyServer3
-[java] Request: 229 Session number: 1 Response from server: MyServer1
-[java] Request: 230 Session number: 1 Response from server: MyServer1
-[java] Request: 231 Session number: 2 Response from server: MyServer3
-...</pre>
-    <p>
-      Note that session 0 is always directed to MyServer1 and session 1 is
-      directed to MyServer3. No requests are directed to MyServer2 and MyServer4
-      as they are kept as backups by failover endpoints. Now shutdown the server
-      named MyServer1 while running the sample. You will observe that all
-      successive requests for session 0 is now directed to MyServer2, which is
-      the backup server for MyServer1's group. This is shown below, where
-      MyServer1 was shutdown after the request 534.
-    </p>
-<pre xml:space="preserve">...
-[java] Request: 529 Session number: 2 Response from server: MyServer3
-[java] Request: 530 Session number: 1 Response from server: MyServer1
-[java] Request: 531 Session number: 0 Response from server: MyServer1
-[java] Request: 532 Session number: 1 Response from server: MyServer1
-[java] Request: 533 Session number: 1 Response from server: MyServer1
-[java] Request: 534 Session number: 1 Response from server: MyServer1
-[java] Request: 535 Session number: 0 Response from server: MyServer2
-[java] Request: 536 Session number: 0 Response from server: MyServer2
-[java] Request: 537 Session number: 0 Response from server: MyServer2
-[java] Request: 538 Session number: 2 Response from server: MyServer3
-[java] Request: 539 Session number: 0 Response from server: MyServer2
-...</pre>
-    <h2>
-      <a name="Sample56" id="Sample56">Sample 56: WSDL endpoint</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;!-- get epr from the given wsdl --&gt;
-                &lt;endpoint&gt;
-                    &lt;wsdl uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl" service="SimpleStockQuoteService" port="SimpleStockQuoteServiceSOAP11port_http"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of WSDL endpoints</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 56 (i.e. synapse -sample 56).
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService and start the sample Axis2 server.
-    </p>
-    <p>
-      This sample uses a WSDL endpoint inside the send mediator. WSDL endpoints
-      can extract endpoint's address from the given WSDL. As WSDL documents can
-      have many services and many ports inside each service, the service and
-      port of the required endpoint has to be specified. As with address
-      endpoints, QoS parameters for the endpoint can be specified in-line in the
-      configuration. An excerpt taken from the sample_proxy_1.wsdl containing
-      the specified service and port is listed below.
-    </p>
-<pre xml:space="preserve">&lt;wsdl:service name="SimpleStockQuoteService"&gt;
-    &lt;wsdl:port name="SimpleStockQuoteServiceSOAP11port_http"
-               binding="axis2:SimpleStockQuoteServiceSOAP11Binding"&gt;
-        &lt;soap:address location="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/wsdl:port&gt;
-    &lt;wsdl:port name="SimpleStockQuoteServiceSOAP12port_http"
-               binding="axis2:SimpleStockQuoteServiceSOAP12Binding"&gt;
-        &lt;soap12:address location="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/wsdl:port&gt;
-&lt;/wsdl:service&gt;</pre>
-    <p>
-      Specified service and port refers to the endpoint address
-      "http://localhost:9000/soap/SimpleStockQuoteService" according to the
-      above WSDL. Now run the client using the following command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8280</pre>
-    <p>
-      Client will print the quote price for IBM received from the server running
-      on port 9000. Observe the Axis2 console and the Synapse console to verify
-      this behavior.
-    </p>
-    <h1>
-      <a name="MessageMediationQoS" id="MessageMediationQoS">Quality of
-      Service addition or deduction samples in message mediation</a>
-    </h1>
-    <h2>
-      <a name="Sample100" id="Sample100">Sample 100: Using WS-Security for
-      outgoing messages</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="sec_policy" src="file:repository/conf/sample/resources/policy/policy_3.xml"/&gt;
-
-    &lt;in&gt;
-        &lt;send&gt;
-            &lt;endpoint name="secure"&gt;
-                &lt;address uri="http://localhost:9000/soap/SecureStockQuoteService"&gt;
-                    &lt;enableSec policy="sec_policy"/&gt;
-                    &lt;enableAddressing/&gt;
-                &lt;/address&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;header name="wsse:Security" action="remove"
-                xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Connecting to endpoints with WS-Security for
-      outgoing messages</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/>
-    </p>
-    <p>
-      You may also need to download and install the unlimited strength policy
-      files for your JDK before using Apache Rampart (e.g. see
-      http://java.sun.com/javase/downloads/index_jdk5.jsp)
-    </p>
-    <p>
-      Start the Synapse configuration numbered 100: i.e. synapse -sample 100<br/>
-      Start the Axis2 server and deploy the SecureStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      Use the stock quote client to send a request without WS-Security. Synapse
-      is configured to enable WS-Security as per the policy specified by
-      'policy_3.xml' for the outgoing messages to the SecureStockQuoteService
-      endpoint hosted on the Axis2 instance. The debug log messages on Synapse
-      shows the encrypted message flowing to the service and the encrypted
-      response being received by Synapse. The wsse:Security header is then
-      removed from the decrypted message and the response is delivered back to
-      the client, as expected. You may execute the client as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/</pre>
-    <p>
-      The message sent by Synapse to the secure service can be seen as follows,
-      when TCPMon is used.
-    </p>
-<pre xml:space="preserve">POST http://localhost:9001/soap/SecureStockQuoteService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:getQuote
-Content-Type: text/xml; charset=UTF-8
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
-800
-&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-   &lt;soapenv:Envelope xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:wsa="http://www.w3.org/2005/08/addressing" ..&gt;
-      &lt;soapenv:Header&gt;
-         &lt;wsse:Security ..&gt;
-            &lt;wsu:Timestamp ..&gt;
-               ...
-            &lt;/wsu:Timestamp&gt;
-            &lt;xenc:EncryptedKey..&gt;
-               ...
-            &lt;/xenc:EncryptedKey&gt;
-            &lt;wsse:BinarySecurityToken ...&gt;
-               &lt;ds:SignedInfo&gt;
-               ...
-               &lt;/ds:SignedInfo&gt;
-               &lt;ds:SignatureValue&gt;
-               ...
-               &lt;/ds:SignatureValue&gt;
-               &lt;ds:KeyInfo Id="KeyId-29551621"&gt;
-                  ...
-               &lt;/ds:KeyInfo&gt;
-            &lt;/ds:Signature&gt;
-         &lt;/wsse:Security&gt;
-         &lt;wsa:To&gt;http://localhost:9001/soap/SecureStockQuoteService&lt;/wsa:To&gt;
-         &lt;wsa:MessageID&gt;urn:uuid:1C4CE88B8A1A9C09D91177500753443&lt;/wsa:MessageID&gt;
-         &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-      &lt;/soapenv:Header&gt;
-      &lt;soapenv:Body xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="Id-3789605"&gt;
-         &lt;xenc:EncryptedData Id="EncDataId-3789605" Type="http://www.w3.org/2001/04/xmlenc#Content"&gt;
-            &lt;xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc" /&gt;
-            &lt;xenc:CipherData&gt;
-                &lt;xenc:CipherValue&gt;Layg0xQcnH....6UKm5nKU6Qqr&lt;/xenc:CipherValue&gt;
-            &lt;/xenc:CipherData&gt;
-         &lt;/xenc:EncryptedData&gt;
-      &lt;/soapenv:Body&gt;
-   &lt;/soapenv:Envelope&gt;0</pre>
-    <h2>
-      <a name="Sample101" id="Sample101">Sample 101: Reliable message
-      exchange between Synapse and the back-end server using
-      WS-ReliableMessaging</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;in&gt;
-        &lt;RMSequence single="true" version="1.0"/&gt;
-        &lt;send&gt;
-           &lt;endpoint name="reliable"&gt;
-              &lt;address uri="http://localhost:9000/soap/ReliableStockQuoteService"&gt;
-                 &lt;enableRM/&gt;
-                 &lt;enableAddressing/&gt;
-              &lt;/address&gt;
-           &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;header name="wsrm:SequenceAcknowledgement" action="remove"
-                xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-        &lt;header name="wsrm:Sequence" action="remove"
-                xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-
-&lt;/definitions&gt;</pre>
-    <strong>Objective: Demonstrate the message exchange between Synapse and
-    the server using WS-ReliableMessaging (WS-RM)</strong>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Deploy the ReliableStockQuoteService in the sample Axis2 server by
-      switching to the samples/axis2Server/src/ReliableStockQuoteService
-      directory and running the command 'ant'.
-    </p>
-    <p>
-      Start the sample Axis2 server on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 101 (i.e. synapse -sample
-      101).
-    </p>
-    <p/>
-    <p>
-      In the above configuration, WS-RM is engaged to the endpoint using the
-      &lt;enableRM/&gt; tag. It is possible to engage WS-RM to both Address and
-      WSDL endpoints using this tag. In addition to the RM enabled endpoint,
-      RMSequence mediator is specified before the send mediator. This mediator
-      is used to specify the set of messages to be sent using a single RM
-      sequence. In this sample it is specified as single message per sequence.
-      It also specifies the version of the WS-RM to be used. Refer to the
-      Synapse configuration language documentation for more information about
-      the RMSequence mediator. RM related SOAP headers are removed form the
-      message in the out mediator as WS-RM message exchange takes place only between
-      the Synapse and the server. Now run the sample client using the following
-      command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8280</pre>
-    <p>
-      You can observe the client output displaying the quote price for IBM as
-      follows:
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $189.2521262517493</pre>
-    <p>
-      There is no difference to be observed between the normal message exchange
-      and WS-RM enabled message exchange as far as client and server outputs are
-      considered. But if you look at the wire level messages, you would observe
-      additional WS-RM messages and WS-RM elements. Synapse, the initiator of
-      the RM sequence, first try to create a sequence by sending a message with
-      CreateSequence element.
-    </p>
-<pre xml:space="preserve">...
-&lt;soapenv:Body&gt;
-   &lt;wsrm:CreateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-      &lt;wsrm:AcksTo&gt;
-         &lt;wsa:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/wsa:Address&gt;
-      &lt;/wsrm:AcksTo&gt;
-      &lt;wsrm:Offer&gt;
-         &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-      &lt;/wsrm:Offer&gt;
-   &lt;/wsrm:CreateSequence&gt;
-&lt;/soapenv:Body&gt;
-...</pre>
-    <p>
-      Sample Axis2 server responds to CreateSequence request with the following
-      message:
-    </p>
-<pre xml:space="preserve">...
-&lt;soapenv:Body&gt;
-   &lt;wsrm:CreateSequenceResponse xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-      &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-      &lt;wsrm:Accept&gt;
-         &lt;wsrm:AcksTo&gt;
-            &lt;wsa:Address&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:Address&gt;
-         &lt;/wsrm:AcksTo&gt;
-      &lt;/wsrm:Accept&gt;
-   &lt;/wsrm:CreateSequenceResponse&gt;
-&lt;/soapenv:Body&gt;
-...</pre>
-    <p>
-      Once the sequence is established, Synapse sends the request to the server
-      with the pre-negotiated sequence ID.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:To&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:To&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:DB9A5257B637DDA38B1179807372560712002-1515891720&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;urn:getQuote&lt;/wsa:Action&gt;
-        &lt;wsrm:Sequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                       soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
-            &lt;wsrm:LastMessage/&gt;
-        &lt;/wsrm:Sequence&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-            &lt;m0:request&gt;
-                &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-            &lt;/m0:request&gt;
-        &lt;/m0:getQuote&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Synapse keeps on sending above message till the server responds with a
-      valid response message with 200 OK HTTP header. If the server is not ready
-      with a response, it will respond with 202 Accepted HTTP header for all
-      requests. Once the server is ready with a response it will send the
-      response message with sequence ID as follows.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:879853A6871A66641C1179807373804&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://services.samples/ReliableStockQuoteServicePortType/getQuoteResponse
-        &lt;/wsa:Action&gt;
-        &lt;wsa:RelatesTo&gt;urn:uuid:DB9A5257B637DDA38B1179807372560712002-1515891720&lt;/wsa:RelatesTo&gt;
-        &lt;wsrm:Sequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                       soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
-            &lt;wsrm:LastMessage/&gt;
-        &lt;/wsrm:Sequence&gt;
-        &lt;wsrm:SequenceAcknowledgement xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                                      soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:AcknowledgementRange Lower="1" Upper="1"/&gt;
-        &lt;/wsrm:SequenceAcknowledgement&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-...</pre>
-    <p>
-      Now both Synapse and the server are done with the actual message exchange.
-      Then Synapse sends a request to terminate the sequence as follows:
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:To&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:To&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:546F6F33FB7D8BBE351179807379591&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence&lt;/wsa:Action&gt;
-        &lt;wsrm:SequenceAcknowledgement xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"
-                                      soapenv:mustUnderstand="1"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-            &lt;wsrm:AcknowledgementRange Lower="1" Upper="1"/&gt;
-        &lt;/wsrm:SequenceAcknowledgement&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;wsrm:TerminateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:879853A6871A66641C1179807373270&lt;/wsrm:Identifier&gt;
-        &lt;/wsrm:TerminateSequence&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Server responds to the sequence termination message, accepting to
-      terminate the sequence as follows.
-    </p>
-<pre xml:space="preserve">&lt;soapenv:Envelope xmlns:wsa="http://www.w3.org/2005/08/addressing"
-                  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-    &lt;soapenv:Header&gt;
-        &lt;wsa:ReplyTo&gt;
-            &lt;wsa:Address&gt;http://localhost:9000/soap/ReliableStockQuoteService&lt;/wsa:Address&gt;
-        &lt;/wsa:ReplyTo&gt;
-        &lt;wsa:MessageID&gt;urn:uuid:879853A6871A66641C1179807380190&lt;/wsa:MessageID&gt;
-        &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence&lt;/wsa:Action&gt;
-    &lt;/soapenv:Header&gt;
-    &lt;soapenv:Body&gt;
-        &lt;wsrm:TerminateSequence xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"&gt;
-            &lt;wsrm:Identifier&gt;urn:uuid:546F6F33FB7D8BBE351179807372769&lt;/wsrm:Identifier&gt;
-        &lt;/wsrm:TerminateSequence&gt;
-    &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Note that although each of above messages are separate SOAP messages, in
-      most cases they will be exchanged in a single socket connection as HTTP
-      Keep-Alive header is used.
-    </p>
-    <h1>
-      <a name="ProxyServices" id="ProxyServices">Synapse Proxy service
-      samples</a>
-    </h1>
-    <h2>
-      <a name="Sample150" id="Sample150">Sample 150: Introduction to proxy
-      services</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to Synapse proxy services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 150: i.e. synapse -sample 150<br/> Start the
-      Axis2 server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p/>
-    <p>
-      Once Synapse starts, you could go to
-      http://localhost:8280/soap/StockQuoteProxy?wsdl and view the WSDL
-      generated for the proxy service defined in the configuration. This WSDL is
-      based on the source WSDL supplied in the proxy service definition, and is
-      updated to reflect the proxy service EPR.
-    </p>
-    <p>
-      Execute the stock quote client by requesting for a stock quote on the
-      proxy service as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8280/soap/StockQuoteProxy</pre>
-    <p>
-      An 'inSequence' or 'endpoint' or both of these would decide how the
-      message would be handled after the proxy service receives the message. In
-      the above example, the request received is forwarded to the sample service
-      hosted on Axis2. The 'outSequence' defines how the response is handled
-      before it is sent back to the client. By default, a proxy service is
-      exposed over all transports configured for Synapse, unless these are
-      specifically mentioned through the 'transports' attribute.
-    </p>
-    <h2>
-      <a name="Sample151" id="Sample151">Sample 151: Custom sequences and
-      endpoints with proxy services</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="proxy_1"&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;&lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;&lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-    &lt;sequence name="out"&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-    &lt;endpoint name="proxy_2_endpoint"&gt;
-        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-    &lt;/endpoint&gt;
-    &lt;localEntry key="proxy_wsdl" src="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-
-    &lt;proxy name="StockQuoteProxy1"&gt;
-        &lt;publishWSDL key="proxy_wsdl"/&gt;
-        &lt;target inSequence="proxy_1" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-
-    &lt;proxy name="StockQuoteProxy2"&gt;
-        &lt;publishWSDL key="proxy_wsdl"/&gt;
-        &lt;target endpoint="proxy_2_endpoint" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Using custom sequences and endpoints for message
-      mediation with proxy services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 151: i.e. synapse -sample 151<br/> Start the
-      Axis2 server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p/>
-    <p>
-      This configuration creates two proxy services. The first proxy service
-      'StockQuoteProxy1' uses the sequence named 'proxy_1' to process incoming
-      messages and the sequence named "out" to process outgoing responses. The
-      second proxy service 'StockQuoteProxy2' is set to directly forward
-      messages that are received to the endpoint named 'proxy_2_endpoint'
-      without any mediation.
-    </p>
-    <p>
-      You could send a stock quote request to each of these proxy services and
-      receive the reply generated by the actual service hosted on the Axis2
-      server instance.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8280/soap/StockQuoteProxy1<br/>ant stockquote -Daddurl=http://localhost:8280/soap/StockQuoteProxy2</pre>
-    <h2>
-      <a name="Sample152" id="Sample152">Sample 152: Switching transports and
-      message format from SOAP to REST/POX</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy" transports="https"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="pox"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Switching transports and message format from SOAP to REST/POX</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 152: i.e. synapse -sample 152
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This configuration demonstrates how a proxy service could be exposed on a
-      subset of available transports, and how it could switch from one transport
-      to another. This example exposes the created proxy service only on HTTPS,
-      and thus if the user tries to access it over HTTP, would result in a
-      fault.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/soap/StockQuoteProxy
-...
-     [java] org.apache.axis2.AxisFault: The service cannot be found for the endpoint reference (EPR) /soap/StockQuoteProxy</pre>
-    <p/>
-    <p>
-      Accessing this over HTTPS (ant stockquote
-      -Dtrpurl=https://localhost:8243/soap/StockQuoteProxy) causes the proxy
-      service to access the SimpleStockQuoteService on the sample Axis2 server
-      using REST/POX. This could be seen if the message exchange was captured
-      using TCPMon as follows. The REST/POX response is now transformed back
-      into a SOAP message and returned to the client.
-    </p>
-<pre xml:space="preserve">POST http://localhost:9000/soap/SimpleStockQuoteService HTTP/1.1
-Host: 127.0.0.1
-SOAPAction: urn:getQuote
-Content-Type: application/xml; charset=UTF-8;action="urn:getQuote";
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-User-Agent: Synapse-HttpComponents-NIO
-
-75
-&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-   &lt;m0:request&gt;
-      &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-   &lt;/m0:request&gt;
-&lt;/m0:getQuote&gt;</pre>
-<pre xml:space="preserve">HTTP/1.1 200 OK
-Content-Type: application/xml; charset=UTF-8;action="http://services.samples/SimpleStockQuoteServicePortType/getQuoteResponse";
-Date: Tue, 24 Apr 2007 14:42:11 GMT
-Server: Synapse-HttpComponents-NIO
-Transfer-Encoding: chunked
-Connection: Keep-Alive
-
-2b3
-&lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-   &lt;ns:return&gt;
-      &lt;ns:change&gt;3.7730036841862384&lt;/ns:change&gt;
-      &lt;ns:earnings&gt;-9.950236235550818&lt;/ns:earnings&gt;
-      &lt;ns:high&gt;-80.23868444613285&lt;/ns:high&gt;
-      &lt;ns:last&gt;80.50750970812187&lt;/ns:last&gt;
-      &lt;ns:lastTradeTimestamp&gt;Tue Apr 24 20:42:11 LKT 2007&lt;/ns:lastTradeTimestamp&gt;
-      &lt;ns:low&gt;-79.67368355714606&lt;/ns:low&gt;
-      &lt;ns:marketCap&gt;4.502043663670823E7&lt;/ns:marketCap&gt;
-      &lt;ns:name&gt;IBM Company&lt;/ns:name&gt;
-      &lt;ns:open&gt;-80.02229531286982&lt;/ns:open&gt;
-      &lt;ns:peRatio&gt;25.089295161182022&lt;/ns:peRatio&gt;
-      &lt;ns:percentageChange&gt;4.28842665653824&lt;/ns:percentageChange&gt;
-      &lt;ns:prevClose&gt;87.98107059692451&lt;/ns:prevClose&gt;
-      &lt;ns:symbol&gt;IBM&lt;/ns:symbol&gt;
-      &lt;ns:volume&gt;19941&lt;/ns:volume&gt;
-   &lt;/ns:return&gt;&lt;/ns:getQuoteResponse&gt;</pre>
-    <p/>
-    <h2>
-      <a name="Sample153" id="Sample153">Sample 153: Routing the messages
-      arrived to a proxy service without processing the security headers</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SecureStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Routing the messages arrived to a proxy service
-      without processing the MustUnderstand headers (Security header)</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> You may also need to
-      download and install the unlimited strength policy files for your JDK
-      before using Apache Rampart (e.g. see
-      http://java.sun.com/javase/downloads/index_jdk5.jsp)
-    </p>
-    <p>
-      Start the Synapse configuration numbered 153: i.e. synapse -sample 153<br/>
-      Start the Axis2 server and deploy the SecureStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      The proxy service will receive secure messages with security headers which
-      are MustUnderstand. But hence element 'engageSec' is not present in the
-      proxy configuration Synapse will not engage that Apache Rampart on this
-      proxy service. It is expected that an MustUnderstand failure exception on
-      the AxisEngine would occur before the message arrives Synapse. But Synapse
-      handles this message and gets it in by setting all the headers which are
-      MustUnderstand and not processed to processed state. This will enable
-      Synapse to route the messages without reading the Security headers (just
-      routing the messages from client to service, both of which are secure). To
-      execute the client, send a stock quote request to the proxy service, and
-      sign and encrypt the request by specifying the client side security policy
-      as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/soap/StockQuoteProxy -Dpolicy=./../../repository/conf/sample/resources/policy/client_policy_3.xml</pre>
-    <p>
-      By following through the debug logs or TCPMon output, you could see that
-      the request received by the proxy service was signed and encrypted. Also,
-      looking up the WSDL of the proxy service by requesting the URL
-      http://localhost:8280/soap/StockQuoteProxy?wsdl reveals the security
-      policy attachments are not there and security is not engaged. When sending
-      the message to the backend service, you could verify that the security
-      headers were there as in the original message to Synapse from client, and
-      that the response received does use WS-Security, and forwarded back to the
-      client without any modification. You should note that this wont be a
-      security hole because the message inside Synapse is signed and encrypted
-      and can only be forwarded to a secure service to be useful.
-    </p>
-    <h2>
-      <a name="Sample154" id="Sample154">Sample 154: Load Balancing with
-      Proxy Services </a>
-    </h2>
-    <div>
-<pre xml:space="preserve">   &lt;!-- A proxy service with a loadbalace endpoint --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="LBProxy" transports="https http" startOnLoad="true"&gt;
-        &lt;target faultSequence="errorHandler"&gt;
-            &lt;inSequence&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;session type="simpleClientSession"/&gt;
-                        &lt;loadbalance algorithm="roundRobin"&gt;
-                            &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9001/soap/LBService1"&gt;
-                                    &lt;enableAddressing/&gt;
-                                    &lt;suspendDurationOnFailure&gt;20&lt;/suspendDurationOnFailure&gt;
-                                &lt;/address&gt;
-                            &lt;/endpoint&gt;
-                            &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9002/soap/LBService1"&gt;
-                                    &lt;enableAddressing/&gt;
-                                    &lt;suspendDurationOnFailure&gt;20&lt;/suspendDurationOnFailure&gt;
-                                &lt;/address&gt;
-                            &lt;/endpoint&gt;
-                            &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9003/soap/LBService1"&gt;
-                                    &lt;enableAddressing/&gt;
-                                    &lt;suspendDurationOnFailure&gt;20&lt;/suspendDurationOnFailure&gt;
-                                &lt;/address&gt;
-                            &lt;/endpoint&gt;
-                        &lt;/loadbalance&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-                &lt;drop/&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_2.wsdl"/&gt;
-    &lt;/proxy&gt;
-    &lt;sequence name="errorHandler"&gt;
-
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="COULDN'T SEND THE MESSAGE TO THE SERVER."/&gt;
-        &lt;/makefault&gt;
-
-        &lt;header name="To" action="remove"/&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt; </pre>
-      <p>
-        <strong>Objective: Load Balancing with Proxy Services </strong>
-      </p>
-      <p>
-        <strong>Prerequisites:</strong> Sample setup is same as
-        LoadBalance endpoints (#53 to #54).
-      </p>
-      <p>
-        Start the Synapse configuration numbered 154: i.e. synapse -sample 154<br/>
-        Start the Axis2 server and deploy the SecureStockQuoteService if not
-        already done
-      </p>
-      <p>
-        Run the client with
-      </p>
-<pre xml:space="preserve">  ant loadbalancefailover -Dmode=session -Dtrpurl=http://localhost:8280/soap/LBProxy </pre>
-      <p>
-        Functionality is similar to the sample #54.
-      </p>
-    </div>
-    <h2>
-      <a name="Sample155" id="Sample155">Sample 155: Dual channel invocation
-      on both client side and serverside of Synapse with Proxy Services</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"&gt;
-                    &lt;enableAddressing separateListener="true"/&gt;
-                &lt;/address&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the dual channel invocation with Synapse proxy services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Synapse
-      configuration numbered 150: i.e. synapse -sample 155<br/> Start the
-      Axis2 server and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p/>
-    <p>
-      This sample will show the action of the dual channel invocation within client and Synapse
-      as well as within Synapse and the actual server. Note that if you want to enable dual
-      channel invocation you need to set the separateListener attribute to true of the
-      enableAddressing element of the endpoint.
-    </p>
-    <p>
-      Execute the stock quote client by requesting for a stock quote on a dual channel from the
-      proxy service as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8280/soap/StockQuoteProxy -Dmode=dualquote</pre>
-    <p>
-      In the above example, the request received is forwarded to the sample service
-      hosted on Axis2 and the endpoint specifies to enable addressing and do the invocation
-      over a dual channel. If you observe this message flow by using a TCPmon, you could see that
-      on the channel you send the request to Synapse the response has been written as an
-      HTTP 202 Accepted, where as the real response from Synapse will come over a different channel
-      which cannot be obsesrved unless you use tcpdump to dump all the TCP level messages.
-    </p>
-    <p>
-      At the same time you can observe the behaviour of the invocation between Synapse and
-      the actual Axis2 service, where you can see a 202 Accepted message being delivered to Synapse
-      as the response to the request. The actual response will be delivered to Synapse over a
-      different channel.
-    </p>
-    <h1>
-      <a name="ProxyServiceQoS" id="ProxyServiceQoS">QoS addition and
-      deduction for service mediation (proxy) samples</a>
-    </h1>
-    <h2>
-      <a name="Sample200" id="Sample200">Sample 200: Using WS-Security with
-      policy attachments for proxy services</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="sec_policy" src="file:repository/conf/sample/resources/policy/policy_3.xml"/&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;header name="wsse:Security" action="remove"
-                        xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"/&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;policy key="sec_policy"/&gt;
-        &lt;enableSec/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Using WS-Security signing and encryption with proxy
-      services through WS-Policy</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> You may also need to
-      download and install the unlimited strength policy files for your JDK
-      before using Apache Rampart (e.g. see
-      http://java.sun.com/javase/downloads/index_jdk5.jsp)
-    </p>
-    <p>
-      Start the Synapse configuration numbered 200: i.e. synapse -sample 200<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      The proxy service expects to receive a signed and encrypted message as
-      specified by the security policy. Please see Apache Rampart and Axis2
-      documentation on the format of the policy file. The element 'engageSec'
-      specifies that Apache Rampart should be engaged on this proxy service.
-      Hence if Rampart rejects any request messages that does not conform to the
-      specified policy, those messages will never reach the 'inSequence' to be
-      processed. Since the proxy service is forwarding the received request to
-      the simple stock quote service that does not use WS-Security, we are
-      instructing Synapse to remove the wsse:Security header from the outgoing
-      message. To execute the client, send a stock quote request to the proxy
-      service, and sign and encrypt the request by specifying the client side
-      security policy as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/soap/StockQuoteProxy -Dpolicy=./../../repository/conf/sample/resources/policy/client_policy_3.xml</pre>
-    <p>
-      By following through the debug logs or TCPMon output, you could see that
-      the request received by the proxy service was signed and encrypted. Also,
-      looking up the WSDL of the proxy service by requesting the
-      URLhttp://localhost:8280/soap/StockQuoteProxy?wsdl reveals the security
-      policy attachment to the supplied base WSDL. When sending the message to
-      the backend service, you could verify that the security headers were
-      removed, and that the response received does not use WS-Security, but that
-      the response being forwarded back to the client is signed and encrypted as
-      expected by the client.
-    </p>
-    <h2>
-      <a name="Sample201" id="Sample201">Sample 201: Reliable message
-      exchange between the client and proxy services using WS-ReliableMessaging</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;header name="wsrm:SequenceAcknowledgement" action="remove"
-                        xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-                &lt;header name="wsrm:Sequence" action="remove"
-                        xmlns:wsrm="http://schemas.xmlsoap.org/ws/2005/02/rm"/&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;enableRM/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <strong>Objective: Demonstrate the reliable message exchange between the
-    client and Synapse using WS-ReliableMessaging (WS-RM)</strong>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService in the sample Axis2 server and start it
-      on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration number 201 (i.e. synapse
-      -sample 201).
-    </p>
-    <p/>
-    <p>
-      In the above configuration, a proxy service is created with WS-RM enabled
-      using the &lt;enableRM/&gt; tag. Therefore, this proxy service is capable
-      of communicating with a WS-RM client. It also removes the WS-RM headers in
-      the In Sequence before the message is sent to the backend server. This is
-      required as the reliable messaging is applicable only between the client
-      and Synapse. Now start the client with WS-RM as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8280/soap/StockQuoteProxy -Dwsrm=true</pre>
-    <p>
-      In this case, client sends a WS-RM enabled request to Synapse where Synapse
-      sends normal request to the server. This can be observed by examining the
-      wire level messages between the client and Synapse. These messages would
-      be similar to the wire level messages shown in sample 101. Each message
-      would perform a similar function to the messages discussed in sample 53.
-    </p>
-    <p/>
-    <h1>
-      <a name="Transport" id="Transport">Transport samples and switching
-      transports</a>
-    </h1>
-    <h2>
-      <a name="Sample250" id="Sample250">Sample 250: Introduction to
-      switching transports - JMS to http/s</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="StockQuoteProxy" transports="jms"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to switching transports with proxy
-      services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService (Refer steps above)<br/>
-      Download, install and start a JMS server, and configure Synapse to listen
-      on JMS (refer notes below)<br/> Start the Synapse configuration
-      numbered 250: i.e. synapse -sample 250<br/> For this example we would
-      use ActiveMQ as the JMS provider. Once ActiveMQ is installed and started
-      you should get a message as follows:
-    </p>
-<pre xml:space="preserve">INFO BrokerService - ActiveMQ JMS Message Broker (localhost) started</pre>
-    <p>
-      You will now need to configure the Axis2 instance used by Synapse (not the
-      sample Axis2 server) to enable JMS support using the above provider. Refer
-      to the Axis2 documentation on setting up JMS for more details
-      (http://ws.apache.org/axis2/1_1/jms-transport.html). You will also need to
-      copy the ActiveMQ client jar files activeio-core-3.0-beta1.jar,
-      activemq-core-4.0-RC2.jar and geronimo-j2ee-management_1.0_spec-1.0.jar
-      into the lib directory to allow Synapse to connect to the JMS provider.
-    </p>
-    <p>
-      For a default ActiveMQ v4.0 installation, you may uncomment the Axis2
-      transport listener configuration found at repository/conf/axis2.xml as
-    </p>
-<pre xml:space="preserve">&lt;transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener"&gt; ...</pre>
-    <p>
-      Once you start the Synapse configuration and request for the WSDL of the
-      proxy service (http://localhost:8280/soap/StockQuoteProxy?wsdl) you will
-      notice that its exposed only on the JMS transport. This is because the
-      configuration specified this requirement in the proxy service definition.
-    </p>
-    <p>
-      Now lets send a stock quote request on JMS, using the dumb stock quote
-      client as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/StockQuoteProxy -Djms_payload=MSFT</pre>
-    <p>
-      On the Synapse debug log you will notice that the JMS listener received
-      the request message as:
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver -Proxy Service StockQuoteProxy received a new message...</pre>
-    <p>
-      Now if you examine the console running the sample Axis2 server, you will
-      see a message indicating that the server has accepted an order as follows:
-    </p>
-<pre xml:space="preserve">Accepted order for : 16517 stocks of MSFT at $ 169.14622538721846</pre>
-    <p>
-      In this sample, client sends the request message to the proxy service
-      exposed in JMS in Synsape. Synapse forwards this message to the HTTP EPR
-      of the simple stock quote service hosted on the sample Axis2 server, and
-      returns the reply back to the client through a JMS temporary queue.
-    </p>
-    <p>
-      Note: It is possible to instruct a JMS proxy service to listen to an
-      already existing destination without creating a new one. To do this, use
-      the property elements on the proxy service definition to specify the
-      destination and connection factory etc.
-    </p>
-    <p>
-      e.g.
-    </p>
-<pre xml:space="preserve">&lt;property name="transport.jms.Destination" value="dynamicTopics/something.TestTopic"/&gt;</pre>
-    <h2>
-      <a name="Sample251" id="Sample251">Sample 251: Switching from http/s to
-      JMS</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="StockQuoteProxy" transports="http"&gt;
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;amp;
-                   java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;amp;java.naming.provider.url=tcp://localhost:61616"/&gt;
-            &lt;/endpoint&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate switching from HTTP to JMS</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Download, install and
-      start a JMS server
-    </p>
-    <p>
-      Configure sample Axis2 server for JMS (refer notes above)<br/> Start
-      the Axis2 server and deploy the SimpleStockQuoteService (see below)<br/>
-      Configure the Synase JMS transport (refer notes above - sample 250)<br/>
-      Start the Synapse configuration numbered 251: i.e. synapse -sample 251
-    </p>
-    <p>
-      To switch from HTTP to JMS, edit the
-      samples/axis2Server/repository/conf/axis2.xml for the sample Axis2 server
-      and enable JMS (refer notes above), and restart the server. Now you can
-      see that the simple stock quote service is available in both JMS and HTTP
-      in the sample Axis2 server. To see this, point your browser to the WSDL of
-      the service at http://localhost:9000/soap/SimpleStockQuoteService?wsdl.
-      JMS URL for the service is mentioned as below:
-    </p>
-<pre xml:space="preserve">jms:/SimpleStockQuoteService?transport.jms.ConnectionFactoryJNDIName=
-QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;
-java.naming.provider.url=tcp://localhost:61616</pre>
-    <p>
-      You may also notice that the simple stock quote proxy service exposed in
-      Synapse is now available only in HTTP as we have specified transport for
-      that service as HTTP. To observe this, access the WSDL of stock quote
-      proxy service at http://localhost:8280/soap/StockQuoteProxy?wsdl.
-    </p>
-    <p>
-      This Synapse configuration creates a proxy service over HTTP and forwards
-      received messages to the above EPR using JMS, and sends back the response
-      to the client over HTTP once the simple stock quote service responds with
-      the stock quote reply over JMS to the Synapse server. To test this, send a
-      place order request to Synapse using HTTP as follows:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8280/soap/StockQuoteProxy -Dmode=placeorder -Dsymbol=MSFT</pre>
-    <p>
-      The sample Axis2 server console will print a message indicating that it
-      has accepted the order as follows:
-    </p>
-<pre xml:space="preserve">Accepted order for : 18406 stocks of MSFT at $ 83.58806051152119</pre>
-    <h2>
-      <a name="Sample252" id="Sample252">Sample 252: Pure text/binary and POX
-      message support with JMS</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="text_proxy"&gt;
-        &lt;header name="Action" value="urn:placeOrder"/&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-            var args = mc.getPayloadXML().toString().split(" ");
-            mc.setPayloadXML(
-            &lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-                &lt;m:order&gt;
-                    &lt;m:price&gt;{args[0]}&lt;/m:price&gt;
-                    &lt;m:quantity&gt;{args[1]}&lt;/m:quantity&gt;
-                    &lt;m:symbol&gt;{args[2]}&lt;/m:symbol&gt;
-                &lt;/m:order&gt;
-            &lt;/m:placeOrder&gt;);
-        ]]&gt;&lt;/script&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="mtom_proxy"&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;header name="Action" value="urn:oneWayUploadUsingMTOM"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/MTOMSwASampleService" optimize="mtom"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="pox_proxy"&gt;
-        &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-        &lt;header name="Action" value="urn:placeOrder"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService" format="soap11"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="out"&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;proxy name="JMSFileUploadProxy" transports="jms"&gt;
-        &lt;target inSequence="mtom_proxy" outSequence="out"/&gt;
-        &lt;parameter name="transport.jms.Wrapper"&gt;{http://services.samples/xsd}element&lt;/parameter&gt;
-    &lt;/proxy&gt;
-    &lt;proxy name="JMSTextProxy" transports="jms"&gt;
-        &lt;target inSequence="text_proxy" outSequence="out"/&gt;
-        &lt;parameter name="transport.jms.Wrapper"&gt;{http://services.samples/xsd}text&lt;/parameter&gt;
-    &lt;/proxy&gt;
-    &lt;proxy name="JMSPoxProxy" transports="jms"&gt;
-        &lt;target inSequence="pox_proxy" outSequence="out"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Pure POX/Text and Binary JMS Proxy services -
-      including MTOM</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Configure JMS for Synapse
-      (Refer notes)<br/> Start the Synapse configuration numbered 252: i.e.
-      synapse -sample 252<br/> Start the Axis2 server and deploy the
-      SimpleStockQuoteService and the MTOMSwASampleService if not already done
-    </p>
-    <p/>
-    <p>
-      This configuration creates three JMS proxy services named
-      JMSFileUploadProxy, JMSTextProxy and JMSPoxProxy exposed over JMS queues
-      with the same names as the services. The first part of this example
-      demonstrates the pure text message support with JMS, where a user sends a
-      space separated text JMS message of the form "&lt;price&gt; &lt;qty&gt;
-      &lt;symbol&gt;". Synapse converts this message into a SOAP message and
-      sends this to the SimpleStockQuoteServices' placeOrder operation. Synapse
-      uses the script mediator to transform the text message into a XML payload
-      using the JavaScript support available to tokenize the string. The proxy
-      service property named "transport.jms.Wrapper" defines a custom wrapper
-      element QName, to be used when wrapping text/binary content into a SOAP
-      envelope.
-    </p>
-    <p/>
-    <p>
-      Execute JMS client as follows. This will post a pure text JMS message with
-      the content defined (e.g. "12.33 1000 ACP") to the specified JMS
-      destination - dynamicQueues/JMSTextProxy
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=text -Djms_payload="12.33 1000 ACP" -Djms_dest=dynamicQueues/JMSTextProxy</pre>
-    <p>
-      Following the debug logs, you could notice that Synapse received the JMS
-      text message and transformed it into a SOAP payload as follows. Notice
-      that the wrapper element "{http://services.samples/xsd}text" has been used
-      to hold the text message content.
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-  &lt;soapenv:Body&gt;&lt;axis2ns1:text xmlns:axis2ns1="http://services.samples/xsd"&gt;12.33 1000 ACP&lt;/axis2ns1:text&gt;&lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Now, you could see how the script mediator created a stock quote request
-      by tokenizing the text as follows, and sent the message to the placeOrder
-      operation of the SimpleStockQuoteService.
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG AddressEndpoint - Sending message to endpoint :: name = AnonymousEndpoints resolved address = http://localhost:9000/soap/SimpleStockQuoteService
-[JMSWorker-1] DEBUG AddressEndpoint - SOAPAction: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - WSA-Action: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;
-  &lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;&lt;m:order&gt;&lt;m:price&gt;12.33&lt;/m:price&gt;&lt;m:quantity&gt;1000&lt;/m:quantity&gt;&lt;m:symbol&gt;ACP&lt;/m:symbol&gt;&lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      The sample Axis2 server would now accept the one-way message and issue the
-      following message:
-    </p>
-<pre xml:space="preserve">Wed Apr 25 19:50:56 LKT 2007 samples.services.SimpleStockQuoteService :: Accepted order for : 1000 stocks of ACP at $ 12.33</pre>
-    <p/>
-    <p>
-      The next section of this example demonstrates how a pure binary JMS
-      message could be received and processed through Synapse. The configuration
-      creates a proxy service named 'JMSFileUploadProxy' that accepts binary
-      messages and wraps them into a custom element
-      '{http://services.samples/xsd}element'. The received message is then
-      forwarded to the MTOMSwASampleService using the SOAP action
-      'urn:oneWayUploadUsingMTOM' and optimizing binary content using MTOM. To
-      execute this sample, use the JMS client to publish a pure binary JMS
-      message containing the file
-      './../../repository/conf/sample/resources/mtom/asf-logo.gif' to the JMS
-      destination 'dynamicQueues/JMSFileUploadProxy' as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=binary -Djms_dest=dynamicQueues/JMSFileUploadProxy -Djms_payload=./../../repository/conf/sample/resources/mtom/asf-logo.gif</pre>
-    <p>
-      Examining the Synapse debug logs reveals that the binary content was
-      received over JMS and wrapped with the specified element into a SOAP
-      infoset as follows:
-    </p>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Proxy Service JMSFileUploadProxy received a new message...
-...
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
-&lt;soapenv:Body&gt;&lt;axis2ns1:element xmlns:axis2ns1="http://services.samples/xsd"&gt;R0lGODlhgw...AAOw==&lt;/axis2ns1:element&gt;&lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      Thereafter the message was sent as a MTOM optimized message as specified
-      by the 'format=mtom' attribute of the endpoint, to the
-      MTOMSwASampleService using the SOAP action 'urn:oneWayUploadUsingMTOM'.
-      Once received by the sample service, it is saved into a temporary file and
-      could be verified for correctness.
-    </p>
-<pre xml:space="preserve">Wrote to file : ./../../work/temp/sampleServer/mtom-4417.gif</pre>
-    <p/>
-    <p>
-      The final section of this example shows how a POX JMS message received by
-      Synapse is sent to the SimpleStockQuoteService as a SOAP message. Use the
-      JMS client as follows to create a POX (Plain Old XML) message with a stock
-      quote request payload (without a SOAP envelope), and send it to the JMS
-      destination 'dynamicQueues/JMSPoxProxy' as follows:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/JMSPoxProxy -Djms_payload=MSFT</pre>
-    <p>
-      You can see that Synapse received the POX message and displays it as
-      follows in the debug logs, and then converts it into a SOAP payload and
-      sends to the SimpleStockQuoteService after setting the SOAP action as
-      'urn:placeOrder'.
-    </p>
-    <p/>
-<pre xml:space="preserve">[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Proxy Service JMSPoxProxy received a new message...
-...
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-    &lt;m:order&gt;
-        &lt;m:price&gt;172.39703010684752&lt;/m:price&gt;
-        &lt;m:quantity&gt;19211&lt;/m:quantity&gt;
-        &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-    &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[JMSWorker-1] DEBUG ProxyServiceMessageReceiver - Using the sequence named pox_proxy for message mediation
-...
-[JMSWorker-1] DEBUG HeaderMediator - Setting header : Action to : urn:placeOrder
-...
-[JMSWorker-1] DEBUG AddressEndpoint - Sending message to endpoint :: name = AnonymousEndpoints resolved address = http://localhost:9000/soap/SimpleStockQuoteService
-[JMSWorker-1] DEBUG AddressEndpoint - SOAPAction: urn:placeOrder
-[JMSWorker-1] DEBUG AddressEndpoint - Body :
-&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-    &lt;m:order&gt;
-        &lt;m:price&gt;172.39703010684752&lt;/m:price&gt;
-        &lt;m:quantity&gt;19211&lt;/m:quantity&gt;
-        &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-    &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
-[JMSWorker-1] DEBUG Axis2FlexibleMEPClient - sending [add = false] [sec = false] [rm = false] [ mtom = false] [ swa = false] [ force soap=true; pox=false] [ to null] </pre>
-    <p>
-      The sample Axis2 server displays a successful message on the receipt of
-      the message as:
-    </p>
-<pre xml:space="preserve">Wed Apr 25 20:24:50 LKT 2007 samples.services.SimpleStockQuoteService :: Accepted order for : 19211 stocks of MSFT at $ 172.39703010684752</pre>
-    <h2>
-      <a name="Sample253" id="Sample253">Sample 253: One way bridging from
-      JMS to http and replying with a 202 Accepted response</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="JMStoHTTPStockQuoteProxy" transports="jms"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-            &lt;/inSequence&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-    &lt;proxy name="OneWayProxy" transports="http"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;log level="full"/&gt;
-            &lt;/inSequence&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-            &lt;outSequence&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate one-way message bridging from JMS to
-      HTTP and replying with a HTTP 202 Accepted response</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> Start the Axis2 server
-      and deploy the SimpleStockQuoteService if not already done
-    </p>
-    <p>
-      Start the Synapse configuration numbered 253: i.e. synapse -sample 253
-    </p>
-    <p/>
-    <p>
-      This example invokes the one-way 'placeOrder' operation on the
-      SimpleStockQuoteService using the Axis2 ServiceClient.fireAndForget() API
-      at the client. To test this, use 'ant -Dmode=placeorder...' and you will
-      notice the one-way JMS message flowing through Synapse into the sample
-      Axis2 server instance over HTTP, and Axis2 acknowledging it with a HTTP
-      202 Accepted response.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dmode=placeorder -Dtrpurl="jms:/JMStoHTTPStockQuoteProxy?transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&amp;java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory&amp;java.naming.provider.url=tcp://localhost:61616"</pre>
-<pre xml:space="preserve">SimpleStockQuoteService :: Accepted order for : 7482 stocks of IBM at $ 169.27205579038733</pre>
-    <p>
-      The second example shows how Synapse could be made to respond with a HTTP
-      202 Accepted response to a request received. The proxy service simply logs
-      the message received and acknowledges it. On the Synapse console you could
-      see the logged message, and if TCPMon was used at the client, you would
-      see the 202 Accepted response sent back to the client from Synapse
-    </p>
-<pre xml:space="preserve">ant stockquote -Dmode=placeorder -Dtrpurl=http://localhost:8280/soap/OneWayProxy</pre>
-<pre xml:space="preserve">HTTP/1.1 202 Accepted
-Content-Type: text/xml; charset=UTF-8
-Host: 127.0.0.1
-SOAPAction: "urn:placeOrder"
-Date: Sun, 06 May 2007 17:20:19 GMT
-Server: Synapse-HttpComponents-NIO
-Transfer-Encoding: chunked
-
-0</pre>
-    <h2>
-      <a name="Sample254" id="Sample254">Sample 254: Using the file system as
-      transport medium using VFS transport listener and sender</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-        &lt;proxy name="StockQuoteProxy" transports="vfs"&gt;
-                &lt;parameter name="transport.vfs.FileURI"&gt;file:///home/user/test/in&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ContentType"&gt;text/xml&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.FileNamePattern"&gt;.*\.xml&lt;/parameter&gt;
-                &lt;parameter name="transport.PollInterval"&gt;15&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.MoveAfterProcess"&gt;file:///home/user/test/original&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.MoveAfterFailure"&gt;file:///home/user/test/original&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ActionAfterProcess"&gt;MOVE&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.ActionAfterFailure"&gt;MOVE&lt;/parameter&gt;
-
-                &lt;target&gt;
-                        &lt;endpoint&gt;
-                                &lt;address format="soap12" uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                        &lt;outSequence&gt;
-                                &lt;property name="transport.vfs.ReplyFileName"
-                                          expression="fn:concat(fn:substring-after(get-property('MessageID'), 'urn:uuid:'), '.xml')" scope="transport"/&gt;
-                                &lt;send&gt;
-                                        &lt;endpoint&gt;
-                                                &lt;address uri="vfs:file:///home/user/test/out"/&gt; &lt;!--CHANGE--&gt;
-                                        &lt;/endpoint&gt;
-                                &lt;/send&gt;
-                        &lt;/outSequence&gt;
-                &lt;/target&gt;
-                &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Using the file system as transport medium using VFS
-      transport listener and sender</strong>
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p>
-      Create three new directories in a test directory. e.g. in, out, original
-      in /home/user/test. Open
-      SYNAPSE_HOME/repository/conf/sample/synapse_sample_254.xml and edit the
-      following values. Change transport.vfs.FileURI,
-      transport.vfs.MoveAfterProcess, transport.vfs.MoveAfterFailure parameter
-      values to the above in, original, original directories respectively.
-      Change outSequence endpoint address uri to out directory with the prefix
-      <em>vfs:</em>. Values you have to change are marked with &lt;!--CHANGE--&gt;.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 254: i.e. synapse -sample 254
-    </p>
-    <p>
-      Copy SYNAPSE_HOME/repository/conf/sample/resources/vfs/test.xml to the
-      directory given in transport.vfs.FileURI above.
-    </p>
-    <p>
-      test.xml file content is as follows
-    </p>
-<pre xml:space="preserve">&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-        &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
-        &lt;soapenv:Body&gt;
-                &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-                        &lt;m0:request&gt;
-                                &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-                        &lt;/m0:request&gt;
-                &lt;/m0:getQuote&gt;
-        &lt;/soapenv:Body&gt;
-&lt;/soapenv:Envelope&gt;</pre>
-    <p>
-      VFS transport listener will pick the file from <em>in</em>
-      directory and send it to the Axis2 service. The request XML file will be
-      moved to <em>original</em> directory. The response from the Axis2
-      server will be saved to <em>out</em> directory.
-    </p>
-    <h2>
-      <a name="Sample255" id="Sample255">Sample 255: Switching from ftp
-      transport listener to mail transport sender</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-        &lt;proxy name="StockQuoteProxy" transports="vfs"&gt;
-                &lt;parameter name="transport.vfs.FileURI"&gt;vfs:ftp://guest:guest@localhost/test?vfs.passive=true&lt;/parameter&gt; &lt;!--CHANGE--&gt;
-                &lt;parameter name="transport.vfs.ContentType"&gt;text/xml&lt;/parameter&gt;
-                &lt;parameter name="transport.vfs.FileNamePattern"&gt;.*\.xml&lt;/parameter&gt;
-                &lt;parameter name="transport.PollInterval"&gt;15&lt;/parameter&gt;
-
-                &lt;target&gt;
-                        &lt;inSequence&gt;
-                                &lt;header name="Action" value="urn:getQuote"/&gt;
-                        &lt;/inSequence&gt;
-                        &lt;endpoint&gt;
-                                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                        &lt;outSequence&gt;
-                                &lt;property action="set" name="OUT_ONLY" value="true"/&gt;
-                                &lt;send&gt;
-                                        &lt;endpoint&gt;
-                                                &lt;address uri="mailto:user@host"/&gt; &lt;!--CHANGE--&gt;
-                                        &lt;/endpoint&gt;
-                                &lt;/send&gt;
-                        &lt;/outSequence&gt;
-                &lt;/target&gt;
-                &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-        &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Switching from FTP transport listener to mail
-      transport sender</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> You will need access to
-      an FTP server and an SMTP server to try this sample.
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p>
-      Enable mail transport sender in the Synapse axis2.xml. See <a
-      href="Synapse_Samples_Setup.html
-      #mailsender">Setting up mail transport
-      sender</a>
-    </p>
-    <p>
-      Create a new test directory in the FTP server. Open
-      SYNAPSE_HOME/repository/conf/sample/synapse_sample_116.xml and edit the
-      following values. Change transport.vfs.FileURI parameter value point to
-      the test directory at the FTP server. Change outSequence endpoint address
-      uri email address to a working email address. Values you have to change
-      are marked with &lt;!--CHANGE--&gt;.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 255: i.e. synapse -sample 255
-    </p>
-    <p>
-      Copy SYNAPSE_HOME/repository/conf/sample/resources/vfs/test.xml to the ftp
-      directory given in transport.vfs.FileURI above.
-    </p>
-    <p>
-      VFS transport listener will pick the file from the directory in the FTP
-      server and send it to the Axis2 service. The file in the FTP directory
-      will be deleted. The response will be sent to the given email address.
-    </p>
-    <h2>
-      <a name="Sample256" id="Sample256">Sample 256: Proxy services with the
-      mail transport </a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Using the mail transport --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="StockQuoteProxy" transports="mailto"&gt;
-
-        &lt;parameter name="transport.mail.Address"&gt;synapse.demo.1@gmail.com&lt;/parameter&gt;
-        &lt;parameter name="transport.mail.Protocol"&gt;pop3&lt;/parameter&gt;
-        &lt;parameter name="transport.PollInterval"&gt;5&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.host"&gt;pop.gmail.com&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.port"&gt;995&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.user"&gt;synapse.demo.1&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.password"&gt;mailpassword&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.socketFactory.class"&gt;javax.net.ssl.SSLSocketFactory&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.socketFactory.fallback"&gt;false&lt;/parameter&gt;
-        &lt;parameter name="mail.pop3.socketFactory.port"&gt;995&lt;/parameter&gt;
-
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;property name="senderAddress" expression="get-property('transport', 'From')"/&gt;
-                &lt;log level="full"&gt;
-                    &lt;property name="Sender Address" expression="get-property('senderAddress')"/&gt;
-                &lt;/log&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;property name="Subject" value="Custom Subject for Response" scope="transport"/&gt;
-                &lt;header name="To" expression="fn:concat('mailto:', get-property('senderAddress'))"/&gt;
-                &lt;log level="full"&gt;
-                    &lt;property name="message" value="Response message"/&gt;
-                    &lt;property name="Sender Address" expression="get-property('senderAddress')"/&gt;
-                &lt;/log&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Using the mail transport with Proxy services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> You will need access to
-      an email account
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p>
-      Enable mail transport sender in the Synapse axis2.xml. See <a
-      href="Synapse_Samples_Setup.html#mailsender">Setting up mail transport
-      sender</a>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 256: i.e. synapse -sample 256
-    </p>
-    <p>
-      Send a plain/text email with the following body and any custom Subject
-      from your mail account.
-    </p>
-<pre xml:space="preserve">&lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;&lt;m0:request&gt;&lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;&lt;/m0:request&gt;&lt;/m0:getQuote&gt; </pre>
-    <p>
-      After a few seconds (e.g. 30s), you should receive a POX response in your
-      email account with the stock quote reply.
-    </p>
-
-    <h2>
-      <a name="Sample257" id="Sample257">Sample 257: Proxy services with the
-      FIX transport </a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Using the FIX transport --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="FIXProxy" transports="fix"&gt;
-
-        &lt;parameter name="transport.fix.AcceptorConfigURL"&gt;file:/home/synapse_user/fix-config/fix-synapse.cfg&lt;/parameter&gt;
-        &lt;parameter name="transport.fix.InitiatorConfigURL"&gt;file:/home/synapse_user/fix-config/synapse-sender.cfg&lt;/parameter&gt;
-        &lt;parameter name="transport.fix.AcceptorMessageStore"&gt;file&lt;/parameter&gt;
-        &lt;parameter name="transport.fix.InitiatorMessageStore"&gt;file&lt;/parameter&gt;
-
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="fix://localhost:19876?BeginString=FIX.4.0&amp;amp;SenderCompID=SYNAPSE&amp;amp;TargetCompID=EXEC"/&gt;
-            &lt;/endpoint&gt;
-	    &lt;inSequence&gt;
-		&lt;log level="full"/&gt;
-	    &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;log level="full"/&gt;
-		&lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Demonstrate the usage of the FIX (Financial Information eXchange) transport with proxy services</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> 
-       You will need the two sample FIX applications that come with Quickfix/J
-       (Banzai and Executor). Configure the two applications to establish
-       sessions with Synapse. See <a href="Synapse_Samples_Setup.html#fixsamplesconfig">
-       Configuring Sample FIX Applications</a>
-    </p>
-    <p>
-      Start Banzai and Executor
-    </p>
-    <p>
-      Enable FIX transport in the Synapse axis2.xml. See <a
-      href="Synapse_Samples_Setup.html#fixtransport">Setting up FIX transport
-      </a>
-    </p>
-    <p>
-      Configure Synapse for FIX samples. See <a href="Synapse_Samples_Setup.html#fixsamples">
-      Configuring Synapse for FIX Samples</a>
-    </p>
-    <p>
-      Open up the SYNAPSE_HOME/repository/conf/sample/synapse_sample_257.xml file 
-      and make sure that transport.fix.AcceptorConfigURL property points to the
-      fix-synapse.cfg file you created. Also make sure that transport.fix.
-      InitiatorConfigURL property points to the synapse-sender.cfg file you
-      created. Once done you can start the Synapse configuration numbered 257:
-      i.e. synapse -sample 257. Note that Synapse creates a new FIX session with
-      Banzai at this point.
-    </p>
-    <p>
-      Send an order request from Banzai to Synapse.
-    </p>
-    <p>
-      Synapse will create a session with Executor and forward the order request. The
-      responses coming from the Executor will be sent back to Banzai. It will take a
-      couple of seconds for the responses to arrive for the first request since Synapse
-      has to establish a session with the Executor. But all the subsequent messages
-      will pass through almost instantaneously.
-    </p>
-    <h2>
-      <a name="Sample258" id="Sample258">Sample 258: Switching from HTTP to FIX </a>
-    </h2>
-<pre xml:space="preserve">
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;proxy name="FIXProxy"&gt;
-
-        &lt;parameter name="transport.fix.InitiatorConfigURL"&gt;file:/home/synapse_user/fix-config/synapse-sender.cfg&lt;/parameter&gt;
-        &lt;parameter name="transport.fix.InitiatorMessageStore"&gt;file&lt;/parameter&gt;
-        &lt;parameter name="transport.fix.SendAllToInSequence"&gt;false&lt;/parameter&gt;
-
-        &lt;target&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="fix://localhost:19876?BeginString=FIX.4.0&amp;amp;SenderCompID=SYNAPSE&amp;amp;TargetCompID=EXEC"/&gt;
-            &lt;/endpoint&gt;
-	    &lt;inSequence&gt;
-	    	&lt;property name="transport.fix.ServiceName" value="FIXProxy" scope="axis2-client"/&gt;
-			&lt;log level="full"/&gt;
-	    &lt;/inSequence&gt;
-        &lt;outSequence&gt;
-            &lt;log level="full"/&gt;
-			&lt;send/&gt;
-        &lt;/outSequence&gt;
-        &lt;/target&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Demonstrate switching from HTTP to FIX</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/> 
-       You will need the Executor sample application that comes with Quickfix/J.
-       Configure Executor to establish a session with Synapse. See <a href=
-       "Synapse_Samples_Setup.html#fixsamplesconfig">Configuring Sample FIX 
-       Applications</a>
-    </p>
-    <p>
-      Start Executor.
-    </p>
-    <p>
-      Enable FIX transport sender in the Synapse axis2.xml. See <a
-      href="Synapse_Samples_Setup.html#fixtransport">Setting up FIX transport
-      </a>
-    </p>
-    <p>
-      Configure Synapse for FIX samples. See <a href="Synapse_Samples_Setup.html#fixsamples">
-      Configuring Synapse for FIX Samples</a>. There is no need to create the fix-synapse.cfg
-      file for this sample. Having only the synapse-sender.cfg file is sufficient.
-    </p>
-    <p>
-      Go to the SYNAPSE_HOME/repository/conf/sample/synapse_sample_258.xml 
-      file and make sure that transport.fix.InitiatorConfigURL property
-      points to the synapse-sender.cfg file you created. Once done you can
-      start the Synapse configuration numbered 258: i.e. synapse -sample 258
-    </p>
-    <p>
-      Invoke the FIX Client as follows. This command sends a FIX message
-      embedded in a SOAP message over HTTP.
-      <pre>ant fixclient -Dsymbol=IBM -Dqty=5 -Dmode=buy -Daddurl=http://localhost:8280/soap/FIXProxy</pre>
-    </p>
-    <p>
-      Synapse will create a session with Executor and forward the order request. The
-      first response coming from the Executor will be sent back over HTTP. Executor 
-      generally sends two responses for each incoming order request. But since the
-      response has to be forwarded over HTTP only one can be sent back to the client. 
-    </p>
-
-    <h1>
-      <a name="Task" id="Task">Introduction to Synapse Tasks</a>
-    </h1>
-    <h2>
-      <a name="Sample300" id="Sample300">Sample 300: Introduction to Tasks
-      with simple trigger</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;task class="org.apache.synapse.startup.tasks.MessageInjector" name="CheckPrice"&gt;
-        &lt;property name="to" value="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-        &lt;property name="soapAction" value="urn:getQuote"/&gt;
-        &lt;property name="message"&gt;
-            &lt;m0:getQuote xmlns:m0="http://services.samples/xsd"&gt;
-                &lt;m0:request&gt;
-                    &lt;m0:symbol&gt;IBM&lt;/m0:symbol&gt;
-                &lt;/m0:request&gt;
-            &lt;/m0:getQuote&gt;
-        &lt;/property&gt;
-        &lt;trigger interval="5"/&gt;
-    &lt;/task&gt;
-
-    &lt;in&gt;
-        &lt;send/&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="Stock_Quote_on" expression="//ns:return/ns:lastTradeTimestamp/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-            &lt;property name="For_the_organization" expression="//ns:return/ns:name/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-            &lt;property name="Last_Value" expression="//ns:return/ns:last/child::text()" xmlns:ns="http://services.samples/xsd"/&gt;
-        &lt;/log&gt;
-    &lt;/out&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Introduce the concept of tasks and how simple
-      trigger works</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong><br/>
-      Build the SimpleStockQuoteService as mentioned above and start the
-      sample axis2 server before staring Synapse.
-    </p>
-    <p>
-      When ever Synapse gets started with this configuration (i.e. ./synapse.sh -sample 300)
-      and initialized, this task will run periodically in 5 second intervals. You could
-      limit the number of times that you want to run this task by adding a count attribute
-      with an integer as the value, if the count is not present as in this sample this task will
-      run forever.
-    </p>
-    <p>
-      One can write his own task class implementing the
-      org.apache.synapse.startup.Task interface and implementing the execute
-      method to do the task. For this particular sample we have used the
-      MessageInjector which just injects a message specified into Synapse environment.
-    </p>
-    <h1>
-      <a name="AdvancedMediation" id="AdvancedMediation">Advanced mediations
-      with advanced mediators</a>
-    </h1>
-    <h2>
-      <a name="ScriptMediator" id="ScriptMediator">Using scripts in mediation
-      (Script Mediator)</a>
-    </h2>
-    <p>
-      The Synapse Script Mediator is a Synapse extension, and thus all
-      prerequisites are not bundled by default with the Synapse distribution.
-      Before you use some script mediators you may need to manually add the
-      required jar files to the Synapse lib directory, and optionally perform
-      other installation tasks as may be required by the individual scripting
-      language. This is explained in the <a
-      href="Synapse_Samples_Setup.html#script">Samples Setup guide</a>.
-    </p>
-    <h2>
-      <a name="Sample350" id="Sample350">Sample 350: Introduction to the
-      script mediator using js scripts</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;localEntry key="stockquoteScript" src="file:repository/conf/sample/resources/script/stockquoteTransform.js"/&gt;
-
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote request expected by the service --&gt;
-        &lt;script language="js" key="stockquoteScript" function="transformRequest"/&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="js" key="stockquoteScript" function="transformResponse"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p/>
-<pre xml:space="preserve">&lt;x&gt;&lt;![CDATA[
-  function transformRequest(mc) {
-     var symbol = mc.getPayloadXML()..*::Code.toString();
-     mc.setPayloadXML(
-        &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-           &lt;m:request&gt;
-              &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
-           &lt;/m:request&gt;
-        &lt;/m:getQuote&gt;);
-  }
-
-  function transformResponse(mc) {
-     var symbol = mc.getPayloadXML()..*::symbol.toString();
-     var price = mc.getPayloadXML()..*::last.toString();
-     mc.setPayloadXML(
-        &lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;
-   &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
-   &lt;m:Price&gt;{price}&lt;/m:Price&gt;
-        &lt;/m:CheckPriceResponse&gt;);
-  }
-]]&gt;&lt;/x&gt;</pre>
-    <p>
-      <strong>Objective: Introduction to the script mediator</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 350: i.e. synapse -sample 350<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This sample is similar to sample 8 but instead of using XSLT, the
-      transformation is done with JavaScript and E4X. Note that the script
-      source loaded from a resource must be specified within a CDATA tag within
-      an XML element. The script used in this example has two functions,
-      'transformRequest' and 'transformResponse', and the Synapse configuration
-      uses the function attribute to specify which function should be invoked.
-      Use the stock quote client to issue a custom quote client as follows.:
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dmode=customquote</pre>
-    <p>
-      Synapse uses the script mediator and the specified JavaScript function to
-      convert the custom request to a standard quote request. Subsequently the
-      response received is transformed and sent back to the client.
-    </p>
-    <h2>
-      <a name="Sample351" id="Sample351">Sample 351: In-line script mediation
-      with JavaScript</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote requst expected by the service --&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-               var symbol = mc.getPayloadXML()..*::Code.toString();
-               mc.setPayloadXML(
-                  &lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-                     &lt;m:request&gt;
-                        &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
-                     &lt;/m:request&gt;
-                  &lt;/m:getQuote&gt;);
-        ]]&gt;&lt;/script&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="js"&gt;&lt;![CDATA[
-               var symbol = mc.getPayloadXML()..*::symbol.toString();
-               var price = mc.getPayloadXML()..*::last.toString();
-               mc.setPayloadXML(
-                  &lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;
-               &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
-               &lt;m:Price&gt;{price}&lt;/m:Price&gt;
-                  &lt;/m:CheckPriceResponse&gt;);
-            ]]&gt;&lt;/script&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Introduction to in-line script mediation</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 351: i.e. synapse -sample 351<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This example is functionally equivalent to sample # 350 and sample # 8,
-      and demonstrates in-line script mediation in Synapse. Use the stock quote
-      client to send a custom quote as in example # 350 to try this example.
-    </p>
-    <p/>
-    <h2>
-      <a name="Sample352" id="Sample352">Sample 352: Accessing Synapse
-      message context API methods using scripting language</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-       &lt;!-- change the MessageContext into a response and set a response payload --&gt;
-       &lt;script language="js"&gt;&lt;![CDATA[
-          mc.setTo(mc.getReplyTo());
-          mc.setProperty("RESPONSE", "true");
-          mc.setPayloadXML(
-             &lt;ns:getQuoteResponse xmlns:ns="http://services.samples/xsd"&gt;
-                &lt;ns:return&gt;
-                   &lt;ns:last&gt;99.9&lt;/ns:last&gt;
-                &lt;/ns:return&gt;
-             &lt;/ns:getQuoteResponse&gt;);
-       ]]&gt;&lt;/script&gt;
-    &lt;/in&gt;
-    &lt;send/&gt;
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: Accessing the Synapse APIs from scripting languages</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Start the Synapse configuration numbered 352: i.e. bin/synapse -sample 352<br/>
-    </p>
-    <p/>
-    <p>
-      This example shows how an in-line JavaScript mediator script could access
-      the Synapse message context API to set its 'To' EPR and to set a custom
-      property to mark it as a response. Execute the stock quote client, and you
-      will receive the response "99.9" as the last sale price as per the above
-      script.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/
-...
-stockquote:
-     [java] Standard :: Stock price = $99.9</pre>
-    <h2>
-      <a name="Sample353" id="Sample353">Sample 353: Using Ruby scripts for
-      mediation</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;localEntry key="stockquoteScript" src="file:repository/conf/sample/resources/script/stockquoteTransform.rb"/&gt;
-    &lt;in&gt;
-        &lt;!-- transform the custom quote request into a standard quote request expected by the service --&gt;
-        &lt;script language="rb" key="stockquoteScript" function="transformRequest"/&gt;
-
-        &lt;!-- send message to real endpoint referenced by name "stockquote" and stop --&gt;
-        &lt;send&gt;
-            &lt;endpoint name="stockquote"&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;!-- transform the standard response back into the custom format the client expects --&gt;
-        &lt;script language="rb" key="stockquoteScript" function="transformResponse"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-<pre xml:space="preserve">&lt;x&gt;&lt;![CDATA[
-require 'rexml/document'
-include REXML
-
-def transformRequest(mc)
-   newRequest= Document.new '&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;'&lt;&lt;
-      '&lt;m:request&gt;&lt;m:symbol&gt;&lt;/m:symbol&gt;&lt;/m:request&gt;&lt;/m:getQuote&gt;'
-   newRequest.root.elements[1].elements[1].text = mc.getPayloadXML().root.elements[1].get_text
-   mc.setPayloadXML(newRequest)
-end
-
-def transformResponse(mc)
-   newResponse = Document.new '&lt;m:CheckPriceResponse xmlns:m="http://www.apache-synapse.org/test"&gt;&lt;m:Code&gt;' &lt;&lt;
-      '&lt;/m:Code&gt;&lt;m:Price&gt;&lt;/m:Price&gt;&lt;/m:CheckPriceResponse&gt;'
-   newResponse.root.elements[1].text = mc.getPayloadXML().root.elements[1].elements[1].get_text
-   newResponse.root.elements[2].text = mc.getPayloadXML().root.elements[1].elements[2].get_text
-   mc.setPayloadXML(newResponse)
-end
-]]&gt;&lt;/x&gt;</pre>
-    <p>
-      <strong>Objective: Script mediators using Ruby</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      This sample uses Ruby so first setup support for this in Synapse as
-      described at <a href="Synapse_Samples_Setup.html#script">Configuring
-      JRuby</a>.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 353: i.e. bin/synapse -sample 353<br/>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This sample is functionally equivalent to sample # 350 (#351 and #8) but
-      instead uses a Ruby script using the JRuby interpreter. The script has two
-      functions, 'transformRequest' and 'transformResponse', and the Synapse
-      configuration specifies which function to be invoked when used. Execute
-      the stock quote client to send a custom stock quote as per example #350
-      and check the received stock quote response.
-    </p>
-    <h2>
-      <a name="Sample354" id="Sample354">Sample 354: Using In-lined Ruby
-      scripts for mediation</a>
-    </h2>
-    <div>
-<pre xml:space="preserve">      &lt;!-- Using In-lined Ruby scripts for mediation --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;script language="rb"&gt;
-            &lt;![CDATA[
-                require 'rexml/document'
-                include REXML
-                newRequest= Document.new '&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;&lt;m:request&gt;&lt;m:symbol&gt;...test...&lt;/m:symbol&gt;&lt;/m:request&gt;&lt;/m:getQuote&gt;'
-                newRequest.root.elements[1].elements[1].text = $mc.getPayloadXML().root.elements[1].get_text
-                $mc.setPayloadXML(newRequest)
-            ]]&gt;
-        &lt;/script&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;script language="rb"&gt;
-            &lt;![CDATA[
-                require 'rexml/document'
-                include REXML
-                newResponse = Document.new '&lt;m:CheckPriceResponse xmlns:m="http://services.samples/xsd"&gt;&lt;m:Code&gt;&lt;/m:Code&gt;&lt;m:Price&gt;&lt;/m:Price&gt;&lt;/m:CheckPriceResponse&gt;'
-                newResponse.root.elements[1].text = $mc.getPayloadXML().root.elements[1].elements[1].get_text
-                newResponse.root.elements[2].text = $mc.getPayloadXML().root.elements[1].elements[2].get_text
-                $mc.setPayloadXML(newResponse)
-            ]]&gt;
-        &lt;/script&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt; </pre>
-      <p>
-        <strong>Objective: Script mediators using Ruby(In-line Ruby Script)</strong>
-      </p>
-      <p>
-        <strong>Prerequisites:</strong>
-      </p>
-      <p>
-        This sample uses Ruby so first setup support for this in Synapse as
-        described at <a href="Synapse_Samples_Setup.html#script">Configuring
-        JRuby</a>.
-      </p>
-      <p>
-        Start the Synapse configuration numbered 354: i.e. bin/synapse -sample
-        354<br/> Start the Axis2 server and deploy the
-        SimpleStockQuoteService if not already done
-      </p>
-      <p/>
-      <p>
-        This sample is functionally equivalent to the sample 353.
-      </p>
-      <p>
-        Run the client with
-      </p>
-<pre xml:space="preserve"> ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dmode=customquote</pre>
-    </div>
-    <h2>
-      <a name="DBMediators" id="DBMediators">Database interactions in
-      mediation (DBLookup / DBReport)</a>
-    </h2>
-    <p>
-      Following database mediators use Derby in a client/server configuration by
-      using the network server. Therefore, to proceed with the following
-      samples, you need a working Derby database server and you have to follow
-      the steps in <a href="Synapse_Samples_Setup.html#derby">Sample Setup
-      Guide</a> before going through the samples.
-    </p>
-    <p/>
-    <h2>
-      <a name="Sample360" id="Sample360">Sample 360: Introduction to dblookp
-      mediator</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="myFaultHandler"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason expression="get-property('ERROR_MESSAGE')"/&gt;
-        &lt;/makefault&gt;
-
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-        &lt;send/&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="myFaultHandler"&gt;
-        &lt;in&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Looking up from the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dblookup xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;select * from company where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:getQuote/m0:request/m0:symbol"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                    &lt;result name="company_id" column="id"/&gt;
-                &lt;/statement&gt;
-            &lt;/dblookup&gt;
-
-            &lt;switch source="get-property('company_id')"&gt;
-                &lt;case regex="c1"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="c2"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;case regex="c3"&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text"
-                                  expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/case&gt;
-                &lt;default&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="** Unrecognized Company ID **"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="** Unrecognized Company ID **"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/default&gt;
-            &lt;/switch&gt;
-            &lt;drop/&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p/>
-    <p/>
-    <p>
-      <strong>Objective:Introduction to the
-      dblookup mediator</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong> Setting up Derby database as
-      explained above.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 360: i.e. synapse -sample 360
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      This sample demonstrates simple database read operations through Synapse.
-      When a message arrives at dblookup mediator, it opens a connection to the
-      database and executes the SQL query. The SQL query use '?' character for
-      attributes that will be filled at runtime. The parameters define how to
-      calculate the value of those attributes at runtime. In this sample a
-      dblookup mediator has been used to extract 'id' of the company from the
-      company database using the symbol which is evaluated using an xpath
-      against the SOAP envelope. Then 'id' base switching will be done by a
-      switch mediator.
-    </p>
-    <p/>
-    <p>
-      When the IBM stock quote is requested,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=IBM</pre>
-    <p>
-      Synapse console shows
-    </p>
-<pre xml:space="preserve">INFO LogMediator text = ** Looking up from the Database **INFO LogMediator text = Company ID &#x2013; c1<br/></pre>
-    <p/>
-    <p>
-      For the SUN stock quote,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=SUN</pre>
-    <p/>
-    <p>
-      Synapse console shows
-    </p>
-<pre xml:space="preserve">INFO LogMediator text = ** Looking up from the Database **INFO LogMediator text = Company ID &#x2013; c2<br/></pre>
-    <p>
-      and for the MSFT stock quote,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=MSFT</pre>
-<pre xml:space="preserve">INFO LogMediator text = ** Looking up from the Database **<br/>INFO LogMediator text = Company ID &#x2013; c2</pre>
-    <p>
-      For any other symbols, Synapse console shows
-    </p>
-<pre xml:space="preserve">INFO LogMediator text = ** Unrecognized Company ID **</pre>
-    <p/>
-    <p>
-      and the client gets a response which has following message.
-    </p>
-<pre xml:space="preserve">** Unrecognized Company ID **</pre>
-    <div>
-    </div>
-    <h2>
-      <a name="Sample361" id="Sample361">Sample 361: Introduction to dbreport
-      mediator</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Reporting to the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dbreport xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;update company set price=? where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:last/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="DOUBLE"/&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                &lt;/statement&gt;
-            &lt;/dbreport&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <div>
-      <p>
-        <strong>Objective:Introduction to the dbreport mediator</strong>
-      </p>
-      <p>
-        <strong>Prerequisites:</strong> Setting up Derby database as
-        above.
-      </p>
-      <p>
-        Start the Synapse configuration numbered 361: i.e. synapse -sample 361
-      </p>
-      <p>
-        Start the Axis2 server and deploy the SimpleStockQuoteService if not
-        already done
-      </p>
-    </div>
-    <p>
-      This sample demonstrates simple database write operations. The dbreport
-      mediator writes (i.e. inserts one row) to a table using the message
-      details. It works the same as the dblookup mediator. In this sample ,
-      dbreport mediator is used for updating the stock price of the company
-      using the last quote value which is calculated by evaluating an XPath
-      against the response message. After running this sample, user can check
-      the company table using the Derby client tool. It will show the inserted
-      value by the dbreport mediator.
-    </p>
-    <p/>
-    <p>
-      Run the client using,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=IBM</pre>
-    <p>
-      and then execute the following query using database client tool against
-      synapsedb.
-    </p>
-<pre xml:space="preserve">select price from company where name='IBM';</pre>
-    <p>
-      It will show some value as follows.
-    </p>
-<pre xml:space="preserve">96.39535981018865</pre>
-    <div>
-    </div>
-    <h2>
-      <a name="Sample362" id="Sample362">Sample 362: Action of dbreport and
-      dblookup mediators together</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-
-        &lt;out&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Reporting to the Database **"/&gt;
-            &lt;/log&gt;
-
-            &lt;dbreport xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;update company set price=? where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:last/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="DOUBLE"/&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                &lt;/statement&gt;
-            &lt;/dbreport&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          value="** Looking up from the Database **"/&gt;
-            &lt;/log&gt;
-            &lt;dblookup xmlns="http://ws.apache.org/ns/synapse"&gt;
-                &lt;connection&gt;
-                    &lt;pool&gt;
-                        &lt;driver&gt;org.apache.derby.jdbc.ClientDriver&lt;/driver&gt;
-                        &lt;url&gt;jdbc:derby://localhost:1527/synapsedb;create=false&lt;/url&gt;
-                        &lt;user&gt;synapse&lt;/user&gt;
-                        &lt;password&gt;synapse&lt;/password&gt;
-                    &lt;/pool&gt;
-                &lt;/connection&gt;
-                &lt;statement&gt;
-                    &lt;sql&gt;select * from company where name =?&lt;/sql&gt;
-                    &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                               xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                    &lt;result name="stock_price" column="price"/&gt;
-                &lt;/statement&gt;
-            &lt;/dblookup&gt;
-            &lt;log level="custom"&gt;
-                &lt;property name="text"
-                          expression="fn:concat('Stock price - ',get-property('stock_price'))"/&gt;
-            &lt;/log&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of dbreport and dblookup
-      mediators</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong> Setting up Derby database as
-      above.
-    </p>
-    <p>
-      Start the Synapse configuration numbered 362: i.e. synapse -sample 362
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done
-    </p>
-    <p/>
-    <p>
-      In this sample ,the dbreport mediator works the same as the above sample.
-      It updates the price for the given company using the response messages
-      content. Then the dblookup mediator reads the last updated value from the
-      company database and logs it.
-    </p>
-    <p>
-      When running client,
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=IBM</pre>
-    <p>
-      Synapse console shows,
-    </p>
-<pre xml:space="preserve">INFO LogMediator text = ** Reporting to the Database **
-...
-INFO LogMediator text = ** Looking up from the Database **
-...
-INFO LogMediator text = Stock price - 153.47886496064808</pre>
-    <p/>
-      <h2><a name="Sample363" id="Sample363">Sample 363: Reusable database connection pools</a></h2>
-
-      <div>
-      <p>Prior to run this sample please follow the 'Setting up Synapse
-      DataSources' section in the <a href="Synapse_Samples_Setup.html">sample setup guide</a>.</p>
-      <pre>&lt;!-- Reusable database connection pool --&gt;
-      &lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-          &lt;sequence name="myFaultHandler"&gt;
-              &lt;makefault&gt;
-                  &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                  &lt;reason expression="get-property('ERROR_MESSAGE')"/&gt;
-              &lt;/makefault&gt;
-
-              &lt;property name="RESPONSE" value="true"/&gt;
-              &lt;header name="To" expression="get-property('ReplyTo')"/&gt;
-              &lt;send/&gt;
-              &lt;drop/&gt;
-          &lt;/sequence&gt;
-
-          &lt;sequence name="main" onError="myFaultHandler"&gt;
-              &lt;in&gt;
-                  &lt;log level="custom"&gt;
-                      &lt;property name="text"
-                                value="** Looking up from the Database **"/&gt;
-                  &lt;/log&gt;
-                  &lt;dblookup&gt;
-                      &lt;connection&gt;
-                          &lt;pool&gt;
-                              &lt;dsName&gt;lookupdb&lt;/dsName&gt;
-                              &lt;icClass&gt;com.sun.jndi.rmi.registry.RegistryContextFactory&lt;/icClass&gt;
-                              &lt;url&gt;rmi://localhost:2199&lt;/url&gt;
-                              &lt;user&gt;synapse&lt;/user&gt;
-                              &lt;password&gt;synapse&lt;/password&gt;
-                          &lt;/pool&gt;
-                      &lt;/connection&gt;
-                      &lt;statement&gt;
-                          &lt;sql&gt;select * from company where name =?&lt;/sql&gt;
-                          &lt;parameter expression="//m0:getQuote/m0:request/m0:symbol"
-                                     xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                          &lt;result name="company_id" column="id"/&gt;
-                      &lt;/statement&gt;
-                  &lt;/dblookup&gt;
-
-                  &lt;switch source="get-property('company_id')"&gt;
-                      &lt;case regex="c1"&gt;
-                          &lt;log level="custom"&gt;
-                              &lt;property name="text"
-                                        expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                          &lt;/log&gt;
-                          &lt;send&gt;
-                              &lt;endpoint&gt;
-                                  &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                              &lt;/endpoint&gt;
-                          &lt;/send&gt;
-                      &lt;/case&gt;
-                      &lt;case regex="c2"&gt;
-                          &lt;log level="custom"&gt;
-                              &lt;property name="text"
-                                        expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                          &lt;/log&gt;
-                          &lt;send&gt;
-                              &lt;endpoint&gt;
-                                  &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                              &lt;/endpoint&gt;
-                          &lt;/send&gt;
-                      &lt;/case&gt;
-                      &lt;case regex="c3"&gt;
-                          &lt;log level="custom"&gt;
-                              &lt;property name="text"
-                                        expression="fn:concat('Company ID - ',get-property('company_id'))"/&gt;
-                          &lt;/log&gt;
-                          &lt;send&gt;
-                              &lt;endpoint&gt;
-                                  &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                              &lt;/endpoint&gt;
-                          &lt;/send&gt;
-                      &lt;/case&gt;
-                      &lt;default&gt;
-                          &lt;log level="custom"&gt;
-                              &lt;property name="text" value="** Unrecognized Company ID **"/&gt;
-                          &lt;/log&gt;
-                          &lt;makefault&gt;
-                              &lt;code value="tns:Receiver"
-                                    xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                              &lt;reason value="** Unrecognized Company ID **"/&gt;
-                          &lt;/makefault&gt;
-                          &lt;property name="RESPONSE" value="true"/&gt;
-                          &lt;header name="To" action="remove"/&gt;
-                          &lt;send/&gt;
-                          &lt;drop/&gt;
-                      &lt;/default&gt;
-                  &lt;/switch&gt;
-                  &lt;drop/&gt;
-              &lt;/in&gt;
-
-              &lt;out&gt;
-                  &lt;log level="custom"&gt;
-                      &lt;property name="text"
-                                value="** Reporting to the Database **"/&gt;
-                  &lt;/log&gt;
-                  &lt;dbreport&gt;
-                      &lt;connection&gt;
-                          &lt;pool&gt;
-                              &lt;dsName&gt;reportdb&lt;/dsName&gt;
-                              &lt;icClass&gt;com.sun.jndi.rmi.registry.RegistryContextFactory&lt;/icClass&gt;
-                              &lt;url&gt;rmi://localhost:2199&lt;/url&gt;
-                              &lt;user&gt;synapse&lt;/user&gt;
-                              &lt;password&gt;synapse&lt;/password&gt;
-                          &lt;/pool&gt;
-                      &lt;/connection&gt;
-                      &lt;statement&gt;
-                          &lt;sql&gt;update company set price=? where name =?&lt;/sql&gt;
-                          &lt;parameter expression="//m0:return/m0:last/child::text()"
-                                     xmlns:m0="http://services.samples/xsd" type="DOUBLE"/&gt;
-                          &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                                     xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                      &lt;/statement&gt;
-                  &lt;/dbreport&gt;
-                  &lt;log level="custom"&gt;
-                      &lt;property name="text"
-                                value="** Looking up from the Database **"/&gt;
-                  &lt;/log&gt;
-                  &lt;dblookup&gt;
-                      &lt;connection&gt;
-                          &lt;pool&gt;
-                              &lt;dsName&gt;reportdb&lt;/dsName&gt;
-                              &lt;icClass&gt;com.sun.jndi.rmi.registry.RegistryContextFactory&lt;/icClass&gt;
-                              &lt;url&gt;rmi://localhost:2199&lt;/url&gt;
-                              &lt;user&gt;synapse&lt;/user&gt;
-                              &lt;password&gt;synapse&lt;/password&gt;
-                          &lt;/pool&gt;
-                      &lt;/connection&gt;
-                      &lt;statement&gt;
-                          &lt;sql&gt;select * from company where name =?&lt;/sql&gt;
-                          &lt;parameter expression="//m0:return/m0:symbol/child::text()"
-                                     xmlns:m0="http://services.samples/xsd" type="VARCHAR"/&gt;
-                          &lt;result name="stock_price" column="price"/&gt;
-                      &lt;/statement&gt;
-                  &lt;/dblookup&gt;
-                  &lt;log level="custom"&gt;
-                      &lt;property name="text"
-                                expression="fn:concat('Stock price - ',get-property('stock_price'))"/&gt;
-                  &lt;/log&gt;
-                  &lt;send/&gt;
-
-              &lt;/out&gt;
-
-          &lt;/sequence&gt;
-
-      &lt;/definitions&gt;</pre>
-      </div>
-
-      <div>
-      <p><strong>Objective: Demonstrate the use of reusable database connection
-      pools</strong></p>
-
-      <p><strong>Prerequisites:</strong> Setting up DataBase and DataSources
-      according to the <a href="Synapse_Samples_Setup.html">sample setup guide</a>.</p>
-
-      <p>Start the Synapse configuration numbered 363: i.e. synapse -sample 363</p>
-
-      <p>Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done </p>
-
-      <p>Runs the client as follows</p>
-      <pre>ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dsymbol=IBM</pre>
-
-      <p>Then the console output </p>
-      <pre> INFO LogMediator text = ** Looking up from the Database **
-    ...
- INFO LogMediator text = Company ID - c1
-    ...
- INFO LogMediator text = ** Reporting to the Database **
-    ...
- INFO LogMediator text = ** Looking up from the Database **
-    ...
- INFO LogMediator text = Stock price - 183.3635460215262</pre>
-
-      </div>
-      
-    <h2>
-      <a name="Throttle" id="Throttle">Throttling messages (Throttle
-      Mediator)</a>
-    </h2>
-    <h2>
-      <a name="Sample370" id="Sample370">Sample 370: Introduction to throttle
-      mediator and concurrency throttling</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;throttle id="A"&gt;
-                &lt;policy&gt;
-                    &lt;!-- define throttle policy --&gt;
-                    &lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
-                                xmlns:throttle="http://www.wso2.org/products/wso2commons/throttle"&gt;
-                        &lt;throttle:ThrottleAssertion&gt;
-                            &lt;throttle:MaximumConcurrentAccess&gt;10&lt;/throttle:MaximumConcurrentAccess&gt;
-                        &lt;/throttle:ThrottleAssertion&gt;
-                    &lt;/wsp:Policy&gt;
-                &lt;/policy&gt;
-                &lt;onAccept&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Accept**"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/onAccept&gt;
-                &lt;onReject&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Denied**"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="**Access Denied**"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/onReject&gt;
-            &lt;/throttle&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;throttle id="A"/&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: </strong>Demonstrate the use of throttle mediator for concurrency
-      throttling
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService in sample Axis2 server and start it on
-      port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 370 (i.e. synapse -sample
-      370).
-    </p>
-    <p/>
-    <p>
-      Above configuration specifies a throttle mediator inside the in mediator.
-      Therefore, all request messages directed to the main sequence will be
-      subjected to throttling. Throttle mediator has 'policy', 'onAccept' and
-      'onReject' tags at top level. The 'policy' tag specifies the throttling policy for
-      throttling messages. This sample policy only contains a component
-      called "MaximumConcurrentAccess". This indicates the maximum number of
-      concurrent requests that can pass through Synapse on a single
-      unit of time. To test concurrency throttling, it is required to send
-      concurrent requests to Synapse. If Synapse with above configuration, receives
-      20 requests concurrently from clients, then approximately half of those will
-      succeed while the others being throttled. The client command to try this is as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8280/</pre>
-    <p/>
-    <h2>
-      <a name="Sample371" id="Sample371">Sample 371: Restricting requests
-      based on policies </a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;sequence name="main"&gt;
-        &lt;in&gt;
-            &lt;throttle id="A"&gt;
-                &lt;policy&gt;
-                    &lt;!-- define throttle policy --&gt;
-                    &lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
-                                xmlns:throttle="http://www.wso2.org/products/wso2commons/throttle"&gt;
-                        &lt;throttle:ThrottleAssertion&gt;   <br/>                                   &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;Other&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;4&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;800000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;10000&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.200-192.168.8.222&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;8&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;800000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;10&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.201&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;200&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;600000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                            &lt;wsp:All&gt;
-                                &lt;throttle:ID throttle:type="IP"&gt;192.168.8.198&lt;/throttle:ID&gt;
-                                &lt;wsp:ExactlyOne&gt;
-                                    &lt;wsp:All&gt;
-                                        &lt;throttle:MaximumCount&gt;50&lt;/throttle:MaximumCount&gt;
-                                        &lt;throttle:UnitTime&gt;500000&lt;/throttle:UnitTime&gt;
-                                        &lt;throttle:ProhibitTimePeriod wsp:Optional="true"&gt;&lt;/throttle:ProhibitTimePeriod&gt;
-                                    &lt;/wsp:All&gt;
-                                    &lt;throttle:IsAllow&gt;true&lt;/throttle:IsAllow&gt;
-                                &lt;/wsp:ExactlyOne&gt;
-                            &lt;/wsp:All&gt;
-                        &lt;/throttle:ThrottleAssertion&gt;
-                    &lt;/wsp:Policy&gt;
-                &lt;/policy&gt;
-                &lt;onAccept&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Accept**"/&gt;
-                    &lt;/log&gt;
-                    &lt;send&gt;
-                        &lt;endpoint&gt;
-                            &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                        &lt;/endpoint&gt;
-                    &lt;/send&gt;
-                &lt;/onAccept&gt;
-                &lt;onReject&gt;
-                    &lt;log level="custom"&gt;
-                        &lt;property name="text" value="**Access Denied**"/&gt;
-                    &lt;/log&gt;
-                    &lt;makefault&gt;
-                        &lt;code value="tns:Receiver"
-                              xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-                        &lt;reason value="**Access Denied**"/&gt;
-                    &lt;/makefault&gt;
-                    &lt;property name="RESPONSE" value="true"/&gt;
-                    &lt;header name="To" action="remove"/&gt;
-                    &lt;send/&gt;
-                    &lt;drop/&gt;
-                &lt;/onReject&gt;
-            &lt;/throttle&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;throttle id="A"/&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of throttle mediator for
-      restricting request counts</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Deploy the SimpleStockQuoteService in sample Axis2 server and start it on
-      port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 371 (i.e. synapse -sample
-      371).
-    </p>
-    <p/>
-    <p>
-      Above configuration specifies a throttle mediator inside the in mediator.
-      Therefore, all request messages directed to the main sequence will be
-      subjected to throttling. Throttle mediator has policy, onAccept and
-      onReject tags at the top level. Policy tag specifies the throttling policy
-      to be applied for messages. It contains some IP address ranges and the
-      maximum number of messages to be allowed for those ranges within a time
-      period given in "UnitTime" tag. "ProhibitTimePeriod" tag specifies the
-      time period to prohibit further requests after the received request count
-      exceeds the specified time. Now run the client 5 times repetitively using
-      the following command to see how throttling works.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8280/</pre>
-    <p>
-      For the first four requests you will get the quote prices for IBM as
-      follows.
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $177.20143371883802</pre>
-    <p>
-      You will receive the following response for the fifth request.
-    </p>
-<pre xml:space="preserve">[java] org.apache.axis2.AxisFault: **Access Denied**</pre>
-    <p>
-      Maximum number of requests within 800000 milliseconds is specified as 4
-      for any server (including localhost) other than the explicitly specified
-      ones. Therefore, our fifth request is denied by the throttle mediator. You
-      can verify this by looking at the Synapse console.
-    </p>
-<pre xml:space="preserve">[HttpServerWorker-1] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-2] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-3] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-4] INFO  LogMediator - text = **Access Accept**
-[HttpServerWorker-5] INFO  LogMediator - text = **Access Denied** </pre>
-    <h2>
-      <a name="Sample372" id="Sample372">Sample 372: Use of both concurrency
-      throttling and request rate based throttling </a>
-    </h2>
-<pre xml:space="preserve">&lt;!-- Use of both concurrency throttling and request rate based throttling --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;150000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;sequence name="onAcceptSequence"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="**Access Accept**"/&gt;
-        &lt;/log&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/sequence&gt;
-    &lt;sequence name="onRejectSequence" trace="enable"&gt;
-        &lt;log level="custom"&gt;
-            &lt;property name="text" value="**Access Denied**"/&gt;
-        &lt;/log&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver"
-                  xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="**Access Denied**"/&gt;
-        &lt;/makefault&gt;
-        &lt;property name="RESPONSE" value="true"/&gt;
-        &lt;header name="To" action="remove"/&gt;
-        &lt;send/&gt;
-        &lt;drop/&gt;
-    &lt;/sequence&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-             &lt;inSequence&gt;
-                &lt;throttle onReject="onRejectSequence" onAccept="onAcceptSequence" id="A"&gt;
-                    &lt;policy key="conf/sample/resources/policy/throttle_policy.xml"/&gt;
-                &lt;/throttle&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;throttle id="A"/&gt;
-                &lt;send/&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <div>
-    </div>
-    <p>
-      <strong>Objective: Use of both concurrency throttling and request rate
-      based throttling </strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong> Deploy the
-      SimpleStockQuoteService in sample Axis2 server and start it on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 372 (i.e. synapse -sample
-      372).
-    </p>
-    <p/>
-    <p>
-      Throttle policy is loaded from the &#x201c;throttle_policy. xml&#x201d;
-      . That policy contains merging policy from sample 370 and 371. To check the
-      functionality, it requires to run a load test. The all enabled request from
-      the concurrency throttling will be controlled by the access rate base
-      throttling according to the policy.
-    </p>
-    <p>
-      Run the client as follows
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8280/soap/StockQuoteProxy</pre>
-    <div>
-      <p>
-        You will get same results as in sample 371. If you run the load test,
-        results will be different due to the effect of concurrency throttling.
-      </p>
-    </div>
-    <h2>
-      <a name="Class" id="Class">Extending the mediation in java (Class
-      Mediator)</a>
-    </h2>
-    <p>
-      Class mediator can be used to write your own custom mediation in Java and
-      you have access to the SynapseMessageContext and to the full Synapse API in
-      there. This is a useful extension mechanism within Synapse to extend its
-      functionality. This class can contain fields for which you can assign
-      values at runtime through the configuration.
-    </p>
-    <h2>
-      <a name="Sample380" id="Sample380">Sample 380: Writing your own custom
-      mediation in Java</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;sequence name="fault"&gt;
-        &lt;makefault&gt;
-            &lt;code value="tns:Receiver" xmlns:tns="http://www.w3.org/2003/05/soap-envelope"/&gt;
-            &lt;reason value="Mediation failed."/&gt;
-        &lt;/makefault&gt;
-        &lt;send/&gt;
-    &lt;/sequence&gt;
-
-    &lt;sequence name="main" onError="fault"&gt;
-        &lt;in&gt;
-            &lt;send&gt;
-                &lt;endpoint name="stockquote"&gt;
-                    &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                &lt;/endpoint&gt;
-            &lt;/send&gt;
-        &lt;/in&gt;
-        &lt;out&gt;
-            &lt;class name="samples.mediators.DiscountQuoteMediator"&gt;
-                &lt;property name="discountFactor" value="10"/&gt;
-                &lt;property name="bonusFor" value="5"/&gt;
-            &lt;/class&gt;
-            &lt;send/&gt;
-        &lt;/out&gt;
-    &lt;/sequence&gt;
-
-&lt;/definitions&gt;</pre>
-    <p/>
-    <p>
-      <strong>Objective: Demonstrate the use of Class mediator to extend the
-      mediation functionality</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>
-    </p>
-    <p>
-      Make sure the synapse-samples-1.0.jar is in your class path (by default
-      this jar is placed in the lib directory when installing Synapse).
-    </p>
-    <p>
-      Start Synapse with the sample configuration 380 (i.e. synapse -sample 380)
-    </p>
-    <p>
-      Start the sample Axis2 server and deploy the SimpleStockQuoteService.
-    </p>
-    <p/>
-    <p>
-      In this configuration, Synapse hands over the request message to the
-      specified endpoint, which sends it to the Axis2 server running on port
-      9000.
-    </p>
-    <p>
-      But the response message is passed through the class mediator before
-      sending it back to the client. Two parameters named "discountFactor"
-    </p>
-    <p>
-      and "bonusFor" are passed to the instance mediator implementation class
-      (i.e. samples.mediators.DiscountQuoteMediator) before each
-    </p>
-    <p>
-      invocation. Code of the mediator implementation class is shown below.
-    </p>
-<pre xml:space="preserve">package samples.mediators;
-
-import org.apache.synapse.MessageContext;
-import org.apache.synapse.Mediator;
-import org.apache.axiom.om.OMElement;
-import org.apache.axiom.om.OMAbstractFactory;
-import org.apache.axiom.om.OMFactory;
-import org.apache.axiom.soap.SOAPFactory;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import javax.xml.namespace.QName;
-
-public class DiscountQuoteMediator implements Mediator {
-
-    private static final Log log = LogFactory.getLog(DiscountQuoteMediator.class);
-
-    private String discountFactor="10";
-
-    private String bonusFor="10";
-
-    private int bonusCount=0;
-
-    public DiscountQuoteMediator(){}
-
-    public boolean mediate(MessageContext mc) {
-
-        String price= mc.getEnvelope().getBody().getFirstElement().getFirstElement().
-                getFirstChildWithName(new QName("http://services.samples/xsd","last")).getText();
-
-        //converting String properties into integers
-        int discount=Integer.parseInt(discountFactor);
-        int bonusNo=Integer.parseInt(bonusFor);
-        double currentPrice=Double.parseDouble(price);
-
-        //discounting factor is deducted from current price form every response
-        Double lastPrice = new Double(currentPrice - currentPrice * discount / 100);
-
-        //Special discount of 5% offers for the first responses as set in the bonusFor property
-        if (bonusCount &lt;= bonusNo) {
-            lastPrice = new Double(lastPrice.doubleValue() - lastPrice.doubleValue() * 0.05);
-            bonusCount++;
-        }
-
-        String discountedPrice = lastPrice.toString();
-
-        mc.getEnvelope().getBody().getFirstElement().getFirstElement().getFirstChildWithName
-                (new QName("http://services.samples/xsd","last")).setText(discountedPrice);
-
-        System.out.println("Quote value discounted.");
-        System.out.println("Original price: " + price);
-        System.out.println("Discounted price: " + discountedPrice);
-
-        return true;
-    }
-
-    public String getType() {
-        return null;
-    }
-
-    public void setTraceState(int traceState) {
-        traceState = 0;
-    }
-
-    public int getTraceState() {
-        return 0;
-    }
-
-    public void setDiscountFactor(String discount) {
-        discountFactor=discount;
-    }
-
-    public String getDiscountFactor() {
-        return discountFactor;
-    }
-
-    public void setBonusFor(String bonus){
-        bonusFor=bonus;
-    }
-
-    public String getBonusFor(){
-        return bonusFor;
-    }
-}</pre>
-    <p>
-      All classes developed for class mediation should implement the Mediator
-      interface, which contains the mediate(...) method. mediate(...) method of
-      the above class is invoked for each response message mediated through the
-      main sequence, with the message context of the current message as the
-      parameter. All details of the message including the SOAP headers, SOAP
-      body and properties of the context hierarchy can be accessed from the
-      message context. In this sample, the body of the message is retrieved and
-      the discount percentage is subtracted from the quote price. If the quote
-      request number is less than the number specified in the "bonusFor"
-      property in the configuration, a special discount is given.
-    </p>
-    <p/>
-    <p>
-      Now run the client using the following command.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dsymbol=IBM -Dmode=quote -Daddurl=http://localhost:8280</pre>
-    <p>
-      You will see the below output in the client console with the discounted
-      quote value.
-    </p>
-<pre xml:space="preserve">[java] Standard :: Stock price = $138.77458254967408</pre>
-    <p>
-      Now check the console running Synapse. You will see the original value and
-      the discounted value for the requested quote as follows.
-    </p>
-<pre xml:space="preserve">Quote value discounted.
-Original price: 162.30945327447262
-Discounted price: 138.77458254967408</pre>
-    <p/>
-    <h2>
-      <a name="XQuery" id="XQuery">Evaluating XQuery for mediation (XQuery
-      Mediator)</a>
-    </h2>
-    <h2>
-      <a name="Sample390" id="Sample390">Sample 390: Introduction to the
-      XQuery mediator</a>
-    </h2>
-<pre xml:space="preserve">    &lt;!-- Introduction to the XQuery mediator --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to a URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;localEntry key="xquery-key-req"
-                src="file:repository/conf/sample/resources/xquery/xquery_req.xq"/&gt;
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;xquery key="xquery-key-req"&gt;
-                    &lt;variable name="payload" type="ELEMENT"/&gt;
-                &lt;/xquery&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;out&gt;
-                    &lt;xquery key="xquery/xquery_res.xq"&gt;
-                        &lt;variable name="payload" type="ELEMENT"/&gt;
-                        &lt;variable name="code" type="STRING"
-                                  expression="self::node()//m0:return/m0:symbol/child::text()"
-                                  xmlns:m0="http://services.samples/xsd"/&gt;
-                        &lt;variable name="price" type="DOUBLE"
-                                  expression="self::node()//m0:return/m0:last/child::text()"
-                                  xmlns:m0="http://services.samples/xsd"/&gt;
-                    &lt;/xquery&gt;
-                    &lt;send/&gt;
-                &lt;/out&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-
-&lt;/definitions&gt; </pre>
-    <p>
-      <strong>Objective: </strong>Introduction transformation using XQuery mediator
-    </p>
-    <p>
-      <strong>Prerequisites</strong>:Start the Synapse configuration numbered
-      390: i.e. synapse -sample 390
-    </p>
-    <p>
-      Start the Axis2 server and deploy the SimpleStockQuoteService if not
-      already done.
-    </p>
-    <p/>
-    <p>
-      This example uses the XQuery mediator to perform transformations. This
-      sample behaves the same as sample number 8 and the only difference is that
-      this sample uses XQuery instead of XSLT for transformation.
-    </p>
-    <p/>
-    <p>
-      Execute the custom quote client as 'ant stockquote -Dmode=customquote ...'
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8280/soap/StockQuoteProxy -Dmode=customquote </pre>
-    <p/>
-    <h2>
-      <a name="Sample391" id="Sample391">Sample 391: How to use data from an
-      external XML document with in XQuery </a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;!-- the SimpleURLRegistry allows access to  URL based registry (e.g. file:/// or http://) --&gt;
-    &lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
-        &lt;!-- the root property of the simple URL registry helps resolve a resource URL as root + key --&gt;
-        &lt;parameter name="root"&gt;file:repository/conf/sample/resources/&lt;/parameter&gt;
-        &lt;!-- all resources loaded from the URL registry would be cached for this number of milli seconds --&gt;
-        &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
-    &lt;/registry&gt;
-
-    &lt;proxy name="StockQuoteProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;send&gt;
-                    &lt;endpoint&gt;
-                        &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                    &lt;/endpoint&gt;
-                &lt;/send&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;out&gt;
-                    &lt;xquery key="xquery/xquery_commisson.xq"&gt;
-                        &lt;variable name="payload" type="ELEMENT"&gt;&lt;/variable&gt;
-                            &lt;variable name="commission" type="ELEMENT" key="misc/commission.xml"&gt;&lt;/variable&gt;
-                    &lt;/xquery&gt;
-                    &lt;send/&gt;
-                &lt;/out&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-        &lt;publishWSDL uri="file:repository/conf/sample/resources/proxy/sample_proxy_1.wsdl"/&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    
-    <p>
-      <strong>Objective: Demonstrate the use of XQuery mediator to
-      import external XML documents to the XQuery engine</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService
-      in sample Axis2 server and start it on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 391 (i.e. synapse -sample
-      391).
-    </p>
-    <p>
-      In this sample, data from commission.xml document is used inside XQuery
-      . The stock quote price from the response and commission from the
-      commission.xml document will be added and given as a new price .
-    </p>
-    <p>
-      Invoke the client as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8280/soap/StockQuoteProxy</pre>
-    <h2>
-      <a name="Splitter" id="Splitter">Splitting messages in to parts and
-      process in parallel (Iterate / Clone)</a>
-    </h2>
-    <h2>
-      <a name="Sample400" id="Sample400">Sample 400: Message splitting and
-      aggregating the responses</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-
-    &lt;proxy name="SplitAggregateProxy"&gt;
-        &lt;target&gt;
-            &lt;inSequence&gt;
-                &lt;iterate expression="//m0:getQuote/m0:request" preservePayload="true"
-                         attachPath="//m0:getQuote"
-                         xmlns:m0="http://services.samples/xsd"&gt;
-                    &lt;target&gt;
-                        &lt;sequence&gt;
-                            &lt;send&gt;
-                                &lt;endpoint&gt;
-                                    &lt;address
-                                        uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-                                &lt;/endpoint&gt;
-                            &lt;/send&gt;
-                        &lt;/sequence&gt;
-                    &lt;/target&gt;
-                &lt;/iterate&gt;
-            &lt;/inSequence&gt;
-            &lt;outSequence&gt;
-                &lt;aggregate&gt;
-                    &lt;onComplete expression="//m0:getQuoteResponse"
-                                xmlns:m0="http://services.samples/xsd"&gt;
-                        &lt;send/&gt;
-                    &lt;/onComplete&gt;
-                &lt;/aggregate&gt;
-            &lt;/outSequence&gt;
-        &lt;/target&gt;
-    &lt;/proxy&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of Iterate mediator to
-      split the messages in to parts and process them asynchronously and then
-      aggregate the responses coming in to Synapse</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService
-      in sample Axis2 server and start it on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 400 (i.e. synapse -sample
-      400).
-    </p>
-    <p>
-      In this sample, the message sent to Synapse is comprised of a number of
-      elements of the same type. When Synapse receives this
-      message it will iterate through those elements and then will send to the
-      specified endpoint. When all the responses appear to Synapse then those
-      messages will be aggregated to form the resultant response and will send back
-      to the client.
-    </p>
-    <p>
-      Invoke the client as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:8280/soap/SplitAggregateProxy -Ditr=4</pre>
-
-    <h2>
-      <a name="Cache" id="Cache">Caching the responses over the requests
-      (Cache Mediator)</a>
-    </h2>
-    <p>
-      Cache mediator can be used to utilize the network bandwidth, to protect
-      the backend service from being loaded with the same type of requests like
-      browser refresh actions and also to speed up the execution of the web
-      service. This mediator should be used with sense, because it is not
-      applicable for each and every service (for example services with dynamic
-      responses for a particular release)
-    </p>
-    <h2>
-      <a name="Sample420" id="Sample420">Sample 420: Simple cache implemented
-      on Synapse for the actual service</a>
-    </h2>
-<pre xml:space="preserve">&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;in&gt;
-        &lt;cache timeout="20" scope="per-host" collector="false"
-               hashGenerator="org.wso2.caching.digest.DOMHASHGenerator"&gt;
-            &lt;implementation type="memory" maxSize="100"/&gt;
-        &lt;/cache&gt;
-        &lt;send&gt;
-            &lt;endpoint&gt;
-                &lt;address uri="http://localhost:9000/soap/SimpleStockQuoteService"/&gt;
-            &lt;/endpoint&gt;
-        &lt;/send&gt;
-    &lt;/in&gt;
-    &lt;out&gt;
-        &lt;cache collector="true"/&gt;
-        &lt;send/&gt;
-    &lt;/out&gt;
-&lt;/definitions&gt;</pre>
-    <p>
-      <strong>Objective: Demonstrate the use of Cache mediator in order
-      to cache the response and use that cached response as the response for an
-      identical xml request</strong>
-    </p>
-    <p>
-      <strong>Prerequisites:</strong>Deploy the SimpleStockQuoteService
-      in sample Axis2 server and start it on port 9000.
-    </p>
-    <p>
-      Start Synapse with the sample configuration 420 (i.e. synapse -sample
-      420).
-    </p>
-    <p>
-      In this sample, the message sent to Synapse is checked for an existing
-      cached response by calculating the hash value of the request. If there is
-      a cache hit in Synapse then this request will not be forwarded to the
-      actual service, rather Synapse responds to the client with the cached
-      response. In case of a cache miss that particular message will be
-      forwarded to the actual service and caches that response in the out path
-      for the use of consecutive requests of the same type.
-    </p>
-    <p>
-      To observe this behaviour, invoke the client as follows.
-    </p>
-<pre xml:space="preserve">ant stockquote -Dtrpurl=http://localhost:8280/</pre>
-    <p>
-      You could notice that if you send more than one requests within 20 seconds
-      only the first request is forwarded to the actual service, and the rest of
-      the requests will be served by the cache inside Synapse. You could observe
-      this by looking at the printed line of the axis2 server, as well as by
-      observing a constant rate as the response to the client instead of the
-      random rate, which changes by each and every 20 seconds.<br/>
-    </p>
-    <h2>
-      <a name="Callout" id="Callout">Synchronize web service invocation with
-      Callout mediator </a>
-    </h2>
-    <p>
-      The Callout mediator calls the given service URL with the request message
-      which is given by the source attribute, waits for the response and
-      attaches the received response to the destination which is given by the
-      target attribute. Both the source and the target can be a key or an XPath.
-      In the case of the source, this key refers to either a message context
-      property or to a local entry. For the target, this key refers to a message
-      context property only.
-    </p>
-    <h2>
-      <a name="Sample430" id="Sample430">Sample 430: Simple Callout Mediator
-      for synchronizing web service invocation</a>
-    </h2>
-    <p>
-      &#xa0;
-    </p>
-<pre xml:space="preserve">
-    &lt;!-- Simple callout  mediator --&gt;
-&lt;definitions xmlns="http://ws.apache.org/ns/synapse"&gt;
-    &lt;callout serviceURL="http://localhost:9000/soap/SimpleStockQuoteService"
-             action="urn:getQuote"&gt;
-        &lt;source xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
-                xmlns:s12="http://www.w3.org/2003/05/soap-envelope"
-                xpath="s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]"/&gt;
-        &lt;target xmlns:s11="http://schemas.xmlsoap.org/soap/envelope/"
-                xmlns:s12="http://www.w3.org/2003/05/soap-envelope"
-                xpath="s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]"/&gt;
-    &lt;/callout&gt;
-    &lt;property name="RESPONSE" value="true"/&gt;
-    &lt;header name="To" action="remove"/&gt;
-    &lt;send/&gt;
-    &lt;drop/&gt;
-&lt;/definitions&gt; </pre>
-    <div>
-      <p>
-        <strong>Objective:</strong> Demonstrate the use of the callout
-        mediator for the synchronized web service invocation
-      </p>
-      <p>
-        <strong>Prerequisites:</strong> Deploy the
-        SimpleStockQuoteService in sample Axis2 server and start it on port
-        9000.
-      </p>
-      <p>
-        Start Synapse with the sample configuration 430 (i.e. synapse -sample
-        430).
-      </p>
-      <p>
-        In this sample, the callout mediator does the direct service invocation to
-        the StockQuoteService using the client request, gets the response and sets
-        it as the first child of the SOAP message body. Then using the send
-        mediator, the message is sent back to the client.
-      </p>
-      <p>
-        Invoke the client as follows.
-      </p>
-<pre xml:space="preserve">ant stockquote -Daddurl=http://localhost:9000/soap/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/</pre>
-    </div>
-  </body>
-</document>
Index: java/modules/documentation/src/site/xdoc/1_2/Synapse_Samples_Setup.xml
===================================================================
--- java/modules/documentation/src/site/xdoc/1_2/Synapse_Samples_Setup.xml	(revision 1302321)
+++ java/modules/documentation/src/site/xdoc/1_2/Synapse_Samples_Setup.xml	(nonexistent)
@@ -1,802 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<document>
-    <properties>
-        <title>Apache Synapse - Samples Setup</title>
-    </properties>
-    <head>
-        <style type="text/css" xml:space="preserve">
-    .command {
-        border: 1px dashed #3c78b5;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    .consoleOutput {
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-        background-color: #f0f0f0;
-        border-bottom: 1px dashed #3c78b5;
-        padding: 3px;
-        border-style: solid;
-    }
-    .info {
-        border-style: solid;
-        border-width: 1px;
-        border-color: #090;
-        background-color: #dfd;
-        text-align:left;
-        margin-top: 5px;
-        margin-bottom: 5px;
-    }
-    li {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    p, td {
-        font-family: Verdana, arial, sans-serif;
-        font-size: 11px;
-        line-height: 16px;
-        color: #000000;
-        font-weight: normal;
-    }
-    pre {
-        padding: 0px;
-        margin-top: 5px;
-        margin-left: 15px;
-        margin-bottom: 5px;
-        margin-right: 5px;
-        text-align: left;
-        background-color: #f0f0f0;
-        padding: 3px;
-        border: 1px dashed #3c78b5;
-        font-size: 11px;
-        font-family: Courier;
-        margin: 10px;
-        line-height: 13px;
-    }
-    h1 {
-        font-size: 24px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        color: #003366;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 36px 0px 4px 0px;
-    }
-    h2 {
-        font-size: 18px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        border-bottom: 1px solid #3c78b5;
-        padding: 2px;
-        margin: 27px 0px 4px 0px;
-    }
-    h3 {
-        font-size: 14px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 21px 0px 4px 0px;
-    }
-    h4 {
-        font-size: 12px;
-        line-height: normal;
-        font-weight: bold;
-        background-color: #f0f0f0;
-        padding: 2px;
-        margin: 18px 0px 4px 0px;
-    }</style>
-    </head>
-    <body>
-    <div style="margin-top:-40px; float:right; _margin-top:0px;">
-      <img alt="Synapse logo"
-           src="images/synapse-logo-web2.png" width="197"
-           height="82"/>
-    </div>
-    <div>
-      <h1>
-        Apache Synapse ESB - Samples Setup
-      </h1>
-    </div>
-    <p/>
-    <p>
-      Synapse ships with a set of working examples that demonstrate some of the
-      basic features and capabilities of Synapse. A set of sample clients and
-      services are provided in addition to the sample configurations. Scripts
-      are provided to execute the sample scenarios as explained below.
-    </p>
-    <h4>
-      Prerequisites
-    </h4>
-    <p>
-      To try out the samples you will need Java development kit version 1.5.x or
-      later and Apache Ant version 1.6.5 or later. Ant can be downloaded from
-      <a href="http://ant.apache.org">http://ant.apache.org</a>. The JMS examples can be executed against an
-      ActiveMQ installation by default (or another JMS provider with relevant
-      configuration changes.)
-    </p>
-    <p/>
-    <p>
-      Note*: The samples and the documentation assume that you are running
-      Synapse in DEBUG mode. You can switch from the default INFO log messages
-      to DEBUG log messages by changing the line
-      "log4j.category.org.apache.synapse=INFO" as
-      "log4j.category.org.apache.synapse=DEBUG" in the lib/log4j.properties
-      file.
-    </p>
-    <h2>
-      Understanding the Samples
-    </h2>
-    <table border="0" style="width: 100%">
-      <caption/>
-      <tbody>
-        <tr>
-          <td>
-            Client
-          </td>
-          <td>
-            Synapse
-          </td>
-          <td>
-            Service
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td/>
-          <td/>
-        </tr>
-        <tr>
-          <td>
-            ant stockquote
-          </td>
-          <td>
-            ./synapse.sh -sample &lt;n&gt;
-          </td>
-          <td>
-            SimpleStockQuoteService
-          </td>
-        </tr>
-        <tr>
-          <td/>
-          <td/>
-          <td>
-            SecureStockQuoteService etc.
-          </td>
-        </tr>
-      </tbody>
-    </table>
-    <p>
-      The above table depicts the interactions between the clients, Synapse
-      and the services at a higher level. The Clients are able to send SOAP/REST
-      or POX messages over transports such as HTTP/S or JMS with WS-Addressing,
-      WS-Security or WS-Reliable messaging. They can send binary optimized
-      content using MTOM or SwA or binary or plain text JMS messages. After
-      mediation through Synapse, the requests are passed over to the sample
-      services. The sample clients and services are explained below.
-    </p>
-    <p/>
-    <h2>
-      Using the Sample Clients
-    </h2>
-    <p/>
-    <p>
-      The sample clients can be executed from the samples/axis2Client directory
-      through the provided ant script. Simply executing 'ant' displays the
-      available clients and some of the sample options used to configure them.
-      The sample clients available are listed below:
-    </p>
-    <h3>
-      1. Stock Quote Client
-    </h3>
-    <p/>
-    <p>
-      This is a simple SOAP client that can send stock quote requests, and
-      receive and display the last sale price for a stock symbol.
-    </p>
-<pre xml:space="preserve">ant stockquote [-Dsymbol=IBM|MSFT|SUN|..]
-  [-Dmode=quote | customquote | fullquote | placeorder | marketactivity]
-  [-Daddurl=http://localhost:9000/soap/SimpleStockQuoteService]
-  [-Dtrpurl=http://localhost:8280] [-Dprxurl=http://localhost:8280]
-  [-Dpolicy=../../repository/conf/sample/resources/policy/policy_1.xml]</pre>
-
-    <p>
-      The client is able to operate in the following modes, and send the
-      payloads listed below as SOAP messages:
-    </p>
-    <ul>
-      <li>
-        quote - send a quote request for a single stock as follows. The response
-        contains the last sales price for the stock which will be displayed
-<pre xml:space="preserve">&lt;m:getQuote xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getQuote&gt;</pre>
-      </li>
-      <li>
-        customquote - send a quote request in a custom format. Synapse will
-        transform this custom request to the standard stock quote request format
-        and send it to the service. Upon receipt of the response, it will be
-        transformed again to a custom response format and returned to the
-        client, which will then display the last sales price.
-<pre xml:space="preserve">&lt;m0:checkPriceRequest xmlns:m0="http://www.apache-synapse.org/test"&gt;
-  &lt;m0:Code&gt;symbol&lt;/m0:Code&gt;
-&lt;/m0:checkPriceRequest&gt;</pre>
-      </li>
-      <li>
-        fullquote - get quote reports for the stock over a number of days (i.e.
-        last 100 days of the year).
-<pre xml:space="preserve">&lt;m:getFullQuote xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getFullQuote&gt;</pre>
-      </li>
-      <li>
-        placeorder - place an order for stocks using a one way request
-<pre xml:space="preserve">&lt;m:placeOrder xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:order&gt;
-    &lt;m:price&gt;3.141593E0&lt;/m:price&gt;
-    &lt;m:quantity&gt;4&lt;/m:quantity&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-  &lt;/m:order&gt;
-&lt;/m:placeOrder&gt;</pre>
-      </li>
-      <li>
-        marketactivity - get a market activity report for the day (i.e. quotes
-        for multiple symbols)
-<pre xml:space="preserve">&lt;m:getMarketActivity xmlns:m="http://services.samples/xsd"&gt;
-  &lt;m:request&gt;
-    &lt;m:symbol&gt;IBM&lt;/m:symbol&gt;
-    ...
-    &lt;m:symbol&gt;MSFT&lt;/m:symbol&gt;
-  &lt;/m:request&gt;
-&lt;/m:getMarketActivity&gt;</pre>
-      </li>
-    </ul>
-    <p>
-      Note : See samples/axis2Client/src/samples/common/StockQuoteHandler.java
-      for sample responses expected by the clients.
-    </p>
-    <h4>
-      Smart Client Mode:
-    </h4>
-    <p>
-      The 'addurl' property sets the WS-Addressing EPR, and the 'trpurl' sets a
-      transport URL for a message. Thus by specifying both of these properties,
-      the client can operate in the 'smart client' mode, where the addressing
-      EPR can specify the ultimate receiver, while the transport URL set to
-      Synapse will ensure that any necessary mediation takes place before the
-      message is delivered to the ultimate receiver.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Daddurl=&lt;addressingEPR&gt; -Dtrpurl=&lt;synapse&gt;</pre>
-    <h4>
-      Gateway / Dumb Client Mode:
-    </h4>
-    <p>
-      By specifying only a transport URL, the client operates in the 'dumb
-      client' mode, where it sends the message to Synapse and depends on the
-      Synapse rules for proper mediation and routing of the message to the
-      ultimate destination.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Dtrpurl=&lt;synapse&gt;</pre>
-    <h4>
-      Proxy Client Mode:
-    </h4>
-    <p>
-      In this mode, the client uses the 'prxurl' as a HTTP proxy to send the
-      request. Thus by setting the 'prxurl' to Synapse, the client can ensure
-      that the message will reach Synapse for mediation. The client can
-      optionally set a WS-Addressing EPR if required.
-    </p>
-<pre xml:space="preserve">e.g: ant stockquote -Dprxurl=&lt;synapse&gt; [-Daddurl=&lt;addressingEPR&gt;]</pre>
-
-    <p/>
-    <p>
-      Specifying a policy
-    </p>
-    <p>
-      By specifying a WS-Policy using the 'policy' property, QoS aspects such as
-      WS-Security can be enforced on the request. The policy can specify details
-      such as timestamps, signatures and encryption. See Apache Axis2 and Apache
-      Rampart documentation for more information.
-    </p>
-    <p/>
-    <h3>
-      2. Generic JMS Client
-    </h3>
-    <p/>
-    <p>
-      The JMS client is able to send plain text, plain binary content or POX
-      content by directly publishing a JMS message to the specified destination.
-      The JMS destination name should be specified with the 'jms_dest' property.
-      The 'jms_type' property can specify 'text', 'binary' or 'pox' to specify
-      the type of message payload.
-    </p>
-    <p/>
-    <p>
-      The plain text payload for a 'text' message can be specified through the
-      'payload' property. For binary messages, the 'payload' property will
-      contain the path to the binary file. For POX messages, the 'payload'
-      property will hold a stock symbol name to be used within the POX request
-      for stock order placement request.
-    </p>
-    <p>
-      e.g:
-    </p>
-<pre xml:space="preserve">ant jmsclient -Djms_type=text -Djms_dest=dynamicQueues/JMSTextProxy -Djms_payload="24.34 100 IBM"
-ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/JMSPoxProxy -Djms_payload=MSFT
-ant jmsclient -Djms_type=binary -Djms_dest=dynamicQueues/JMSFileUploadProxy
-                     -Djms_payload=./../../repository/conf/sample/resources/mtom/asf-logo.gif</pre>
-    <p>
-      Note: The JMS client assumes the existence of a default ActiveMQ (4.1.0 or
-      above) installation on the local machine.
-    </p>
-    <p/>
-    <h3>
-      3. MTOM / SwA Client
-    </h3>
-    <p/>
-    <p>
-      The MTOM / SwA client is able to send a binary image file as a MTOM or SwA
-      optimized message, and receive the same file again through the response
-      and save it as a temporary file. The 'opt_mode' can specify 'mtom' or
-      'swa' respectively for the above mentioned optimizations. Optionally the
-      path to a custom file can be specified through the 'opt_file' property,
-      and the destination address can be changed through the 'opt_url' property
-      if required.
-    </p>
-<pre xml:space="preserve">e.g. ant optimizeclient -Dopt_mode=[mtom | swa]</pre>
-
-    <p/>
-    <h2>
-      Starting the Sample Services
-    </h2>
-    <p/>
-    <p>
-      The sample services ship with a pre-configured Axis2 server and
-      demonstrates in-only and in-out SOAP/REST or POX messaging over HTTP/S and
-      JMS transports, using WS-Addressing, WS-Security and WS-Reliable Messaging
-      and handling of binary content using MTOM and SwA.
-    </p>
-    <p>
-      The sample services can be found in the samples/axis2Server/src directory
-      and can be built and deployed using ant from within each service directory
-    </p>
-<pre xml:space="preserve">user@host:/tmp/synapse-1.1/samples/axis2Server/src/SimpleStockQuoteService$ ant
-Buildfile: build.xml
-...
-build-service:
-   ....
-      [jar] Building jar: /tmp/synapse-1.1/samples/axis2Server/repository/services/SimpleStockQuoteService.aar
-
-BUILD SUCCESSFUL
-Total time: 3 seconds</pre>
-    <p/>
-    <p>
-      To start the Axis2 server, go to the samples/axis2Server directory and
-      execute the axis2server.sh or axis2server.bat script. This starts the
-      Axis2 server with the HTTP transport listener on port 9000 and HTTPS on
-      9002 respectively. To enable JMS transport, you will need to setup and
-      start a JMS provider. An ActiveMQ 4.0.1 or later JMS server on the local
-      machine is supported by default, and can be easily enabled by uncommenting
-      the JMS transport from the repository/conf/axis2.xml
-    </p>
-    <p/>
-    <h3>
-      Sample services
-    </h3>
-    <h4>
-      1. SimpleStockQuoteService
-    </h4>
-    <p>
-      This service has four operations, getQuote (in-out), getFullQuote(in-out),
-      getMarketActivity(in-out) and placeOrder (in-only). The getQuote operation
-      will generate a sample stock quote for a given symbol. The getFullQuote
-      operation will generate a history of stock quotes for the symbol for a
-      number of days, and the getMarketActivity operation returns stock quotes
-      for a list of given symbols. The placeOrder operation will accept a one
-      way message for an order.
-    </p>
-    <h4>
-      2. SecureStockQuoteService
-    </h4>
-    <p>
-      This service is a clone of the SimpleStockQuoteService, but has
-      WS-Security enabled and an attached security policy for signing and
-      encryption of messages.
-    </p>
-    <h4>
-      3. MTOMSwASampleService
-    </h4>
-    <p>
-      This service has three operations uploadFileUsingMTOM(in-out),
-      uploadFileUsingSwA(in-out) and oneWayUploadUsingMTOM(in-only) and
-      demonstrates the use of MTOM and SwA. The uploadFileUsingMTOM and
-      uploadFileUsingSwA operations accept a binary image from the SOAP request
-      as MTOM and SwA, and returns this image back again as the response, while
-      the oneWayUploadUsingMTOM saves the request message to disk.
-    </p>
-    <p/>
-    <h3>
-      Starting Sample Synapse Configurations
-    </h3>
-    <p>
-      To start Synapse with the sample default configuration, execute the
-      synapse.bat or synapse.sh script found in the /bin directory. This starts
-      up an instance of Synapse using the Synapse and Axis2 configuration files
-      located in the repository/conf directory. The repository/conf/samples
-      directory contains the sample configurations available as synapse_sample_&lt;n&gt;.xml
-      files. To start a specific sample configuration of Synapse, use the
-      '-sample &lt;n&gt;' switch as follows:
-    </p>
-<pre xml:space="preserve">synapse.bat -sample &lt;n&gt;
-synapse.sh -sample &lt;n&gt;</pre>
-    <p/>
-    <h2>
-      Setting up the JMS Listener
-    </h2>
-    <p/>
-    <p>
-      The samples used in this guide assumes the existence of a local ActiveMQ
-      (4.1.0 or higher) installation properly installed and started up. You also
-      need to copy the following client JAR files into the Synapse 'lib' folder
-      to support ActiveMQ. These files are found in the 'lib' directory of the
-      ActiveMQ installation.
-    </p>
-    <ul>
-      <li>
-        activeio-core-3.0.0-incubator.jar
-      </li>
-      <li>
-        activemq-core-4.1.0-incubator.jar
-      </li>
-      <li>
-        geronimo-j2ee-management_1.0_spec-1.0.jar
-      </li>
-    </ul>
-    <p>
-      To enable the JMS transport, you need to uncomment the JMS transport
-      listener configuration. If you are using a JMS provider other than
-      ActiveMQ this configuration should be updated to reflect your environment.
-      Once uncommented, the default configuration should be as follows. To
-      enable JMS for synapse, the repository/conf/axis2.xml must be updated,
-      while to enable JMS support for the sample Axis2 server the
-      samples/axis2Server/repository/conf/axis2.xml file must be updated.
-    </p>
-<pre xml:space="preserve">    &lt;!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)--&gt;
-    &lt;transportReceiver name="jms" class="org.apache.synapse.transport.jms.JMSListener"&gt;
-        &lt;parameter name="myTopicConnectionFactory" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;TopicConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-
-        &lt;parameter name="myQueueConnectionFactory" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-
-        &lt;parameter name="default" locked="false"&gt;
-                &lt;parameter name="java.naming.factory.initial" locked="false"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;
-                &lt;parameter name="java.naming.provider.url" locked="false"&gt;tcp://localhost:61616&lt;/parameter&gt;
-                &lt;parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false"&gt;QueueConnectionFactory&lt;/parameter&gt;
-        &lt;/parameter&gt;
-    &lt;/transportReceiver&gt;</pre>
-    <p/>
-    <h2 id="mailsender">
-      Setting up Mail Transport Sender
-    </h2>
-    <p>
-      To enable the mail transport for samples, you need to uncomment the mail
-      transport sender configuration in the repository/conf/axis2.xml. Uncomment
-      the MailTransportSender sample configuration and make sure it points to a
-      valid SMTP configuration for any actual scenarios.
-    </p>
-<pre xml:space="preserve">    &lt;transportSender name="mailto" class="org.apache.synapse.transport.mail.MailTransportSender"&gt;
-        &lt;parameter name="mail.smtp.host"&gt;smtp.gmail.com&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.port"&gt;587&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.starttls.enable"&gt;true&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.auth"&gt;true&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.user"&gt;synapse.demo.0&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.password"&gt;mailpassword&lt;/parameter&gt;
-        &lt;parameter name="mail.smtp.from"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;
-    &lt;/transportSender&gt;</pre>
-    <p/>
-    <h2 id="fixtransport">
-      Configuring Synapse for the FIX Transport
-    </h2>
-    <p>
-      First of all you need to put the following jar files into the lib folder of the
-      synapse distribution
-    </p>
-    <ul>
-      <li>quickfixj-core-1.3.1.jar</li>
-      <li>quickfixj-msg-fix40-1.3.1.jar</li>
-      <li>quickfixj-msg-fix41-1.3.1.jar</li>
-      <li>quickfixj-msg-fix42-1.3.1.jar</li>
-      <li>quickfixj-msg-fix43-1.3.1.jar</li>
-      <li>quickfixj-msg-fix44-1.3.1.jar</li>
-      <li>slf4j-api-1.3.0.jar</li>
-      <li>slf4j-jdk14-1.3.0.jar</li>
-    </ul>
-    <h3 id="fixtransport">
-      Setting up the FIX Transport
-    </h3>
-    <p>
-	To run the FIX samples used in this guide you need a local 
-    <a href="http://www.quickfixj.org">Quickfix/J</a> installation.
-    Download Quickfix/J from <a href="http://www.quickfixj.org/downloads">here</a>.
-    </p>
-    <p>
-      To enable the FIX transport for samples, you need to uncomment the FIX
-      transport sender and FIX transport receiver configurations in the 
-      repository/conf/axis2.xml. Simply locate and uncomment the FIXTransportSender
-      and FIXTransportListener sample configurations. Also add the following jars to
-      the Synapse class path (SYNAPSE_HOME/lib directory).
-    </p>
-	<ul>
-		<li>quickfixj-core.jar</li>
-		<li>quickfixj-msg-fix40.jar</li>
-		<li>quickfixj-msg-fix41.jar</li>
-		<li>quickfixj-msg-fix42.jar</li>
-		<li>quickfixj-msg-fix43.jar</li>
-		<li>quickfixj-msg-fix44.jar</li>
-		<li>mina-core-1.1.0.jar</li>
-		<li>slf4j-api-1.3.0.jar</li>
-	</ul>
-    <p>
-      All these jars are shipped with the Quickfix/J binary distribution.
-    </p>
-    <p/>
-    <h3 id="fixsamples">
-      Configuring Synapse for FIX Samples
-    </h3>
-    <p>
-	In order to configure Synapse to run the FIX samples given in this
-	guide you will need to create some FIX configuration files as
-	specified below.
-    </p>
-    <p>
-	The FileStorePath property in the following two files should point
-        to two directories in your local file system. Once the samples
-        are executed, Synapse will create FIX message stores in these two
-        directories.
-    </p>
-    <p>
-      Put the following entries in a file called fix-synapse.cfg
-
-      <pre>
-	[default]
-	FileStorePath=examples/target/data/synapse-acceptor
-	ConnectionType=acceptor
-	StartTime=00:00:00
-	EndTime=00:00:00
-	HeartBtInt=30
-	ValidOrderTypes=1,2,F
-	SenderCompID=SYNAPSE
-	TargetCompID=BANZAI
-	UseDataDictionary=Y
-	DefaultMarketPrice=12.30
-
-	[session]
-	BeginString=FIX.4.0
-	SocketAcceptPort=9876		
-      </pre>
-    </p>
-    <p>
-      Put the following entries in a file called synapse-sender.cfg
-      <pre>
-	[default]
-	FileStorePath=examples/target/data/synapse-initiator
-	SocketConnectHost=localhost
-	StartTime=00:00:00
-	EndTime=00:00:00
-	HeartBtInt=30
-	ReconnectInterval=5
-      </pre>
-    </p>
-    <p/>
-    <h3 id="fixsamplesconfig">
-      Configuring Sample FIX Applications
-    </h3>
-    <p>
-      Locate and edit the FIX configuration file of Executor to be as follows.
-      This file is usually named executor.cfg
-      <pre>
-	[default]
-	FileStorePath=examples/target/data/executor
-	ConnectionType=acceptor
-	StartTime=00:00:00
-	EndTime=00:00:00
-	HeartBtInt=30
-	ValidOrderTypes=1,2,F
-	SenderCompID=EXEC
-	TargetCompID=SYNAPSE
-	UseDataDictionary=Y
-	DefaultMarketPrice=12.30
-
-	[session]
-	BeginString=FIX.4.0
-	SocketAcceptPort=19876		
-      </pre>
-    </p>
-    <p>
-      Locate and edit the FIX configuration file of Banzai to be as follows.
-      This file is usually named banzai.cfg
-      <pre>
-	[default]
-	FileStorePath=examples/target/data/banzai
-	ConnectionType=initiator
-	SenderCompID=BANZAI
-	TargetCompID=SYNAPSE
-	SocketConnectHost=localhost
-	StartTime=00:00:00
-	EndTime=00:00:00
-	HeartBtInt=30
-	ReconnectInterval=5
-
-	[session]
-	BeginString=FIX.4.0
-	SocketConnectPort=9876
-      </pre>
-    </p>
-    <p>
-	The FileStorePath property in the above two files should point
-        to two directories in your local file system.
-    </p>
-    <p>
-	If you are using a binary distribution of Quickfix/J, the two
-	samples and their configuration files are all packed to a 
-	single jar file called quickfixj-examples.jar. You will have to
-	extract the jar file, modify the configuration files and pack
-	them to a jar file again under the same name.
-    </p>
-    <p>
-    For more information regarding the FIX sample applications please
-    refer the <a href="http://www.quickfixj.org/quickfixj/usermanual/usage/examples.html">Example Applications</a> section in the Quickfix/J
-    documentation. For more information on configuring Quickfix/J applications
-    refer the <a href="http://www.quickfixj.org/quickfixj/usermanual/usage/configuration.html">Configuring Quickfix/J</a> section of the Quickfix/J 
-    documentation.
-    </p>
-    <p/>
-    <h2 id="script">
-      Configuring Synapse for Script Mediator Support
-    </h2>
-    <p/>
-    <p>
-      The Synapse Script Mediator is a Synapse extension, and thus all
-      prerequisites are not bundled by default with the Synapse distribution.
-      Before you use some script mediators you may need to manually add the
-      required jar files to the Synapse lib directory, and optionally perform
-      other installation tasks as may be required by the individual scripting
-      language. This is explained in the following sections.
-    </p>
-    <h4>
-      JavaScript Support
-    </h4>
-    <p>
-      The JavaScript/E4X support is enabled by default and comes ready-to-use
-      with the Synapse distribution.
-    </p>
-    <h4>
-      Ruby Support
-    </h4>
-    <p>
-      For Ruby support you need to download the 'jruby-complete.jar' from the
-      Maven repository for JRuby, and copy it into the 'lib' folder of Synapse .
-      The JRuby JAR can be downloaded from <a
-      href="http://repo1.maven.org/maven2/org/jruby/jruby-complete/1.0.1/jruby-complete-1.0.1.jar">
-      here</a>.
-    </p>
-    <p/>
-    <h2 id="derby">
-      Setting up Derby database server
-    </h2>
-    <p>
-      You can download Apache Derby distribution from <a
-      href="http://db.apache.org/derby/">http://db.apache.org/derby/</a>
-    </p>
-    <ol>
-      <li>
-        Set up and start the Derby network server
-      </li>
-      <li>
-        Create and open a connection to the database using the Derby client
-        driver<br/>
-        <pre> CONNECT 'jdbc:derby://localhost:1527/synapsedb;user=synapse;password=synapse;create=true';</pre>
-      </li>
-      <li>
-        Create a table using the following statement
-        <pre> CREATE table company(name varchar(10), id varchar(10), price double);</pre>
-      </li>
-      <li>
-        Inserts some data using following statements
-        <pre> INSERT into company values ('IBM','c1',0.0);
- INSERT into company values ('SUN','c2',0.0);
- INSERT into company values ('MSFT','c3',0.0);</pre>
-      </li>
-    </ol>
-    <p>
-      When using Derby, you need to add derby.jar, derbyclient.jar and
-      derbynet.jar to the classpath. This can be done by putting the above three
-      jars into the Synapse lib directory. For testing these samples Derby
-      10.1.1.0 binary distribution was used.
-    </p>
-    <p>
-      You can use any other database product instead of Derby. Then you have to
-      change the database connection details accordingly. Also you have to copy
-      the required database driver jars to the Synapse classpath.
-    </p>
-    <p/>
-        <h2>Setting up Synapse DataSources</h2>
-
-<div>
-<p>Definition of the reusable database connection pool or datasources can be
-done using synapse.properties file. It is possible to configure any number of
-datasources. Currently only supports two type of datasources and those are
-based on apache dbcp datasources. Those types are BasicDataSource and
-PerUserPoolDataSource (based on apache dhcp).Following configuration includes
-both two definition. This configuration is related with sample 363.</p>
-
-
-<p>Configuration is somewhat similar to the log4j appender configuration.</p>
-
-
-<p>It requires two databases, follow the above specified (Setting up
-Derby Database server) steps to create the two databases
-<strong>'jdbc:derby://localhost:1527/lookupdb'</strong>,
-<strong>'jdbc:derby://localhost:1527/reportdb'</strong> using the user name and password as
-'synapse'. Fill in the data for those two databases as per described in the above section</p>
-
-<div>
-<p><strong>synapse.properties configuration <br />
-</strong></p>
-<pre>#datasources
-synapse.datasources=lookupds,reportds
-synapse.datasources.icFactory=com.sun.jndi.rmi.registry.RegistryContextFactory
-synapse.datasources.providerUrl=rmi://localhost:2199
-synapse.datasources.providerPort=2199
-
-synapse.datasources.lookupds.type=BasicDataSource
-synapse.datasources.lookupds.driverClassName=org.apache.derby.jdbc.ClientDriver
-synapse.datasources.lookupds.url=jdbc:derby://localhost:1527/lookupdb;create=false
-synapse.datasources.lookupds.username=synapse
-synapse.datasources.lookupds.password=synapse
-synapse.datasources.lookupds.dsName=lookupdb
-synapse.datasources.lookupds.maxActive=100
-synapse.datasources.lookupds.maxIdle=20
-synapse.datasources.lookupds.maxWait=10000
-
-synapse.datasources.reportds.type=PerUserPoolDataSource
-synapse.datasources.reportds.cpdsadapter.factory=org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS
-synapse.datasources.reportds.cpdsadapter.className=org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS
-synapse.datasources.reportds.cpdsadapter.name=cpds
-synapse.datasources.reportds.dsName=reportdb
-synapse.datasources.reportds.driverClassName=org.apache.derby.jdbc.ClientDriver
-synapse.datasources.reportds.url=jdbc:derby://localhost:1527/reportdb;create=false
-synapse.datasources.reportds.username=synapse
-synapse.datasources.reportds.password=synapse
-synapse.datasources.reportds.maxActive=100
-synapse.datasources.reportds.maxIdle=20
-synapse.datasources.reportds.maxWait=10000</pre>
-</div>
-</div>
-</body>
-</document>
-*-*-*-
Removing old Synapse 1.x docs