Index: java/src/site/site.xml
===================================================================
--- java/src/site/site.xml	(revision 1308238)
+++ java/src/site/site.xml	(nonexistent)
@@ -1,81 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-<!--
-  ~  Licensed to the Apache Software Foundation (ASF) under one
-  ~  or more contributor license agreements.  See the NOTICE file
-  ~  distributed with this work for additional information
-  ~  regarding copyright ownership.  The ASF licenses this file
-  ~  to you under the Apache License, Version 2.0 (the
-  ~  "License"); you may not use this file except in compliance
-  ~  with the License.  You may obtain a copy of the License at
-  ~
-  ~   http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~  Unless required by applicable law or agreed to in writing,
-  ~  software distributed under the License is distributed on an
-  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  ~  KIND, either express or implied.  See the License for the
-  ~  specific language governing permissions and limitations
-  ~  under the License.
-  -->
-
-<project name="Apache Synapse">
-
-    <bannerLeft>
-        <name></name>
-        <href>http://synapse.apache.org/</href>
-    </bannerLeft>
-
-    <bannerRight>
-        <src>images/apache-synapse-banner.jpg</src>
-        <href>http://www.apache.org</href>
-    </bannerRight>
-
-    <skin>
-        <groupId>org.apache.maven.skins</groupId>
-        <artifactId>maven-default-skin</artifactId>
-        <version>1.0</version>
-    </skin>
-
-    <publishDate format="dd MMM yyyy"/>
-
-    <body>
-        <links>
-            <item name="Apache" href="http://www.apache.org/"/>
-            <item name="WebServices" href="http://ws.apache.org/"/>
-        </links>
-
-        <menu name="Apache Synapse">
-            <item name="About" href="index.html"/>
-            <item name="Downloads" href="download_index.html">
-                <item name="Releases" href="download.html"/>
-                <item name="Source Code" href="source-repository.html"/>
-            </item>
-            <item name="Documentation" href="docs_index.html">
-                <item name="Quick Start Guide" href="Synapse_QuickStart.html"/>
-                <item name="Samples" href="Synapse_Samples.html"/>
-                <item name="Samples Setup" href="Synapse_Samples_Setup.html"/>
-                <item name="Extending Synapse" href="Synapse_Extending.html"/>
-                <item name="Configuration Language" href="Synapse_Configuration_Language.html"/>
-                <item name="Deployment" href="deployment.html"/>
-                <item name="Transports" href="transports.html"/>
-                <item name="Javadocs" href="apidocs/index.html"/>
-                <item name="FAQ" href="faq.html"/>
-            </item>
-            <item name="Previous Versions" href="history.html">
-                <item name="Version 1.1.1" href="1_1_1/content.html"/>
-                <item name="Version 1.1" href="1_1/content.html"/>
-                <item name="Version 1.0" href="1_0/content.html"/>
-            </item>
-            <item name="Project Information" href="project-info.html">
-                <item name="Mailing Lists" href="mail-lists.html"/>
-                <item name="Building" href="building.html"/>
-                <item name="Issue Tracking" href="issue-tracking.html"/>
-                <item name="Dependencies" href="dependencies.html"/>
-                <item name="Dependency Convergence" href="dependency-convergence.html"/>
-                <item name="Project Team" href="team-list.html"/>
-                <item name="Project Summary" href="project-summary.html"/>
-            </item>
-        </menu>
-
-    </body>
-</project>
Index: java/src/site/apt/transports.apt
===================================================================
--- java/src/site/apt/transports.apt	(revision 1308238)
+++ java/src/site/apt/transports.apt	(nonexistent)
@@ -1,553 +0,0 @@
-{Introduction}
-
-  The Synapse project has developed a set of transport implementations that provide protocol
-  support and/or features that go beyond what is provided out of the box by Axis2:
-  
-  * A non blocking HTTP transport that gives better performance in a highly asynchronous
-    environment like Synapse.
-  
-  * A VFS transport that can read messages from files and write outgoing messages to a file system.
-    The file system can be local or remote, and several remote protocols are supported, such as
-    FTP, SSH, WebDAV, etc.
-  
-  * A transport supporting the {{{http://www.fixprotocol.org}Financial Information eXchange}}
-    protocol. FIX is a public-domain messaging standard developed specifically for the real-time electronic
-    exchange of securities transactions. It has a large user base and is developed by the
-    collaborative effort of banks, broker-dealers, exchanges, industry utilities and associations,
-    institutional investors, and IT providers around the world. 
-  
-  []
-  
-  Note that while these transports are developed as part of the Synapse project, they can be used
-  with any Axis2 based application.
-  
-  The Synapse distribution also comes bundled with the following transports from the WS-Commons
-  Transport project:
-  
-  * A JMS transport supporting any JMS 1.0 or 1.1 provider.
-  
-  * A mail transport able to send messages using SMTP and poll messages from a POP3 or IMAP account.
-
-  Apache Synapse is also compatible with the following transport implementations from the Apache
-  Axis2 Transports project:
-
-  * TCP
-
-  * UDP
-
-  These transports are not shipped with Apache Synapse by default and hence they should be
-  downloaded separately from the Axis2 website and installed in the Synapse runtime.
-
-{Contents}
-
-%{toc}
-
-{Non-blocking HTTP transport}
-
-* {Example configurations}
-
-+--------------------------------------------------------------------------------------------+
-<transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
-    <parameter name="port">8280</parameter>
-    <parameter name="non-blocking">true</parameter>
-</transportReceiver>
-
-<transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
-    <parameter name="port" locked="false">8243</parameter>
-    <parameter name="non-blocking" locked="false">true</parameter>
-    <parameter name="keystore" locked="false">
-        <KeyStore>
-            <Location>lib/identity.jks</Location>
-            <Type>JKS</Type>
-            <Password>password</Password>
-            <KeyPassword>password</KeyPassword>
-        </KeyStore>
-    </parameter>
-    <parameter name="truststore" locked="false">
-        <TrustStore>
-            <Location>lib/trust.jks</Location>
-            <Type>JKS</Type>
-            <Password>password</Password>
-        </TrustStore>
-    </parameter>
-</transportReceiver>
-
-<transportSender name="http"  class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
-    <parameter name="non-blocking" locked="false">true</parameter>
-    <parameter name="warnOnHTTP500" locked="false">*</parameter>
-</transportSender>
-
-<transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
-    <parameter name="non-blocking" locked="false">true</parameter>
-    <parameter name="warnOnHTTP500" locked="false">*</parameter>
-    <parameter name="keystore" locked="false">
-        <KeyStore>
-            <Location>lib/identity.jks</Location>
-            <Type>JKS</Type>
-            <Password>password</Password>
-            <KeyPassword>password</KeyPassword>
-        </KeyStore>
-    </parameter>
-    <parameter name="truststore" locked="false">
-        <TrustStore>
-            <Location>lib/trust.jks</Location>
-            <Type>JKS</Type>
-            <Password>password</Password>
-        </TrustStore>
-    </parameter>
-</transportSender>
-+--------------------------------------------------------------------------------------------+
-
-* {Transport listener parameters}
-
-  The following parameters are supported by both the HTTP and the HTTPS listener:
-
-  [<<<port>>>] The TCP port to bind the listener to.
-  
-  [<<<bind-address>>>] The IP address to bind the listener to.
-  This can be used on hosts that have more than one network interface or IP address
-  to run multiple Synapse instances listening to the same port. If this parameter is not specified,
-  the listener will accept connections on any IP address.
-  
-  [<<<hostname>>>] The host name to use when computing endpoint references in generated WSDL files.
-  The default value is the host name as provided by the operation system or <<<localhost>>> if
-  the host name can't be determined. The value of this parameter is ignored if <<<WSDLEPRPrefix>>>
-  is specified.
-  
-  [<<<WSDLEPRPrefix>>>] The URL prefix to use when computing endpoint references in generated WSDL
-  files. The value must be a valid URL with at least a protocol and host. If this value is
-  unspecified, endpoint references will be computed based on the listener type (HTTP or HTTPS)
-  and <<<hostname>>> and <<<port>>> parameters.
-  
-  This parameter should be used if clients connect to Synapse through a frontend server, e.g. a
-  (load balancing) Apache, and these clients rely on the address information in the WSDL documents
-  exposed through <<<...?wsdl>>> URLs.
-  
-  []
-  
-  The following parameters are specific to the HTTPS listener: 
-  
-  [<<<keystore>>>] The keystore configuration. The value of this parameter must be a
-  <<<\<KeyStore\>>>> element as shown in the example configurations above.
-  
-  [<<<truststore>>>] The truststore configuration. The value of this parameter must be a
-  <<<\<TrustStore\>>>> element as shown in the example configurations above.
-  
-  [<<<SSLVerifyClient>>>] This parameter has the same meaning as the corresponding
-  {{{http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslverifyclient}mod_ssl directive}} and
-  sets the desired certificate verification level for client authentication:
-  
-  * <<<none>>> (default): no client certificate is required at all
-  
-  * <<<optional>>>: the client may present a valid certificate, but is not required to do so
-  
-  * <<<require>>>: the client has to present a valid certificate, otherwise the connection
-  request will be terminated during SSL handshake
-
-* {Transport sender parameters}
-
-  The following property can be used to control based on content-types whether the HTTP/HTTPS
-  sender shall output a warning for responses with HTTP status code 500.
-
-  [<<<warnOnHTTP500>>>] A list of content-types for which Synapse shall output a warning when 
-  receiving an HTTP 500 response (each value each seperated by a |).
-  By default Synapse outputs a warning for any HTTP 500 response, irrespective of the content-type.
-  Consequently, also for each SOAP fault a warning will be logged.
-  If only for specific content-types a warning shall be logged, please provide a |-separated 
-  list. To output the warning for messages which do not have a content-type set, please
-  use the value "none"!
-  
-  Example value: x-application/hessian|none
-
-  []
-
-  The following properties can be used to configure the HTTP sender to use a proxy. They can
-  be specified either as transport parameters in declared in <<<\<transportSender\>>>> or as
-  system properties. 
-
-  [<<<http.proxyHost>>>] The host name or address of the proxy server.
-  
-  [<<<http.proxyPort>>>] The TCP port of the proxy server.
-  
-  [<<<http.nonProxyHosts>>>] The hosts to which the HTTP sender should connect directly and
-  not through the proxy server. The value can be a list of hosts, each seperated by a |, and
-  in addition a wildcard character (*) can be used for matching.
-  
-  Example value: <<<*.foo.com|localhost>>>
-  
-  []
-
-  Note that the HTTPS sender has no proxy support yet.
-  
-  The following parameters are specific to the HTTP sender:
-  
-  [<<<keystore>>>] The keystore configuration. The value of this parameter must be a
-  <<<\<KeyStore\>>>> element as shown in the example configurations above.
-  
-  [<<<truststore>>>] The truststore configuration. The value of this parameter must be a
-  <<<\<TrustStore\>>>> element as shown in the example configurations above.
-  
-  [<<<novalidatecert>>>] When set to <<<true>>>, this parameter disables server certificate
-  validation (trust). The default value is <<<false>>>. This parameter will be ignored if
-  <<<truststore>>> is set.
-  
-  Setting his parameter to <<<true>>> is useful in development and test environments, but
-  should not be used in production environments. If validation is disabled, a warning
-  message will be logged at startup.
-  
-  [<<<HostnameVerifier>>>] This optional parameter specifies the policy to apply when
-  checking that the hostname of the server matches the names stored inside the X.509 certificate
-  presented by the server. Possible values are <<<Strict>>>, <<<AllowAll>>> and
-  <<<DefaultAndLocalhost>>>. See the
-  {{{apidocs/org/apache/synapse/transport/nhttp/HostnameVerifier.html}HostnameVerifier Javadoc}}
-  for more details.
-
-{VFS transport}
-
-* {Transport listener}
-
-  The VFS transport listener receives messages dropped in a given local or remote file system
-  location. The location is specified by a URL that either identifies a single file or a directory.
-  The transport listener will periodically poll the specified location and process any file(s)
-  found. After a file has been processed it will be deleted or moved to another location. Note that
-  this is absolutely mandatory to prevent the listener from processing files multiple times.
-  Therefore the VFS transport listener can only be used in situations where it has write access to
-  the file system location and where deleting or moving the dropped files is acceptable.
-
-  The transport is based on {{{http://commons.apache.org/vfs/}Apache Commons VFS}} and supports any
-  protocol for which a VFS provider is available. The transport is preconfigured with providers
-  for local files (<<<file:>>> scheme), HTTP, HTTPS, FTP and SFTP (i.e. file transfer over SSH).
-
-  There is a fundamental difference between the VFS transport and transports such as HTTP and it
-  is important to understand this difference to be able to use the VFS transport correctly.
-  The HTTP transport binds to a single protocol endpoint, i.e. a TCP port on which it accepts
-  incoming HTTP requests. These requests are then dispatched to the right service based on the
-  request URI. On the other hand, the VFS transport only receives the payload of a message, but no
-  additional information that could be used to dispatch the message to a service. This means that
-  file system locations must be explicitly mapped to services. This is done using a set of
-  service parameters.
-
-  For Synapse this means that the VFS transport listener can only be used in conjunction with proxy
-  services. The relevant service parameters are then specified as follows: 
-
-+-------------------------------------+  
-<proxy name="MyVFSService" transports="vfs">
-    <parameter name="transport.vfs.FileURI">file:///var/spool/synapse/in</parameter>
-    <parameter name="transport.vfs.ContentType">application/xml</parameter>
-    ...
-    <target>
-        ...
-    </target>
-</proxy>
-+-------------------------------------+  
-
-  In this example the file system location <<<file:///var/spool/synapse/in>>> is explicitly bound
-  to <<<MyVFSService>>>, i.e. any message dropped in that location will be predispatched to that
-  service, bypassing any other configured dispatch mechanisms that would apply to messages received
-  through HTTP.
-  
-  The VFS transport recognizes the following service parameters:
-
-  [<<<transport.vfs.FileURI>>> (Required)]
-  The primary File (or Directory) URI in the vfs* transport format,
-  for this service
-  
-  [<<<transport.vfs.ContentType>>> (Required)]
-  The expected content type for files retrieved for this service. The
-  VFS transport uses this information to select the appropriate
-  message builder.
-  
-  Examples:
-  
-  * <<<text/xml>>> for plain XML or SOAP
-  
-  * <<<text/plain; charset=ISO-8859-1>>> for text files
-  
-  * <<<application/octet-stream>>> for binary data
-  
-  []
-  
-  [<<<transport.vfs.FileNamePattern>>> (Optional)]
-  A file name regex pattern to match files against a directory
-  specified by the FileURI
-  
-  [<<<transport.PollInterval>>> (Optional)]
-  The poll interval (in seconds)
-  
-  [<<<transport.vfs.ActionAfterProcess>>> (Optional)]
-  DELETE or MOVE
-  
-  [<<<transport.vfs.MoveAfterProcess>>> (Optional)]
-  The directory to move files after processing (i.e. all files process
-  successfully)
-  
-  [<<<transport.vfs.ActionAfterErrors>>> (Optional)]
-  DELETE or MOVE
-  
-  [<<<transport.vfs.MoveAfterErrors>>> (Optional)]
-  The directory to move files after errors (i.e. some of the files
-  succeed but some fail)
-  
-  [<<<transport.vfs.ActionAfterFailure>>> (Optional)]
-  DELETE or MOVE
-  
-  [<<<transport.vfs.MoveAfterFailure>>> (Optional)]
-  The directory to move after failure (i.e. all files fail)
-
-  [<<<transport.vfs.ReplyFileURI>>> (Optional)]
-  Reply file URI
-  
-  [<<<transport.vfs.ReplyFileName>>> (Optional)]
-  Reply file name (defaults to response.xml)
-  
-  [<<<transport.vfs.MoveTimestampFormat>>> (Optional)]
-  Timestamp prefix format for processed file name. java.text.SimpleDateFormat compatible string. e.g. yyMMddHHmmss'-'
-
-  [<<<transport.vfs.Locking>>> (Optional)]
-  By-default file locking is turned on in the VFS transport, and this parameter lets you configure
-  the locking behaviour on a per service basis. Possible values are <<<enable>>> or <<<disable>>>,
-  and both these values are important because the locking can be disabled at the global level by
-  specifying that at the receiver level and selectively enable locking only for a set of services.
-
-  [<<<transport.vfs.Streaming>>> (Optional)]
-  If this parameter is set to <<<true>>>, the transport will attempt to use a
-  <<<javax.activation.DataSource>>> (instead of a <<<java.io.InputStream>>>) object to pass
-  the content of the file to the message builder. Note that this is only supported by some
-  message builders, e.g. for plain text and binary.
-  
-  This allows processing of the message without storing the entire content in memory.
-  It also has two other side effects:
-  
-  * The incoming file (or connection in case of a remote file) will only
-    be opened on demand.
-    
-  * Since the data is not cached, the file might be read several times.
-  
-  []
-  
-  This option can be used to achieve streaming of large payloads. Note that this feature is
-  still somewhat experimental and might be superseded by a more flexible mechanism in a future
-  release.
-
-  [<<<transport.vfs.MoveAfterFailedMove >>> (Optional)]
-  New destination to move the failed file
-
-  [<<<transport.vfs.FailedRecordsFileName >>> (Optional)]
-  The file name to maintain the list of failure files. Default is vfs-move-failed-records.properties.
-
-  [<<<transport.vfs.FailedRecordsFileDestination  >>> (Optional)]
-  The destination of the failed file. Default is repository/conf/.
-
-  [<<<transport.vfs.MoveFailedRecordTimestampFormat >>> (Optional)]
-  When adding record to the failed file entries is logged the as: file_name time_stamp. This will
-  configure the time stamp format. Default format is dd-MM-yyyy HH:mm:ss.
-
-  [<<<transport.vfs.FailedRecordNextRetryDuration  >>> (Optional)]
-  The time in millisecond for the move task to wait until next re-try. Default is 3000 milliseconds.
-
-  []
-  
-  Note that since the VFS endpoints are configured at the level of the service, the only parameter
-  that is available at the listener is the file locking configuration parameter whcih is optional 
-  and the transport listener is enabled in <<<axis2.xml>>> simply as
-  follows:
-
-+-------------------------------------+  
-<transportReceiver name="vfs" class="org.apache.synapse.transport.vfs.VFSTransportListener">
-    <parameter name="transport.vfs.Locking">enable | disable</parameter> ?
-</transportReceiver>
-+-------------------------------------+  
-
-* {Transport sender}
-
-  The VFS transport sender allows to write outgoing messages to local or remote files. As with
-  the listener, the transport sender supports any protocol for which there is a VFS provider.
-
-  The sender is enabled be the following directive in <<<axis2.xml>>> file locking which is
-  by-default enabled can be configured using the <<<transport.vfs.Locking>>> parameter:
-
-+-------------------------------------+  
-<transportSender name="vfs" class="org.apache.synapse.transport.vfs.VFSTransportSender">
-    <parameter name="transport.vfs.Locking">enable | disable</parameter> ?
-</transportSender>
-+-------------------------------------+  
-
-  To send a message using the VFS transport, the destination URI must start with <<<vfs:>>>
-  followed by a valid VFS URL. For example, in a Synapse mediation, one would use: 
-
-+-------------------------------------+  
-<endpoint>
-    <address uri="vfs:file:///var/spool/synapse/out"/>
-</endpoint>
-+-------------------------------------+
-
-  Other examples of valid VFS URLs are (see {{http://commons.apache.org/vfs/filesystems.html}} for
-  more samples):
-
-  * <<<file:///directory/filename.ext>>>
-  
-  * <<<file:////somehost/someshare/afile.txt>>>
-  
-  * <<<jar:../lib/classes.jar!/META-INF/manifest.mf>>>
-  
-  * <<<jar:zip:outer.zip!/nested.jar!/somedir>>>
-  
-  * <<<ftp://myusername:mypassword@somehost/pub/downloads/somefile.tgz[?vfs.passive=true]>>>
-
-  []
-  
-  The global configuration of the file locking can be overriden by providing the
-  <<<transport.vfs.Locking>>> as a URL parameter with the appropriate value (<<<enable>>>, or
-  <<<disable>>>) on a given endpoint.
-
-  It should be noted that by its nature, the VFS transport sender doesn't support synchronous
-  responses and should only be invoked using the out-only message exchange pattern.
-  In a Synapse mediation, this can be forced using the following mediator:
-
-+-------------------------------------+  
-<property action="set" name="OUT_ONLY" value="true"/>
-+-------------------------------------+  
-
-* {Using SFTP}
-
-  To avoid man-in-the-middle attacks, SSH clients will only connect to hosts with a known
-  host key. When connecting for the first time to an SSH server, a typical command line SSH client
-  would request confirmation from the user to add the server and its fingerprint to the list of known
-  hosts.
-  
-  The VFS transports supports SFTP through the {{{http://www.jcraft.com/jsch/}JSch}} library
-  and this library also requires a list of known hosts. Since Synapse is not an interactive
-  process, it can't request confirmation from the user and is therefore unable to automatically add
-  a host to the list. This implies that the list of known hosts must be set up manually before the
-  transport can connect.
-
-  Jsch loads the list of known hosts from a file called <<<known_hosts>>> in the <<<.ssh>>>
-  subdirectory of the user's home directory, i.e. <<<$HOME/.ssh>>> in Unix and
-  <<<%HOMEPATH%\\.ssh>>> in Windows. The location and format of this file are compatible with
-  the {{{http://www.openssh.com/}OpenSSH}} client.
-
-  Since the file not only contains a list of hostnames but also the fingerprints of their host keys,
-  the easiest way to add a new host to that file is to simply use the OpenSSH client to open an SSH
-  session on the target host. The client will then ask to add the credentials to the
-  <<<known_hosts>>> file. Note that if the SSH server is configured to only allow SFTP sessions,
-  but no interactive sessions, the connection will actually fail. Since this doesn't rollback
-  the change to the <<<known_hosts>>> file, this error can be ignored.
-
-* {Known issues}
-
-  The VFS listener will start reading a file as soon as it appears in the configured location.
-  To avoid processing half written files, the creation of these files should be made atomic.
-  On most platforms this can be achieved by writing the data to a temporary file and then
-  moving the file to the target location. Note however that a move operation is only atomic
-  if the source and destination are on the same physical file system. The location for the
-  temporary file should be chosen with that constraint in mind.
-  
-  It should also be noted that the VFS transport sender doesn't create files atomically.
-
-{FIX transport}
-
-  A general overview about the FIX transport can be found in the following articles:
-  
-  * {{{http://wso2.org/library/3449}Apache Synapse FIX'ed}}
-  
-  * {{{http://wso2.org/library/3837}Using the WSO2 ESB and FIX}} (also applies to Synapse)
-
-* {Setting up the FIX Transport}
-
-  To use the FIX transport, you need a local {{{http://www.quickfixj.org}Quickfix/J}} installation.
-  Download Quickfix/J from {{http://www.quickfixj.org/downloads}}.
-  
-  To enable the FIX transport, you need to uncomment the FIX
-  transport sender and FIX transport receiver configurations in the 
-  SYNAPSE_HOME/repository/conf/axis2.xml. Simply locate and uncomment the
-  FIXTransportSender and FIXTransportListener sample configurations. Also
-  add the following jars to the Synapse class path (SYNAPSE_HOME/lib directory).
-  
-  * quickfixj-core.jar
-  
-  * quickfixj-msg-fix40.jar
-  
-  * quickfixj-msg-fix41.jar
-  
-  * quickfixj-msg-fix42.jar
-  
-  * quickfixj-msg-fix43.jar
-  
-  * quickfixj-msg-fix44.jar
-  
-  * mina-core-1.1.0.jar
-  
-  * slf4j-api-1.3.0.jar
-  
-  * slf4j-jdk14-1.3.0.jar
-  
-  []
-  
-  All these jars are shipped with the Quickfix/J binary distribution.
-
-* {FIX Transport Parameters}
-
-  This is the list of all parameters accepted by the FIX transport. Refer
-  the sample 257 and 258 to see how some of them are used in practice.
-
-  [<<<transport.fix.AcceptorConfigURL>>>] If a service needs to listen to incoming
-  FIX messages from a remote initiator then Synapse needs to create an acceptor.
-  This parameter should contain the URL of the file which contains the FIX
-  configuration for the acceptor. (See sample 257)
-
-  [<<<transport.fix.InitiatorConfigURL>>>] If a service needs to send FIX messages
-  to a remote acceptor Synapse should create an initiator. This parameter should
-  contain the URL of the file which contains the FIX configuration for the
-  initiator. (See sample 257)
-
-  [<<<transport.fix.AcceptorMessageStore>>>] The type of message store to be used
-  with the acceptor. Allowed values for this parameter are 'file', 'jdbc', 'memory'
-  and 'sleepycat'. If not specified memory based message store will be used by
-  default. Additional parameters required to configure each of the message stores
-  should be specified in the acceptor configuration file.
-
-  [<<<transport.fix.InitiatorMessageStore>>>] Same as the above but applies only
-  for the initiators. Additional parameters required to configure each of
-  the message stores should be specified in the initiator configuration file.
-
-  [<<<transport.fix.AcceptorLogFactory>>>] Specifies the transport level log factory
-  to be used to log messages going through the acceptor. FIX messages are logged
-  without putting them in SOAP envelopes at this level. Accepted values are
-  'console', 'file' and 'jdbc'. If not specified no logging will be done at the transport
-  level. Additional parameters required to configure each of the lof factories should be
-  specified in the acceptor configuration file.
-
-  [<<<transport.fix.InitiatorLogFactory>>>] Specifies the transport level log factory
-  to be used to log messages going through the initiator. Functionality is similar
-  to the above. Additional parameters required to configure each of the lof factories
-  should be specified in the initiator configuration file.
-
-  [<<<transport.fix.ResponseDeliverToCompID>>>] If a response FIX message sent from
-  Synapse to a remote FIX engine should be forwarded from the remote engine to
-  another party this parameter can be used to set the DeliverToCompID field
-  of the messages at Synapse.
-
-  [<<<transport.fix.ResponseDeliverToSubID>>>] If a response FIX message sent from
-  Synapse to a remote FIX engine should be forwarded from the remote engine to
-  another party this parameter can be used to set the DeliverToSubID field
-  of the messages at Synapse.
-
-  [<<<transport.fix.ResponseDeliverToLocationID>>>] If a response FIX message sent from
-  Synapse to a remote FIX engine should be forwarded from the remote engine to
-  another party this parameter can be used to set the DeliverToLocationID field
-  of the messages at Synapse.
-
-  [<<<transport.fix.ServiceName>>>] Used when messages coming over a different protocol
-  has to be forwarded over FIX. The value must be equal to the name of the service
-  and the scope must be 'axis2-client' (See sample 258)
-
-  [<<<transport.fix.SendAllToInSequence>>>] When there are multiple responses to a FIX
-  request and when we need only one of them to be sent to the original requester
-  this parameter has to be set to 'false'. This mostly comes handy when the original
-  requester is communicating over a different protocol (like HTTP). If this parameter
-  is not set to 'false' at such scenarios messages might get into a loop. (See
-  sample 258)
-
-  [<<<transport.fix.BeginStringValidation>>>] When the FIX messages sent to Synapse should not
-  be forwarded to a FIX session with a different BeginString value this parameter can be
-  set to 'true'. Setting this parameter to 'true' will enforce this restriction.

Property changes on: java/src/site/apt/transports.apt
___________________________________________________________________
Deleted: svn:eol-style
## -1 +0,0 ##
-native
\ No newline at end of property
Index: java/src/site/apt/deployment.apt
===================================================================
--- java/src/site/apt/deployment.apt	(revision 1308238)
+++ java/src/site/apt/deployment.apt	(nonexistent)
@@ -1,226 +0,0 @@
-{Contents}
-
-%{toc}
-
-{Platform requirements}
-
-  Synapse requires Java 1.5 or higher and has been tested on Java runtime environments from Sun,
-  IBM and Apple. Note that the recommended Java version is 1.5 and that there is at least one
-  known issue on Java 1.6 (see below). Synapse is used on various operation systems, including
-  Linux, Mac OS X, Solaris, Windows and AIX, as well as mainframe environments. The recommended
-  operation system for production use is Linux since it offers a wider range of options to tune
-  the TCP/IP stack. This is important to optimize the performance of the NIO HTTP transport.
-  
-  When selecting the environment for deployment, the following known issues should be taken
-  into account:
-  
-  * There is a known issue related to the script mediator when used with Java 1.6 on Windows.
-    It has been observed that with this combination, random failures can occur during startup of
-    Synapse. It is suspected that this issue is caused by a bug in BSF, but there is no solution
-    or workaround yet.
-  
-  * The <<<synapse.bat>>> and <<<synapse.sh>>> scripts included in the binary distribution use
-    the <<<-server>>> option which is not supported by IBM's JRE. This problem can be easily
-    solved by manually editing these scripts to remove the unsupported <<<-server>>> option.
-    See {{{https://issues.apache.org/jira/browse/SYNAPSE-454}SYNAPSE-454}}.
-    
-  * In the past several issues related to subtle concurrency problems have been reported with
-    the non-blocking HTTP transport (which is the recommended HTTP implementation for Synapse)
-    when used on more "exotic" platforms. While this has been improved it is recommended to
-    thoroughly test the HTTP transport before deploying Synapse in a production environment based
-    on these platforms. Please don't hesitate to report any issues using JIRA or by posting a
-    message on the mailing list.
-
-{Overview of available deployment options}
-
-  Synapse can be deployed in two different ways:
-
-  * Stand-alone, i.e. as an independently managed Java process.
-  
-  * As a J2EE application (WAR) deployed into a simple servlet container (e.g. Tomcat) or a
-    full-featured J2EE application server.
-  
-  []
-  
-  Since Synapse doesn't rely on any container API, the features offered are the same in both
-  deployment scenarios, with very few exceptions:
-  
-  * There is a minor issue that prevents classpath resources from being used in a WAR deployment.
-    See {{{https://issues.apache.org/jira/browse/SYNAPSE-207}SYNAPSE-207}}.
-  
-  * When deployed as a WAR file, Synapse can be configured with the standard Axis2 servlet based
-    HTTP transport: while the recommended HTTP implementation for Synapse is the NIO HTTP
-    transport, there might be situations where it is preferable or mandatory to use the HTTP
-    protocol implementation of the application server.
-
-  []
-  
-  In some scenarios Synapse is used to proxy services that are deployed themselves on an
-  application server. In these cases it would be interesting to deploy Synapse on the same
-  application server and use an in-VM transport instead of HTTP to communicate with these
-  services. Note that for the moment no production-grade implementation of this type of transport
-  exists yet for Axis2, but this might change in the future.
-  
-  Since the features offered are almost the same, the differences between the two deployment
-  options are mainly related to packaging and operational considerations:
-  
-  * Many IT departments prefer deploying J2EE applications than managing stand-alone Java
-    processes, because this allows them to leverage the management and monitoring facilities
-    offered by the application server.
-  
-  * If the use case relies on JNDI resources such as JMS connection factories, JDBC data source
-    and transactions it might be easier to set up and configure these resources when Synapse is
-    deployed directly on the application server that hosts these resources.
-
-{Stand-alone deployment}
-
-* {Using the standard binary distribution}
-
-  The easiest way to get started with a stand-alone deployment is using the standard binary
-  distribution ZIP or tarball (see {{download.html}}). It already contains everything that is
-  needed to run Synapse stand-alone and you only need to customize it according to your requirements:
-  
-  * Place your mediations in <<<repository/conf/synapse.xml>>>.
-  
-  * Place any additional files such as WSDL files, endpoint definitions, etc. referenced by your
-    mediations in the <<<repository>>> directory.
-  
-  * Customize <<<repository/conf/axis2.xml>>> to enable and disable transports according to your needs.
-  
-  * Add any additional libraries required by your mediations to the <<<lib>>> directory. Alternatively
-    modify <<<repository/conf/wrapper.conf>>> to add directories and JAR files to the classpath.
-  
-  * Add any required modules to <<<repository/modules>>>.
-  
-  * If necessary, modify <<<lib/log4j.properties>>> to configure logging.
-
-  []
-  
-  Since the standard binary distribution also contains samples and documentation, you might want
-  to remove the following folders:
-  
-  * <<<docs>>>
-  
-  * <<<repository/conf/sample>>>
-  
-  * <<<samples>>>
-  
-  []
-
-  The <<<bin>>> directory contains Unix and Windows scripts to run Synapse:
-  
-  * <<<synapse.sh>>> and <<<synapse.bat>>> allow to run Synapse in non daemon mode.
-  
-  * <<<synapse-daemon.sh>>> is a Sys V init script that can be used on Unix systems to start and
-    stop Synapse in daemon mode.
-  
-  * <<<install-synapse-service.bat>>> and <<<uninstall-synapse-service.bat>>> can be used on
-    Windows to install Synapse as an NT service.
-
-* {Using Maven to build a custom distribution}
-
-  Building a custom Synapse package based on the standard binary distribution is a manual process
-  and this has some drawbacks:
-  
-  * The JAR files required to run Synapse must be selected manually and it is not easy to identify
-    unused JARs that could be safely removed.
-  
-  * The process is not suitable if there is a requirement for strict configuration management.
-    In particular:
-    
-    * Because of the large number of JAR files, managing the artifacts using a source control
-      repository is not practical.
-    
-    * The process is not repeatable and there is no way to go back to a previous version of
-      the artifacts.
-    
-  * When upgrading to a newer version of Synapse (or when working with snapshot versions), it
-    is necessary either to manually replace the JARs in the current package or to start again
-    from a new version of the standard binary distribution.
-    
-  * If Synapse needs to be deployed with slightly different configurations in multiple
-    environments (e.g. test and production), the corresponding packages need to be prepared
-    manually.
-  
-  []
-  
-  Note that these problems not only arise in the development and maintenance phases of a project,
-  but also when doing proof of concepts that you want to keep in a safe place for later reuse.
-  One approach to overcome these difficulties is to use Maven to assemble a custom package. When
-  used correctly, this approach solves all of the issues identified above. In particular Maven's
-  dependency management together with the excellent
-  {{{http://maven.apache.org/plugins/maven-assembly-plugin/}assembly plugin}} can be used to
-  automatically select the relevant JARs to include and pull them from Maven repositories.
-  The remaining artifacts required to assemble the package can then be easily stored in a source
-  control repository.
-  
-  Synapse provides a Maven archetype that allows to set up this kind of project in only a few
-  simple steps. To begin with, change to the directory where you want to create the project and
-  issue the following command:
-
--------------------------------------------------------------------
-mvn archetype:generate -DarchetypeCatalog=http://synapse.apache.org
--------------------------------------------------------------------
- 
-  In case of problems, you can try to use the latest version of the archetype catalog:
- 
--------------------------------------------------------------------
-mvn archetype:generate -DarchetypeCatalog=http://svn.apache.org/repos/asf/synapse/trunk/java/src/site/resources
--------------------------------------------------------------------
- 
-  Finally, if you have build Synapse from sources, you don't need to specify a catalog at all:
-  the archetype is added automatically to the local catalog during the build.
-  
-  In any case, when prompted by Maven, select <<<synapse-package-archetype>>> for the Synapse
-  version you want to use. In the next step enter the values for <<<groupId>>>, <<<artifactId>>>
-  and <<<version>>> for your project. You will also be prompted for a package name. Since the
-  archetype doesn't contain any source code, this value is irrelevant and you can continue with the default value.
-  
-  At this stage a Maven project has been created in a subdirectory with the same name as the
-  <<<artifactId>>> specified previously. You should now customize this projects according to your needs:
-  
-  * Add your mediations to <<<repository/conf/synapse.xml>>>.
-
-  * Customize the dependencies in <<<pom.xml>>>. In particular if additional transports such as
-    JMS are needed, add the required dependencies here. Additional Axis2 modules should also be added here.
-  
-  * Enable and configure additional transports in <<<repository/conf/axis2.xml>>>.
-  
-  * Place any other files referenced by <<<synapse.xml>>> into the <<<repository>>> directory.
-
-  []
-  
-  The project is built as usually with the following command:
- 
------------
-mvn package
------------
- 
-  This will create a ZIP file (in the <<<target>>> directory) containing everything that is needed
-  to run your custom Synapse configuration. You only need to uncompress it and use the appropriate
-  script in the <<<bin>>> directory to start Synapse.
-
-{WAR deployment}
-
-  Synapse provides a standard WAR file that can be used to deploy mediations on a servlet container
-  or on a J2EE application server. Note that this WAR file is not part of the downloadable
-  distributions. It can be retrieved from the following location:
-  
-  * {{http://repo1.maven.org/maven2/org/apache/synapse/synapse-war/}} for released versions.
-  
-  * {{http://hudson.zones.apache.org/hudson/job/Synapse%20-%20Trunk/org.apache.synapse$synapse-war/}}
-    for snapshot versions.
-  
-  []
-  
-  Customization of the Web application is similar to the stand-alone option, but the default
-  directory structure is different:
-  
-  * <<<synapse.xml>>> and <<<axis2.xml>>> are placed into the <<<WEB-INF/conf>>> directory. All
-    other files referenced by your mediations should go to the <<<WEB-INF/repository>>> directory.
-  
-  * Additional libraries must be placed into the standard <<<WEB-INF/lib>>> directory.
-
-  * Axis2 modules are located in <<<repository/modules>>>.
-
-  * <<<log4j.properties>>> is located in <<<WEB-INF/classes>>>.

Property changes on: java/src/site/apt/deployment.apt
___________________________________________________________________
Deleted: svn:eol-style
## -1 +0,0 ##
-native
\ No newline at end of property
Index: java/src/site/resources/presentations/ApacheCon Synapse Tute.pdf
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: java/src/site/resources/presentations/ApacheCon Synapse Tute.pdf
===================================================================
--- java/src/site/resources/presentations/ApacheCon Synapse Tute.pdf	(revision 1308238)
+++ java/src/site/resources/presentations/ApacheCon Synapse Tute.pdf	(nonexistent)

Property changes on: java/src/site/resources/presentations/ApacheCon Synapse Tute.pdf
___________________________________________________________________
Deleted: svn:mime-type
## -1 +0,0 ##
-application/octet-stream
\ No newline at end of property
Index: java/src/site/resources/presentations/ApacheConUS2007SynapseTutorial.pdf
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: java/src/site/resources/presentations/ApacheConUS2007SynapseTutorial.pdf
===================================================================
--- java/src/site/resources/presentations/ApacheConUS2007SynapseTutorial.pdf	(revision 1308238)
+++ java/src/site/resources/presentations/ApacheConUS2007SynapseTutorial.pdf	(nonexistent)

Property changes on: java/src/site/resources/presentations/ApacheConUS2007SynapseTutorial.pdf
___________________________________________________________________
Deleted: svn:mime-type
## -1 +0,0 ##
-application/octet-stream
\ No newline at end of property
Index: java/src/site/resources/presentations/makingsoagroovyfremantle.pdf
===================================================================
--- java/src/site/resources/presentations/makingsoagroovyfremantle.pdf	(revision 1308238)
+++ java/src/site/resources/presentations/makingsoagroovyfremantle.pdf	(nonexistent)
@@ -1,22178 +0,0 @@
-%PDF-1.4
