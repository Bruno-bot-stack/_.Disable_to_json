Index: java/modules/commons/src/test/java/org/apache/synapse/commons/evaluators/config/MatchSerializerTest.java
===================================================================
--- java/modules/commons/src/test/java/org/apache/synapse/commons/evaluators/config/MatchSerializerTest.java	(revision 1504962)
+++ java/modules/commons/src/test/java/org/apache/synapse/commons/evaluators/config/MatchSerializerTest.java	(revision 1504963)
@@ -30,7 +30,7 @@
     private MatchFactory fac = new MatchFactory();
 
     public void testHeaderMatchSerializer() {
-        String input = "<match type=\"header\" source=\"foo\" regex=\"bar\"/>";
+        String input = "<match xmlns=\"http://ws.apache.org/ns/synapse\" type=\"header\" source=\"foo\" regex=\"bar\"/>";
 
         try {
             Evaluator eval = fac.create(AXIOMUtil.stringToOM(input));
@@ -42,7 +42,7 @@
     }
 
     public void testParameterMatchSerializer() {
-        String input = "<match type=\"param\" source=\"foo\" regex=\"bar\"/>";
+        String input = "<match xmlns=\"http://ws.apache.org/ns/synapse\" type=\"param\" source=\"foo\" regex=\"bar\"/>";
 
         try {
             Evaluator eval = fac.create(AXIOMUtil.stringToOM(input));
@@ -54,7 +54,7 @@
     }
 
     public void testURLMatchSerializer() {
-        String input = "<match type=\"url\" regex=\"http://foo.org\"/>";
+        String input = "<match xmlns=\"http://ws.apache.org/ns/synapse\" type=\"url\" regex=\"http://foo.org\"/>";
 
         try {
             Evaluator eval = fac.create(AXIOMUtil.stringToOM(input));
@@ -66,7 +66,7 @@
     }
 
     public void testURLMatchSerializer2() {
-        String input = "<match type=\"url\" regex=\"http://foo.org\" source=\"protocol\"/>";
+        String input = "<match xmlns=\"http://ws.apache.org/ns/synapse\" type=\"url\" regex=\"http://foo.org\" source=\"protocol\"/>";
 
         try {
             Evaluator eval = fac.create(AXIOMUtil.stringToOM(input));
Index: java/modules/commons/src/test/java/org/apache/synapse/commons/evaluators/config/EqualSerializerTest.java
===================================================================
--- java/modules/commons/src/test/java/org/apache/synapse/commons/evaluators/config/EqualSerializerTest.java	(revision 1504962)
+++ java/modules/commons/src/test/java/org/apache/synapse/commons/evaluators/config/EqualSerializerTest.java	(revision 1504963)
@@ -30,8 +30,7 @@
     private EqualFactory fac = new EqualFactory();
 
     public void testHeaderEqualSerializer() {
-        String input = "<equal type=\"header\" source=\"foo\" value=\"bar\"/>";
-
+        String input = "<equal xmlns=\"http://ws.apache.org/ns/synapse\" type=\"header\" source=\"foo\" value=\"bar\"/>";
         try {
             Evaluator eval = fac.create(AXIOMUtil.stringToOM(input));
             OMElement output = serializer.serialize(null, eval);
@@ -42,7 +41,7 @@
     }
 
     public void testParameterEqualSerializer() {
-        String input = "<equal type=\"param\" source=\"foo\" value=\"bar\"/>";
+        String input = "<equal xmlns=\"http://ws.apache.org/ns/synapse\" type=\"param\" source=\"foo\" value=\"bar\"/>";
 
         try {
             Evaluator eval = fac.create(AXIOMUtil.stringToOM(input));
@@ -54,7 +53,7 @@
     }
 
     public void testURLEqualSerializer() {
-        String input = "<equal type=\"url\" value=\"http://foo.org\"/>";
+        String input = "<equal xmlns=\"http://ws.apache.org/ns/synapse\" type=\"url\" value=\"http://foo.org\"/>";
 
         try {
             Evaluator eval = fac.create(AXIOMUtil.stringToOM(input));
@@ -66,7 +65,7 @@
     }
 
     public void testURLEqualSerializer2() {
-        String input = "<equal type=\"url\" value=\"http://foo.org\" source=\"protocol\"/>";
+        String input = "<equal xmlns=\"http://ws.apache.org/ns/synapse\" type=\"url\" value=\"http://foo.org\" source=\"protocol\"/>";
 
         try {
             Evaluator eval = fac.create(AXIOMUtil.stringToOM(input));
Index: java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/EvaluatorConstants.java
===================================================================
--- java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/EvaluatorConstants.java	(revision 1504962)
+++ java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/EvaluatorConstants.java	(revision 1504963)
@@ -47,6 +47,9 @@
     public static final String PRIORITY = "priority";
     public static final String DEFAULT_PRIORITY = "defaultPriority";
 
+    public static final String SYNAPSE_NAMESPACE = "http://ws.apache.org/ns/synapse";
+    public static final String EMPTY_PREFIX = "";
+
     public static enum URI_FRAGMENTS {
         protocol,
         user,
Index: java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/MatchSerializer.java
===================================================================
--- java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/MatchSerializer.java	(revision 1504962)
+++ java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/MatchSerializer.java	(revision 1504963)
@@ -16,11 +16,12 @@
 
     public OMElement serialize(OMElement parent, Evaluator evaluator) throws EvaluatorException {
         if (!(evaluator instanceof MatchEvaluator)) {
-            throw new IllegalArgumentException("Evalutor must be a NotEvalutor");
+            throw new IllegalArgumentException("Evaluator must be a NotEvaluator");
         }
 
         MatchEvaluator matchEvaluator = (MatchEvaluator) evaluator;
-        OMElement matchElement = fac.createOMElement(new QName(EvaluatorConstants.MATCH));
+        OMElement matchElement  = fac.createOMElement(EvaluatorConstants.MATCH,
+                EvaluatorConstants.SYNAPSE_NAMESPACE, EvaluatorConstants.EMPTY_PREFIX);
         serializeSourceTextRetriever(matchEvaluator.getTextRetriever(), matchElement);
 
         matchElement.addAttribute(fac.createOMAttribute(EvaluatorConstants.REGEX, nullNS,
Index: java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/NotSerializer.java
===================================================================
--- java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/NotSerializer.java	(revision 1504962)
+++ java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/NotSerializer.java	(revision 1504963)
@@ -35,12 +35,13 @@
 
     public OMElement serialize(OMElement parent, Evaluator evaluator) throws EvaluatorException {
         if (!(evaluator instanceof NotEvaluator)) {
-            throw new IllegalArgumentException("Evalutor should be a NotEvalutor");
+            throw new IllegalArgumentException("Evaluator should be a NotEvaluator");
         }
 
         NotEvaluator notEvaluator = (NotEvaluator) evaluator;
 
-        OMElement notElement = fac.createOMElement(new QName(EvaluatorConstants.NOT));
+        OMElement notElement  = fac.createOMElement(EvaluatorConstants.NOT,
+                EvaluatorConstants.SYNAPSE_NAMESPACE, EvaluatorConstants.EMPTY_PREFIX);
         serializeChild(notElement, notEvaluator.getEvaluator());
 
         if (parent != null) {
Index: java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/AndSerializer.java
===================================================================
--- java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/AndSerializer.java	(revision 1504962)
+++ java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/AndSerializer.java	(revision 1504963)
@@ -34,12 +34,13 @@
 public class AndSerializer extends AbstractEvaluatorSerializer {    
     public OMElement serialize(OMElement parent, Evaluator evaluator) throws EvaluatorException {        
         if (!(evaluator instanceof AndEvaluator)) {           
-            throw new IllegalArgumentException("Evalutor should be a AndEvalutor");
+            throw new IllegalArgumentException("Evaluator should be an AndEvaluator");
         }
 
         AndEvaluator andEvaluator = (AndEvaluator) evaluator;
 
-        OMElement andElement = fac.createOMElement(new QName((EvaluatorConstants.AND)));
+        OMElement andElement  = fac.createOMElement(EvaluatorConstants.AND,
+                EvaluatorConstants.SYNAPSE_NAMESPACE, EvaluatorConstants.EMPTY_PREFIX);
         serializeChildren(andElement, andEvaluator.getEvaluators());
 
         if (parent != null) {
Index: java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/EqualSerializer.java
===================================================================
--- java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/EqualSerializer.java	(revision 1504962)
+++ java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/EqualSerializer.java	(revision 1504963)
@@ -33,11 +33,12 @@
     public OMElement serialize(OMElement parent, Evaluator evaluator) throws EvaluatorException {
 
         if (!(evaluator instanceof EqualEvaluator)) {
-            throw new IllegalArgumentException("Evalutor must be an EqualEvalutor");
+            throw new IllegalArgumentException("Evaluator must be an EqualEvaluator");
         }
 
         EqualEvaluator equalEvaluator = (EqualEvaluator) evaluator;
-        OMElement equalElement = fac.createOMElement(new QName(EvaluatorConstants.EQUAL));
+        OMElement equalElement  = fac.createOMElement(EvaluatorConstants.EQUAL,
+                EvaluatorConstants.SYNAPSE_NAMESPACE, EvaluatorConstants.EMPTY_PREFIX);
         serializeSourceTextRetriever(equalEvaluator.getTextRetriever(), equalElement);
 
         equalElement.addAttribute(fac.createOMAttribute(EvaluatorConstants.VALUE, nullNS,
Index: java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/OrSerializer.java
===================================================================
--- java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/OrSerializer.java	(revision 1504962)
+++ java/modules/commons/src/main/java/org/apache/synapse/commons/evaluators/config/OrSerializer.java	(revision 1504963)
@@ -34,12 +34,13 @@
 public class OrSerializer extends AbstractEvaluatorSerializer {
     public OMElement serialize(OMElement parent, Evaluator evaluator) throws EvaluatorException {
         if (!(evaluator instanceof OrEvaluator)) {
-            throw new IllegalArgumentException("Evalutor should be a OrEvalutor");
+            throw new IllegalArgumentException("Evaluator should be an OrEvaluator");
         }
 
         OrEvaluator orEvaluator = (OrEvaluator) evaluator;
 
-        OMElement orElement = fac.createOMElement(new QName((EvaluatorConstants.OR)));
+        OMElement orElement  = fac.createOMElement(EvaluatorConstants.OR,
+                EvaluatorConstants.SYNAPSE_NAMESPACE, EvaluatorConstants.EMPTY_PREFIX);
         serializeChildren(orElement, orEvaluator.getEvaluators());
 
         if (parent != null) {
Index: java/modules/core/src/test/java/org/apache/synapse/config/xml/ConditionalRouterMediatorSerializationTest.java
===================================================================
--- java/modules/core/src/test/java/org/apache/synapse/config/xml/ConditionalRouterMediatorSerializationTest.java	(revision 1504962)
+++ java/modules/core/src/test/java/org/apache/synapse/config/xml/ConditionalRouterMediatorSerializationTest.java	(revision 1504963)
@@ -32,7 +32,7 @@
 
     public void testRouterMediatorSerializationSenarioOne() throws Exception {
         String inputXml = "<conditionalRouter xmlns=\"http://ws.apache.org/ns/synapse\">" +
-                "<conditionalRoute><condition><equal xmlns=\"\" type=\"url\" value=\"http://localhost:9000.*\"/></condition>" +
+                "<conditionalRoute><condition><equal type=\"url\" value=\"http://localhost:9000.*\"/></condition>" +
                 "<target><sequence><log level=\"full\"/></sequence></target></conditionalRoute>" +
                 "</conditionalRouter>";
         
@@ -42,7 +42,7 @@
 
     public void testRouterMediatorSerializationSenarioTwo() throws Exception {
         String inputXml = "<conditionalRouter xmlns=\"http://ws.apache.org/ns/synapse\">" +
-                "<conditionalRoute><condition><and xmlns=\"\" ><equal type=\"url\" value=\"http://localhost:9000.*\"/>" +
+                "<conditionalRoute><condition><and><equal type=\"url\" value=\"http://localhost:9000.*\"/>" +
                 "<match type=\"url\" regex=\"http://localhost:9000.*\"/></and></condition>" +
                 "<target><sequence><log level=\"full\"/></sequence></target></conditionalRoute>" +
                 "</conditionalRouter>";
@@ -53,7 +53,7 @@
 
     public void testRouterMediatorSerializationSenarioThree() throws Exception {
         String inputXml = "<conditionalRouter xmlns=\"http://ws.apache.org/ns/synapse\">" +
-                "<conditionalRoute><condition><or xmlns=\"\" ><equal type=\"url\" value=\"http://localhost:9000.*\"/>" +
+                "<conditionalRoute><condition><or><equal type=\"url\" value=\"http://localhost:9000.*\"/>" +
                 "<match type=\"url\" regex=\"http://localhost:9000.*\"/></or></condition><target>" +
                 "<sequence><log level=\"full\"/></sequence></target></conditionalRoute>" +
                 "</conditionalRouter>";
@@ -64,7 +64,7 @@
 
     public void testRouterMediatorSerializationSenarioFour() throws Exception {
         String inputXml = "<conditionalRouter xmlns=\"http://ws.apache.org/ns/synapse\">" +
-                "<conditionalRoute><condition><not xmlns=\"\"><equal type=\"url\" value=\"http://localhost:9000.*\"/></not>" +
+                "<conditionalRoute><condition><not><equal type=\"url\" value=\"http://localhost:9000.*\"/></not>" +
                 "</condition><target><sequence><log level=\"full\"/></sequence></target></conditionalRoute>" +
                 "</conditionalRouter>";
 
Index: java/modules/core/src/test/java/org/apache/synapse/config/xml/URLRewriteMediatorSerializationTest.java
===================================================================
--- java/modules/core/src/test/java/org/apache/synapse/config/xml/URLRewriteMediatorSerializationTest.java	(revision 1504962)
+++ java/modules/core/src/test/java/org/apache/synapse/config/xml/URLRewriteMediatorSerializationTest.java	(revision 1504963)
@@ -40,7 +40,7 @@
 
     public void testSerializationScenario2() {
         String xml = "<rewrite xmlns=\"http://ws.apache.org/ns/synapse\">" +
-                "<rewriterule><condition><match xmlns=\"\" type=\"url\" source=\"host\" regex=\"localhost\"/>" +
+                "<rewriterule><condition><match type=\"url\" source=\"host\" regex=\"localhost\"/>" +
                 "</condition><action fragment=\"protocol\" value=\"https\" type=\"set\"/>" +
                 "<action fragment=\"host\" value=\"www.test.com\" type=\"set\"/><action " +
                 "fragment=\"port\" value=\"9090\" type=\"set\"/><action fragment=\"path\" " +
@@ -52,12 +52,12 @@
     public void testSerializationScenario3() {
         String xml = "<rewrite xmlns=\"http://ws.apache.org/ns/synapse\"><rewriterule>" +
                 "<action fragment=\"full\" value=\"http://localhost:8080/synapse\" type=\"set\"/></rewriterule>" +
-                "<rewriterule><condition><match xmlns=\"\" type=\"url\" source=\"host\" regex=\"localhost\"/>" +
+                "<rewriterule><condition><match type=\"url\" source=\"host\" regex=\"localhost\"/>" +
                 "</condition><action fragment=\"protocol\" value=\"https\" type=\"set\"/>" +
                 "<action fragment=\"host\" value=\"www.test.com\" type=\"set\"/>" +
                 "<action fragment=\"port\" xpath=\"get-property('port')\" type=\"set\"/>" +
                 "<action fragment=\"path\" value=\"/services\" type=\"prepend\"/></rewriterule><rewriterule>" +
-                "<condition><and xmlns=\"\"><match type=\"url\" source=\"host\" regex=\"www.test.com\"/>" +
+                "<condition><and><match type=\"url\" source=\"host\" regex=\"www.test.com\"/>" +
                 "<equal type=\"url\" source=\"port\" value=\"9090\"/></and></condition>" +
                 "<action fragment=\"path\" regex=\".*/FooService\" type=\"replace\" " +
                 "value=\"/BarService\"/></rewriterule>" +
-*-*-*-
Message: Applying the patches for SYNAPSE-882
-*-*-*-
When: 2013-07-19 14:46:49 -0400 
-*-*-*-
Who: hiranya