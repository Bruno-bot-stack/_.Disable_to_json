Index: java/repository/conf/sample/synapse_sample_800.xml
===================================================================
--- java/repository/conf/sample/synapse_sample_800.xml	(nonexistent)
+++ java/repository/conf/sample/synapse_sample_800.xml	(revision 1502935)
@@ -0,0 +1,39 @@
+<definitions xmlns="http://ws.apache.org/ns/synapse">
+    <api name="StockQuoteAPI" context="/stockquote">
+        <resource uri-template="/view/{symbol}" methods="GET">
+            <inSequence>
+                <payloadFactory>
+                    <format>
+                        <m0:getQuote xmlns:m0="http://services.samples">
+                            <m0:request>
+                                <m0:symbol>$1</m0:symbol>
+                            </m0:request>
+                        </m0:getQuote>
+                    </format>
+                    <args>
+                        <arg expression="get-property('uri.var.symbol')"/>
+                    </args>
+                </payloadFactory>
+                <send>
+                    <endpoint>
+                        <address uri="http://localhost:9000/services/SimpleStockQuoteService" format="soap11"/>
+                    </endpoint>
+                </send>
+            </inSequence>
+            <outSequence>
+                <send/>
+            </outSequence>
+        </resource>
+        <resource url-pattern="/order/*" methods="POST">
+            <inSequence>
+                <property name="FORCE_SC_ACCEPTED" value="true" scope="axis2"/>
+                <property name="OUT_ONLY" value="true"/>
+                <send>
+                    <endpoint>
+                        <address uri="http://localhost:9000/services/SimpleStockQuoteService" format="soap11"/>
+                    </endpoint>
+                </send>
+            </inSequence>
+        </resource>
+    </api>
+</definitions>
\ No newline at end of file
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java	(revision 1502934)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java	(revision 1502935)
@@ -126,5 +126,4 @@
 	
 	public static final String WSDL_GEN_HANDLED = "WSDL_GEN_HANDLED";
 
-	
 }
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java	(revision 1502934)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java	(revision 1502935)
@@ -26,6 +26,7 @@
 import javax.net.ssl.SSLContext;
 
 import org.apache.axiom.om.OMOutputFormat;
+import org.apache.axiom.util.blob.OverflowBlob;
 import org.apache.axis2.AxisFault;
 import org.apache.axis2.Constants;
 import org.apache.axis2.addressing.AddressingConstants;
@@ -42,7 +43,6 @@
 import org.apache.axis2.transport.base.threads.NativeThreadFactory;
 import org.apache.axis2.transport.base.threads.WorkerPool;
 import org.apache.axis2.util.MessageProcessorSelector;
-import org.apache.commons.io.IOUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.http.HttpException;
@@ -306,9 +306,9 @@
 					OMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(msgContext);
 					formatter.writeTo(msgContext, format, _out, false);
 					try {
-	                    IOUtils.write(_out.toByteArray(),out);
-	                    msgContext.setProperty(PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH,
-                                _out.toByteArray().length);
+                        long messageSize = setStreamAsTempData(formatter,msgContext,format);
+                        msgContext.setProperty(PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH,messageSize);
+                        formatter.writeTo(msgContext, format, out, false);
                     } catch (IOException e) {
                     	 handleException("IO error while building message", e);
                     }
@@ -493,6 +493,29 @@
         }
     }
 
+    /**
+     * Write the stream to a temporary storage and calculate the content length
+     *
+     * @param messageFormatter Formatter used to serialize the message
+     * @param msgContext Message to be serialized
+     * @param format Output format
+     *
+     * @throws IOException if an exception occurred while writing data
+     */
+    private long setStreamAsTempData(MessageFormatter messageFormatter,
+                                     MessageContext msgContext,
+                                     OMOutputFormat format) throws IOException {
+
+        OverflowBlob serialized = new OverflowBlob(256, 4096, "http-nio_", ".dat");
+        OutputStream out = serialized.getOutputStream();
+        try {
+            messageFormatter.writeTo(msgContext, format, out, true);
+        } finally {
+            out.close();
+        }
+        return serialized.getLength();
+    }
+
     private void handleException(String s, Exception e) throws AxisFault {
         log.error(s, e);
         throw new AxisFault(s, e);
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/BufferFactory.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/BufferFactory.java	(revision 1502934)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/BufferFactory.java	(revision 1502935)
@@ -52,10 +52,11 @@
         if (marker == -1) {
             return allocator.allocate(bufferSize);
         } else {
-            lock.lock();
             try {
+                lock.lock();
                 if (marker >= 0) {
                     ByteBuffer b = buffers[marker];
+                    b.clear();
                     buffers[marker] = null;
                     marker--;
                     return b;
@@ -64,14 +65,14 @@
                 lock.unlock();
             }
         }
-
         return allocator.allocate(bufferSize);
     }
 
     public void release(ByteBuffer buffer) {
-        lock.lock();
         try {
+            lock.lock();
             if (marker < buffers.length - 1) {
+                buffer.clear();
                 buffers[++marker] = buffer;
             }
         } finally {
Index: java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/PropertyMediator.java
===================================================================
--- java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/PropertyMediator.java	(revision 1502934)
+++ java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/PropertyMediator.java	(revision 1502935)
@@ -19,6 +19,7 @@
 
 package org.apache.synapse.mediators.builtin;
 
+import org.apache.http.protocol.HTTP;
 import org.apache.synapse.MessageContext;
 import org.apache.synapse.SynapseLog;
 import org.apache.synapse.SynapseException;
@@ -64,7 +65,7 @@
     /** Set the property (ACTION_SET) or remove it (ACTION_REMOVE). Defaults to ACTION_SET */
     private int action = ACTION_SET;
 
-    /** Regualar expresion pattern to be evaluated over the property value.
+    /** Regular expression pattern to be evaluated over the property value.
      * Resulting match string will be applied to the property */
     private Pattern pattern;
 
@@ -359,6 +360,23 @@
 
     @Override
     public boolean isContentAware() {
-        return expression != null;
+        if (expression != null) {
+            return expression.isContentAware();
+        }
+
+        boolean contentAware = false;
+        if (XMLConfigConstants.SCOPE_AXIS2.equals(scope)) {
+            //the logic will determine the content-aware true
+            if (org.apache.axis2.Constants.Configuration.MESSAGE_TYPE.equals(name)) {
+                contentAware = true;
+            }
+
+        } else if (XMLConfigConstants.SCOPE_TRANSPORT.equals(scope)) {
+            //the logic will determine the content-aware true
+            if (HTTP.CONTENT_ENCODING.equals(name)) {
+                contentAware = true;
+            }
+        }
+        return contentAware;
     }
 }
Index: java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPath.java
===================================================================
--- java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPath.java	(revision 1502934)
+++ java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPath.java	(revision 1502935)
@@ -76,6 +76,7 @@
  * @see org.apache.synapse.util.xpath.SynapseXPathVariableContext
  */
 public class SynapseXPath extends AXIOMXPath {
+
     private static final long serialVersionUID = 7639226137534334222L;
 
     private static final Log log = LogFactory.getLog(SynapseXPath.class);
@@ -95,13 +96,17 @@
         // TODO: Improve this
         if (xpathString.contains("/")) {
             contentAware = true;
-        } else if (xpathString.contains("get-property('To')") ||
-                xpathString.contains("get-property('From'") ||
+        } else if (xpathString.contains("get-property('From'") ||
                 xpathString.contains("get-property('FAULT')")) {
             contentAware = true;
         } else {
             contentAware = false;
         }
+
+        if (xpathString.contains("$trp") || xpathString.contains("$ctx") ||
+                xpathString.contains("$axis2")) {
+            contentAware = false;
+        }
     }
 
     /**
-*-*-*-
Message: Committing a part of the patch to SYNAPSE-935
-*-*-*-
When: 2013-07-13 23:58:07 -0400 
-*-*-*-
Who: hiranya