Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java	(revision 1513220)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java	(revision 1513221)
@@ -320,7 +320,7 @@
                 e.getMessage().toLowerCase().contains("connection reset by peer") ||
                 e.getMessage().toLowerCase().contains("forcibly closed")))) {
             if (log.isDebugEnabled()) {
-                log.debug("I/O error (Probably a keepalive connection was closed):" + e.getMessage());
+                log.debug("I/O error (Probably a keep-alive connection was closed):" + e.getMessage());
             }
         } else if (e.getMessage() != null) {
             String msg = e.getMessage().toLowerCase();
@@ -354,9 +354,9 @@
         response.addHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);
 
         // Pre-process HTTP request
-        httpContext.setAttribute(ExecutionContext.HTTP_CONNECTION, conn);
-        httpContext.setAttribute(ExecutionContext.HTTP_REQUEST, null);
-        httpContext.setAttribute(ExecutionContext.HTTP_RESPONSE, response);
+        httpContext.setAttribute(HttpCoreContext.HTTP_CONNECTION, conn);
+        httpContext.setAttribute(HttpCoreContext.HTTP_REQUEST, null);
+        httpContext.setAttribute(HttpCoreContext.HTTP_RESPONSE, response);
 
         try {
             sourceConfiguration.getHttpProcessor().process(response, httpContext);
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java	(revision 1513220)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java	(revision 1513221)
@@ -31,8 +31,9 @@
 import org.apache.http.message.BasicHttpRequest;
 import org.apache.http.nio.ContentEncoder;
 import org.apache.http.nio.NHttpClientConnection;
-import org.apache.http.protocol.ExecutionContext;
 import org.apache.http.protocol.HTTP;
+import org.apache.http.protocol.HttpContext;
+import org.apache.http.protocol.HttpCoreContext;
 import org.apache.synapse.transport.nhttp.NhttpConstants;
 import org.apache.synapse.transport.nhttp.util.MessageFormatterDecoratorFactory;
 import org.apache.synapse.transport.passthru.config.TargetConfiguration;
@@ -213,14 +214,14 @@
         }
 
         // Pre-process HTTP request
-        conn.getContext().setAttribute(ExecutionContext.HTTP_CONNECTION, conn);
-        conn.getContext().setAttribute(ExecutionContext.HTTP_TARGET_HOST,
+        HttpContext context = conn.getContext();
+        context.setAttribute(HttpCoreContext.HTTP_CONNECTION, conn);
+        context.setAttribute(HttpCoreContext.HTTP_TARGET_HOST,
                 new HttpHost(url.getHost(), port));
-        conn.getContext().setAttribute(ExecutionContext.HTTP_REQUEST, request);
+        context.setAttribute(HttpCoreContext.HTTP_REQUEST, request);
 
         // start the request
-        targetConfiguration.getHttpProcessor().process(request, conn.getContext());
-
+        targetConfiguration.getHttpProcessor().process(request, context);
         conn.submitRequest(request);
 
         if (hasEntityBody) {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/connections/HostConnections.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/connections/HostConnections.java	(revision 1513220)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/connections/HostConnections.java	(revision 1513221)
@@ -22,8 +22,8 @@
 import org.apache.http.nio.NHttpClientConnection;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.http.protocol.ExecutionContext;
 import org.apache.http.protocol.HttpContext;
+import org.apache.http.protocol.HttpCoreContext;
 
 import java.util.List;
 import java.util.ArrayList;
@@ -86,8 +86,8 @@
     public void release(NHttpClientConnection conn) {
         conn.getMetrics().reset();
         HttpContext ctx = conn.getContext();
-        ctx.removeAttribute(ExecutionContext.HTTP_REQUEST);
-        ctx.removeAttribute(ExecutionContext.HTTP_RESPONSE);
+        ctx.removeAttribute(HttpCoreContext.HTTP_REQUEST);
+        ctx.removeAttribute(HttpCoreContext.HTTP_RESPONSE);
 
         lock.lock();
         try {
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java	(revision 1513220)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java	(revision 1513221)
@@ -24,8 +24,9 @@
 import org.apache.http.impl.DefaultConnectionReuseStrategy;
 import org.apache.http.nio.ContentEncoder;
 import org.apache.http.nio.NHttpServerConnection;
-import org.apache.http.protocol.ExecutionContext;
 import org.apache.http.protocol.HTTP;
+import org.apache.http.protocol.HttpContext;
+import org.apache.http.protocol.HttpCoreContext;
 import org.apache.synapse.transport.passthru.config.SourceConfiguration;
 
 import java.io.IOException;
@@ -129,12 +130,13 @@
         SourceContext.updateState(conn, ProtocolState.RESPONSE_HEAD);
 
         // Pre-process HTTP response
-        conn.getContext().setAttribute(ExecutionContext.HTTP_CONNECTION, conn);
-        conn.getContext().setAttribute(ExecutionContext.HTTP_RESPONSE, response);
-        conn.getContext().setAttribute(ExecutionContext.HTTP_REQUEST,
+        HttpContext context = conn.getContext();
+        context.setAttribute(HttpCoreContext.HTTP_CONNECTION, conn);
+        context.setAttribute(HttpCoreContext.HTTP_RESPONSE, response);
+        context.setAttribute(HttpCoreContext.HTTP_REQUEST,
                 SourceContext.getRequest(conn).getRequest());
         
-        sourceConfiguration.getHttpProcessor().process(response, conn.getContext());
+        sourceConfiguration.getHttpProcessor().process(response, context);
         conn.submitResponse(response);        
     }
 
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java	(revision 1513220)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java	(revision 1513221)
@@ -227,8 +227,8 @@
             context.setAttribute(REQUEST_SOURCE_BUFFER, outputBuffer);
 
             context.setAttribute(AXIS2_HTTP_REQUEST, axis2Req);
-            context.setAttribute(ExecutionContext.HTTP_CONNECTION, conn);
-            context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, axis2Req.getHttpHost());
+            context.setAttribute(HttpCoreContext.HTTP_CONNECTION, conn);
+            context.setAttribute(HttpCoreContext.HTTP_TARGET_HOST, axis2Req.getHttpHost());
             context.setAttribute(OUTGOING_MESSAGE_CONTEXT, axis2Req.getMsgContext());
 
             HttpRequest request = axis2Req.getRequest();
@@ -239,7 +239,7 @@
 
             context.setAttribute(NhttpConstants.ENDPOINT_PREFIX, axis2Req.getEndpointURLPrefix());
             context.setAttribute(NhttpConstants.HTTP_REQ_METHOD, request.getRequestLine().getMethod());
-            context.setAttribute(ExecutionContext.HTTP_REQUEST, request);
+            context.setAttribute(HttpCoreContext.HTTP_REQUEST, request);
             setServerContextAttribute(NhttpConstants.REQ_DEPARTURE_TIME,
                         System.currentTimeMillis(), conn);
             conn.submitRequest(request);
@@ -955,7 +955,7 @@
                 entity.setChunked(true);
             }
             response.setEntity(entity);
-            context.setAttribute(ExecutionContext.HTTP_RESPONSE, response);
+            context.setAttribute(HttpCoreContext.HTTP_RESPONSE, response);
             
         } else {
             conn.resetInput();
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ConnectionPool.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ConnectionPool.java	(revision 1513220)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ConnectionPool.java	(revision 1513221)
@@ -19,11 +19,11 @@
 package org.apache.synapse.transport.nhttp;
 
 import org.apache.http.nio.NHttpClientConnection;
-import org.apache.http.protocol.ExecutionContext;
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.HttpHost;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.http.protocol.HttpCoreContext;
 
 import java.util.*;
 import java.io.IOException;
@@ -35,12 +35,13 @@
     /** A map of available connections for reuse. The key selects the host+port of the
      * connection and the value contains a List of available connections to destination
      */
-    private static Map connMap = Collections.synchronizedMap(new HashMap());
+    private static Map<String,List<NHttpClientConnection>> connMap =
+            Collections.synchronizedMap(new HashMap<String,List<NHttpClientConnection>>());
 
     public static NHttpClientConnection getConnection(String host, int port) {
 
         String key = host + ":" + Integer.toString(port);
-        List connections = (List) connMap.get(key);
+        List<NHttpClientConnection> connections = connMap.get(key);
 
         if (connections == null || connections.isEmpty()) {
             if (log.isDebugEnabled()) {
@@ -49,11 +50,10 @@
             return null;
 
         } else {
-            NHttpClientConnection conn = null;
-
+            NHttpClientConnection conn;
             synchronized (connections) {
                 while (!connections.isEmpty()) {
-                    conn = (NHttpClientConnection) connections.remove(0);
+                    conn = connections.remove(0);
 
                     if (conn.isOpen() && !conn.isStale()) {
                         if (log.isDebugEnabled()) {
@@ -80,16 +80,16 @@
     public static void release(NHttpClientConnection conn) {
 
         HttpHost host = (HttpHost) conn.getContext().getAttribute(
-            ExecutionContext.HTTP_TARGET_HOST);
+            HttpCoreContext.HTTP_TARGET_HOST);
         String key = host.getHostName() + ":" + Integer.toString(host.getPort());
 
-        List connections = (List) connMap.get(key);
+        List<NHttpClientConnection> connections = connMap.get(key);
         if (connections == null) {
             synchronized(connMap) {
                 // use double locking to make sure
-                connections = (List) connMap.get(key);
+                connections = connMap.get(key);
                 if (connections == null) {
-                    connections = Collections.synchronizedList(new LinkedList());
+                    connections = Collections.synchronizedList(new LinkedList<NHttpClientConnection>());
                     connMap.put(key, connections);
                 }
             }
@@ -118,8 +118,8 @@
         ctx.removeAttribute(ClientHandler.REQUEST_SOURCE_BUFFER);
         ctx.removeAttribute(ClientHandler.RESPONSE_SINK_BUFFER);
 
-        ctx.removeAttribute(ExecutionContext.HTTP_REQUEST);
-        ctx.removeAttribute(ExecutionContext.HTTP_RESPONSE);
+        ctx.removeAttribute(HttpCoreContext.HTTP_REQUEST);
+        ctx.removeAttribute(HttpCoreContext.HTTP_RESPONSE);
 
         conn.resetOutput();
     }
@@ -127,10 +127,10 @@
     public static void forget(NHttpClientConnection conn) {
 
         HttpHost host = (HttpHost) conn.getContext().getAttribute(
-            ExecutionContext.HTTP_TARGET_HOST);
+            HttpCoreContext.HTTP_TARGET_HOST);
         String key = host.getHostName() + ":" + Integer.toString(host.getPort());
 
-        List connections = (List) connMap.get(key);
+        List<NHttpClientConnection> connections = connMap.get(key);
         if (connections != null) {
             synchronized(connections) {
                 connections.remove(conn);
Index: java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java
===================================================================
--- java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java	(revision 1513220)
+++ java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java	(revision 1513221)
@@ -145,7 +145,7 @@
         HttpContext context = conn.getContext();
         context.setAttribute(NhttpConstants.REQ_ARRIVAL_TIME, System.currentTimeMillis());
         HttpRequest request = conn.getHttpRequest();
-        context.setAttribute(ExecutionContext.HTTP_REQUEST, request);
+        context.setAttribute(HttpCoreContext.HTTP_REQUEST, request);
         context.setAttribute(NhttpConstants.MESSAGE_IN_FLIGHT, "true");
 
         // prepare to collect debug information
-*-*-*-
Message: Getting rid of the last of deprecated http core APIs (ExecutionContext)
-*-*-*-
When: 2013-08-12 14:53:55 -0400 
-*-*-*-
Who: hiranya